// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Oasis.proto

#include "Oasis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Oasis {
namespace Proto {
constexpr TransferMessage::TransferMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , context_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_price_(uint64_t{0u})
  , nonce_(uint64_t{0u}){}
struct TransferMessageDefaultTypeInternal {
  constexpr TransferMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferMessageDefaultTypeInternal() {}
  union {
    TransferMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
constexpr EscrowMessage::EscrowMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gas_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , context_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_price_(uint64_t{0u})
  , nonce_(uint64_t{0u}){}
struct EscrowMessageDefaultTypeInternal {
  constexpr EscrowMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EscrowMessageDefaultTypeInternal() {}
  union {
    EscrowMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EscrowMessageDefaultTypeInternal _EscrowMessage_default_instance_;
constexpr ReclaimEscrowMessage::ReclaimEscrowMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gas_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shares_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , context_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_price_(uint64_t{0u})
  , nonce_(uint64_t{0u}){}
struct ReclaimEscrowMessageDefaultTypeInternal {
  constexpr ReclaimEscrowMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReclaimEscrowMessageDefaultTypeInternal() {}
  union {
    ReclaimEscrowMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReclaimEscrowMessageDefaultTypeInternal _ReclaimEscrowMessage_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Oasis
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Oasis_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Oasis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Oasis_2eproto = nullptr;

const uint32_t TableStruct_Oasis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::TransferMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::TransferMessage, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::TransferMessage, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::TransferMessage, gas_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::TransferMessage, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::TransferMessage, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::TransferMessage, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::EscrowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::EscrowMessage, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::EscrowMessage, gas_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::EscrowMessage, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::EscrowMessage, account_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::EscrowMessage, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::EscrowMessage, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::ReclaimEscrowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::ReclaimEscrowMessage, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::ReclaimEscrowMessage, gas_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::ReclaimEscrowMessage, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::ReclaimEscrowMessage, account_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::ReclaimEscrowMessage, shares_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::ReclaimEscrowMessage, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningInput, private_key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningInput, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Oasis::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Oasis::Proto::TransferMessage)},
  { 12, -1, -1, sizeof(::TW::Oasis::Proto::EscrowMessage)},
  { 24, -1, -1, sizeof(::TW::Oasis::Proto::ReclaimEscrowMessage)},
  { 36, -1, -1, sizeof(::TW::Oasis::Proto::SigningInput)},
  { 47, -1, -1, sizeof(::TW::Oasis::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Oasis::Proto::_TransferMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Oasis::Proto::_EscrowMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Oasis::Proto::_ReclaimEscrowMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Oasis::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Oasis::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Oasis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Oasis.proto\022\016TW.Oasis.Proto\032\014Common.pr"
  "oto\"t\n\017TransferMessage\022\n\n\002to\030\001 \001(\t\022\021\n\tga"
  "s_price\030\002 \001(\004\022\022\n\ngas_amount\030\003 \001(\t\022\016\n\006amo"
  "unt\030\004 \001(\t\022\r\n\005nonce\030\005 \001(\004\022\017\n\007context\030\006 \001("
  "\t\"w\n\rEscrowMessage\022\021\n\tgas_price\030\001 \001(\004\022\022\n"
  "\ngas_amount\030\002 \001(\t\022\r\n\005nonce\030\003 \001(\004\022\017\n\007acco"
  "unt\030\004 \001(\t\022\016\n\006amount\030\005 \001(\t\022\017\n\007context\030\006 \001"
  "(\t\"~\n\024ReclaimEscrowMessage\022\021\n\tgas_price\030"
  "\001 \001(\004\022\022\n\ngas_amount\030\002 \001(\t\022\r\n\005nonce\030\003 \001(\004"
  "\022\017\n\007account\030\004 \001(\t\022\016\n\006shares\030\005 \001(\t\022\017\n\007con"
  "text\030\006 \001(\t\"\323\001\n\014SigningInput\022\023\n\013private_k"
  "ey\030\001 \001(\014\0223\n\010transfer\030\002 \001(\0132\037.TW.Oasis.Pr"
  "oto.TransferMessageH\000\022/\n\006escrow\030\003 \001(\0132\035."
  "TW.Oasis.Proto.EscrowMessageH\000\022=\n\rreclai"
  "mEscrow\030\004 \001(\0132$.TW.Oasis.Proto.ReclaimEs"
  "crowMessageH\000B\t\n\007message\"e\n\rSigningOutpu"
  "t\022\017\n\007encoded\030\001 \001(\014\022,\n\005error\030\002 \001(\0162\035.TW.C"
  "ommon.Proto.SigningError\022\025\n\rerror_messag"
  "e\030\003 \001(\tB\027\n\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Oasis_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Oasis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Oasis_2eproto = {
  false, false, 760, descriptor_table_protodef_Oasis_2eproto, "Oasis.proto", 
  &descriptor_table_Oasis_2eproto_once, descriptor_table_Oasis_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_Oasis_2eproto::offsets,
  file_level_metadata_Oasis_2eproto, file_level_enum_descriptors_Oasis_2eproto, file_level_service_descriptors_Oasis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Oasis_2eproto_getter() {
  return &descriptor_table_Oasis_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Oasis_2eproto(&descriptor_table_Oasis_2eproto);
namespace TW {
namespace Oasis {
namespace Proto {

// ===================================================================

class TransferMessage::_Internal {
 public:
};

TransferMessage::TransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Oasis.Proto.TransferMessage)
}
TransferMessage::TransferMessage(const TransferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  gas_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_amount().empty()) {
    gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_amount(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context().empty()) {
    context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_context(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gas_price_, &from.gas_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:TW.Oasis.Proto.TransferMessage)
}

inline void TransferMessage::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
}

TransferMessage::~TransferMessage() {
  // @@protoc_insertion_point(destructor:TW.Oasis.Proto.TransferMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransferMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferMessage::ArenaDtor(void* object) {
  TransferMessage* _this = reinterpret_cast< TransferMessage* >(object);
  (void)_this;
}
void TransferMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Oasis.Proto.TransferMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  gas_amount_.ClearToEmpty();
  amount_.ClearToEmpty();
  context_.ClearToEmpty();
  ::memset(&gas_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.TransferMessage.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gas_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gas_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.TransferMessage.gas_amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.TransferMessage.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.TransferMessage.context"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Oasis.Proto.TransferMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.TransferMessage.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // uint64 gas_price = 2;
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gas_price(), target);
  }

  // string gas_amount = 3;
  if (!this->_internal_gas_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_amount().data(), static_cast<int>(this->_internal_gas_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.TransferMessage.gas_amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gas_amount(), target);
  }

  // string amount = 4;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.TransferMessage.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  // uint64 nonce = 5;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_nonce(), target);
  }

  // string context = 6;
  if (!this->_internal_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context().data(), static_cast<int>(this->_internal_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.TransferMessage.context");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Oasis.Proto.TransferMessage)
  return target;
}

size_t TransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Oasis.Proto.TransferMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string gas_amount = 3;
  if (!this->_internal_gas_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_amount());
  }

  // string amount = 4;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string context = 6;
  if (!this->_internal_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context());
  }

  // uint64 gas_price = 2;
  if (this->_internal_gas_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_price());
  }

  // uint64 nonce = 5;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransferMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferMessage::GetClassData() const { return &_class_data_; }

void TransferMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransferMessage *>(to)->MergeFrom(
      static_cast<const TransferMessage &>(from));
}


void TransferMessage::MergeFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Oasis.Proto.TransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_gas_amount().empty()) {
    _internal_set_gas_amount(from._internal_gas_amount());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_context().empty()) {
    _internal_set_context(from._internal_context());
  }
  if (from._internal_gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferMessage::CopyFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Oasis.Proto.TransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMessage::IsInitialized() const {
  return true;
}

void TransferMessage::InternalSwap(TransferMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gas_amount_, lhs_arena,
      &other->gas_amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &context_, lhs_arena,
      &other->context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferMessage, nonce_)
      + sizeof(TransferMessage::nonce_)
      - PROTOBUF_FIELD_OFFSET(TransferMessage, gas_price_)>(
          reinterpret_cast<char*>(&gas_price_),
          reinterpret_cast<char*>(&other->gas_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Oasis_2eproto_getter, &descriptor_table_Oasis_2eproto_once,
      file_level_metadata_Oasis_2eproto[0]);
}

// ===================================================================

class EscrowMessage::_Internal {
 public:
};

EscrowMessage::EscrowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Oasis.Proto.EscrowMessage)
}
EscrowMessage::EscrowMessage(const EscrowMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gas_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_amount().empty()) {
    gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_amount(), 
      GetArenaForAllocation());
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context().empty()) {
    context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_context(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gas_price_, &from.gas_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:TW.Oasis.Proto.EscrowMessage)
}

inline void EscrowMessage::SharedCtor() {
gas_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
}

EscrowMessage::~EscrowMessage() {
  // @@protoc_insertion_point(destructor:TW.Oasis.Proto.EscrowMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EscrowMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gas_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EscrowMessage::ArenaDtor(void* object) {
  EscrowMessage* _this = reinterpret_cast< EscrowMessage* >(object);
  (void)_this;
}
void EscrowMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EscrowMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EscrowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Oasis.Proto.EscrowMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gas_amount_.ClearToEmpty();
  account_.ClearToEmpty();
  amount_.ClearToEmpty();
  context_.ClearToEmpty();
  ::memset(&gas_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EscrowMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gas_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gas_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gas_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.EscrowMessage.gas_amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.EscrowMessage.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.EscrowMessage.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.EscrowMessage.context"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EscrowMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Oasis.Proto.EscrowMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gas_price = 1;
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gas_price(), target);
  }

  // string gas_amount = 2;
  if (!this->_internal_gas_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_amount().data(), static_cast<int>(this->_internal_gas_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.EscrowMessage.gas_amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gas_amount(), target);
  }

  // uint64 nonce = 3;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nonce(), target);
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.EscrowMessage.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // string amount = 5;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.EscrowMessage.amount");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_amount(), target);
  }

  // string context = 6;
  if (!this->_internal_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context().data(), static_cast<int>(this->_internal_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.EscrowMessage.context");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Oasis.Proto.EscrowMessage)
  return target;
}

size_t EscrowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Oasis.Proto.EscrowMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gas_amount = 2;
  if (!this->_internal_gas_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_amount());
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string amount = 5;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string context = 6;
  if (!this->_internal_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context());
  }

  // uint64 gas_price = 1;
  if (this->_internal_gas_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_price());
  }

  // uint64 nonce = 3;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EscrowMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EscrowMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EscrowMessage::GetClassData() const { return &_class_data_; }

void EscrowMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EscrowMessage *>(to)->MergeFrom(
      static_cast<const EscrowMessage &>(from));
}


void EscrowMessage::MergeFrom(const EscrowMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Oasis.Proto.EscrowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gas_amount().empty()) {
    _internal_set_gas_amount(from._internal_gas_amount());
  }
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_context().empty()) {
    _internal_set_context(from._internal_context());
  }
  if (from._internal_gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EscrowMessage::CopyFrom(const EscrowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Oasis.Proto.EscrowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscrowMessage::IsInitialized() const {
  return true;
}

void EscrowMessage::InternalSwap(EscrowMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gas_amount_, lhs_arena,
      &other->gas_amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &context_, lhs_arena,
      &other->context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EscrowMessage, nonce_)
      + sizeof(EscrowMessage::nonce_)
      - PROTOBUF_FIELD_OFFSET(EscrowMessage, gas_price_)>(
          reinterpret_cast<char*>(&gas_price_),
          reinterpret_cast<char*>(&other->gas_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EscrowMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Oasis_2eproto_getter, &descriptor_table_Oasis_2eproto_once,
      file_level_metadata_Oasis_2eproto[1]);
}

// ===================================================================

class ReclaimEscrowMessage::_Internal {
 public:
};

ReclaimEscrowMessage::ReclaimEscrowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Oasis.Proto.ReclaimEscrowMessage)
}
ReclaimEscrowMessage::ReclaimEscrowMessage(const ReclaimEscrowMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gas_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_amount().empty()) {
    gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_amount(), 
      GetArenaForAllocation());
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  shares_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shares_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shares().empty()) {
    shares_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shares(), 
      GetArenaForAllocation());
  }
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context().empty()) {
    context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_context(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gas_price_, &from.gas_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:TW.Oasis.Proto.ReclaimEscrowMessage)
}

inline void ReclaimEscrowMessage::SharedCtor() {
gas_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
shares_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shares_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
}

ReclaimEscrowMessage::~ReclaimEscrowMessage() {
  // @@protoc_insertion_point(destructor:TW.Oasis.Proto.ReclaimEscrowMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReclaimEscrowMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gas_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shares_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReclaimEscrowMessage::ArenaDtor(void* object) {
  ReclaimEscrowMessage* _this = reinterpret_cast< ReclaimEscrowMessage* >(object);
  (void)_this;
}
void ReclaimEscrowMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReclaimEscrowMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReclaimEscrowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Oasis.Proto.ReclaimEscrowMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gas_amount_.ClearToEmpty();
  account_.ClearToEmpty();
  shares_.ClearToEmpty();
  context_.ClearToEmpty();
  ::memset(&gas_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&gas_price_)) + sizeof(nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReclaimEscrowMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gas_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gas_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gas_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.ReclaimEscrowMessage.gas_amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.ReclaimEscrowMessage.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string shares = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_shares();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.ReclaimEscrowMessage.shares"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.ReclaimEscrowMessage.context"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReclaimEscrowMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Oasis.Proto.ReclaimEscrowMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gas_price = 1;
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gas_price(), target);
  }

  // string gas_amount = 2;
  if (!this->_internal_gas_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_amount().data(), static_cast<int>(this->_internal_gas_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.ReclaimEscrowMessage.gas_amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gas_amount(), target);
  }

  // uint64 nonce = 3;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nonce(), target);
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.ReclaimEscrowMessage.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // string shares = 5;
  if (!this->_internal_shares().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shares().data(), static_cast<int>(this->_internal_shares().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.ReclaimEscrowMessage.shares");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_shares(), target);
  }

  // string context = 6;
  if (!this->_internal_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context().data(), static_cast<int>(this->_internal_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.ReclaimEscrowMessage.context");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Oasis.Proto.ReclaimEscrowMessage)
  return target;
}

size_t ReclaimEscrowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Oasis.Proto.ReclaimEscrowMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gas_amount = 2;
  if (!this->_internal_gas_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_amount());
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string shares = 5;
  if (!this->_internal_shares().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shares());
  }

  // string context = 6;
  if (!this->_internal_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context());
  }

  // uint64 gas_price = 1;
  if (this->_internal_gas_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_price());
  }

  // uint64 nonce = 3;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReclaimEscrowMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReclaimEscrowMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReclaimEscrowMessage::GetClassData() const { return &_class_data_; }

void ReclaimEscrowMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReclaimEscrowMessage *>(to)->MergeFrom(
      static_cast<const ReclaimEscrowMessage &>(from));
}


void ReclaimEscrowMessage::MergeFrom(const ReclaimEscrowMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Oasis.Proto.ReclaimEscrowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gas_amount().empty()) {
    _internal_set_gas_amount(from._internal_gas_amount());
  }
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_shares().empty()) {
    _internal_set_shares(from._internal_shares());
  }
  if (!from._internal_context().empty()) {
    _internal_set_context(from._internal_context());
  }
  if (from._internal_gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReclaimEscrowMessage::CopyFrom(const ReclaimEscrowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Oasis.Proto.ReclaimEscrowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReclaimEscrowMessage::IsInitialized() const {
  return true;
}

void ReclaimEscrowMessage::InternalSwap(ReclaimEscrowMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gas_amount_, lhs_arena,
      &other->gas_amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shares_, lhs_arena,
      &other->shares_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &context_, lhs_arena,
      &other->context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReclaimEscrowMessage, nonce_)
      + sizeof(ReclaimEscrowMessage::nonce_)
      - PROTOBUF_FIELD_OFFSET(ReclaimEscrowMessage, gas_price_)>(
          reinterpret_cast<char*>(&gas_price_),
          reinterpret_cast<char*>(&other->gas_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReclaimEscrowMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Oasis_2eproto_getter, &descriptor_table_Oasis_2eproto_once,
      file_level_metadata_Oasis_2eproto[2]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Oasis::Proto::TransferMessage& transfer(const SigningInput* msg);
  static const ::TW::Oasis::Proto::EscrowMessage& escrow(const SigningInput* msg);
  static const ::TW::Oasis::Proto::ReclaimEscrowMessage& reclaimescrow(const SigningInput* msg);
};

const ::TW::Oasis::Proto::TransferMessage&
SigningInput::_Internal::transfer(const SigningInput* msg) {
  return *msg->message_.transfer_;
}
const ::TW::Oasis::Proto::EscrowMessage&
SigningInput::_Internal::escrow(const SigningInput* msg) {
  return *msg->message_.escrow_;
}
const ::TW::Oasis::Proto::ReclaimEscrowMessage&
SigningInput::_Internal::reclaimescrow(const SigningInput* msg) {
  return *msg->message_.reclaimescrow_;
}
void SigningInput::set_allocated_transfer(::TW::Oasis::Proto::TransferMessage* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Oasis::Proto::TransferMessage>::GetOwningArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    message_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.SigningInput.transfer)
}
void SigningInput::set_allocated_escrow(::TW::Oasis::Proto::EscrowMessage* escrow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (escrow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Oasis::Proto::EscrowMessage>::GetOwningArena(escrow);
    if (message_arena != submessage_arena) {
      escrow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, escrow, submessage_arena);
    }
    set_has_escrow();
    message_.escrow_ = escrow;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.SigningInput.escrow)
}
void SigningInput::set_allocated_reclaimescrow(::TW::Oasis::Proto::ReclaimEscrowMessage* reclaimescrow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (reclaimescrow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Oasis::Proto::ReclaimEscrowMessage>::GetOwningArena(reclaimescrow);
    if (message_arena != submessage_arena) {
      reclaimescrow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reclaimescrow, submessage_arena);
    }
    set_has_reclaimescrow();
    message_.reclaimescrow_ = reclaimescrow;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.SigningInput.reclaimEscrow)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Oasis.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  clear_has_message();
  switch (from.message_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Oasis::Proto::TransferMessage::MergeFrom(from._internal_transfer());
      break;
    }
    case kEscrow: {
      _internal_mutable_escrow()->::TW::Oasis::Proto::EscrowMessage::MergeFrom(from._internal_escrow());
      break;
    }
    case kReclaimEscrow: {
      _internal_mutable_reclaimescrow()->::TW::Oasis::Proto::ReclaimEscrowMessage::MergeFrom(from._internal_reclaimescrow());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Oasis.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_message();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Oasis.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_message()) {
    clear_message();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:TW.Oasis.Proto.SigningInput)
  switch (message_case()) {
    case kTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.transfer_;
      }
      break;
    }
    case kEscrow: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.escrow_;
      }
      break;
    }
    case kReclaimEscrow: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.reclaimescrow_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Oasis.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmpty();
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Oasis.Proto.TransferMessage transfer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Oasis.Proto.EscrowMessage escrow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_escrow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Oasis.Proto.ReclaimEscrowMessage reclaimEscrow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reclaimescrow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Oasis.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // .TW.Oasis.Proto.TransferMessage transfer = 2;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transfer(this), target, stream);
  }

  // .TW.Oasis.Proto.EscrowMessage escrow = 3;
  if (_internal_has_escrow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::escrow(this), target, stream);
  }

  // .TW.Oasis.Proto.ReclaimEscrowMessage reclaimEscrow = 4;
  if (_internal_has_reclaimescrow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reclaimescrow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Oasis.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Oasis.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  switch (message_case()) {
    // .TW.Oasis.Proto.TransferMessage transfer = 2;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.transfer_);
      break;
    }
    // .TW.Oasis.Proto.EscrowMessage escrow = 3;
    case kEscrow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.escrow_);
      break;
    }
    // .TW.Oasis.Proto.ReclaimEscrowMessage reclaimEscrow = 4;
    case kReclaimEscrow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.reclaimescrow_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Oasis.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  switch (from.message_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Oasis::Proto::TransferMessage::MergeFrom(from._internal_transfer());
      break;
    }
    case kEscrow: {
      _internal_mutable_escrow()->::TW::Oasis::Proto::EscrowMessage::MergeFrom(from._internal_escrow());
      break;
    }
    case kReclaimEscrow: {
      _internal_mutable_reclaimescrow()->::TW::Oasis::Proto::ReclaimEscrowMessage::MergeFrom(from._internal_reclaimescrow());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Oasis.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Oasis_2eproto_getter, &descriptor_table_Oasis_2eproto_once,
      file_level_metadata_Oasis_2eproto[3]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Oasis.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Oasis.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Oasis.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Oasis.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Oasis.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Oasis.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Oasis.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Oasis.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Oasis.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Oasis.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Oasis.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Oasis_2eproto_getter, &descriptor_table_Oasis_2eproto_once,
      file_level_metadata_Oasis_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Oasis
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Oasis::Proto::TransferMessage* Arena::CreateMaybeMessage< ::TW::Oasis::Proto::TransferMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Oasis::Proto::TransferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Oasis::Proto::EscrowMessage* Arena::CreateMaybeMessage< ::TW::Oasis::Proto::EscrowMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Oasis::Proto::EscrowMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Oasis::Proto::ReclaimEscrowMessage* Arena::CreateMaybeMessage< ::TW::Oasis::Proto::ReclaimEscrowMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Oasis::Proto::ReclaimEscrowMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Oasis::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Oasis::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Oasis::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Oasis::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Oasis::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Oasis::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
