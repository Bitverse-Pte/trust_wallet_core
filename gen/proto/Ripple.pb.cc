// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ripple.proto

#include "Ripple.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Ripple {
namespace Proto {
constexpr CurrencyAmount::CurrencyAmount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , issuer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CurrencyAmountDefaultTypeInternal {
  constexpr CurrencyAmountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CurrencyAmountDefaultTypeInternal() {}
  union {
    CurrencyAmount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CurrencyAmountDefaultTypeInternal _CurrencyAmount_default_instance_;
constexpr OperationTrustSet::OperationTrustSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limit_amount_(nullptr){}
struct OperationTrustSetDefaultTypeInternal {
  constexpr OperationTrustSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationTrustSetDefaultTypeInternal() {}
  union {
    OperationTrustSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationTrustSetDefaultTypeInternal _OperationTrustSet_default_instance_;
constexpr OperationPayment::OperationPayment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destination_tag_(int64_t{0})
  , _oneof_case_{}{}
struct OperationPaymentDefaultTypeInternal {
  constexpr OperationPaymentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationPaymentDefaultTypeInternal() {}
  union {
    OperationPayment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationPaymentDefaultTypeInternal _OperationPayment_default_instance_;
constexpr OperationNFTokenBurn::OperationNFTokenBurn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nftoken_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OperationNFTokenBurnDefaultTypeInternal {
  constexpr OperationNFTokenBurnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationNFTokenBurnDefaultTypeInternal() {}
  union {
    OperationNFTokenBurn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationNFTokenBurnDefaultTypeInternal _OperationNFTokenBurn_default_instance_;
constexpr OperationNFTokenCreateOffer::OperationNFTokenCreateOffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nftoken_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OperationNFTokenCreateOfferDefaultTypeInternal {
  constexpr OperationNFTokenCreateOfferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationNFTokenCreateOfferDefaultTypeInternal() {}
  union {
    OperationNFTokenCreateOffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationNFTokenCreateOfferDefaultTypeInternal _OperationNFTokenCreateOffer_default_instance_;
constexpr OperationNFTokenAcceptOffer::OperationNFTokenAcceptOffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sell_offer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OperationNFTokenAcceptOfferDefaultTypeInternal {
  constexpr OperationNFTokenAcceptOfferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationNFTokenAcceptOfferDefaultTypeInternal() {}
  union {
    OperationNFTokenAcceptOffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationNFTokenAcceptOfferDefaultTypeInternal _OperationNFTokenAcceptOffer_default_instance_;
constexpr OperationNFTokenCancelOffer::OperationNFTokenCancelOffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_offers_(){}
struct OperationNFTokenCancelOfferDefaultTypeInternal {
  constexpr OperationNFTokenCancelOfferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationNFTokenCancelOfferDefaultTypeInternal() {}
  union {
    OperationNFTokenCancelOffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationNFTokenCancelOfferDefaultTypeInternal _OperationNFTokenCancelOffer_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_(int64_t{0})
  , sequence_(0)
  , last_ledger_sequence_(0)
  , flags_(int64_t{0})
  , _oneof_case_{}{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Ripple
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Ripple_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Ripple_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Ripple_2eproto = nullptr;

const uint32_t TableStruct_Ripple_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::CurrencyAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::CurrencyAmount, currency_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::CurrencyAmount, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::CurrencyAmount, issuer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationTrustSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationTrustSet, limit_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationPayment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationPayment, destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationPayment, destination_tag_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationPayment, amount_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenBurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenBurn, nftoken_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenCreateOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenCreateOffer, nftoken_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenCreateOffer, destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenAcceptOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenAcceptOffer, sell_offer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenCancelOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::OperationNFTokenCancelOffer, token_offers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, sequence_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, last_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, account_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, flags_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, private_key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, public_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningInput, operation_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Ripple::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Ripple::Proto::CurrencyAmount)},
  { 9, -1, -1, sizeof(::TW::Ripple::Proto::OperationTrustSet)},
  { 16, -1, -1, sizeof(::TW::Ripple::Proto::OperationPayment)},
  { 27, -1, -1, sizeof(::TW::Ripple::Proto::OperationNFTokenBurn)},
  { 34, -1, -1, sizeof(::TW::Ripple::Proto::OperationNFTokenCreateOffer)},
  { 42, -1, -1, sizeof(::TW::Ripple::Proto::OperationNFTokenAcceptOffer)},
  { 49, -1, -1, sizeof(::TW::Ripple::Proto::OperationNFTokenCancelOffer)},
  { 56, -1, -1, sizeof(::TW::Ripple::Proto::SigningInput)},
  { 76, -1, -1, sizeof(::TW::Ripple::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_CurrencyAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_OperationTrustSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_OperationPayment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_OperationNFTokenBurn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_OperationNFTokenCreateOffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_OperationNFTokenAcceptOffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_OperationNFTokenCancelOffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ripple::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Ripple_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Ripple.proto\022\017TW.Ripple.Proto\032\014Common."
  "proto\"A\n\016CurrencyAmount\022\020\n\010currency\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t\022\016\n\006issuer\030\003 \001(\t\"J\n\021Oper"
  "ationTrustSet\0225\n\014limit_amount\030\001 \001(\0132\037.TW"
  ".Ripple.Proto.CurrencyAmount\"\236\001\n\020Operati"
  "onPayment\022\020\n\006amount\030\001 \001(\003H\000\022:\n\017currency_"
  "amount\030\002 \001(\0132\037.TW.Ripple.Proto.CurrencyA"
  "mountH\000\022\023\n\013destination\030\003 \001(\t\022\027\n\017destinat"
  "ion_tag\030\004 \001(\003B\016\n\014amount_oneof\"*\n\024Operati"
  "onNFTokenBurn\022\022\n\nnftoken_id\030\001 \001(\014\"F\n\033Ope"
  "rationNFTokenCreateOffer\022\022\n\nnftoken_id\030\001"
  " \001(\014\022\023\n\013destination\030\002 \001(\t\"1\n\033OperationNF"
  "TokenAcceptOffer\022\022\n\nsell_offer\030\001 \001(\014\"3\n\033"
  "OperationNFTokenCancelOffer\022\024\n\014token_off"
  "ers\030\001 \003(\014\"\321\004\n\014SigningInput\022\013\n\003fee\030\001 \001(\003\022"
  "\020\n\010sequence\030\002 \001(\005\022\034\n\024last_ledger_sequenc"
  "e\030\003 \001(\005\022\017\n\007account\030\004 \001(\t\022\r\n\005flags\030\005 \001(\003\022"
  "\023\n\013private_key\030\006 \001(\014\022:\n\014op_trust_set\030\007 \001"
  "(\0132\".TW.Ripple.Proto.OperationTrustSetH\000"
  "\0227\n\nop_payment\030\010 \001(\0132!.TW.Ripple.Proto.O"
  "perationPaymentH\000\022@\n\017op_nftoken_burn\030\t \001"
  "(\0132%.TW.Ripple.Proto.OperationNFTokenBur"
  "nH\000\022O\n\027op_nftoken_create_offer\030\n \001(\0132,.T"
  "W.Ripple.Proto.OperationNFTokenCreateOff"
  "erH\000\022O\n\027op_nftoken_accept_offer\030\013 \001(\0132,."
  "TW.Ripple.Proto.OperationNFTokenAcceptOf"
  "ferH\000\022O\n\027op_nftoken_cancel_offer\030\014 \001(\0132,"
  ".TW.Ripple.Proto.OperationNFTokenCancelO"
  "fferH\000\022\022\n\npublic_key\030\017 \001(\014B\021\n\017operation_"
  "oneof\"e\n\rSigningOutput\022\017\n\007encoded\030\001 \001(\014\022"
  ",\n\005error\030\002 \001(\0162\035.TW.Common.Proto.Signing"
  "Error\022\025\n\rerror_message\030\003 \001(\tB\027\n\025wallet.c"
  "ore.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Ripple_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Ripple_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ripple_2eproto = {
  false, false, 1301, descriptor_table_protodef_Ripple_2eproto, "Ripple.proto", 
  &descriptor_table_Ripple_2eproto_once, descriptor_table_Ripple_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_Ripple_2eproto::offsets,
  file_level_metadata_Ripple_2eproto, file_level_enum_descriptors_Ripple_2eproto, file_level_service_descriptors_Ripple_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Ripple_2eproto_getter() {
  return &descriptor_table_Ripple_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Ripple_2eproto(&descriptor_table_Ripple_2eproto);
namespace TW {
namespace Ripple {
namespace Proto {

// ===================================================================

class CurrencyAmount::_Internal {
 public:
};

CurrencyAmount::CurrencyAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.CurrencyAmount)
}
CurrencyAmount::CurrencyAmount(const CurrencyAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer().empty()) {
    issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_issuer(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.CurrencyAmount)
}

inline void CurrencyAmount::SharedCtor() {
currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CurrencyAmount::~CurrencyAmount() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.CurrencyAmount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CurrencyAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrencyAmount::ArenaDtor(void* object) {
  CurrencyAmount* _this = reinterpret_cast< CurrencyAmount* >(object);
  (void)_this;
}
void CurrencyAmount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrencyAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrencyAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.CurrencyAmount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmpty();
  value_.ClearToEmpty();
  issuer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ripple.Proto.CurrencyAmount.currency"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ripple.Proto.CurrencyAmount.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string issuer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_issuer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ripple.Proto.CurrencyAmount.issuer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrencyAmount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.CurrencyAmount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ripple.Proto.CurrencyAmount.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ripple.Proto.CurrencyAmount.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string issuer = 3;
  if (!this->_internal_issuer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ripple.Proto.CurrencyAmount.issuer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_issuer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.CurrencyAmount)
  return target;
}

size_t CurrencyAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.CurrencyAmount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string issuer = 3;
  if (!this->_internal_issuer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrencyAmount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrencyAmount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrencyAmount::GetClassData() const { return &_class_data_; }

void CurrencyAmount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrencyAmount *>(to)->MergeFrom(
      static_cast<const CurrencyAmount &>(from));
}


void CurrencyAmount::MergeFrom(const CurrencyAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.CurrencyAmount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_currency().empty()) {
    _internal_set_currency(from._internal_currency());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_issuer().empty()) {
    _internal_set_issuer(from._internal_issuer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyAmount::CopyFrom(const CurrencyAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.CurrencyAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyAmount::IsInitialized() const {
  return true;
}

void CurrencyAmount::InternalSwap(CurrencyAmount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_, lhs_arena,
      &other->currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &issuer_, lhs_arena,
      &other->issuer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyAmount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[0]);
}

// ===================================================================

class OperationTrustSet::_Internal {
 public:
  static const ::TW::Ripple::Proto::CurrencyAmount& limit_amount(const OperationTrustSet* msg);
};

const ::TW::Ripple::Proto::CurrencyAmount&
OperationTrustSet::_Internal::limit_amount(const OperationTrustSet* msg) {
  return *msg->limit_amount_;
}
OperationTrustSet::OperationTrustSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.OperationTrustSet)
}
OperationTrustSet::OperationTrustSet(const OperationTrustSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_limit_amount()) {
    limit_amount_ = new ::TW::Ripple::Proto::CurrencyAmount(*from.limit_amount_);
  } else {
    limit_amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.OperationTrustSet)
}

inline void OperationTrustSet::SharedCtor() {
limit_amount_ = nullptr;
}

OperationTrustSet::~OperationTrustSet() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.OperationTrustSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationTrustSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete limit_amount_;
}

void OperationTrustSet::ArenaDtor(void* object) {
  OperationTrustSet* _this = reinterpret_cast< OperationTrustSet* >(object);
  (void)_this;
}
void OperationTrustSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationTrustSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationTrustSet::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.OperationTrustSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && limit_amount_ != nullptr) {
    delete limit_amount_;
  }
  limit_amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationTrustSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Ripple.Proto.CurrencyAmount limit_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationTrustSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.OperationTrustSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Ripple.Proto.CurrencyAmount limit_amount = 1;
  if (this->_internal_has_limit_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::limit_amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.OperationTrustSet)
  return target;
}

size_t OperationTrustSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.OperationTrustSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Ripple.Proto.CurrencyAmount limit_amount = 1;
  if (this->_internal_has_limit_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationTrustSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationTrustSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationTrustSet::GetClassData() const { return &_class_data_; }

void OperationTrustSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationTrustSet *>(to)->MergeFrom(
      static_cast<const OperationTrustSet &>(from));
}


void OperationTrustSet::MergeFrom(const OperationTrustSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.OperationTrustSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_limit_amount()) {
    _internal_mutable_limit_amount()->::TW::Ripple::Proto::CurrencyAmount::MergeFrom(from._internal_limit_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationTrustSet::CopyFrom(const OperationTrustSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.OperationTrustSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTrustSet::IsInitialized() const {
  return true;
}

void OperationTrustSet::InternalSwap(OperationTrustSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(limit_amount_, other->limit_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationTrustSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[1]);
}

// ===================================================================

class OperationPayment::_Internal {
 public:
  static const ::TW::Ripple::Proto::CurrencyAmount& currency_amount(const OperationPayment* msg);
};

const ::TW::Ripple::Proto::CurrencyAmount&
OperationPayment::_Internal::currency_amount(const OperationPayment* msg) {
  return *msg->amount_oneof_.currency_amount_;
}
void OperationPayment::set_allocated_currency_amount(::TW::Ripple::Proto::CurrencyAmount* currency_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_amount_oneof();
  if (currency_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ripple::Proto::CurrencyAmount>::GetOwningArena(currency_amount);
    if (message_arena != submessage_arena) {
      currency_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency_amount, submessage_arena);
    }
    set_has_currency_amount();
    amount_oneof_.currency_amount_ = currency_amount;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ripple.Proto.OperationPayment.currency_amount)
}
OperationPayment::OperationPayment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.OperationPayment)
}
OperationPayment::OperationPayment(const OperationPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArenaForAllocation());
  }
  destination_tag_ = from.destination_tag_;
  clear_has_amount_oneof();
  switch (from.amount_oneof_case()) {
    case kAmount: {
      _internal_set_amount(from._internal_amount());
      break;
    }
    case kCurrencyAmount: {
      _internal_mutable_currency_amount()->::TW::Ripple::Proto::CurrencyAmount::MergeFrom(from._internal_currency_amount());
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.OperationPayment)
}

inline void OperationPayment::SharedCtor() {
destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
destination_tag_ = int64_t{0};
clear_has_amount_oneof();
}

OperationPayment::~OperationPayment() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.OperationPayment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationPayment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_amount_oneof()) {
    clear_amount_oneof();
  }
}

void OperationPayment::ArenaDtor(void* object) {
  OperationPayment* _this = reinterpret_cast< OperationPayment* >(object);
  (void)_this;
}
void OperationPayment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationPayment::clear_amount_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Ripple.Proto.OperationPayment)
  switch (amount_oneof_case()) {
    case kAmount: {
      // No need to clear
      break;
    }
    case kCurrencyAmount: {
      if (GetArenaForAllocation() == nullptr) {
        delete amount_oneof_.currency_amount_;
      }
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AMOUNT_ONEOF_NOT_SET;
}


void OperationPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.OperationPayment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmpty();
  destination_tag_ = int64_t{0};
  clear_amount_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationPayment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_amount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ripple.Proto.CurrencyAmount currency_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ripple.Proto.OperationPayment.destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 destination_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          destination_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationPayment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.OperationPayment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (_internal_has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  // .TW.Ripple.Proto.CurrencyAmount currency_amount = 2;
  if (_internal_has_currency_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::currency_amount(this), target, stream);
  }

  // string destination = 3;
  if (!this->_internal_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ripple.Proto.OperationPayment.destination");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination(), target);
  }

  // int64 destination_tag = 4;
  if (this->_internal_destination_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_destination_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.OperationPayment)
  return target;
}

size_t OperationPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.OperationPayment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 3;
  if (!this->_internal_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // int64 destination_tag = 4;
  if (this->_internal_destination_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_destination_tag());
  }

  switch (amount_oneof_case()) {
    // int64 amount = 1;
    case kAmount: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
      break;
    }
    // .TW.Ripple.Proto.CurrencyAmount currency_amount = 2;
    case kCurrencyAmount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *amount_oneof_.currency_amount_);
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationPayment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationPayment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationPayment::GetClassData() const { return &_class_data_; }

void OperationPayment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationPayment *>(to)->MergeFrom(
      static_cast<const OperationPayment &>(from));
}


void OperationPayment::MergeFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.OperationPayment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _internal_set_destination(from._internal_destination());
  }
  if (from._internal_destination_tag() != 0) {
    _internal_set_destination_tag(from._internal_destination_tag());
  }
  switch (from.amount_oneof_case()) {
    case kAmount: {
      _internal_set_amount(from._internal_amount());
      break;
    }
    case kCurrencyAmount: {
      _internal_mutable_currency_amount()->::TW::Ripple::Proto::CurrencyAmount::MergeFrom(from._internal_currency_amount());
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationPayment::CopyFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.OperationPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationPayment::IsInitialized() const {
  return true;
}

void OperationPayment::InternalSwap(OperationPayment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_, lhs_arena,
      &other->destination_, rhs_arena
  );
  swap(destination_tag_, other->destination_tag_);
  swap(amount_oneof_, other->amount_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationPayment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[2]);
}

// ===================================================================

class OperationNFTokenBurn::_Internal {
 public:
};

OperationNFTokenBurn::OperationNFTokenBurn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.OperationNFTokenBurn)
}
OperationNFTokenBurn::OperationNFTokenBurn(const OperationNFTokenBurn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nftoken_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nftoken_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nftoken_id().empty()) {
    nftoken_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nftoken_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.OperationNFTokenBurn)
}

inline void OperationNFTokenBurn::SharedCtor() {
nftoken_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nftoken_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationNFTokenBurn::~OperationNFTokenBurn() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.OperationNFTokenBurn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationNFTokenBurn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nftoken_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationNFTokenBurn::ArenaDtor(void* object) {
  OperationNFTokenBurn* _this = reinterpret_cast< OperationNFTokenBurn* >(object);
  (void)_this;
}
void OperationNFTokenBurn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationNFTokenBurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationNFTokenBurn::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.OperationNFTokenBurn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nftoken_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationNFTokenBurn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nftoken_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nftoken_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationNFTokenBurn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.OperationNFTokenBurn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nftoken_id = 1;
  if (!this->_internal_nftoken_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nftoken_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.OperationNFTokenBurn)
  return target;
}

size_t OperationNFTokenBurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.OperationNFTokenBurn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nftoken_id = 1;
  if (!this->_internal_nftoken_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nftoken_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationNFTokenBurn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationNFTokenBurn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationNFTokenBurn::GetClassData() const { return &_class_data_; }

void OperationNFTokenBurn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationNFTokenBurn *>(to)->MergeFrom(
      static_cast<const OperationNFTokenBurn &>(from));
}


void OperationNFTokenBurn::MergeFrom(const OperationNFTokenBurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.OperationNFTokenBurn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nftoken_id().empty()) {
    _internal_set_nftoken_id(from._internal_nftoken_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationNFTokenBurn::CopyFrom(const OperationNFTokenBurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.OperationNFTokenBurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationNFTokenBurn::IsInitialized() const {
  return true;
}

void OperationNFTokenBurn::InternalSwap(OperationNFTokenBurn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nftoken_id_, lhs_arena,
      &other->nftoken_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationNFTokenBurn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[3]);
}

// ===================================================================

class OperationNFTokenCreateOffer::_Internal {
 public:
};

OperationNFTokenCreateOffer::OperationNFTokenCreateOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.OperationNFTokenCreateOffer)
}
OperationNFTokenCreateOffer::OperationNFTokenCreateOffer(const OperationNFTokenCreateOffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nftoken_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nftoken_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nftoken_id().empty()) {
    nftoken_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nftoken_id(), 
      GetArenaForAllocation());
  }
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.OperationNFTokenCreateOffer)
}

inline void OperationNFTokenCreateOffer::SharedCtor() {
nftoken_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nftoken_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationNFTokenCreateOffer::~OperationNFTokenCreateOffer() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.OperationNFTokenCreateOffer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationNFTokenCreateOffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nftoken_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationNFTokenCreateOffer::ArenaDtor(void* object) {
  OperationNFTokenCreateOffer* _this = reinterpret_cast< OperationNFTokenCreateOffer* >(object);
  (void)_this;
}
void OperationNFTokenCreateOffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationNFTokenCreateOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationNFTokenCreateOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.OperationNFTokenCreateOffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nftoken_id_.ClearToEmpty();
  destination_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationNFTokenCreateOffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nftoken_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nftoken_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ripple.Proto.OperationNFTokenCreateOffer.destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationNFTokenCreateOffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.OperationNFTokenCreateOffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nftoken_id = 1;
  if (!this->_internal_nftoken_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nftoken_id(), target);
  }

  // string destination = 2;
  if (!this->_internal_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ripple.Proto.OperationNFTokenCreateOffer.destination");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.OperationNFTokenCreateOffer)
  return target;
}

size_t OperationNFTokenCreateOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.OperationNFTokenCreateOffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nftoken_id = 1;
  if (!this->_internal_nftoken_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nftoken_id());
  }

  // string destination = 2;
  if (!this->_internal_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationNFTokenCreateOffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationNFTokenCreateOffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationNFTokenCreateOffer::GetClassData() const { return &_class_data_; }

void OperationNFTokenCreateOffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationNFTokenCreateOffer *>(to)->MergeFrom(
      static_cast<const OperationNFTokenCreateOffer &>(from));
}


void OperationNFTokenCreateOffer::MergeFrom(const OperationNFTokenCreateOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.OperationNFTokenCreateOffer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nftoken_id().empty()) {
    _internal_set_nftoken_id(from._internal_nftoken_id());
  }
  if (!from._internal_destination().empty()) {
    _internal_set_destination(from._internal_destination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationNFTokenCreateOffer::CopyFrom(const OperationNFTokenCreateOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.OperationNFTokenCreateOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationNFTokenCreateOffer::IsInitialized() const {
  return true;
}

void OperationNFTokenCreateOffer::InternalSwap(OperationNFTokenCreateOffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nftoken_id_, lhs_arena,
      &other->nftoken_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_, lhs_arena,
      &other->destination_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationNFTokenCreateOffer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[4]);
}

// ===================================================================

class OperationNFTokenAcceptOffer::_Internal {
 public:
};

OperationNFTokenAcceptOffer::OperationNFTokenAcceptOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
}
OperationNFTokenAcceptOffer::OperationNFTokenAcceptOffer(const OperationNFTokenAcceptOffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sell_offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sell_offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sell_offer().empty()) {
    sell_offer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_offer(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
}

inline void OperationNFTokenAcceptOffer::SharedCtor() {
sell_offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sell_offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationNFTokenAcceptOffer::~OperationNFTokenAcceptOffer() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationNFTokenAcceptOffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sell_offer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationNFTokenAcceptOffer::ArenaDtor(void* object) {
  OperationNFTokenAcceptOffer* _this = reinterpret_cast< OperationNFTokenAcceptOffer* >(object);
  (void)_this;
}
void OperationNFTokenAcceptOffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationNFTokenAcceptOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationNFTokenAcceptOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sell_offer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationNFTokenAcceptOffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sell_offer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sell_offer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationNFTokenAcceptOffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sell_offer = 1;
  if (!this->_internal_sell_offer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sell_offer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
  return target;
}

size_t OperationNFTokenAcceptOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sell_offer = 1;
  if (!this->_internal_sell_offer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_offer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationNFTokenAcceptOffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationNFTokenAcceptOffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationNFTokenAcceptOffer::GetClassData() const { return &_class_data_; }

void OperationNFTokenAcceptOffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationNFTokenAcceptOffer *>(to)->MergeFrom(
      static_cast<const OperationNFTokenAcceptOffer &>(from));
}


void OperationNFTokenAcceptOffer::MergeFrom(const OperationNFTokenAcceptOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sell_offer().empty()) {
    _internal_set_sell_offer(from._internal_sell_offer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationNFTokenAcceptOffer::CopyFrom(const OperationNFTokenAcceptOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.OperationNFTokenAcceptOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationNFTokenAcceptOffer::IsInitialized() const {
  return true;
}

void OperationNFTokenAcceptOffer::InternalSwap(OperationNFTokenAcceptOffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_offer_, lhs_arena,
      &other->sell_offer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationNFTokenAcceptOffer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[5]);
}

// ===================================================================

class OperationNFTokenCancelOffer::_Internal {
 public:
};

OperationNFTokenCancelOffer::OperationNFTokenCancelOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  token_offers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.OperationNFTokenCancelOffer)
}
OperationNFTokenCancelOffer::OperationNFTokenCancelOffer(const OperationNFTokenCancelOffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      token_offers_(from.token_offers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.OperationNFTokenCancelOffer)
}

inline void OperationNFTokenCancelOffer::SharedCtor() {
}

OperationNFTokenCancelOffer::~OperationNFTokenCancelOffer() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.OperationNFTokenCancelOffer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationNFTokenCancelOffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OperationNFTokenCancelOffer::ArenaDtor(void* object) {
  OperationNFTokenCancelOffer* _this = reinterpret_cast< OperationNFTokenCancelOffer* >(object);
  (void)_this;
}
void OperationNFTokenCancelOffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationNFTokenCancelOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationNFTokenCancelOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.OperationNFTokenCancelOffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_offers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationNFTokenCancelOffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes token_offers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_token_offers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationNFTokenCancelOffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.OperationNFTokenCancelOffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes token_offers = 1;
  for (int i = 0, n = this->_internal_token_offers_size(); i < n; i++) {
    const auto& s = this->_internal_token_offers(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.OperationNFTokenCancelOffer)
  return target;
}

size_t OperationNFTokenCancelOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.OperationNFTokenCancelOffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes token_offers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(token_offers_.size());
  for (int i = 0, n = token_offers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      token_offers_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationNFTokenCancelOffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationNFTokenCancelOffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationNFTokenCancelOffer::GetClassData() const { return &_class_data_; }

void OperationNFTokenCancelOffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationNFTokenCancelOffer *>(to)->MergeFrom(
      static_cast<const OperationNFTokenCancelOffer &>(from));
}


void OperationNFTokenCancelOffer::MergeFrom(const OperationNFTokenCancelOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.OperationNFTokenCancelOffer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  token_offers_.MergeFrom(from.token_offers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationNFTokenCancelOffer::CopyFrom(const OperationNFTokenCancelOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.OperationNFTokenCancelOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationNFTokenCancelOffer::IsInitialized() const {
  return true;
}

void OperationNFTokenCancelOffer::InternalSwap(OperationNFTokenCancelOffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  token_offers_.InternalSwap(&other->token_offers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationNFTokenCancelOffer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[6]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Ripple::Proto::OperationTrustSet& op_trust_set(const SigningInput* msg);
  static const ::TW::Ripple::Proto::OperationPayment& op_payment(const SigningInput* msg);
  static const ::TW::Ripple::Proto::OperationNFTokenBurn& op_nftoken_burn(const SigningInput* msg);
  static const ::TW::Ripple::Proto::OperationNFTokenCreateOffer& op_nftoken_create_offer(const SigningInput* msg);
  static const ::TW::Ripple::Proto::OperationNFTokenAcceptOffer& op_nftoken_accept_offer(const SigningInput* msg);
  static const ::TW::Ripple::Proto::OperationNFTokenCancelOffer& op_nftoken_cancel_offer(const SigningInput* msg);
};

const ::TW::Ripple::Proto::OperationTrustSet&
SigningInput::_Internal::op_trust_set(const SigningInput* msg) {
  return *msg->operation_oneof_.op_trust_set_;
}
const ::TW::Ripple::Proto::OperationPayment&
SigningInput::_Internal::op_payment(const SigningInput* msg) {
  return *msg->operation_oneof_.op_payment_;
}
const ::TW::Ripple::Proto::OperationNFTokenBurn&
SigningInput::_Internal::op_nftoken_burn(const SigningInput* msg) {
  return *msg->operation_oneof_.op_nftoken_burn_;
}
const ::TW::Ripple::Proto::OperationNFTokenCreateOffer&
SigningInput::_Internal::op_nftoken_create_offer(const SigningInput* msg) {
  return *msg->operation_oneof_.op_nftoken_create_offer_;
}
const ::TW::Ripple::Proto::OperationNFTokenAcceptOffer&
SigningInput::_Internal::op_nftoken_accept_offer(const SigningInput* msg) {
  return *msg->operation_oneof_.op_nftoken_accept_offer_;
}
const ::TW::Ripple::Proto::OperationNFTokenCancelOffer&
SigningInput::_Internal::op_nftoken_cancel_offer(const SigningInput* msg) {
  return *msg->operation_oneof_.op_nftoken_cancel_offer_;
}
void SigningInput::set_allocated_op_trust_set(::TW::Ripple::Proto::OperationTrustSet* op_trust_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_trust_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ripple::Proto::OperationTrustSet>::GetOwningArena(op_trust_set);
    if (message_arena != submessage_arena) {
      op_trust_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_trust_set, submessage_arena);
    }
    set_has_op_trust_set();
    operation_oneof_.op_trust_set_ = op_trust_set;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ripple.Proto.SigningInput.op_trust_set)
}
void SigningInput::set_allocated_op_payment(::TW::Ripple::Proto::OperationPayment* op_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ripple::Proto::OperationPayment>::GetOwningArena(op_payment);
    if (message_arena != submessage_arena) {
      op_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_payment, submessage_arena);
    }
    set_has_op_payment();
    operation_oneof_.op_payment_ = op_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ripple.Proto.SigningInput.op_payment)
}
void SigningInput::set_allocated_op_nftoken_burn(::TW::Ripple::Proto::OperationNFTokenBurn* op_nftoken_burn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_nftoken_burn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ripple::Proto::OperationNFTokenBurn>::GetOwningArena(op_nftoken_burn);
    if (message_arena != submessage_arena) {
      op_nftoken_burn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_nftoken_burn, submessage_arena);
    }
    set_has_op_nftoken_burn();
    operation_oneof_.op_nftoken_burn_ = op_nftoken_burn;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ripple.Proto.SigningInput.op_nftoken_burn)
}
void SigningInput::set_allocated_op_nftoken_create_offer(::TW::Ripple::Proto::OperationNFTokenCreateOffer* op_nftoken_create_offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_nftoken_create_offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ripple::Proto::OperationNFTokenCreateOffer>::GetOwningArena(op_nftoken_create_offer);
    if (message_arena != submessage_arena) {
      op_nftoken_create_offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_nftoken_create_offer, submessage_arena);
    }
    set_has_op_nftoken_create_offer();
    operation_oneof_.op_nftoken_create_offer_ = op_nftoken_create_offer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ripple.Proto.SigningInput.op_nftoken_create_offer)
}
void SigningInput::set_allocated_op_nftoken_accept_offer(::TW::Ripple::Proto::OperationNFTokenAcceptOffer* op_nftoken_accept_offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_nftoken_accept_offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ripple::Proto::OperationNFTokenAcceptOffer>::GetOwningArena(op_nftoken_accept_offer);
    if (message_arena != submessage_arena) {
      op_nftoken_accept_offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_nftoken_accept_offer, submessage_arena);
    }
    set_has_op_nftoken_accept_offer();
    operation_oneof_.op_nftoken_accept_offer_ = op_nftoken_accept_offer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ripple.Proto.SigningInput.op_nftoken_accept_offer)
}
void SigningInput::set_allocated_op_nftoken_cancel_offer(::TW::Ripple::Proto::OperationNFTokenCancelOffer* op_nftoken_cancel_offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_nftoken_cancel_offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ripple::Proto::OperationNFTokenCancelOffer>::GetOwningArena(op_nftoken_cancel_offer);
    if (message_arena != submessage_arena) {
      op_nftoken_cancel_offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_nftoken_cancel_offer, submessage_arena);
    }
    set_has_op_nftoken_cancel_offer();
    operation_oneof_.op_nftoken_cancel_offer_ = op_nftoken_cancel_offer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ripple.Proto.SigningInput.op_nftoken_cancel_offer)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(flags_));
  clear_has_operation_oneof();
  switch (from.operation_oneof_case()) {
    case kOpTrustSet: {
      _internal_mutable_op_trust_set()->::TW::Ripple::Proto::OperationTrustSet::MergeFrom(from._internal_op_trust_set());
      break;
    }
    case kOpPayment: {
      _internal_mutable_op_payment()->::TW::Ripple::Proto::OperationPayment::MergeFrom(from._internal_op_payment());
      break;
    }
    case kOpNftokenBurn: {
      _internal_mutable_op_nftoken_burn()->::TW::Ripple::Proto::OperationNFTokenBurn::MergeFrom(from._internal_op_nftoken_burn());
      break;
    }
    case kOpNftokenCreateOffer: {
      _internal_mutable_op_nftoken_create_offer()->::TW::Ripple::Proto::OperationNFTokenCreateOffer::MergeFrom(from._internal_op_nftoken_create_offer());
      break;
    }
    case kOpNftokenAcceptOffer: {
      _internal_mutable_op_nftoken_accept_offer()->::TW::Ripple::Proto::OperationNFTokenAcceptOffer::MergeFrom(from._internal_op_nftoken_accept_offer());
      break;
    }
    case kOpNftokenCancelOffer: {
      _internal_mutable_op_nftoken_cancel_offer()->::TW::Ripple::Proto::OperationNFTokenCancelOffer::MergeFrom(from._internal_op_nftoken_cancel_offer());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fee_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(flags_));
clear_has_operation_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_operation_oneof()) {
    clear_operation_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::clear_operation_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Ripple.Proto.SigningInput)
  switch (operation_oneof_case()) {
    case kOpTrustSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_trust_set_;
      }
      break;
    }
    case kOpPayment: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_payment_;
      }
      break;
    }
    case kOpNftokenBurn: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_nftoken_burn_;
      }
      break;
    }
    case kOpNftokenCreateOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_nftoken_create_offer_;
      }
      break;
    }
    case kOpNftokenAcceptOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_nftoken_accept_offer_;
      }
      break;
    }
    case kOpNftokenCancelOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_nftoken_cancel_offer_;
      }
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  private_key_.ClearToEmpty();
  public_key_.ClearToEmpty();
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(flags_));
  clear_operation_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_ledger_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          last_ledger_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ripple.Proto.SigningInput.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ripple.Proto.OperationTrustSet op_trust_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_trust_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ripple.Proto.OperationPayment op_payment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_payment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ripple.Proto.OperationNFTokenBurn op_nftoken_burn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_nftoken_burn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ripple.Proto.OperationNFTokenCreateOffer op_nftoken_create_offer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_nftoken_create_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ripple.Proto.OperationNFTokenAcceptOffer op_nftoken_accept_offer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_nftoken_accept_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ripple.Proto.OperationNFTokenCancelOffer op_nftoken_cancel_offer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_nftoken_cancel_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fee = 1;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fee(), target);
  }

  // int32 sequence = 2;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence(), target);
  }

  // int32 last_ledger_sequence = 3;
  if (this->_internal_last_ledger_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_ledger_sequence(), target);
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ripple.Proto.SigningInput.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // int64 flags = 5;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_flags(), target);
  }

  // bytes private_key = 6;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_private_key(), target);
  }

  // .TW.Ripple.Proto.OperationTrustSet op_trust_set = 7;
  if (_internal_has_op_trust_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::op_trust_set(this), target, stream);
  }

  // .TW.Ripple.Proto.OperationPayment op_payment = 8;
  if (_internal_has_op_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::op_payment(this), target, stream);
  }

  // .TW.Ripple.Proto.OperationNFTokenBurn op_nftoken_burn = 9;
  if (_internal_has_op_nftoken_burn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::op_nftoken_burn(this), target, stream);
  }

  // .TW.Ripple.Proto.OperationNFTokenCreateOffer op_nftoken_create_offer = 10;
  if (_internal_has_op_nftoken_create_offer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::op_nftoken_create_offer(this), target, stream);
  }

  // .TW.Ripple.Proto.OperationNFTokenAcceptOffer op_nftoken_accept_offer = 11;
  if (_internal_has_op_nftoken_accept_offer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::op_nftoken_accept_offer(this), target, stream);
  }

  // .TW.Ripple.Proto.OperationNFTokenCancelOffer op_nftoken_cancel_offer = 12;
  if (_internal_has_op_nftoken_cancel_offer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::op_nftoken_cancel_offer(this), target, stream);
  }

  // bytes public_key = 15;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 4;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // bytes private_key = 6;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // bytes public_key = 15;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // int64 fee = 1;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fee());
  }

  // int32 sequence = 2;
  if (this->_internal_sequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sequence());
  }

  // int32 last_ledger_sequence = 3;
  if (this->_internal_last_ledger_sequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_last_ledger_sequence());
  }

  // int64 flags = 5;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_flags());
  }

  switch (operation_oneof_case()) {
    // .TW.Ripple.Proto.OperationTrustSet op_trust_set = 7;
    case kOpTrustSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_trust_set_);
      break;
    }
    // .TW.Ripple.Proto.OperationPayment op_payment = 8;
    case kOpPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_payment_);
      break;
    }
    // .TW.Ripple.Proto.OperationNFTokenBurn op_nftoken_burn = 9;
    case kOpNftokenBurn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_nftoken_burn_);
      break;
    }
    // .TW.Ripple.Proto.OperationNFTokenCreateOffer op_nftoken_create_offer = 10;
    case kOpNftokenCreateOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_nftoken_create_offer_);
      break;
    }
    // .TW.Ripple.Proto.OperationNFTokenAcceptOffer op_nftoken_accept_offer = 11;
    case kOpNftokenAcceptOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_nftoken_accept_offer_);
      break;
    }
    // .TW.Ripple.Proto.OperationNFTokenCancelOffer op_nftoken_cancel_offer = 12;
    case kOpNftokenCancelOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_nftoken_cancel_offer_);
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_last_ledger_sequence() != 0) {
    _internal_set_last_ledger_sequence(from._internal_last_ledger_sequence());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  switch (from.operation_oneof_case()) {
    case kOpTrustSet: {
      _internal_mutable_op_trust_set()->::TW::Ripple::Proto::OperationTrustSet::MergeFrom(from._internal_op_trust_set());
      break;
    }
    case kOpPayment: {
      _internal_mutable_op_payment()->::TW::Ripple::Proto::OperationPayment::MergeFrom(from._internal_op_payment());
      break;
    }
    case kOpNftokenBurn: {
      _internal_mutable_op_nftoken_burn()->::TW::Ripple::Proto::OperationNFTokenBurn::MergeFrom(from._internal_op_nftoken_burn());
      break;
    }
    case kOpNftokenCreateOffer: {
      _internal_mutable_op_nftoken_create_offer()->::TW::Ripple::Proto::OperationNFTokenCreateOffer::MergeFrom(from._internal_op_nftoken_create_offer());
      break;
    }
    case kOpNftokenAcceptOffer: {
      _internal_mutable_op_nftoken_accept_offer()->::TW::Ripple::Proto::OperationNFTokenAcceptOffer::MergeFrom(from._internal_op_nftoken_accept_offer());
      break;
    }
    case kOpNftokenCancelOffer: {
      _internal_mutable_op_nftoken_cancel_offer()->::TW::Ripple::Proto::OperationNFTokenCancelOffer::MergeFrom(from._internal_op_nftoken_cancel_offer());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, flags_)
      + sizeof(SigningInput::flags_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, fee_)>(
          reinterpret_cast<char*>(&fee_),
          reinterpret_cast<char*>(&other->fee_));
  swap(operation_oneof_, other->operation_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[7]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ripple.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Ripple.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Ripple.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ripple.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ripple.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ripple.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ripple.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ripple.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ripple.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ripple.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ripple.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ripple_2eproto_getter, &descriptor_table_Ripple_2eproto_once,
      file_level_metadata_Ripple_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Ripple
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::CurrencyAmount* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::CurrencyAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::CurrencyAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::OperationTrustSet* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::OperationTrustSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::OperationTrustSet >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::OperationPayment* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::OperationPayment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::OperationPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::OperationNFTokenBurn* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::OperationNFTokenBurn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::OperationNFTokenBurn >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::OperationNFTokenCreateOffer* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::OperationNFTokenCreateOffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::OperationNFTokenCreateOffer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::OperationNFTokenAcceptOffer* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::OperationNFTokenAcceptOffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::OperationNFTokenAcceptOffer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::OperationNFTokenCancelOffer* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::OperationNFTokenCancelOffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::OperationNFTokenCancelOffer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ripple::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Ripple::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ripple::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
