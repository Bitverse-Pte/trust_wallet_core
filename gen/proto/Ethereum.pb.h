// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ethereum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Ethereum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Ethereum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Ethereum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Ethereum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ethereum_2eproto;
namespace TW {
namespace Ethereum {
namespace Proto {
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transaction_Batch;
struct Transaction_BatchDefaultTypeInternal;
extern Transaction_BatchDefaultTypeInternal _Transaction_Batch_default_instance_;
class Transaction_Batch_BatchedCall;
struct Transaction_Batch_BatchedCallDefaultTypeInternal;
extern Transaction_Batch_BatchedCallDefaultTypeInternal _Transaction_Batch_BatchedCall_default_instance_;
class Transaction_ContractGeneric;
struct Transaction_ContractGenericDefaultTypeInternal;
extern Transaction_ContractGenericDefaultTypeInternal _Transaction_ContractGeneric_default_instance_;
class Transaction_ERC1155Transfer;
struct Transaction_ERC1155TransferDefaultTypeInternal;
extern Transaction_ERC1155TransferDefaultTypeInternal _Transaction_ERC1155Transfer_default_instance_;
class Transaction_ERC20Approve;
struct Transaction_ERC20ApproveDefaultTypeInternal;
extern Transaction_ERC20ApproveDefaultTypeInternal _Transaction_ERC20Approve_default_instance_;
class Transaction_ERC20Transfer;
struct Transaction_ERC20TransferDefaultTypeInternal;
extern Transaction_ERC20TransferDefaultTypeInternal _Transaction_ERC20Transfer_default_instance_;
class Transaction_ERC721Transfer;
struct Transaction_ERC721TransferDefaultTypeInternal;
extern Transaction_ERC721TransferDefaultTypeInternal _Transaction_ERC721Transfer_default_instance_;
class Transaction_Transfer;
struct Transaction_TransferDefaultTypeInternal;
extern Transaction_TransferDefaultTypeInternal _Transaction_Transfer_default_instance_;
class UserOperation;
struct UserOperationDefaultTypeInternal;
extern UserOperationDefaultTypeInternal _UserOperation_default_instance_;
}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Ethereum::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::SigningInput>(Arena*);
template<> ::TW::Ethereum::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::SigningOutput>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_Batch* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_Batch>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_Batch_BatchedCall>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ContractGeneric* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ContractGeneric>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC1155Transfer>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC20Approve* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC20Approve>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC20Transfer>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_ERC721Transfer>(Arena*);
template<> ::TW::Ethereum::Proto::Transaction_Transfer* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::Transaction_Transfer>(Arena*);
template<> ::TW::Ethereum::Proto::UserOperation* Arena::CreateMaybeMessage<::TW::Ethereum::Proto::UserOperation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Ethereum {
namespace Proto {

enum TransactionMode : int {
  Legacy = 0,
  Enveloped = 1,
  UserOp = 2,
  TransactionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransactionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransactionMode_IsValid(int value);
constexpr TransactionMode TransactionMode_MIN = Legacy;
constexpr TransactionMode TransactionMode_MAX = UserOp;
constexpr int TransactionMode_ARRAYSIZE = TransactionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionMode_descriptor();
template<typename T>
inline const std::string& TransactionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionMode_descriptor(), enum_t_value);
}
inline bool TransactionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionMode>(
    TransactionMode_descriptor(), name, value);
}
// ===================================================================

class Transaction_Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.Transfer) */ {
 public:
  inline Transaction_Transfer() : Transaction_Transfer(nullptr) {}
  ~Transaction_Transfer() override;
  explicit constexpr Transaction_Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Transfer(const Transaction_Transfer& from);
  Transaction_Transfer(Transaction_Transfer&& from) noexcept
    : Transaction_Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_Transfer& operator=(const Transaction_Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Transfer& operator=(Transaction_Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_Transfer*>(
               &_Transaction_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction_Transfer& a, Transaction_Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.Transfer";
  }
  protected:
  explicit Transaction_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes amount = 1;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC20Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC20Transfer) */ {
 public:
  inline Transaction_ERC20Transfer() : Transaction_ERC20Transfer(nullptr) {}
  ~Transaction_ERC20Transfer() override;
  explicit constexpr Transaction_ERC20Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_ERC20Transfer(const Transaction_ERC20Transfer& from);
  Transaction_ERC20Transfer(Transaction_ERC20Transfer&& from) noexcept
    : Transaction_ERC20Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC20Transfer& operator=(const Transaction_ERC20Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC20Transfer& operator=(Transaction_ERC20Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_ERC20Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_ERC20Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC20Transfer*>(
               &_Transaction_ERC20Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction_ERC20Transfer& a, Transaction_ERC20Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC20Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC20Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_ERC20Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_ERC20Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_ERC20Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_ERC20Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC20Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC20Transfer";
  }
  protected:
  explicit Transaction_ERC20Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string to = 1;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC20Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC20Approve final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC20Approve) */ {
 public:
  inline Transaction_ERC20Approve() : Transaction_ERC20Approve(nullptr) {}
  ~Transaction_ERC20Approve() override;
  explicit constexpr Transaction_ERC20Approve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_ERC20Approve(const Transaction_ERC20Approve& from);
  Transaction_ERC20Approve(Transaction_ERC20Approve&& from) noexcept
    : Transaction_ERC20Approve() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC20Approve& operator=(const Transaction_ERC20Approve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC20Approve& operator=(Transaction_ERC20Approve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_ERC20Approve& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_ERC20Approve* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC20Approve*>(
               &_Transaction_ERC20Approve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction_ERC20Approve& a, Transaction_ERC20Approve& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC20Approve* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC20Approve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_ERC20Approve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_ERC20Approve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_ERC20Approve& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_ERC20Approve& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC20Approve* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC20Approve";
  }
  protected:
  explicit Transaction_ERC20Approve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpenderFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string spender = 1;
  void clear_spender();
  const std::string& spender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spender();
  PROTOBUF_NODISCARD std::string* release_spender();
  void set_allocated_spender(std::string* spender);
  private:
  const std::string& _internal_spender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spender(const std::string& value);
  std::string* _internal_mutable_spender();
  public:

  // bytes amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC20Approve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC721Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC721Transfer) */ {
 public:
  inline Transaction_ERC721Transfer() : Transaction_ERC721Transfer(nullptr) {}
  ~Transaction_ERC721Transfer() override;
  explicit constexpr Transaction_ERC721Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_ERC721Transfer(const Transaction_ERC721Transfer& from);
  Transaction_ERC721Transfer(Transaction_ERC721Transfer&& from) noexcept
    : Transaction_ERC721Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC721Transfer& operator=(const Transaction_ERC721Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC721Transfer& operator=(Transaction_ERC721Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_ERC721Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_ERC721Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC721Transfer*>(
               &_Transaction_ERC721Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transaction_ERC721Transfer& a, Transaction_ERC721Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC721Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC721Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_ERC721Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_ERC721Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_ERC721Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_ERC721Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC721Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC721Transfer";
  }
  protected:
  explicit Transaction_ERC721Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTokenIdFieldNumber = 3,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC721Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ERC1155Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ERC1155Transfer) */ {
 public:
  inline Transaction_ERC1155Transfer() : Transaction_ERC1155Transfer(nullptr) {}
  ~Transaction_ERC1155Transfer() override;
  explicit constexpr Transaction_ERC1155Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_ERC1155Transfer(const Transaction_ERC1155Transfer& from);
  Transaction_ERC1155Transfer(Transaction_ERC1155Transfer&& from) noexcept
    : Transaction_ERC1155Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_ERC1155Transfer& operator=(const Transaction_ERC1155Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ERC1155Transfer& operator=(Transaction_ERC1155Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_ERC1155Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_ERC1155Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_ERC1155Transfer*>(
               &_Transaction_ERC1155Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transaction_ERC1155Transfer& a, Transaction_ERC1155Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ERC1155Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ERC1155Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_ERC1155Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_ERC1155Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_ERC1155Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_ERC1155Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ERC1155Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ERC1155Transfer";
  }
  protected:
  explicit Transaction_ERC1155Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kValueFieldNumber = 4,
    kDataFieldNumber = 5,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_ContractGeneric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.ContractGeneric) */ {
 public:
  inline Transaction_ContractGeneric() : Transaction_ContractGeneric(nullptr) {}
  ~Transaction_ContractGeneric() override;
  explicit constexpr Transaction_ContractGeneric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_ContractGeneric(const Transaction_ContractGeneric& from);
  Transaction_ContractGeneric(Transaction_ContractGeneric&& from) noexcept
    : Transaction_ContractGeneric() {
    *this = ::std::move(from);
  }

  inline Transaction_ContractGeneric& operator=(const Transaction_ContractGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ContractGeneric& operator=(Transaction_ContractGeneric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_ContractGeneric& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_ContractGeneric* internal_default_instance() {
    return reinterpret_cast<const Transaction_ContractGeneric*>(
               &_Transaction_ContractGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Transaction_ContractGeneric& a, Transaction_ContractGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ContractGeneric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ContractGeneric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_ContractGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_ContractGeneric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_ContractGeneric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_ContractGeneric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ContractGeneric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.ContractGeneric";
  }
  protected:
  explicit Transaction_ContractGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes amount = 1;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.ContractGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Batch_BatchedCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.Batch.BatchedCall) */ {
 public:
  inline Transaction_Batch_BatchedCall() : Transaction_Batch_BatchedCall(nullptr) {}
  ~Transaction_Batch_BatchedCall() override;
  explicit constexpr Transaction_Batch_BatchedCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Batch_BatchedCall(const Transaction_Batch_BatchedCall& from);
  Transaction_Batch_BatchedCall(Transaction_Batch_BatchedCall&& from) noexcept
    : Transaction_Batch_BatchedCall() {
    *this = ::std::move(from);
  }

  inline Transaction_Batch_BatchedCall& operator=(const Transaction_Batch_BatchedCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Batch_BatchedCall& operator=(Transaction_Batch_BatchedCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_Batch_BatchedCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Batch_BatchedCall* internal_default_instance() {
    return reinterpret_cast<const Transaction_Batch_BatchedCall*>(
               &_Transaction_Batch_BatchedCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Transaction_Batch_BatchedCall& a, Transaction_Batch_BatchedCall& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Batch_BatchedCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Batch_BatchedCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_Batch_BatchedCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_Batch_BatchedCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_Batch_BatchedCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_Batch_BatchedCall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Batch_BatchedCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.Batch.BatchedCall";
  }
  protected:
  explicit Transaction_Batch_BatchedCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Batch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction.Batch) */ {
 public:
  inline Transaction_Batch() : Transaction_Batch(nullptr) {}
  ~Transaction_Batch() override;
  explicit constexpr Transaction_Batch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Batch(const Transaction_Batch& from);
  Transaction_Batch(Transaction_Batch&& from) noexcept
    : Transaction_Batch() {
    *this = ::std::move(from);
  }

  inline Transaction_Batch& operator=(const Transaction_Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Batch& operator=(Transaction_Batch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_Batch& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Batch* internal_default_instance() {
    return reinterpret_cast<const Transaction_Batch*>(
               &_Transaction_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Transaction_Batch& a, Transaction_Batch& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Batch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Batch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_Batch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_Batch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_Batch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_Batch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Batch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction.Batch";
  }
  protected:
  explicit Transaction_Batch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_Batch_BatchedCall BatchedCall;

  // accessors -------------------------------------------------------

  enum : int {
    kCallsFieldNumber = 1,
  };
  // repeated .TW.Ethereum.Proto.Transaction.Batch.BatchedCall calls = 1;
  int calls_size() const;
  private:
  int _internal_calls_size() const;
  public:
  void clear_calls();
  ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* mutable_calls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall >*
      mutable_calls();
  private:
  const ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall& _internal_calls(int index) const;
  ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* _internal_add_calls();
  public:
  const ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall& calls(int index) const;
  ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* add_calls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall >&
      calls() const;

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction.Batch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall > calls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  enum TransactionOneofCase {
    kTransfer = 1,
    kErc20Transfer = 2,
    kErc20Approve = 3,
    kErc721Transfer = 4,
    kErc1155Transfer = 5,
    kContractGeneric = 6,
    kBatch = 7,
    TRANSACTION_ONEOF_NOT_SET = 0,
  };

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_Transfer Transfer;
  typedef Transaction_ERC20Transfer ERC20Transfer;
  typedef Transaction_ERC20Approve ERC20Approve;
  typedef Transaction_ERC721Transfer ERC721Transfer;
  typedef Transaction_ERC1155Transfer ERC1155Transfer;
  typedef Transaction_ContractGeneric ContractGeneric;
  typedef Transaction_Batch Batch;

  // accessors -------------------------------------------------------

  enum : int {
    kTransferFieldNumber = 1,
    kErc20TransferFieldNumber = 2,
    kErc20ApproveFieldNumber = 3,
    kErc721TransferFieldNumber = 4,
    kErc1155TransferFieldNumber = 5,
    kContractGenericFieldNumber = 6,
    kBatchFieldNumber = 7,
  };
  // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Ethereum::Proto::Transaction_Transfer& transfer() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction_Transfer* release_transfer();
  ::TW::Ethereum::Proto::Transaction_Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::Ethereum::Proto::Transaction_Transfer* transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_Transfer& _internal_transfer() const;
  ::TW::Ethereum::Proto::Transaction_Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Ethereum::Proto::Transaction_Transfer* transfer);
  ::TW::Ethereum::Proto::Transaction_Transfer* unsafe_arena_release_transfer();

  // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
  bool has_erc20_transfer() const;
  private:
  bool _internal_has_erc20_transfer() const;
  public:
  void clear_erc20_transfer();
  const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& erc20_transfer() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction_ERC20Transfer* release_erc20_transfer();
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* mutable_erc20_transfer();
  void set_allocated_erc20_transfer(::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& _internal_erc20_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* _internal_mutable_erc20_transfer();
  public:
  void unsafe_arena_set_allocated_erc20_transfer(
      ::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer);
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* unsafe_arena_release_erc20_transfer();

  // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
  bool has_erc20_approve() const;
  private:
  bool _internal_has_erc20_approve() const;
  public:
  void clear_erc20_approve();
  const ::TW::Ethereum::Proto::Transaction_ERC20Approve& erc20_approve() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction_ERC20Approve* release_erc20_approve();
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* mutable_erc20_approve();
  void set_allocated_erc20_approve(::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC20Approve& _internal_erc20_approve() const;
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* _internal_mutable_erc20_approve();
  public:
  void unsafe_arena_set_allocated_erc20_approve(
      ::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve);
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* unsafe_arena_release_erc20_approve();

  // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
  bool has_erc721_transfer() const;
  private:
  bool _internal_has_erc721_transfer() const;
  public:
  void clear_erc721_transfer();
  const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& erc721_transfer() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction_ERC721Transfer* release_erc721_transfer();
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* mutable_erc721_transfer();
  void set_allocated_erc721_transfer(::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& _internal_erc721_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* _internal_mutable_erc721_transfer();
  public:
  void unsafe_arena_set_allocated_erc721_transfer(
      ::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer);
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* unsafe_arena_release_erc721_transfer();

  // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
  bool has_erc1155_transfer() const;
  private:
  bool _internal_has_erc1155_transfer() const;
  public:
  void clear_erc1155_transfer();
  const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& erc1155_transfer() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* release_erc1155_transfer();
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* mutable_erc1155_transfer();
  void set_allocated_erc1155_transfer(::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer);
  private:
  const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& _internal_erc1155_transfer() const;
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* _internal_mutable_erc1155_transfer();
  public:
  void unsafe_arena_set_allocated_erc1155_transfer(
      ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer);
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* unsafe_arena_release_erc1155_transfer();

  // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
  bool has_contract_generic() const;
  private:
  bool _internal_has_contract_generic() const;
  public:
  void clear_contract_generic();
  const ::TW::Ethereum::Proto::Transaction_ContractGeneric& contract_generic() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction_ContractGeneric* release_contract_generic();
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* mutable_contract_generic();
  void set_allocated_contract_generic(::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic);
  private:
  const ::TW::Ethereum::Proto::Transaction_ContractGeneric& _internal_contract_generic() const;
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* _internal_mutable_contract_generic();
  public:
  void unsafe_arena_set_allocated_contract_generic(
      ::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic);
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* unsafe_arena_release_contract_generic();

  // .TW.Ethereum.Proto.Transaction.Batch batch = 7;
  bool has_batch() const;
  private:
  bool _internal_has_batch() const;
  public:
  void clear_batch();
  const ::TW::Ethereum::Proto::Transaction_Batch& batch() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction_Batch* release_batch();
  ::TW::Ethereum::Proto::Transaction_Batch* mutable_batch();
  void set_allocated_batch(::TW::Ethereum::Proto::Transaction_Batch* batch);
  private:
  const ::TW::Ethereum::Proto::Transaction_Batch& _internal_batch() const;
  ::TW::Ethereum::Proto::Transaction_Batch* _internal_mutable_batch();
  public:
  void unsafe_arena_set_allocated_batch(
      ::TW::Ethereum::Proto::Transaction_Batch* batch);
  ::TW::Ethereum::Proto::Transaction_Batch* unsafe_arena_release_batch();

  void clear_transaction_oneof();
  TransactionOneofCase transaction_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.Transaction)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_erc20_transfer();
  void set_has_erc20_approve();
  void set_has_erc721_transfer();
  void set_has_erc1155_transfer();
  void set_has_contract_generic();
  void set_has_batch();

  inline bool has_transaction_oneof() const;
  inline void clear_has_transaction_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TransactionOneofUnion {
    constexpr TransactionOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Ethereum::Proto::Transaction_Transfer* transfer_;
    ::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer_;
    ::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve_;
    ::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer_;
    ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer_;
    ::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic_;
    ::TW::Ethereum::Proto::Transaction_Batch* batch_;
  } transaction_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class UserOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.UserOperation) */ {
 public:
  inline UserOperation() : UserOperation(nullptr) {}
  ~UserOperation() override;
  explicit constexpr UserOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserOperation(const UserOperation& from);
  UserOperation(UserOperation&& from) noexcept
    : UserOperation() {
    *this = ::std::move(from);
  }

  inline UserOperation& operator=(const UserOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOperation& operator=(UserOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOperation* internal_default_instance() {
    return reinterpret_cast<const UserOperation*>(
               &_UserOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserOperation& a, UserOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserOperation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.UserOperation";
  }
  protected:
  explicit UserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryPointFieldNumber = 1,
    kInitCodeFieldNumber = 2,
    kSenderFieldNumber = 3,
    kPreVerificationGasFieldNumber = 4,
    kVerificationGasLimitFieldNumber = 5,
    kPaymasterAndDataFieldNumber = 6,
  };
  // string entry_point = 1;
  void clear_entry_point();
  const std::string& entry_point() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entry_point(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entry_point();
  PROTOBUF_NODISCARD std::string* release_entry_point();
  void set_allocated_entry_point(std::string* entry_point);
  private:
  const std::string& _internal_entry_point() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry_point(const std::string& value);
  std::string* _internal_mutable_entry_point();
  public:

  // bytes init_code = 2;
  void clear_init_code();
  const std::string& init_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_init_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_init_code();
  PROTOBUF_NODISCARD std::string* release_init_code();
  void set_allocated_init_code(std::string* init_code);
  private:
  const std::string& _internal_init_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_init_code(const std::string& value);
  std::string* _internal_mutable_init_code();
  public:

  // string sender = 3;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // bytes pre_verification_gas = 4;
  void clear_pre_verification_gas();
  const std::string& pre_verification_gas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pre_verification_gas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pre_verification_gas();
  PROTOBUF_NODISCARD std::string* release_pre_verification_gas();
  void set_allocated_pre_verification_gas(std::string* pre_verification_gas);
  private:
  const std::string& _internal_pre_verification_gas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pre_verification_gas(const std::string& value);
  std::string* _internal_mutable_pre_verification_gas();
  public:

  // bytes verification_gas_limit = 5;
  void clear_verification_gas_limit();
  const std::string& verification_gas_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verification_gas_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verification_gas_limit();
  PROTOBUF_NODISCARD std::string* release_verification_gas_limit();
  void set_allocated_verification_gas_limit(std::string* verification_gas_limit);
  private:
  const std::string& _internal_verification_gas_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_gas_limit(const std::string& value);
  std::string* _internal_mutable_verification_gas_limit();
  public:

  // bytes paymaster_and_data = 6;
  void clear_paymaster_and_data();
  const std::string& paymaster_and_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paymaster_and_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paymaster_and_data();
  PROTOBUF_NODISCARD std::string* release_paymaster_and_data();
  void set_allocated_paymaster_and_data(std::string* paymaster_and_data);
  private:
  const std::string& _internal_paymaster_and_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paymaster_and_data(const std::string& value);
  std::string* _internal_mutable_paymaster_and_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.UserOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr init_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_verification_gas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_gas_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymaster_and_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
    kNonceFieldNumber = 2,
    kGasPriceFieldNumber = 4,
    kGasLimitFieldNumber = 5,
    kMaxInclusionFeePerGasFieldNumber = 6,
    kMaxFeePerGasFieldNumber = 7,
    kToAddressFieldNumber = 8,
    kPrivateKeyFieldNumber = 9,
    kTransactionFieldNumber = 10,
    kUserOperationFieldNumber = 11,
    kTxModeFieldNumber = 3,
  };
  // bytes chain_id = 1;
  void clear_chain_id();
  const std::string& chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // bytes nonce = 2;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes gas_price = 4;
  void clear_gas_price();
  const std::string& gas_price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_price();
  PROTOBUF_NODISCARD std::string* release_gas_price();
  void set_allocated_gas_price(std::string* gas_price);
  private:
  const std::string& _internal_gas_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_price(const std::string& value);
  std::string* _internal_mutable_gas_price();
  public:

  // bytes gas_limit = 5;
  void clear_gas_limit();
  const std::string& gas_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_limit();
  PROTOBUF_NODISCARD std::string* release_gas_limit();
  void set_allocated_gas_limit(std::string* gas_limit);
  private:
  const std::string& _internal_gas_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_limit(const std::string& value);
  std::string* _internal_mutable_gas_limit();
  public:

  // bytes max_inclusion_fee_per_gas = 6;
  void clear_max_inclusion_fee_per_gas();
  const std::string& max_inclusion_fee_per_gas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_inclusion_fee_per_gas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_inclusion_fee_per_gas();
  PROTOBUF_NODISCARD std::string* release_max_inclusion_fee_per_gas();
  void set_allocated_max_inclusion_fee_per_gas(std::string* max_inclusion_fee_per_gas);
  private:
  const std::string& _internal_max_inclusion_fee_per_gas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_inclusion_fee_per_gas(const std::string& value);
  std::string* _internal_mutable_max_inclusion_fee_per_gas();
  public:

  // bytes max_fee_per_gas = 7;
  void clear_max_fee_per_gas();
  const std::string& max_fee_per_gas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_fee_per_gas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_fee_per_gas();
  PROTOBUF_NODISCARD std::string* release_max_fee_per_gas();
  void set_allocated_max_fee_per_gas(std::string* max_fee_per_gas);
  private:
  const std::string& _internal_max_fee_per_gas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_fee_per_gas(const std::string& value);
  std::string* _internal_mutable_max_fee_per_gas();
  public:

  // string to_address = 8;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes private_key = 9;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Ethereum.Proto.Transaction transaction = 10;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::Ethereum::Proto::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::Transaction* release_transaction();
  ::TW::Ethereum::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::Ethereum::Proto::Transaction* transaction);
  private:
  const ::TW::Ethereum::Proto::Transaction& _internal_transaction() const;
  ::TW::Ethereum::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::Ethereum::Proto::Transaction* transaction);
  ::TW::Ethereum::Proto::Transaction* unsafe_arena_release_transaction();

  // .TW.Ethereum.Proto.UserOperation user_operation = 11;
  bool has_user_operation() const;
  private:
  bool _internal_has_user_operation() const;
  public:
  void clear_user_operation();
  const ::TW::Ethereum::Proto::UserOperation& user_operation() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::UserOperation* release_user_operation();
  ::TW::Ethereum::Proto::UserOperation* mutable_user_operation();
  void set_allocated_user_operation(::TW::Ethereum::Proto::UserOperation* user_operation);
  private:
  const ::TW::Ethereum::Proto::UserOperation& _internal_user_operation() const;
  ::TW::Ethereum::Proto::UserOperation* _internal_mutable_user_operation();
  public:
  void unsafe_arena_set_allocated_user_operation(
      ::TW::Ethereum::Proto::UserOperation* user_operation);
  ::TW::Ethereum::Proto::UserOperation* unsafe_arena_release_user_operation();

  // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
  void clear_tx_mode();
  ::TW::Ethereum::Proto::TransactionMode tx_mode() const;
  void set_tx_mode(::TW::Ethereum::Proto::TransactionMode value);
  private:
  ::TW::Ethereum::Proto::TransactionMode _internal_tx_mode() const;
  void _internal_set_tx_mode(::TW::Ethereum::Proto::TransactionMode value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_inclusion_fee_per_gas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_fee_per_gas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Ethereum::Proto::Transaction* transaction_;
  ::TW::Ethereum::Proto::UserOperation* user_operation_;
  int tx_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Ethereum.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Ethereum.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kVFieldNumber = 2,
    kRFieldNumber = 3,
    kSFieldNumber = 4,
    kDataFieldNumber = 5,
    kErrorMessageFieldNumber = 7,
    kPreHashFieldNumber = 8,
    kErrorFieldNumber = 6,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // bytes v = 2;
  void clear_v();
  const std::string& v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v();
  PROTOBUF_NODISCARD std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // bytes r = 3;
  void clear_r();
  const std::string& r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_r();
  PROTOBUF_NODISCARD std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes s = 4;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string error_message = 7;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bytes pre_hash = 8;
  void clear_pre_hash();
  const std::string& pre_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pre_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pre_hash();
  PROTOBUF_NODISCARD std::string* release_pre_hash();
  void set_allocated_pre_hash(std::string* pre_hash);
  private:
  const std::string& _internal_pre_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pre_hash(const std::string& value);
  std::string* _internal_mutable_pre_hash();
  public:

  // .TW.Common.Proto.SigningError error = 6;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Ethereum.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_hash_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ethereum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction_Transfer

// bytes amount = 1;
inline void Transaction_Transfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Transfer.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Transfer::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.Transfer.amount)
}
inline std::string* Transaction_Transfer::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Transfer.amount)
  return _s;
}
inline const std::string& Transaction_Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.Transfer.amount)
}

// bytes data = 2;
inline void Transaction_Transfer::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction_Transfer::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Transfer.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Transfer::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.Transfer.data)
}
inline std::string* Transaction_Transfer::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Transfer.data)
  return _s;
}
inline const std::string& Transaction_Transfer::_internal_data() const {
  return data_.Get();
}
inline void Transaction_Transfer::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Transfer::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Transfer::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.Transfer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Transfer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.Transfer.data)
}

// -------------------------------------------------------------------

// Transaction_ERC20Transfer

// string to = 1;
inline void Transaction_ERC20Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC20Transfer::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
}
inline std::string* Transaction_ERC20Transfer::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
  return _s;
}
inline const std::string& Transaction_ERC20Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transaction_ERC20Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC20Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Transfer.to)
}

// bytes amount = 2;
inline void Transaction_ERC20Transfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC20Transfer::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
}
inline std::string* Transaction_ERC20Transfer::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
  return _s;
}
inline const std::string& Transaction_ERC20Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_ERC20Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC20Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Transfer.amount)
}

// -------------------------------------------------------------------

// Transaction_ERC20Approve

// string spender = 1;
inline void Transaction_ERC20Approve::clear_spender() {
  spender_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Approve::spender() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
  return _internal_spender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC20Approve::set_spender(ArgT0&& arg0, ArgT... args) {
 
 spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
}
inline std::string* Transaction_ERC20Approve::mutable_spender() {
  std::string* _s = _internal_mutable_spender();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
  return _s;
}
inline const std::string& Transaction_ERC20Approve::_internal_spender() const {
  return spender_.Get();
}
inline void Transaction_ERC20Approve::_internal_set_spender(const std::string& value) {
  
  spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Approve::_internal_mutable_spender() {
  
  return spender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Approve::release_spender() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
  return spender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC20Approve::set_allocated_spender(std::string* spender) {
  if (spender != nullptr) {
    
  } else {
    
  }
  spender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spender,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spender_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Approve.spender)
}

// bytes amount = 2;
inline void Transaction_ERC20Approve::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_ERC20Approve::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC20Approve::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
}
inline std::string* Transaction_ERC20Approve::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
  return _s;
}
inline const std::string& Transaction_ERC20Approve::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_ERC20Approve::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Approve::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC20Approve::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC20Approve::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC20Approve.amount)
}

// -------------------------------------------------------------------

// Transaction_ERC721Transfer

// string from = 1;
inline void Transaction_ERC721Transfer::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Transaction_ERC721Transfer::from() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC721Transfer::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
}
inline std::string* Transaction_ERC721Transfer::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
  return _s;
}
inline const std::string& Transaction_ERC721Transfer::_internal_from() const {
  return from_.Get();
}
inline void Transaction_ERC721Transfer::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC721Transfer::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC721Transfer::release_from() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC721Transfer::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC721Transfer.from)
}

// string to = 2;
inline void Transaction_ERC721Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transaction_ERC721Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC721Transfer::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
}
inline std::string* Transaction_ERC721Transfer::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
  return _s;
}
inline const std::string& Transaction_ERC721Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transaction_ERC721Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC721Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC721Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC721Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC721Transfer.to)
}

// bytes token_id = 3;
inline void Transaction_ERC721Transfer::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& Transaction_ERC721Transfer::token_id() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC721Transfer::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
}
inline std::string* Transaction_ERC721Transfer::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
  return _s;
}
inline const std::string& Transaction_ERC721Transfer::_internal_token_id() const {
  return token_id_.Get();
}
inline void Transaction_ERC721Transfer::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC721Transfer::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC721Transfer::release_token_id() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC721Transfer::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC721Transfer.token_id)
}

// -------------------------------------------------------------------

// Transaction_ERC1155Transfer

// string from = 1;
inline void Transaction_ERC1155Transfer::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::from() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC1155Transfer::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
}
inline std::string* Transaction_ERC1155Transfer::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
  return _s;
}
inline const std::string& Transaction_ERC1155Transfer::_internal_from() const {
  return from_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::release_from() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC1155Transfer::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.from)
}

// string to = 2;
inline void Transaction_ERC1155Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC1155Transfer::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
}
inline std::string* Transaction_ERC1155Transfer::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
  return _s;
}
inline const std::string& Transaction_ERC1155Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC1155Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.to)
}

// bytes token_id = 3;
inline void Transaction_ERC1155Transfer::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::token_id() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC1155Transfer::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
}
inline std::string* Transaction_ERC1155Transfer::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
  return _s;
}
inline const std::string& Transaction_ERC1155Transfer::_internal_token_id() const {
  return token_id_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::release_token_id() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC1155Transfer::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.token_id)
}

// bytes value = 4;
inline void Transaction_ERC1155Transfer::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::value() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC1155Transfer::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
}
inline std::string* Transaction_ERC1155Transfer::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
  return _s;
}
inline const std::string& Transaction_ERC1155Transfer::_internal_value() const {
  return value_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::release_value() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC1155Transfer::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.value)
}

// bytes data = 5;
inline void Transaction_ERC1155Transfer::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction_ERC1155Transfer::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ERC1155Transfer::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
}
inline std::string* Transaction_ERC1155Transfer::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
  return _s;
}
inline const std::string& Transaction_ERC1155Transfer::_internal_data() const {
  return data_.Get();
}
inline void Transaction_ERC1155Transfer::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ERC1155Transfer::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ERC1155Transfer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ERC1155Transfer.data)
}

// -------------------------------------------------------------------

// Transaction_ContractGeneric

// bytes amount = 1;
inline void Transaction_ContractGeneric::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_ContractGeneric::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ContractGeneric::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
}
inline std::string* Transaction_ContractGeneric::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
  return _s;
}
inline const std::string& Transaction_ContractGeneric::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_ContractGeneric::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ContractGeneric::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ContractGeneric::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ContractGeneric::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ContractGeneric.amount)
}

// bytes data = 2;
inline void Transaction_ContractGeneric::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction_ContractGeneric::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ContractGeneric::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
}
inline std::string* Transaction_ContractGeneric::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
  return _s;
}
inline const std::string& Transaction_ContractGeneric::_internal_data() const {
  return data_.Get();
}
inline void Transaction_ContractGeneric::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ContractGeneric::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ContractGeneric::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ContractGeneric::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.ContractGeneric.data)
}

// -------------------------------------------------------------------

// Transaction_Batch_BatchedCall

// string address = 1;
inline void Transaction_Batch_BatchedCall::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Transaction_Batch_BatchedCall::address() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Batch_BatchedCall::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.address)
}
inline std::string* Transaction_Batch_BatchedCall::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.address)
  return _s;
}
inline const std::string& Transaction_Batch_BatchedCall::_internal_address() const {
  return address_.Get();
}
inline void Transaction_Batch_BatchedCall::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Batch_BatchedCall::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Batch_BatchedCall::release_address() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Batch_BatchedCall::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.address)
}

// bytes amount = 2;
inline void Transaction_Batch_BatchedCall::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_Batch_BatchedCall::amount() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Batch_BatchedCall::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.amount)
}
inline std::string* Transaction_Batch_BatchedCall::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.amount)
  return _s;
}
inline const std::string& Transaction_Batch_BatchedCall::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_Batch_BatchedCall::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Batch_BatchedCall::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Batch_BatchedCall::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Batch_BatchedCall::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.amount)
}

// bytes payload = 3;
inline void Transaction_Batch_BatchedCall::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Transaction_Batch_BatchedCall::payload() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Batch_BatchedCall::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.payload)
}
inline std::string* Transaction_Batch_BatchedCall::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.payload)
  return _s;
}
inline const std::string& Transaction_Batch_BatchedCall::_internal_payload() const {
  return payload_.Get();
}
inline void Transaction_Batch_BatchedCall::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Batch_BatchedCall::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Batch_BatchedCall::release_payload() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Batch_BatchedCall::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.Batch.BatchedCall.payload)
}

// -------------------------------------------------------------------

// Transaction_Batch

// repeated .TW.Ethereum.Proto.Transaction.Batch.BatchedCall calls = 1;
inline int Transaction_Batch::_internal_calls_size() const {
  return calls_.size();
}
inline int Transaction_Batch::calls_size() const {
  return _internal_calls_size();
}
inline void Transaction_Batch::clear_calls() {
  calls_.Clear();
}
inline ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* Transaction_Batch::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.Batch.calls)
  return calls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall >*
Transaction_Batch::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:TW.Ethereum.Proto.Transaction.Batch.calls)
  return &calls_;
}
inline const ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall& Transaction_Batch::_internal_calls(int index) const {
  return calls_.Get(index);
}
inline const ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall& Transaction_Batch::calls(int index) const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.Batch.calls)
  return _internal_calls(index);
}
inline ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* Transaction_Batch::_internal_add_calls() {
  return calls_.Add();
}
inline ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* Transaction_Batch::add_calls() {
  ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* _add = _internal_add_calls();
  // @@protoc_insertion_point(field_add:TW.Ethereum.Proto.Transaction.Batch.calls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall >&
Transaction_Batch::calls() const {
  // @@protoc_insertion_point(field_list:TW.Ethereum.Proto.Transaction.Batch.calls)
  return calls_;
}

// -------------------------------------------------------------------

// Transaction

// .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
inline bool Transaction::_internal_has_transfer() const {
  return transaction_oneof_case() == kTransfer;
}
inline bool Transaction::has_transfer() const {
  return _internal_has_transfer();
}
inline void Transaction::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void Transaction::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.transfer)
  if (_internal_has_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_Transfer* temp = transaction_oneof_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_Transfer& Transaction::_internal_transfer() const {
  return _internal_has_transfer()
      ? *transaction_oneof_.transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_Transfer&>(::TW::Ethereum::Proto::_Transaction_Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_Transfer& Transaction::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.transfer)
  return _internal_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.transfer)
  if (_internal_has_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_Transfer* temp = transaction_oneof_.transfer_;
    transaction_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_transfer(::TW::Ethereum::Proto::Transaction_Transfer* transfer) {
  clear_transaction_oneof();
  if (transfer) {
    set_has_transfer();
    transaction_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.transfer)
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_transaction_oneof();
    set_has_transfer();
    transaction_oneof_.transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_Transfer >(GetArenaForAllocation());
  }
  return transaction_oneof_.transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_Transfer* Transaction::mutable_transfer() {
  ::TW::Ethereum::Proto::Transaction_Transfer* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.transfer)
  return _msg;
}

// .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
inline bool Transaction::_internal_has_erc20_transfer() const {
  return transaction_oneof_case() == kErc20Transfer;
}
inline bool Transaction::has_erc20_transfer() const {
  return _internal_has_erc20_transfer();
}
inline void Transaction::set_has_erc20_transfer() {
  _oneof_case_[0] = kErc20Transfer;
}
inline void Transaction::clear_erc20_transfer() {
  if (_internal_has_erc20_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.erc20_transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::release_erc20_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc20_transfer)
  if (_internal_has_erc20_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC20Transfer* temp = transaction_oneof_.erc20_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc20_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& Transaction::_internal_erc20_transfer() const {
  return _internal_has_erc20_transfer()
      ? *transaction_oneof_.erc20_transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC20Transfer&>(::TW::Ethereum::Proto::_Transaction_ERC20Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& Transaction::erc20_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc20_transfer)
  return _internal_erc20_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::unsafe_arena_release_erc20_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc20_transfer)
  if (_internal_has_erc20_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC20Transfer* temp = transaction_oneof_.erc20_transfer_;
    transaction_oneof_.erc20_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc20_transfer(::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer) {
  clear_transaction_oneof();
  if (erc20_transfer) {
    set_has_erc20_transfer();
    transaction_oneof_.erc20_transfer_ = erc20_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc20_transfer)
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::_internal_mutable_erc20_transfer() {
  if (!_internal_has_erc20_transfer()) {
    clear_transaction_oneof();
    set_has_erc20_transfer();
    transaction_oneof_.erc20_transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Transfer >(GetArenaForAllocation());
  }
  return transaction_oneof_.erc20_transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Transaction::mutable_erc20_transfer() {
  ::TW::Ethereum::Proto::Transaction_ERC20Transfer* _msg = _internal_mutable_erc20_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc20_transfer)
  return _msg;
}

// .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
inline bool Transaction::_internal_has_erc20_approve() const {
  return transaction_oneof_case() == kErc20Approve;
}
inline bool Transaction::has_erc20_approve() const {
  return _internal_has_erc20_approve();
}
inline void Transaction::set_has_erc20_approve() {
  _oneof_case_[0] = kErc20Approve;
}
inline void Transaction::clear_erc20_approve() {
  if (_internal_has_erc20_approve()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.erc20_approve_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::release_erc20_approve() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc20_approve)
  if (_internal_has_erc20_approve()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC20Approve* temp = transaction_oneof_.erc20_approve_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc20_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Approve& Transaction::_internal_erc20_approve() const {
  return _internal_has_erc20_approve()
      ? *transaction_oneof_.erc20_approve_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC20Approve&>(::TW::Ethereum::Proto::_Transaction_ERC20Approve_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC20Approve& Transaction::erc20_approve() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc20_approve)
  return _internal_erc20_approve();
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::unsafe_arena_release_erc20_approve() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc20_approve)
  if (_internal_has_erc20_approve()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC20Approve* temp = transaction_oneof_.erc20_approve_;
    transaction_oneof_.erc20_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc20_approve(::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve) {
  clear_transaction_oneof();
  if (erc20_approve) {
    set_has_erc20_approve();
    transaction_oneof_.erc20_approve_ = erc20_approve;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc20_approve)
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::_internal_mutable_erc20_approve() {
  if (!_internal_has_erc20_approve()) {
    clear_transaction_oneof();
    set_has_erc20_approve();
    transaction_oneof_.erc20_approve_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Approve >(GetArenaForAllocation());
  }
  return transaction_oneof_.erc20_approve_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC20Approve* Transaction::mutable_erc20_approve() {
  ::TW::Ethereum::Proto::Transaction_ERC20Approve* _msg = _internal_mutable_erc20_approve();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc20_approve)
  return _msg;
}

// .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
inline bool Transaction::_internal_has_erc721_transfer() const {
  return transaction_oneof_case() == kErc721Transfer;
}
inline bool Transaction::has_erc721_transfer() const {
  return _internal_has_erc721_transfer();
}
inline void Transaction::set_has_erc721_transfer() {
  _oneof_case_[0] = kErc721Transfer;
}
inline void Transaction::clear_erc721_transfer() {
  if (_internal_has_erc721_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.erc721_transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::release_erc721_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc721_transfer)
  if (_internal_has_erc721_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC721Transfer* temp = transaction_oneof_.erc721_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc721_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& Transaction::_internal_erc721_transfer() const {
  return _internal_has_erc721_transfer()
      ? *transaction_oneof_.erc721_transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC721Transfer&>(::TW::Ethereum::Proto::_Transaction_ERC721Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& Transaction::erc721_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc721_transfer)
  return _internal_erc721_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::unsafe_arena_release_erc721_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc721_transfer)
  if (_internal_has_erc721_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC721Transfer* temp = transaction_oneof_.erc721_transfer_;
    transaction_oneof_.erc721_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc721_transfer(::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer) {
  clear_transaction_oneof();
  if (erc721_transfer) {
    set_has_erc721_transfer();
    transaction_oneof_.erc721_transfer_ = erc721_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc721_transfer)
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::_internal_mutable_erc721_transfer() {
  if (!_internal_has_erc721_transfer()) {
    clear_transaction_oneof();
    set_has_erc721_transfer();
    transaction_oneof_.erc721_transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC721Transfer >(GetArenaForAllocation());
  }
  return transaction_oneof_.erc721_transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Transaction::mutable_erc721_transfer() {
  ::TW::Ethereum::Proto::Transaction_ERC721Transfer* _msg = _internal_mutable_erc721_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc721_transfer)
  return _msg;
}

// .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
inline bool Transaction::_internal_has_erc1155_transfer() const {
  return transaction_oneof_case() == kErc1155Transfer;
}
inline bool Transaction::has_erc1155_transfer() const {
  return _internal_has_erc1155_transfer();
}
inline void Transaction::set_has_erc1155_transfer() {
  _oneof_case_[0] = kErc1155Transfer;
}
inline void Transaction::clear_erc1155_transfer() {
  if (_internal_has_erc1155_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.erc1155_transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::release_erc1155_transfer() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  if (_internal_has_erc1155_transfer()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* temp = transaction_oneof_.erc1155_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.erc1155_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& Transaction::_internal_erc1155_transfer() const {
  return _internal_has_erc1155_transfer()
      ? *transaction_oneof_.erc1155_transfer_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer&>(::TW::Ethereum::Proto::_Transaction_ERC1155Transfer_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& Transaction::erc1155_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  return _internal_erc1155_transfer();
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::unsafe_arena_release_erc1155_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  if (_internal_has_erc1155_transfer()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* temp = transaction_oneof_.erc1155_transfer_;
    transaction_oneof_.erc1155_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_erc1155_transfer(::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer) {
  clear_transaction_oneof();
  if (erc1155_transfer) {
    set_has_erc1155_transfer();
    transaction_oneof_.erc1155_transfer_ = erc1155_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.erc1155_transfer)
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::_internal_mutable_erc1155_transfer() {
  if (!_internal_has_erc1155_transfer()) {
    clear_transaction_oneof();
    set_has_erc1155_transfer();
    transaction_oneof_.erc1155_transfer_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer >(GetArenaForAllocation());
  }
  return transaction_oneof_.erc1155_transfer_;
}
inline ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Transaction::mutable_erc1155_transfer() {
  ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* _msg = _internal_mutable_erc1155_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.erc1155_transfer)
  return _msg;
}

// .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
inline bool Transaction::_internal_has_contract_generic() const {
  return transaction_oneof_case() == kContractGeneric;
}
inline bool Transaction::has_contract_generic() const {
  return _internal_has_contract_generic();
}
inline void Transaction::set_has_contract_generic() {
  _oneof_case_[0] = kContractGeneric;
}
inline void Transaction::clear_contract_generic() {
  if (_internal_has_contract_generic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.contract_generic_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::release_contract_generic() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.contract_generic)
  if (_internal_has_contract_generic()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_ContractGeneric* temp = transaction_oneof_.contract_generic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_ContractGeneric& Transaction::_internal_contract_generic() const {
  return _internal_has_contract_generic()
      ? *transaction_oneof_.contract_generic_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_ContractGeneric&>(::TW::Ethereum::Proto::_Transaction_ContractGeneric_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_ContractGeneric& Transaction::contract_generic() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.contract_generic)
  return _internal_contract_generic();
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::unsafe_arena_release_contract_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.contract_generic)
  if (_internal_has_contract_generic()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_ContractGeneric* temp = transaction_oneof_.contract_generic_;
    transaction_oneof_.contract_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_contract_generic(::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic) {
  clear_transaction_oneof();
  if (contract_generic) {
    set_has_contract_generic();
    transaction_oneof_.contract_generic_ = contract_generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.contract_generic)
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::_internal_mutable_contract_generic() {
  if (!_internal_has_contract_generic()) {
    clear_transaction_oneof();
    set_has_contract_generic();
    transaction_oneof_.contract_generic_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ContractGeneric >(GetArenaForAllocation());
  }
  return transaction_oneof_.contract_generic_;
}
inline ::TW::Ethereum::Proto::Transaction_ContractGeneric* Transaction::mutable_contract_generic() {
  ::TW::Ethereum::Proto::Transaction_ContractGeneric* _msg = _internal_mutable_contract_generic();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.contract_generic)
  return _msg;
}

// .TW.Ethereum.Proto.Transaction.Batch batch = 7;
inline bool Transaction::_internal_has_batch() const {
  return transaction_oneof_case() == kBatch;
}
inline bool Transaction::has_batch() const {
  return _internal_has_batch();
}
inline void Transaction::set_has_batch() {
  _oneof_case_[0] = kBatch;
}
inline void Transaction::clear_batch() {
  if (_internal_has_batch()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.batch_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::Ethereum::Proto::Transaction_Batch* Transaction::release_batch() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.Transaction.batch)
  if (_internal_has_batch()) {
    clear_has_transaction_oneof();
      ::TW::Ethereum::Proto::Transaction_Batch* temp = transaction_oneof_.batch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::Transaction_Batch& Transaction::_internal_batch() const {
  return _internal_has_batch()
      ? *transaction_oneof_.batch_
      : reinterpret_cast< ::TW::Ethereum::Proto::Transaction_Batch&>(::TW::Ethereum::Proto::_Transaction_Batch_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction_Batch& Transaction::batch() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.Transaction.batch)
  return _internal_batch();
}
inline ::TW::Ethereum::Proto::Transaction_Batch* Transaction::unsafe_arena_release_batch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Ethereum.Proto.Transaction.batch)
  if (_internal_has_batch()) {
    clear_has_transaction_oneof();
    ::TW::Ethereum::Proto::Transaction_Batch* temp = transaction_oneof_.batch_;
    transaction_oneof_.batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_batch(::TW::Ethereum::Proto::Transaction_Batch* batch) {
  clear_transaction_oneof();
  if (batch) {
    set_has_batch();
    transaction_oneof_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.Transaction.batch)
}
inline ::TW::Ethereum::Proto::Transaction_Batch* Transaction::_internal_mutable_batch() {
  if (!_internal_has_batch()) {
    clear_transaction_oneof();
    set_has_batch();
    transaction_oneof_.batch_ = CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_Batch >(GetArenaForAllocation());
  }
  return transaction_oneof_.batch_;
}
inline ::TW::Ethereum::Proto::Transaction_Batch* Transaction::mutable_batch() {
  ::TW::Ethereum::Proto::Transaction_Batch* _msg = _internal_mutable_batch();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.Transaction.batch)
  return _msg;
}

inline bool Transaction::has_transaction_oneof() const {
  return transaction_oneof_case() != TRANSACTION_ONEOF_NOT_SET;
}
inline void Transaction::clear_has_transaction_oneof() {
  _oneof_case_[0] = TRANSACTION_ONEOF_NOT_SET;
}
inline Transaction::TransactionOneofCase Transaction::transaction_oneof_case() const {
  return Transaction::TransactionOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserOperation

// string entry_point = 1;
inline void UserOperation::clear_entry_point() {
  entry_point_.ClearToEmpty();
}
inline const std::string& UserOperation::entry_point() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.UserOperation.entry_point)
  return _internal_entry_point();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserOperation::set_entry_point(ArgT0&& arg0, ArgT... args) {
 
 entry_point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.UserOperation.entry_point)
}
inline std::string* UserOperation::mutable_entry_point() {
  std::string* _s = _internal_mutable_entry_point();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.UserOperation.entry_point)
  return _s;
}
inline const std::string& UserOperation::_internal_entry_point() const {
  return entry_point_.Get();
}
inline void UserOperation::_internal_set_entry_point(const std::string& value) {
  
  entry_point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserOperation::_internal_mutable_entry_point() {
  
  return entry_point_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserOperation::release_entry_point() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.UserOperation.entry_point)
  return entry_point_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserOperation::set_allocated_entry_point(std::string* entry_point) {
  if (entry_point != nullptr) {
    
  } else {
    
  }
  entry_point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry_point,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entry_point_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    entry_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.UserOperation.entry_point)
}

// bytes init_code = 2;
inline void UserOperation::clear_init_code() {
  init_code_.ClearToEmpty();
}
inline const std::string& UserOperation::init_code() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.UserOperation.init_code)
  return _internal_init_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserOperation::set_init_code(ArgT0&& arg0, ArgT... args) {
 
 init_code_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.UserOperation.init_code)
}
inline std::string* UserOperation::mutable_init_code() {
  std::string* _s = _internal_mutable_init_code();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.UserOperation.init_code)
  return _s;
}
inline const std::string& UserOperation::_internal_init_code() const {
  return init_code_.Get();
}
inline void UserOperation::_internal_set_init_code(const std::string& value) {
  
  init_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserOperation::_internal_mutable_init_code() {
  
  return init_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserOperation::release_init_code() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.UserOperation.init_code)
  return init_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserOperation::set_allocated_init_code(std::string* init_code) {
  if (init_code != nullptr) {
    
  } else {
    
  }
  init_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), init_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (init_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    init_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.UserOperation.init_code)
}

// string sender = 3;
inline void UserOperation::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& UserOperation::sender() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.UserOperation.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserOperation::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.UserOperation.sender)
}
inline std::string* UserOperation::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.UserOperation.sender)
  return _s;
}
inline const std::string& UserOperation::_internal_sender() const {
  return sender_.Get();
}
inline void UserOperation::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserOperation::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserOperation::release_sender() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.UserOperation.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserOperation::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.UserOperation.sender)
}

// bytes pre_verification_gas = 4;
inline void UserOperation::clear_pre_verification_gas() {
  pre_verification_gas_.ClearToEmpty();
}
inline const std::string& UserOperation::pre_verification_gas() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.UserOperation.pre_verification_gas)
  return _internal_pre_verification_gas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserOperation::set_pre_verification_gas(ArgT0&& arg0, ArgT... args) {
 
 pre_verification_gas_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.UserOperation.pre_verification_gas)
}
inline std::string* UserOperation::mutable_pre_verification_gas() {
  std::string* _s = _internal_mutable_pre_verification_gas();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.UserOperation.pre_verification_gas)
  return _s;
}
inline const std::string& UserOperation::_internal_pre_verification_gas() const {
  return pre_verification_gas_.Get();
}
inline void UserOperation::_internal_set_pre_verification_gas(const std::string& value) {
  
  pre_verification_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserOperation::_internal_mutable_pre_verification_gas() {
  
  return pre_verification_gas_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserOperation::release_pre_verification_gas() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.UserOperation.pre_verification_gas)
  return pre_verification_gas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserOperation::set_allocated_pre_verification_gas(std::string* pre_verification_gas) {
  if (pre_verification_gas != nullptr) {
    
  } else {
    
  }
  pre_verification_gas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_verification_gas,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pre_verification_gas_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pre_verification_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.UserOperation.pre_verification_gas)
}

// bytes verification_gas_limit = 5;
inline void UserOperation::clear_verification_gas_limit() {
  verification_gas_limit_.ClearToEmpty();
}
inline const std::string& UserOperation::verification_gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.UserOperation.verification_gas_limit)
  return _internal_verification_gas_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserOperation::set_verification_gas_limit(ArgT0&& arg0, ArgT... args) {
 
 verification_gas_limit_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.UserOperation.verification_gas_limit)
}
inline std::string* UserOperation::mutable_verification_gas_limit() {
  std::string* _s = _internal_mutable_verification_gas_limit();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.UserOperation.verification_gas_limit)
  return _s;
}
inline const std::string& UserOperation::_internal_verification_gas_limit() const {
  return verification_gas_limit_.Get();
}
inline void UserOperation::_internal_set_verification_gas_limit(const std::string& value) {
  
  verification_gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserOperation::_internal_mutable_verification_gas_limit() {
  
  return verification_gas_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserOperation::release_verification_gas_limit() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.UserOperation.verification_gas_limit)
  return verification_gas_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserOperation::set_allocated_verification_gas_limit(std::string* verification_gas_limit) {
  if (verification_gas_limit != nullptr) {
    
  } else {
    
  }
  verification_gas_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification_gas_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_gas_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.UserOperation.verification_gas_limit)
}

// bytes paymaster_and_data = 6;
inline void UserOperation::clear_paymaster_and_data() {
  paymaster_and_data_.ClearToEmpty();
}
inline const std::string& UserOperation::paymaster_and_data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.UserOperation.paymaster_and_data)
  return _internal_paymaster_and_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserOperation::set_paymaster_and_data(ArgT0&& arg0, ArgT... args) {
 
 paymaster_and_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.UserOperation.paymaster_and_data)
}
inline std::string* UserOperation::mutable_paymaster_and_data() {
  std::string* _s = _internal_mutable_paymaster_and_data();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.UserOperation.paymaster_and_data)
  return _s;
}
inline const std::string& UserOperation::_internal_paymaster_and_data() const {
  return paymaster_and_data_.Get();
}
inline void UserOperation::_internal_set_paymaster_and_data(const std::string& value) {
  
  paymaster_and_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserOperation::_internal_mutable_paymaster_and_data() {
  
  return paymaster_and_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserOperation::release_paymaster_and_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.UserOperation.paymaster_and_data)
  return paymaster_and_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserOperation::set_allocated_paymaster_and_data(std::string* paymaster_and_data) {
  if (paymaster_and_data != nullptr) {
    
  } else {
    
  }
  paymaster_and_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymaster_and_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (paymaster_and_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    paymaster_and_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.UserOperation.paymaster_and_data)
}

// -------------------------------------------------------------------

// SigningInput

// bytes chain_id = 1;
inline void SigningInput::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_chain_id(ArgT0&& arg0, ArgT... args) {
 
 chain_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.chain_id)
  return _s;
}
inline const std::string& SigningInput::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SigningInput::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chain_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.chain_id)
}

// bytes nonce = 2;
inline void SigningInput::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 nonce_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.nonce)
}
inline std::string* SigningInput::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.nonce)
  return _s;
}
inline const std::string& SigningInput::_internal_nonce() const {
  return nonce_.Get();
}
inline void SigningInput::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_nonce() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.nonce)
}

// .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
inline void SigningInput::clear_tx_mode() {
  tx_mode_ = 0;
}
inline ::TW::Ethereum::Proto::TransactionMode SigningInput::_internal_tx_mode() const {
  return static_cast< ::TW::Ethereum::Proto::TransactionMode >(tx_mode_);
}
inline ::TW::Ethereum::Proto::TransactionMode SigningInput::tx_mode() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.tx_mode)
  return _internal_tx_mode();
}
inline void SigningInput::_internal_set_tx_mode(::TW::Ethereum::Proto::TransactionMode value) {
  
  tx_mode_ = value;
}
inline void SigningInput::set_tx_mode(::TW::Ethereum::Proto::TransactionMode value) {
  _internal_set_tx_mode(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.tx_mode)
}

// bytes gas_price = 4;
inline void SigningInput::clear_gas_price() {
  gas_price_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.gas_price)
  return _internal_gas_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_gas_price(ArgT0&& arg0, ArgT... args) {
 
 gas_price_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.gas_price)
}
inline std::string* SigningInput::mutable_gas_price() {
  std::string* _s = _internal_mutable_gas_price();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.gas_price)
  return _s;
}
inline const std::string& SigningInput::_internal_gas_price() const {
  return gas_price_.Get();
}
inline void SigningInput::_internal_set_gas_price(const std::string& value) {
  
  gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_gas_price() {
  
  return gas_price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_gas_price() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.gas_price)
  return gas_price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_gas_price(std::string* gas_price) {
  if (gas_price != nullptr) {
    
  } else {
    
  }
  gas_price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_price,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_price_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.gas_price)
}

// bytes gas_limit = 5;
inline void SigningInput::clear_gas_limit() {
  gas_limit_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.gas_limit)
  return _internal_gas_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_gas_limit(ArgT0&& arg0, ArgT... args) {
 
 gas_limit_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.gas_limit)
}
inline std::string* SigningInput::mutable_gas_limit() {
  std::string* _s = _internal_mutable_gas_limit();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.gas_limit)
  return _s;
}
inline const std::string& SigningInput::_internal_gas_limit() const {
  return gas_limit_.Get();
}
inline void SigningInput::_internal_set_gas_limit(const std::string& value) {
  
  gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_gas_limit() {
  
  return gas_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_gas_limit() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.gas_limit)
  return gas_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_gas_limit(std::string* gas_limit) {
  if (gas_limit != nullptr) {
    
  } else {
    
  }
  gas_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.gas_limit)
}

// bytes max_inclusion_fee_per_gas = 6;
inline void SigningInput::clear_max_inclusion_fee_per_gas() {
  max_inclusion_fee_per_gas_.ClearToEmpty();
}
inline const std::string& SigningInput::max_inclusion_fee_per_gas() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
  return _internal_max_inclusion_fee_per_gas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_max_inclusion_fee_per_gas(ArgT0&& arg0, ArgT... args) {
 
 max_inclusion_fee_per_gas_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
}
inline std::string* SigningInput::mutable_max_inclusion_fee_per_gas() {
  std::string* _s = _internal_mutable_max_inclusion_fee_per_gas();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
  return _s;
}
inline const std::string& SigningInput::_internal_max_inclusion_fee_per_gas() const {
  return max_inclusion_fee_per_gas_.Get();
}
inline void SigningInput::_internal_set_max_inclusion_fee_per_gas(const std::string& value) {
  
  max_inclusion_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_max_inclusion_fee_per_gas() {
  
  return max_inclusion_fee_per_gas_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_max_inclusion_fee_per_gas() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
  return max_inclusion_fee_per_gas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_max_inclusion_fee_per_gas(std::string* max_inclusion_fee_per_gas) {
  if (max_inclusion_fee_per_gas != nullptr) {
    
  } else {
    
  }
  max_inclusion_fee_per_gas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_inclusion_fee_per_gas,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_inclusion_fee_per_gas_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_inclusion_fee_per_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.max_inclusion_fee_per_gas)
}

// bytes max_fee_per_gas = 7;
inline void SigningInput::clear_max_fee_per_gas() {
  max_fee_per_gas_.ClearToEmpty();
}
inline const std::string& SigningInput::max_fee_per_gas() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
  return _internal_max_fee_per_gas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_max_fee_per_gas(ArgT0&& arg0, ArgT... args) {
 
 max_fee_per_gas_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
}
inline std::string* SigningInput::mutable_max_fee_per_gas() {
  std::string* _s = _internal_mutable_max_fee_per_gas();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
  return _s;
}
inline const std::string& SigningInput::_internal_max_fee_per_gas() const {
  return max_fee_per_gas_.Get();
}
inline void SigningInput::_internal_set_max_fee_per_gas(const std::string& value) {
  
  max_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_max_fee_per_gas() {
  
  return max_fee_per_gas_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_max_fee_per_gas() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
  return max_fee_per_gas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_max_fee_per_gas(std::string* max_fee_per_gas) {
  if (max_fee_per_gas != nullptr) {
    
  } else {
    
  }
  max_fee_per_gas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_fee_per_gas,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_fee_per_gas_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_fee_per_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.max_fee_per_gas)
}

// string to_address = 8;
inline void SigningInput::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& SigningInput::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.to_address)
}
inline std::string* SigningInput::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.to_address)
  return _s;
}
inline const std::string& SigningInput::_internal_to_address() const {
  return to_address_.Get();
}
inline void SigningInput::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.to_address)
}

// bytes private_key = 9;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.private_key)
}

// .TW.Ethereum.Proto.Transaction transaction = 10;
inline bool SigningInput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningInput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningInput::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::Ethereum::Proto::Transaction& SigningInput::_internal_transaction() const {
  const ::TW::Ethereum::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Ethereum::Proto::Transaction&>(
      ::TW::Ethereum::Proto::_Transaction_default_instance_);
}
inline const ::TW::Ethereum::Proto::Transaction& SigningInput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.transaction)
  return _internal_transaction();
}
inline void SigningInput::unsafe_arena_set_allocated_transaction(
    ::TW::Ethereum::Proto::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.SigningInput.transaction)
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::release_transaction() {
  
  ::TW::Ethereum::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.transaction)
  
  ::TW::Ethereum::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Ethereum::Proto::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::Ethereum::Proto::Transaction* SigningInput::mutable_transaction() {
  ::TW::Ethereum::Proto::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.transaction)
  return _msg;
}
inline void SigningInput::set_allocated_transaction(::TW::Ethereum::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.transaction)
}

// .TW.Ethereum.Proto.UserOperation user_operation = 11;
inline bool SigningInput::_internal_has_user_operation() const {
  return this != internal_default_instance() && user_operation_ != nullptr;
}
inline bool SigningInput::has_user_operation() const {
  return _internal_has_user_operation();
}
inline void SigningInput::clear_user_operation() {
  if (GetArenaForAllocation() == nullptr && user_operation_ != nullptr) {
    delete user_operation_;
  }
  user_operation_ = nullptr;
}
inline const ::TW::Ethereum::Proto::UserOperation& SigningInput::_internal_user_operation() const {
  const ::TW::Ethereum::Proto::UserOperation* p = user_operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Ethereum::Proto::UserOperation&>(
      ::TW::Ethereum::Proto::_UserOperation_default_instance_);
}
inline const ::TW::Ethereum::Proto::UserOperation& SigningInput::user_operation() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningInput.user_operation)
  return _internal_user_operation();
}
inline void SigningInput::unsafe_arena_set_allocated_user_operation(
    ::TW::Ethereum::Proto::UserOperation* user_operation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_operation_);
  }
  user_operation_ = user_operation;
  if (user_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Ethereum.Proto.SigningInput.user_operation)
}
inline ::TW::Ethereum::Proto::UserOperation* SigningInput::release_user_operation() {
  
  ::TW::Ethereum::Proto::UserOperation* temp = user_operation_;
  user_operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Ethereum::Proto::UserOperation* SigningInput::unsafe_arena_release_user_operation() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningInput.user_operation)
  
  ::TW::Ethereum::Proto::UserOperation* temp = user_operation_;
  user_operation_ = nullptr;
  return temp;
}
inline ::TW::Ethereum::Proto::UserOperation* SigningInput::_internal_mutable_user_operation() {
  
  if (user_operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Ethereum::Proto::UserOperation>(GetArenaForAllocation());
    user_operation_ = p;
  }
  return user_operation_;
}
inline ::TW::Ethereum::Proto::UserOperation* SigningInput::mutable_user_operation() {
  ::TW::Ethereum::Proto::UserOperation* _msg = _internal_mutable_user_operation();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningInput.user_operation)
  return _msg;
}
inline void SigningInput::set_allocated_user_operation(::TW::Ethereum::Proto::UserOperation* user_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_operation_;
  }
  if (user_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::UserOperation>::GetOwningArena(user_operation);
    if (message_arena != submessage_arena) {
      user_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_operation, submessage_arena);
    }
    
  } else {
    
  }
  user_operation_ = user_operation;
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningInput.user_operation)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.encoded)
}

// bytes v = 2;
inline void SigningOutput::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& SigningOutput::v() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.v)
  return _internal_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_v(ArgT0&& arg0, ArgT... args) {
 
 v_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.v)
}
inline std::string* SigningOutput::mutable_v() {
  std::string* _s = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.v)
  return _s;
}
inline const std::string& SigningOutput::_internal_v() const {
  return v_.Get();
}
inline void SigningOutput::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_v() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (v_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.v)
}

// bytes r = 3;
inline void SigningOutput::clear_r() {
  r_.ClearToEmpty();
}
inline const std::string& SigningOutput::r() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.r)
  return _internal_r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_r(ArgT0&& arg0, ArgT... args) {
 
 r_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.r)
}
inline std::string* SigningOutput::mutable_r() {
  std::string* _s = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.r)
  return _s;
}
inline const std::string& SigningOutput::_internal_r() const {
  return r_.Get();
}
inline void SigningOutput::_internal_set_r(const std::string& value) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_r() {
  
  return r_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_r() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.r)
  return r_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (r_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    r_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.r)
}

// bytes s = 4;
inline void SigningOutput::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& SigningOutput::s() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.s)
}
inline std::string* SigningOutput::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.s)
  return _s;
}
inline const std::string& SigningOutput::_internal_s() const {
  return s_.Get();
}
inline void SigningOutput::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_s() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.s)
}

// bytes data = 5;
inline void SigningOutput::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SigningOutput::data() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.data)
}
inline std::string* SigningOutput::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.data)
  return _s;
}
inline const std::string& SigningOutput::_internal_data() const {
  return data_.Get();
}
inline void SigningOutput::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_data() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.data)
}

// .TW.Common.Proto.SigningError error = 6;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.error)
}

// string error_message = 7;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.error_message)
}

// bytes pre_hash = 8;
inline void SigningOutput::clear_pre_hash() {
  pre_hash_.ClearToEmpty();
}
inline const std::string& SigningOutput::pre_hash() const {
  // @@protoc_insertion_point(field_get:TW.Ethereum.Proto.SigningOutput.pre_hash)
  return _internal_pre_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_pre_hash(ArgT0&& arg0, ArgT... args) {
 
 pre_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Ethereum.Proto.SigningOutput.pre_hash)
}
inline std::string* SigningOutput::mutable_pre_hash() {
  std::string* _s = _internal_mutable_pre_hash();
  // @@protoc_insertion_point(field_mutable:TW.Ethereum.Proto.SigningOutput.pre_hash)
  return _s;
}
inline const std::string& SigningOutput::_internal_pre_hash() const {
  return pre_hash_.Get();
}
inline void SigningOutput::_internal_set_pre_hash(const std::string& value) {
  
  pre_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_pre_hash() {
  
  return pre_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_pre_hash() {
  // @@protoc_insertion_point(field_release:TW.Ethereum.Proto.SigningOutput.pre_hash)
  return pre_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_pre_hash(std::string* pre_hash) {
  if (pre_hash != nullptr) {
    
  } else {
    
  }
  pre_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pre_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pre_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.SigningOutput.pre_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Ethereum::Proto::TransactionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Ethereum::Proto::TransactionMode>() {
  return ::TW::Ethereum::Proto::TransactionMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Ethereum_2eproto
