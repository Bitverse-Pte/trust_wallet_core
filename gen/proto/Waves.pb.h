// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Waves.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Waves_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Waves_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Waves_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Waves_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Waves_2eproto;
namespace TW {
namespace Waves {
namespace Proto {
class CancelLeaseMessage;
struct CancelLeaseMessageDefaultTypeInternal;
extern CancelLeaseMessageDefaultTypeInternal _CancelLeaseMessage_default_instance_;
class LeaseMessage;
struct LeaseMessageDefaultTypeInternal;
extern LeaseMessageDefaultTypeInternal _LeaseMessage_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class TransferMessage;
struct TransferMessageDefaultTypeInternal;
extern TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
}  // namespace Proto
}  // namespace Waves
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Waves::Proto::CancelLeaseMessage* Arena::CreateMaybeMessage<::TW::Waves::Proto::CancelLeaseMessage>(Arena*);
template<> ::TW::Waves::Proto::LeaseMessage* Arena::CreateMaybeMessage<::TW::Waves::Proto::LeaseMessage>(Arena*);
template<> ::TW::Waves::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Waves::Proto::SigningInput>(Arena*);
template<> ::TW::Waves::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Waves::Proto::SigningOutput>(Arena*);
template<> ::TW::Waves::Proto::TransferMessage* Arena::CreateMaybeMessage<::TW::Waves::Proto::TransferMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Waves {
namespace Proto {

// ===================================================================

class TransferMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Waves.Proto.TransferMessage) */ {
 public:
  inline TransferMessage() : TransferMessage(nullptr) {}
  ~TransferMessage() override;
  explicit constexpr TransferMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferMessage(const TransferMessage& from);
  TransferMessage(TransferMessage&& from) noexcept
    : TransferMessage() {
    *this = ::std::move(from);
  }

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferMessage& operator=(TransferMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferMessage* internal_default_instance() {
    return reinterpret_cast<const TransferMessage*>(
               &_TransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransferMessage& a, TransferMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Waves.Proto.TransferMessage";
  }
  protected:
  explicit TransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 2,
    kFeeAssetFieldNumber = 4,
    kToFieldNumber = 5,
    kAttachmentFieldNumber = 6,
    kAmountFieldNumber = 1,
    kFeeFieldNumber = 3,
  };
  // string asset = 2;
  void clear_asset();
  const std::string& asset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset();
  PROTOBUF_NODISCARD std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string fee_asset = 4;
  void clear_fee_asset();
  const std::string& fee_asset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fee_asset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fee_asset();
  PROTOBUF_NODISCARD std::string* release_fee_asset();
  void set_allocated_fee_asset(std::string* fee_asset);
  private:
  const std::string& _internal_fee_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fee_asset(const std::string& value);
  std::string* _internal_mutable_fee_asset();
  public:

  // string to = 5;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes attachment = 6;
  void clear_attachment();
  const std::string& attachment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachment();
  PROTOBUF_NODISCARD std::string* release_attachment();
  void set_allocated_attachment(std::string* attachment);
  private:
  const std::string& _internal_attachment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachment(const std::string& value);
  std::string* _internal_mutable_attachment();
  public:

  // int64 amount = 1;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // int64 fee = 3;
  void clear_fee();
  int64_t fee() const;
  void set_fee(int64_t value);
  private:
  int64_t _internal_fee() const;
  void _internal_set_fee(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Waves.Proto.TransferMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachment_;
  int64_t amount_;
  int64_t fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Waves_2eproto;
};
// -------------------------------------------------------------------

class LeaseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Waves.Proto.LeaseMessage) */ {
 public:
  inline LeaseMessage() : LeaseMessage(nullptr) {}
  ~LeaseMessage() override;
  explicit constexpr LeaseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaseMessage(const LeaseMessage& from);
  LeaseMessage(LeaseMessage&& from) noexcept
    : LeaseMessage() {
    *this = ::std::move(from);
  }

  inline LeaseMessage& operator=(const LeaseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseMessage& operator=(LeaseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaseMessage* internal_default_instance() {
    return reinterpret_cast<const LeaseMessage*>(
               &_LeaseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LeaseMessage& a, LeaseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LeaseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Waves.Proto.LeaseMessage";
  }
  protected:
  explicit LeaseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 2,
    kAmountFieldNumber = 1,
    kFeeFieldNumber = 3,
  };
  // string to = 2;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // int64 amount = 1;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // int64 fee = 3;
  void clear_fee();
  int64_t fee() const;
  void set_fee(int64_t value);
  private:
  int64_t _internal_fee() const;
  void _internal_set_fee(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Waves.Proto.LeaseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  int64_t amount_;
  int64_t fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Waves_2eproto;
};
// -------------------------------------------------------------------

class CancelLeaseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Waves.Proto.CancelLeaseMessage) */ {
 public:
  inline CancelLeaseMessage() : CancelLeaseMessage(nullptr) {}
  ~CancelLeaseMessage() override;
  explicit constexpr CancelLeaseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelLeaseMessage(const CancelLeaseMessage& from);
  CancelLeaseMessage(CancelLeaseMessage&& from) noexcept
    : CancelLeaseMessage() {
    *this = ::std::move(from);
  }

  inline CancelLeaseMessage& operator=(const CancelLeaseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelLeaseMessage& operator=(CancelLeaseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelLeaseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelLeaseMessage* internal_default_instance() {
    return reinterpret_cast<const CancelLeaseMessage*>(
               &_CancelLeaseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CancelLeaseMessage& a, CancelLeaseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelLeaseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelLeaseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelLeaseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelLeaseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelLeaseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelLeaseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelLeaseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Waves.Proto.CancelLeaseMessage";
  }
  protected:
  explicit CancelLeaseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaseIdFieldNumber = 1,
    kFeeFieldNumber = 2,
  };
  // string lease_id = 1;
  void clear_lease_id();
  const std::string& lease_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lease_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lease_id();
  PROTOBUF_NODISCARD std::string* release_lease_id();
  void set_allocated_lease_id(std::string* lease_id);
  private:
  const std::string& _internal_lease_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lease_id(const std::string& value);
  std::string* _internal_mutable_lease_id();
  public:

  // int64 fee = 2;
  void clear_fee();
  int64_t fee() const;
  void set_fee(int64_t value);
  private:
  int64_t _internal_fee() const;
  void _internal_set_fee(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Waves.Proto.CancelLeaseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lease_id_;
  int64_t fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Waves_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Waves.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kTransferMessage = 3,
    kLeaseMessage = 4,
    kCancelLeaseMessage = 5,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Waves.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kTransferMessageFieldNumber = 3,
    kLeaseMessageFieldNumber = 4,
    kCancelLeaseMessageFieldNumber = 5,
  };
  // bytes private_key = 2;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .TW.Waves.Proto.TransferMessage transfer_message = 3;
  bool has_transfer_message() const;
  private:
  bool _internal_has_transfer_message() const;
  public:
  void clear_transfer_message();
  const ::TW::Waves::Proto::TransferMessage& transfer_message() const;
  PROTOBUF_NODISCARD ::TW::Waves::Proto::TransferMessage* release_transfer_message();
  ::TW::Waves::Proto::TransferMessage* mutable_transfer_message();
  void set_allocated_transfer_message(::TW::Waves::Proto::TransferMessage* transfer_message);
  private:
  const ::TW::Waves::Proto::TransferMessage& _internal_transfer_message() const;
  ::TW::Waves::Proto::TransferMessage* _internal_mutable_transfer_message();
  public:
  void unsafe_arena_set_allocated_transfer_message(
      ::TW::Waves::Proto::TransferMessage* transfer_message);
  ::TW::Waves::Proto::TransferMessage* unsafe_arena_release_transfer_message();

  // .TW.Waves.Proto.LeaseMessage lease_message = 4;
  bool has_lease_message() const;
  private:
  bool _internal_has_lease_message() const;
  public:
  void clear_lease_message();
  const ::TW::Waves::Proto::LeaseMessage& lease_message() const;
  PROTOBUF_NODISCARD ::TW::Waves::Proto::LeaseMessage* release_lease_message();
  ::TW::Waves::Proto::LeaseMessage* mutable_lease_message();
  void set_allocated_lease_message(::TW::Waves::Proto::LeaseMessage* lease_message);
  private:
  const ::TW::Waves::Proto::LeaseMessage& _internal_lease_message() const;
  ::TW::Waves::Proto::LeaseMessage* _internal_mutable_lease_message();
  public:
  void unsafe_arena_set_allocated_lease_message(
      ::TW::Waves::Proto::LeaseMessage* lease_message);
  ::TW::Waves::Proto::LeaseMessage* unsafe_arena_release_lease_message();

  // .TW.Waves.Proto.CancelLeaseMessage cancel_lease_message = 5;
  bool has_cancel_lease_message() const;
  private:
  bool _internal_has_cancel_lease_message() const;
  public:
  void clear_cancel_lease_message();
  const ::TW::Waves::Proto::CancelLeaseMessage& cancel_lease_message() const;
  PROTOBUF_NODISCARD ::TW::Waves::Proto::CancelLeaseMessage* release_cancel_lease_message();
  ::TW::Waves::Proto::CancelLeaseMessage* mutable_cancel_lease_message();
  void set_allocated_cancel_lease_message(::TW::Waves::Proto::CancelLeaseMessage* cancel_lease_message);
  private:
  const ::TW::Waves::Proto::CancelLeaseMessage& _internal_cancel_lease_message() const;
  ::TW::Waves::Proto::CancelLeaseMessage* _internal_mutable_cancel_lease_message();
  public:
  void unsafe_arena_set_allocated_cancel_lease_message(
      ::TW::Waves::Proto::CancelLeaseMessage* cancel_lease_message);
  ::TW::Waves::Proto::CancelLeaseMessage* unsafe_arena_release_cancel_lease_message();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Waves.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer_message();
  void set_has_lease_message();
  void set_has_cancel_lease_message();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  int64_t timestamp_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Waves::Proto::TransferMessage* transfer_message_;
    ::TW::Waves::Proto::LeaseMessage* lease_message_;
    ::TW::Waves::Proto::CancelLeaseMessage* cancel_lease_message_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Waves_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Waves.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Waves.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kJsonFieldNumber = 2,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string json = 2;
  void clear_json();
  const std::string& json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json();
  PROTOBUF_NODISCARD std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:TW.Waves.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Waves_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransferMessage

// int64 amount = 1;
inline void TransferMessage::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t TransferMessage::_internal_amount() const {
  return amount_;
}
inline int64_t TransferMessage::amount() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.TransferMessage.amount)
  return _internal_amount();
}
inline void TransferMessage::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void TransferMessage::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.TransferMessage.amount)
}

// string asset = 2;
inline void TransferMessage::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& TransferMessage::asset() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.TransferMessage.asset)
  return _internal_asset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_asset(ArgT0&& arg0, ArgT... args) {
 
 asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.TransferMessage.asset)
}
inline std::string* TransferMessage::mutable_asset() {
  std::string* _s = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.TransferMessage.asset)
  return _s;
}
inline const std::string& TransferMessage::_internal_asset() const {
  return asset_.Get();
}
inline void TransferMessage::_internal_set_asset(const std::string& value) {
  
  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_asset() {
  
  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_asset() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.TransferMessage.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {
    
  } else {
    
  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.TransferMessage.asset)
}

// int64 fee = 3;
inline void TransferMessage::clear_fee() {
  fee_ = int64_t{0};
}
inline int64_t TransferMessage::_internal_fee() const {
  return fee_;
}
inline int64_t TransferMessage::fee() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.TransferMessage.fee)
  return _internal_fee();
}
inline void TransferMessage::_internal_set_fee(int64_t value) {
  
  fee_ = value;
}
inline void TransferMessage::set_fee(int64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.TransferMessage.fee)
}

// string fee_asset = 4;
inline void TransferMessage::clear_fee_asset() {
  fee_asset_.ClearToEmpty();
}
inline const std::string& TransferMessage::fee_asset() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.TransferMessage.fee_asset)
  return _internal_fee_asset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_fee_asset(ArgT0&& arg0, ArgT... args) {
 
 fee_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.TransferMessage.fee_asset)
}
inline std::string* TransferMessage::mutable_fee_asset() {
  std::string* _s = _internal_mutable_fee_asset();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.TransferMessage.fee_asset)
  return _s;
}
inline const std::string& TransferMessage::_internal_fee_asset() const {
  return fee_asset_.Get();
}
inline void TransferMessage::_internal_set_fee_asset(const std::string& value) {
  
  fee_asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_fee_asset() {
  
  return fee_asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_fee_asset() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.TransferMessage.fee_asset)
  return fee_asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_fee_asset(std::string* fee_asset) {
  if (fee_asset != nullptr) {
    
  } else {
    
  }
  fee_asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_asset,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fee_asset_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fee_asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.TransferMessage.fee_asset)
}

// string to = 5;
inline void TransferMessage::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& TransferMessage::to() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.TransferMessage.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.TransferMessage.to)
}
inline std::string* TransferMessage::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.TransferMessage.to)
  return _s;
}
inline const std::string& TransferMessage::_internal_to() const {
  return to_.Get();
}
inline void TransferMessage::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_to() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.TransferMessage.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.TransferMessage.to)
}

// bytes attachment = 6;
inline void TransferMessage::clear_attachment() {
  attachment_.ClearToEmpty();
}
inline const std::string& TransferMessage::attachment() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.TransferMessage.attachment)
  return _internal_attachment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_attachment(ArgT0&& arg0, ArgT... args) {
 
 attachment_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.TransferMessage.attachment)
}
inline std::string* TransferMessage::mutable_attachment() {
  std::string* _s = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.TransferMessage.attachment)
  return _s;
}
inline const std::string& TransferMessage::_internal_attachment() const {
  return attachment_.Get();
}
inline void TransferMessage::_internal_set_attachment(const std::string& value) {
  
  attachment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_attachment() {
  
  return attachment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_attachment() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.TransferMessage.attachment)
  return attachment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_attachment(std::string* attachment) {
  if (attachment != nullptr) {
    
  } else {
    
  }
  attachment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attachment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attachment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attachment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.TransferMessage.attachment)
}

// -------------------------------------------------------------------

// LeaseMessage

// int64 amount = 1;
inline void LeaseMessage::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t LeaseMessage::_internal_amount() const {
  return amount_;
}
inline int64_t LeaseMessage::amount() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.LeaseMessage.amount)
  return _internal_amount();
}
inline void LeaseMessage::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void LeaseMessage::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.LeaseMessage.amount)
}

// string to = 2;
inline void LeaseMessage::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& LeaseMessage::to() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.LeaseMessage.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaseMessage::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.LeaseMessage.to)
}
inline std::string* LeaseMessage::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.LeaseMessage.to)
  return _s;
}
inline const std::string& LeaseMessage::_internal_to() const {
  return to_.Get();
}
inline void LeaseMessage::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LeaseMessage::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LeaseMessage::release_to() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.LeaseMessage.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LeaseMessage::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.LeaseMessage.to)
}

// int64 fee = 3;
inline void LeaseMessage::clear_fee() {
  fee_ = int64_t{0};
}
inline int64_t LeaseMessage::_internal_fee() const {
  return fee_;
}
inline int64_t LeaseMessage::fee() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.LeaseMessage.fee)
  return _internal_fee();
}
inline void LeaseMessage::_internal_set_fee(int64_t value) {
  
  fee_ = value;
}
inline void LeaseMessage::set_fee(int64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.LeaseMessage.fee)
}

// -------------------------------------------------------------------

// CancelLeaseMessage

// string lease_id = 1;
inline void CancelLeaseMessage::clear_lease_id() {
  lease_id_.ClearToEmpty();
}
inline const std::string& CancelLeaseMessage::lease_id() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.CancelLeaseMessage.lease_id)
  return _internal_lease_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelLeaseMessage::set_lease_id(ArgT0&& arg0, ArgT... args) {
 
 lease_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.CancelLeaseMessage.lease_id)
}
inline std::string* CancelLeaseMessage::mutable_lease_id() {
  std::string* _s = _internal_mutable_lease_id();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.CancelLeaseMessage.lease_id)
  return _s;
}
inline const std::string& CancelLeaseMessage::_internal_lease_id() const {
  return lease_id_.Get();
}
inline void CancelLeaseMessage::_internal_set_lease_id(const std::string& value) {
  
  lease_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelLeaseMessage::_internal_mutable_lease_id() {
  
  return lease_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelLeaseMessage::release_lease_id() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.CancelLeaseMessage.lease_id)
  return lease_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelLeaseMessage::set_allocated_lease_id(std::string* lease_id) {
  if (lease_id != nullptr) {
    
  } else {
    
  }
  lease_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lease_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lease_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lease_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.CancelLeaseMessage.lease_id)
}

// int64 fee = 2;
inline void CancelLeaseMessage::clear_fee() {
  fee_ = int64_t{0};
}
inline int64_t CancelLeaseMessage::_internal_fee() const {
  return fee_;
}
inline int64_t CancelLeaseMessage::fee() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.CancelLeaseMessage.fee)
  return _internal_fee();
}
inline void CancelLeaseMessage::_internal_set_fee(int64_t value) {
  
  fee_ = value;
}
inline void CancelLeaseMessage::set_fee(int64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.CancelLeaseMessage.fee)
}

// -------------------------------------------------------------------

// SigningInput

// int64 timestamp = 1;
inline void SigningInput::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t SigningInput::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t SigningInput::timestamp() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.SigningInput.timestamp)
  return _internal_timestamp();
}
inline void SigningInput::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void SigningInput::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.SigningInput.timestamp)
}

// bytes private_key = 2;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.SigningInput.private_key)
}

// .TW.Waves.Proto.TransferMessage transfer_message = 3;
inline bool SigningInput::_internal_has_transfer_message() const {
  return message_oneof_case() == kTransferMessage;
}
inline bool SigningInput::has_transfer_message() const {
  return _internal_has_transfer_message();
}
inline void SigningInput::set_has_transfer_message() {
  _oneof_case_[0] = kTransferMessage;
}
inline void SigningInput::clear_transfer_message() {
  if (_internal_has_transfer_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.transfer_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Waves::Proto::TransferMessage* SigningInput::release_transfer_message() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.SigningInput.transfer_message)
  if (_internal_has_transfer_message()) {
    clear_has_message_oneof();
      ::TW::Waves::Proto::TransferMessage* temp = message_oneof_.transfer_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Waves::Proto::TransferMessage& SigningInput::_internal_transfer_message() const {
  return _internal_has_transfer_message()
      ? *message_oneof_.transfer_message_
      : reinterpret_cast< ::TW::Waves::Proto::TransferMessage&>(::TW::Waves::Proto::_TransferMessage_default_instance_);
}
inline const ::TW::Waves::Proto::TransferMessage& SigningInput::transfer_message() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.SigningInput.transfer_message)
  return _internal_transfer_message();
}
inline ::TW::Waves::Proto::TransferMessage* SigningInput::unsafe_arena_release_transfer_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Waves.Proto.SigningInput.transfer_message)
  if (_internal_has_transfer_message()) {
    clear_has_message_oneof();
    ::TW::Waves::Proto::TransferMessage* temp = message_oneof_.transfer_message_;
    message_oneof_.transfer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer_message(::TW::Waves::Proto::TransferMessage* transfer_message) {
  clear_message_oneof();
  if (transfer_message) {
    set_has_transfer_message();
    message_oneof_.transfer_message_ = transfer_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Waves.Proto.SigningInput.transfer_message)
}
inline ::TW::Waves::Proto::TransferMessage* SigningInput::_internal_mutable_transfer_message() {
  if (!_internal_has_transfer_message()) {
    clear_message_oneof();
    set_has_transfer_message();
    message_oneof_.transfer_message_ = CreateMaybeMessage< ::TW::Waves::Proto::TransferMessage >(GetArenaForAllocation());
  }
  return message_oneof_.transfer_message_;
}
inline ::TW::Waves::Proto::TransferMessage* SigningInput::mutable_transfer_message() {
  ::TW::Waves::Proto::TransferMessage* _msg = _internal_mutable_transfer_message();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.SigningInput.transfer_message)
  return _msg;
}

// .TW.Waves.Proto.LeaseMessage lease_message = 4;
inline bool SigningInput::_internal_has_lease_message() const {
  return message_oneof_case() == kLeaseMessage;
}
inline bool SigningInput::has_lease_message() const {
  return _internal_has_lease_message();
}
inline void SigningInput::set_has_lease_message() {
  _oneof_case_[0] = kLeaseMessage;
}
inline void SigningInput::clear_lease_message() {
  if (_internal_has_lease_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.lease_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Waves::Proto::LeaseMessage* SigningInput::release_lease_message() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.SigningInput.lease_message)
  if (_internal_has_lease_message()) {
    clear_has_message_oneof();
      ::TW::Waves::Proto::LeaseMessage* temp = message_oneof_.lease_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.lease_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Waves::Proto::LeaseMessage& SigningInput::_internal_lease_message() const {
  return _internal_has_lease_message()
      ? *message_oneof_.lease_message_
      : reinterpret_cast< ::TW::Waves::Proto::LeaseMessage&>(::TW::Waves::Proto::_LeaseMessage_default_instance_);
}
inline const ::TW::Waves::Proto::LeaseMessage& SigningInput::lease_message() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.SigningInput.lease_message)
  return _internal_lease_message();
}
inline ::TW::Waves::Proto::LeaseMessage* SigningInput::unsafe_arena_release_lease_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Waves.Proto.SigningInput.lease_message)
  if (_internal_has_lease_message()) {
    clear_has_message_oneof();
    ::TW::Waves::Proto::LeaseMessage* temp = message_oneof_.lease_message_;
    message_oneof_.lease_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_lease_message(::TW::Waves::Proto::LeaseMessage* lease_message) {
  clear_message_oneof();
  if (lease_message) {
    set_has_lease_message();
    message_oneof_.lease_message_ = lease_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Waves.Proto.SigningInput.lease_message)
}
inline ::TW::Waves::Proto::LeaseMessage* SigningInput::_internal_mutable_lease_message() {
  if (!_internal_has_lease_message()) {
    clear_message_oneof();
    set_has_lease_message();
    message_oneof_.lease_message_ = CreateMaybeMessage< ::TW::Waves::Proto::LeaseMessage >(GetArenaForAllocation());
  }
  return message_oneof_.lease_message_;
}
inline ::TW::Waves::Proto::LeaseMessage* SigningInput::mutable_lease_message() {
  ::TW::Waves::Proto::LeaseMessage* _msg = _internal_mutable_lease_message();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.SigningInput.lease_message)
  return _msg;
}

// .TW.Waves.Proto.CancelLeaseMessage cancel_lease_message = 5;
inline bool SigningInput::_internal_has_cancel_lease_message() const {
  return message_oneof_case() == kCancelLeaseMessage;
}
inline bool SigningInput::has_cancel_lease_message() const {
  return _internal_has_cancel_lease_message();
}
inline void SigningInput::set_has_cancel_lease_message() {
  _oneof_case_[0] = kCancelLeaseMessage;
}
inline void SigningInput::clear_cancel_lease_message() {
  if (_internal_has_cancel_lease_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.cancel_lease_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Waves::Proto::CancelLeaseMessage* SigningInput::release_cancel_lease_message() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.SigningInput.cancel_lease_message)
  if (_internal_has_cancel_lease_message()) {
    clear_has_message_oneof();
      ::TW::Waves::Proto::CancelLeaseMessage* temp = message_oneof_.cancel_lease_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.cancel_lease_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Waves::Proto::CancelLeaseMessage& SigningInput::_internal_cancel_lease_message() const {
  return _internal_has_cancel_lease_message()
      ? *message_oneof_.cancel_lease_message_
      : reinterpret_cast< ::TW::Waves::Proto::CancelLeaseMessage&>(::TW::Waves::Proto::_CancelLeaseMessage_default_instance_);
}
inline const ::TW::Waves::Proto::CancelLeaseMessage& SigningInput::cancel_lease_message() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.SigningInput.cancel_lease_message)
  return _internal_cancel_lease_message();
}
inline ::TW::Waves::Proto::CancelLeaseMessage* SigningInput::unsafe_arena_release_cancel_lease_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Waves.Proto.SigningInput.cancel_lease_message)
  if (_internal_has_cancel_lease_message()) {
    clear_has_message_oneof();
    ::TW::Waves::Proto::CancelLeaseMessage* temp = message_oneof_.cancel_lease_message_;
    message_oneof_.cancel_lease_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_cancel_lease_message(::TW::Waves::Proto::CancelLeaseMessage* cancel_lease_message) {
  clear_message_oneof();
  if (cancel_lease_message) {
    set_has_cancel_lease_message();
    message_oneof_.cancel_lease_message_ = cancel_lease_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Waves.Proto.SigningInput.cancel_lease_message)
}
inline ::TW::Waves::Proto::CancelLeaseMessage* SigningInput::_internal_mutable_cancel_lease_message() {
  if (!_internal_has_cancel_lease_message()) {
    clear_message_oneof();
    set_has_cancel_lease_message();
    message_oneof_.cancel_lease_message_ = CreateMaybeMessage< ::TW::Waves::Proto::CancelLeaseMessage >(GetArenaForAllocation());
  }
  return message_oneof_.cancel_lease_message_;
}
inline ::TW::Waves::Proto::CancelLeaseMessage* SigningInput::mutable_cancel_lease_message() {
  ::TW::Waves::Proto::CancelLeaseMessage* _msg = _internal_mutable_cancel_lease_message();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.SigningInput.cancel_lease_message)
  return _msg;
}

inline bool SigningInput::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline SigningInput::MessageOneofCase SigningInput::message_oneof_case() const {
  return SigningInput::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes signature = 1;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.SigningOutput.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.SigningOutput.signature)
  return _s;
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.SigningOutput.signature)
}

// string json = 2;
inline void SigningOutput::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& SigningOutput::json() const {
  // @@protoc_insertion_point(field_get:TW.Waves.Proto.SigningOutput.json)
  return _internal_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_json(ArgT0&& arg0, ArgT... args) {
 
 json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Waves.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::mutable_json() {
  std::string* _s = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:TW.Waves.Proto.SigningOutput.json)
  return _s;
}
inline const std::string& SigningOutput::_internal_json() const {
  return json_.Get();
}
inline void SigningOutput::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_json() {
  // @@protoc_insertion_point(field_release:TW.Waves.Proto.SigningOutput.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Waves.Proto.SigningOutput.json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Waves
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Waves_2eproto
