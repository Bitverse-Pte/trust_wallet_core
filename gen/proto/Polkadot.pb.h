// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Polkadot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Polkadot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Polkadot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Polkadot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Polkadot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Polkadot_2eproto;
namespace TW {
namespace Polkadot {
namespace Proto {
class Balance;
struct BalanceDefaultTypeInternal;
extern BalanceDefaultTypeInternal _Balance_default_instance_;
class Balance_AssetTransfer;
struct Balance_AssetTransferDefaultTypeInternal;
extern Balance_AssetTransferDefaultTypeInternal _Balance_AssetTransfer_default_instance_;
class Balance_BatchAssetTransfer;
struct Balance_BatchAssetTransferDefaultTypeInternal;
extern Balance_BatchAssetTransferDefaultTypeInternal _Balance_BatchAssetTransfer_default_instance_;
class Balance_BatchTransfer;
struct Balance_BatchTransferDefaultTypeInternal;
extern Balance_BatchTransferDefaultTypeInternal _Balance_BatchTransfer_default_instance_;
class Balance_Transfer;
struct Balance_TransferDefaultTypeInternal;
extern Balance_TransferDefaultTypeInternal _Balance_Transfer_default_instance_;
class CallIndices;
struct CallIndicesDefaultTypeInternal;
extern CallIndicesDefaultTypeInternal _CallIndices_default_instance_;
class CustomCallIndices;
struct CustomCallIndicesDefaultTypeInternal;
extern CustomCallIndicesDefaultTypeInternal _CustomCallIndices_default_instance_;
class Era;
struct EraDefaultTypeInternal;
extern EraDefaultTypeInternal _Era_default_instance_;
class Identity;
struct IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class Identity_AddAuthorization;
struct Identity_AddAuthorizationDefaultTypeInternal;
extern Identity_AddAuthorizationDefaultTypeInternal _Identity_AddAuthorization_default_instance_;
class Identity_AddAuthorization_AuthData;
struct Identity_AddAuthorization_AuthDataDefaultTypeInternal;
extern Identity_AddAuthorization_AuthDataDefaultTypeInternal _Identity_AddAuthorization_AuthData_default_instance_;
class Identity_AddAuthorization_Data;
struct Identity_AddAuthorization_DataDefaultTypeInternal;
extern Identity_AddAuthorization_DataDefaultTypeInternal _Identity_AddAuthorization_Data_default_instance_;
class Identity_JoinIdentityAsKey;
struct Identity_JoinIdentityAsKeyDefaultTypeInternal;
extern Identity_JoinIdentityAsKeyDefaultTypeInternal _Identity_JoinIdentityAsKey_default_instance_;
class PolymeshCall;
struct PolymeshCallDefaultTypeInternal;
extern PolymeshCallDefaultTypeInternal _PolymeshCall_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Staking;
struct StakingDefaultTypeInternal;
extern StakingDefaultTypeInternal _Staking_default_instance_;
class Staking_Bond;
struct Staking_BondDefaultTypeInternal;
extern Staking_BondDefaultTypeInternal _Staking_Bond_default_instance_;
class Staking_BondAndNominate;
struct Staking_BondAndNominateDefaultTypeInternal;
extern Staking_BondAndNominateDefaultTypeInternal _Staking_BondAndNominate_default_instance_;
class Staking_BondExtra;
struct Staking_BondExtraDefaultTypeInternal;
extern Staking_BondExtraDefaultTypeInternal _Staking_BondExtra_default_instance_;
class Staking_Chill;
struct Staking_ChillDefaultTypeInternal;
extern Staking_ChillDefaultTypeInternal _Staking_Chill_default_instance_;
class Staking_ChillAndUnbond;
struct Staking_ChillAndUnbondDefaultTypeInternal;
extern Staking_ChillAndUnbondDefaultTypeInternal _Staking_ChillAndUnbond_default_instance_;
class Staking_Nominate;
struct Staking_NominateDefaultTypeInternal;
extern Staking_NominateDefaultTypeInternal _Staking_Nominate_default_instance_;
class Staking_Rebond;
struct Staking_RebondDefaultTypeInternal;
extern Staking_RebondDefaultTypeInternal _Staking_Rebond_default_instance_;
class Staking_Unbond;
struct Staking_UnbondDefaultTypeInternal;
extern Staking_UnbondDefaultTypeInternal _Staking_Unbond_default_instance_;
class Staking_WithdrawUnbonded;
struct Staking_WithdrawUnbondedDefaultTypeInternal;
extern Staking_WithdrawUnbondedDefaultTypeInternal _Staking_WithdrawUnbonded_default_instance_;
}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Polkadot::Proto::Balance* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Balance>(Arena*);
template<> ::TW::Polkadot::Proto::Balance_AssetTransfer* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Balance_AssetTransfer>(Arena*);
template<> ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Balance_BatchAssetTransfer>(Arena*);
template<> ::TW::Polkadot::Proto::Balance_BatchTransfer* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Balance_BatchTransfer>(Arena*);
template<> ::TW::Polkadot::Proto::Balance_Transfer* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Balance_Transfer>(Arena*);
template<> ::TW::Polkadot::Proto::CallIndices* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(Arena*);
template<> ::TW::Polkadot::Proto::CustomCallIndices* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::CustomCallIndices>(Arena*);
template<> ::TW::Polkadot::Proto::Era* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Era>(Arena*);
template<> ::TW::Polkadot::Proto::Identity* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Identity>(Arena*);
template<> ::TW::Polkadot::Proto::Identity_AddAuthorization* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Identity_AddAuthorization>(Arena*);
template<> ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData>(Arena*);
template<> ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Identity_AddAuthorization_Data>(Arena*);
template<> ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Identity_JoinIdentityAsKey>(Arena*);
template<> ::TW::Polkadot::Proto::PolymeshCall* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::PolymeshCall>(Arena*);
template<> ::TW::Polkadot::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::SigningInput>(Arena*);
template<> ::TW::Polkadot::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::SigningOutput>(Arena*);
template<> ::TW::Polkadot::Proto::Staking* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Bond* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Bond>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_BondAndNominate* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_BondAndNominate>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_BondExtra* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_BondExtra>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Chill* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Chill>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_ChillAndUnbond* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_ChillAndUnbond>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Nominate* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Nominate>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Rebond* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Rebond>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_Unbond* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_Unbond>(Arena*);
template<> ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Arena::CreateMaybeMessage<::TW::Polkadot::Proto::Staking_WithdrawUnbonded>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Polkadot {
namespace Proto {

enum RewardDestination : int {
  STAKED = 0,
  STASH = 1,
  CONTROLLER = 2,
  RewardDestination_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RewardDestination_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RewardDestination_IsValid(int value);
constexpr RewardDestination RewardDestination_MIN = STAKED;
constexpr RewardDestination RewardDestination_MAX = CONTROLLER;
constexpr int RewardDestination_ARRAYSIZE = RewardDestination_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardDestination_descriptor();
template<typename T>
inline const std::string& RewardDestination_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RewardDestination>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RewardDestination_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RewardDestination_descriptor(), enum_t_value);
}
inline bool RewardDestination_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RewardDestination* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RewardDestination>(
    RewardDestination_descriptor(), name, value);
}
// ===================================================================

class Era final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Era) */ {
 public:
  inline Era() : Era(nullptr) {}
  ~Era() override;
  explicit constexpr Era(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Era(const Era& from);
  Era(Era&& from) noexcept
    : Era() {
    *this = ::std::move(from);
  }

  inline Era& operator=(const Era& from) {
    CopyFrom(from);
    return *this;
  }
  inline Era& operator=(Era&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Era& default_instance() {
    return *internal_default_instance();
  }
  static inline const Era* internal_default_instance() {
    return reinterpret_cast<const Era*>(
               &_Era_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Era& a, Era& b) {
    a.Swap(&b);
  }
  inline void Swap(Era* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Era* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Era* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Era>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Era& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Era& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Era* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Era";
  }
  protected:
  explicit Era(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
    kPeriodFieldNumber = 2,
  };
  // uint64 block_number = 1;
  void clear_block_number();
  uint64_t block_number() const;
  void set_block_number(uint64_t value);
  private:
  uint64_t _internal_block_number() const;
  void _internal_set_block_number(uint64_t value);
  public:

  // uint64 period = 2;
  void clear_period();
  uint64_t period() const;
  void set_period(uint64_t value);
  private:
  uint64_t _internal_period() const;
  void _internal_set_period(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Era)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t block_number_;
  uint64_t period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class CustomCallIndices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.CustomCallIndices) */ {
 public:
  inline CustomCallIndices() : CustomCallIndices(nullptr) {}
  ~CustomCallIndices() override;
  explicit constexpr CustomCallIndices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomCallIndices(const CustomCallIndices& from);
  CustomCallIndices(CustomCallIndices&& from) noexcept
    : CustomCallIndices() {
    *this = ::std::move(from);
  }

  inline CustomCallIndices& operator=(const CustomCallIndices& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomCallIndices& operator=(CustomCallIndices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomCallIndices& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomCallIndices* internal_default_instance() {
    return reinterpret_cast<const CustomCallIndices*>(
               &_CustomCallIndices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomCallIndices& a, CustomCallIndices& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomCallIndices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomCallIndices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomCallIndices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomCallIndices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomCallIndices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CustomCallIndices& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomCallIndices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.CustomCallIndices";
  }
  protected:
  explicit CustomCallIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleIndexFieldNumber = 4,
    kMethodIndexFieldNumber = 5,
  };
  // int32 module_index = 4;
  void clear_module_index();
  int32_t module_index() const;
  void set_module_index(int32_t value);
  private:
  int32_t _internal_module_index() const;
  void _internal_set_module_index(int32_t value);
  public:

  // int32 method_index = 5;
  void clear_method_index();
  int32_t method_index() const;
  void set_method_index(int32_t value);
  private:
  int32_t _internal_method_index() const;
  void _internal_set_method_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.CustomCallIndices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t module_index_;
  int32_t method_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class CallIndices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.CallIndices) */ {
 public:
  inline CallIndices() : CallIndices(nullptr) {}
  ~CallIndices() override;
  explicit constexpr CallIndices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallIndices(const CallIndices& from);
  CallIndices(CallIndices&& from) noexcept
    : CallIndices() {
    *this = ::std::move(from);
  }

  inline CallIndices& operator=(const CallIndices& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallIndices& operator=(CallIndices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallIndices& default_instance() {
    return *internal_default_instance();
  }
  enum VariantCase {
    kCustom = 1,
    VARIANT_NOT_SET = 0,
  };

  static inline const CallIndices* internal_default_instance() {
    return reinterpret_cast<const CallIndices*>(
               &_CallIndices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CallIndices& a, CallIndices& b) {
    a.Swap(&b);
  }
  inline void Swap(CallIndices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallIndices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallIndices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallIndices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallIndices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallIndices& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallIndices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.CallIndices";
  }
  protected:
  explicit CallIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFieldNumber = 1,
  };
  // .TW.Polkadot.Proto.CustomCallIndices custom = 1;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::TW::Polkadot::Proto::CustomCallIndices& custom() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CustomCallIndices* release_custom();
  ::TW::Polkadot::Proto::CustomCallIndices* mutable_custom();
  void set_allocated_custom(::TW::Polkadot::Proto::CustomCallIndices* custom);
  private:
  const ::TW::Polkadot::Proto::CustomCallIndices& _internal_custom() const;
  ::TW::Polkadot::Proto::CustomCallIndices* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::TW::Polkadot::Proto::CustomCallIndices* custom);
  ::TW::Polkadot::Proto::CustomCallIndices* unsafe_arena_release_custom();

  void clear_variant();
  VariantCase variant_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.CallIndices)
 private:
  class _Internal;
  void set_has_custom();

  inline bool has_variant() const;
  inline void clear_has_variant();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union VariantUnion {
    constexpr VariantUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Polkadot::Proto::CustomCallIndices* custom_;
  } variant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Balance_Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Balance.Transfer) */ {
 public:
  inline Balance_Transfer() : Balance_Transfer(nullptr) {}
  ~Balance_Transfer() override;
  explicit constexpr Balance_Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance_Transfer(const Balance_Transfer& from);
  Balance_Transfer(Balance_Transfer&& from) noexcept
    : Balance_Transfer() {
    *this = ::std::move(from);
  }

  inline Balance_Transfer& operator=(const Balance_Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance_Transfer& operator=(Balance_Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance_Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance_Transfer* internal_default_instance() {
    return reinterpret_cast<const Balance_Transfer*>(
               &_Balance_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Balance_Transfer& a, Balance_Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance_Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance_Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance_Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance_Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance_Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balance_Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance_Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Balance.Transfer";
  }
  protected:
  explicit Balance_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kValueFieldNumber = 2,
    kMemoFieldNumber = 3,
    kCallIndicesFieldNumber = 4,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string memo = 3;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 4;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Balance.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Balance_BatchTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Balance.BatchTransfer) */ {
 public:
  inline Balance_BatchTransfer() : Balance_BatchTransfer(nullptr) {}
  ~Balance_BatchTransfer() override;
  explicit constexpr Balance_BatchTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance_BatchTransfer(const Balance_BatchTransfer& from);
  Balance_BatchTransfer(Balance_BatchTransfer&& from) noexcept
    : Balance_BatchTransfer() {
    *this = ::std::move(from);
  }

  inline Balance_BatchTransfer& operator=(const Balance_BatchTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance_BatchTransfer& operator=(Balance_BatchTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance_BatchTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance_BatchTransfer* internal_default_instance() {
    return reinterpret_cast<const Balance_BatchTransfer*>(
               &_Balance_BatchTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Balance_BatchTransfer& a, Balance_BatchTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance_BatchTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance_BatchTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance_BatchTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance_BatchTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance_BatchTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balance_BatchTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance_BatchTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Balance.BatchTransfer";
  }
  protected:
  explicit Balance_BatchTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransfersFieldNumber = 2,
    kCallIndicesFieldNumber = 1,
  };
  // repeated .TW.Polkadot.Proto.Balance.Transfer transfers = 2;
  int transfers_size() const;
  private:
  int _internal_transfers_size() const;
  public:
  void clear_transfers();
  ::TW::Polkadot::Proto::Balance_Transfer* mutable_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_Transfer >*
      mutable_transfers();
  private:
  const ::TW::Polkadot::Proto::Balance_Transfer& _internal_transfers(int index) const;
  ::TW::Polkadot::Proto::Balance_Transfer* _internal_add_transfers();
  public:
  const ::TW::Polkadot::Proto::Balance_Transfer& transfers(int index) const;
  ::TW::Polkadot::Proto::Balance_Transfer* add_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_Transfer >&
      transfers() const;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Balance.BatchTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_Transfer > transfers_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Balance_AssetTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Balance.AssetTransfer) */ {
 public:
  inline Balance_AssetTransfer() : Balance_AssetTransfer(nullptr) {}
  ~Balance_AssetTransfer() override;
  explicit constexpr Balance_AssetTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance_AssetTransfer(const Balance_AssetTransfer& from);
  Balance_AssetTransfer(Balance_AssetTransfer&& from) noexcept
    : Balance_AssetTransfer() {
    *this = ::std::move(from);
  }

  inline Balance_AssetTransfer& operator=(const Balance_AssetTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance_AssetTransfer& operator=(Balance_AssetTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance_AssetTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance_AssetTransfer* internal_default_instance() {
    return reinterpret_cast<const Balance_AssetTransfer*>(
               &_Balance_AssetTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Balance_AssetTransfer& a, Balance_AssetTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance_AssetTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance_AssetTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance_AssetTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance_AssetTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance_AssetTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balance_AssetTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance_AssetTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Balance.AssetTransfer";
  }
  protected:
  explicit Balance_AssetTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 2,
    kValueFieldNumber = 3,
    kCallIndicesFieldNumber = 1,
    kAssetIdFieldNumber = 4,
    kFeeAssetIdFieldNumber = 5,
  };
  // string to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // uint32 asset_id = 4;
  void clear_asset_id();
  uint32_t asset_id() const;
  void set_asset_id(uint32_t value);
  private:
  uint32_t _internal_asset_id() const;
  void _internal_set_asset_id(uint32_t value);
  public:

  // uint32 fee_asset_id = 5;
  void clear_fee_asset_id();
  uint32_t fee_asset_id() const;
  void set_fee_asset_id(uint32_t value);
  private:
  uint32_t _internal_fee_asset_id() const;
  void _internal_set_fee_asset_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Balance.AssetTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  uint32_t asset_id_;
  uint32_t fee_asset_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Balance_BatchAssetTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Balance.BatchAssetTransfer) */ {
 public:
  inline Balance_BatchAssetTransfer() : Balance_BatchAssetTransfer(nullptr) {}
  ~Balance_BatchAssetTransfer() override;
  explicit constexpr Balance_BatchAssetTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance_BatchAssetTransfer(const Balance_BatchAssetTransfer& from);
  Balance_BatchAssetTransfer(Balance_BatchAssetTransfer&& from) noexcept
    : Balance_BatchAssetTransfer() {
    *this = ::std::move(from);
  }

  inline Balance_BatchAssetTransfer& operator=(const Balance_BatchAssetTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance_BatchAssetTransfer& operator=(Balance_BatchAssetTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance_BatchAssetTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance_BatchAssetTransfer* internal_default_instance() {
    return reinterpret_cast<const Balance_BatchAssetTransfer*>(
               &_Balance_BatchAssetTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Balance_BatchAssetTransfer& a, Balance_BatchAssetTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance_BatchAssetTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance_BatchAssetTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance_BatchAssetTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance_BatchAssetTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance_BatchAssetTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balance_BatchAssetTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance_BatchAssetTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Balance.BatchAssetTransfer";
  }
  protected:
  explicit Balance_BatchAssetTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransfersFieldNumber = 3,
    kCallIndicesFieldNumber = 1,
    kFeeAssetIdFieldNumber = 2,
  };
  // repeated .TW.Polkadot.Proto.Balance.AssetTransfer transfers = 3;
  int transfers_size() const;
  private:
  int _internal_transfers_size() const;
  public:
  void clear_transfers();
  ::TW::Polkadot::Proto::Balance_AssetTransfer* mutable_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_AssetTransfer >*
      mutable_transfers();
  private:
  const ::TW::Polkadot::Proto::Balance_AssetTransfer& _internal_transfers(int index) const;
  ::TW::Polkadot::Proto::Balance_AssetTransfer* _internal_add_transfers();
  public:
  const ::TW::Polkadot::Proto::Balance_AssetTransfer& transfers(int index) const;
  ::TW::Polkadot::Proto::Balance_AssetTransfer* add_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_AssetTransfer >&
      transfers() const;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // uint32 fee_asset_id = 2;
  void clear_fee_asset_id();
  uint32_t fee_asset_id() const;
  void set_fee_asset_id(uint32_t value);
  private:
  uint32_t _internal_fee_asset_id() const;
  void _internal_set_fee_asset_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_AssetTransfer > transfers_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  uint32_t fee_asset_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Balance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Balance) */ {
 public:
  inline Balance() : Balance(nullptr) {}
  ~Balance() override;
  explicit constexpr Balance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance(const Balance& from);
  Balance(Balance&& from) noexcept
    : Balance() {
    *this = ::std::move(from);
  }

  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance& operator=(Balance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kTransfer = 1,
    kBatchTransfer = 2,
    kAssetTransfer = 3,
    kBatchAssetTransfer = 4,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Balance* internal_default_instance() {
    return reinterpret_cast<const Balance*>(
               &_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Balance& a, Balance& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Balance";
  }
  protected:
  explicit Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Balance_Transfer Transfer;
  typedef Balance_BatchTransfer BatchTransfer;
  typedef Balance_AssetTransfer AssetTransfer;
  typedef Balance_BatchAssetTransfer BatchAssetTransfer;

  // accessors -------------------------------------------------------

  enum : int {
    kTransferFieldNumber = 1,
    kBatchTransferFieldNumber = 2,
    kAssetTransferFieldNumber = 3,
    kBatchAssetTransferFieldNumber = 4,
  };
  // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Polkadot::Proto::Balance_Transfer& transfer() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Balance_Transfer* release_transfer();
  ::TW::Polkadot::Proto::Balance_Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::Polkadot::Proto::Balance_Transfer* transfer);
  private:
  const ::TW::Polkadot::Proto::Balance_Transfer& _internal_transfer() const;
  ::TW::Polkadot::Proto::Balance_Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Polkadot::Proto::Balance_Transfer* transfer);
  ::TW::Polkadot::Proto::Balance_Transfer* unsafe_arena_release_transfer();

  // .TW.Polkadot.Proto.Balance.BatchTransfer batchTransfer = 2;
  bool has_batchtransfer() const;
  private:
  bool _internal_has_batchtransfer() const;
  public:
  void clear_batchtransfer();
  const ::TW::Polkadot::Proto::Balance_BatchTransfer& batchtransfer() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Balance_BatchTransfer* release_batchtransfer();
  ::TW::Polkadot::Proto::Balance_BatchTransfer* mutable_batchtransfer();
  void set_allocated_batchtransfer(::TW::Polkadot::Proto::Balance_BatchTransfer* batchtransfer);
  private:
  const ::TW::Polkadot::Proto::Balance_BatchTransfer& _internal_batchtransfer() const;
  ::TW::Polkadot::Proto::Balance_BatchTransfer* _internal_mutable_batchtransfer();
  public:
  void unsafe_arena_set_allocated_batchtransfer(
      ::TW::Polkadot::Proto::Balance_BatchTransfer* batchtransfer);
  ::TW::Polkadot::Proto::Balance_BatchTransfer* unsafe_arena_release_batchtransfer();

  // .TW.Polkadot.Proto.Balance.AssetTransfer asset_transfer = 3;
  bool has_asset_transfer() const;
  private:
  bool _internal_has_asset_transfer() const;
  public:
  void clear_asset_transfer();
  const ::TW::Polkadot::Proto::Balance_AssetTransfer& asset_transfer() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Balance_AssetTransfer* release_asset_transfer();
  ::TW::Polkadot::Proto::Balance_AssetTransfer* mutable_asset_transfer();
  void set_allocated_asset_transfer(::TW::Polkadot::Proto::Balance_AssetTransfer* asset_transfer);
  private:
  const ::TW::Polkadot::Proto::Balance_AssetTransfer& _internal_asset_transfer() const;
  ::TW::Polkadot::Proto::Balance_AssetTransfer* _internal_mutable_asset_transfer();
  public:
  void unsafe_arena_set_allocated_asset_transfer(
      ::TW::Polkadot::Proto::Balance_AssetTransfer* asset_transfer);
  ::TW::Polkadot::Proto::Balance_AssetTransfer* unsafe_arena_release_asset_transfer();

  // .TW.Polkadot.Proto.Balance.BatchAssetTransfer batch_asset_transfer = 4;
  bool has_batch_asset_transfer() const;
  private:
  bool _internal_has_batch_asset_transfer() const;
  public:
  void clear_batch_asset_transfer();
  const ::TW::Polkadot::Proto::Balance_BatchAssetTransfer& batch_asset_transfer() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* release_batch_asset_transfer();
  ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* mutable_batch_asset_transfer();
  void set_allocated_batch_asset_transfer(::TW::Polkadot::Proto::Balance_BatchAssetTransfer* batch_asset_transfer);
  private:
  const ::TW::Polkadot::Proto::Balance_BatchAssetTransfer& _internal_batch_asset_transfer() const;
  ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* _internal_mutable_batch_asset_transfer();
  public:
  void unsafe_arena_set_allocated_batch_asset_transfer(
      ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* batch_asset_transfer);
  ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* unsafe_arena_release_batch_asset_transfer();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Balance)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_batchtransfer();
  void set_has_asset_transfer();
  void set_has_batch_asset_transfer();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Polkadot::Proto::Balance_Transfer* transfer_;
    ::TW::Polkadot::Proto::Balance_BatchTransfer* batchtransfer_;
    ::TW::Polkadot::Proto::Balance_AssetTransfer* asset_transfer_;
    ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* batch_asset_transfer_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Bond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Bond) */ {
 public:
  inline Staking_Bond() : Staking_Bond(nullptr) {}
  ~Staking_Bond() override;
  explicit constexpr Staking_Bond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_Bond(const Staking_Bond& from);
  Staking_Bond(Staking_Bond&& from) noexcept
    : Staking_Bond() {
    *this = ::std::move(from);
  }

  inline Staking_Bond& operator=(const Staking_Bond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Bond& operator=(Staking_Bond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_Bond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_Bond* internal_default_instance() {
    return reinterpret_cast<const Staking_Bond*>(
               &_Staking_Bond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Staking_Bond& a, Staking_Bond& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Bond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Bond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_Bond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_Bond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_Bond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_Bond& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Bond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Bond";
  }
  protected:
  explicit Staking_Bond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
    kValueFieldNumber = 2,
    kCallIndicesFieldNumber = 4,
    kRewardDestinationFieldNumber = 3,
  };
  // string controller = 1;
  void clear_controller();
  const std::string& controller() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller();
  PROTOBUF_NODISCARD std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 4;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  void clear_reward_destination();
  ::TW::Polkadot::Proto::RewardDestination reward_destination() const;
  void set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  private:
  ::TW::Polkadot::Proto::RewardDestination _internal_reward_destination() const;
  void _internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Bond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  int reward_destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_BondAndNominate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.BondAndNominate) */ {
 public:
  inline Staking_BondAndNominate() : Staking_BondAndNominate(nullptr) {}
  ~Staking_BondAndNominate() override;
  explicit constexpr Staking_BondAndNominate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_BondAndNominate(const Staking_BondAndNominate& from);
  Staking_BondAndNominate(Staking_BondAndNominate&& from) noexcept
    : Staking_BondAndNominate() {
    *this = ::std::move(from);
  }

  inline Staking_BondAndNominate& operator=(const Staking_BondAndNominate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_BondAndNominate& operator=(Staking_BondAndNominate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_BondAndNominate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_BondAndNominate* internal_default_instance() {
    return reinterpret_cast<const Staking_BondAndNominate*>(
               &_Staking_BondAndNominate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Staking_BondAndNominate& a, Staking_BondAndNominate& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_BondAndNominate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_BondAndNominate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_BondAndNominate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_BondAndNominate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_BondAndNominate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_BondAndNominate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_BondAndNominate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.BondAndNominate";
  }
  protected:
  explicit Staking_BondAndNominate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominatorsFieldNumber = 4,
    kControllerFieldNumber = 1,
    kValueFieldNumber = 2,
    kCallIndicesFieldNumber = 5,
    kRewardDestinationFieldNumber = 3,
  };
  // repeated string nominators = 4;
  int nominators_size() const;
  private:
  int _internal_nominators_size() const;
  public:
  void clear_nominators();
  const std::string& nominators(int index) const;
  std::string* mutable_nominators(int index);
  void set_nominators(int index, const std::string& value);
  void set_nominators(int index, std::string&& value);
  void set_nominators(int index, const char* value);
  void set_nominators(int index, const char* value, size_t size);
  std::string* add_nominators();
  void add_nominators(const std::string& value);
  void add_nominators(std::string&& value);
  void add_nominators(const char* value);
  void add_nominators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nominators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nominators();
  private:
  const std::string& _internal_nominators(int index) const;
  std::string* _internal_add_nominators();
  public:

  // string controller = 1;
  void clear_controller();
  const std::string& controller() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller();
  PROTOBUF_NODISCARD std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 5;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  void clear_reward_destination();
  ::TW::Polkadot::Proto::RewardDestination reward_destination() const;
  void set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  private:
  ::TW::Polkadot::Proto::RewardDestination _internal_reward_destination() const;
  void _internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.BondAndNominate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nominators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  int reward_destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_BondExtra final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.BondExtra) */ {
 public:
  inline Staking_BondExtra() : Staking_BondExtra(nullptr) {}
  ~Staking_BondExtra() override;
  explicit constexpr Staking_BondExtra(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_BondExtra(const Staking_BondExtra& from);
  Staking_BondExtra(Staking_BondExtra&& from) noexcept
    : Staking_BondExtra() {
    *this = ::std::move(from);
  }

  inline Staking_BondExtra& operator=(const Staking_BondExtra& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_BondExtra& operator=(Staking_BondExtra&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_BondExtra& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_BondExtra* internal_default_instance() {
    return reinterpret_cast<const Staking_BondExtra*>(
               &_Staking_BondExtra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Staking_BondExtra& a, Staking_BondExtra& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_BondExtra* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_BondExtra* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_BondExtra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_BondExtra>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_BondExtra& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_BondExtra& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_BondExtra* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.BondExtra";
  }
  protected:
  explicit Staking_BondExtra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCallIndicesFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.BondExtra)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Unbond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Unbond) */ {
 public:
  inline Staking_Unbond() : Staking_Unbond(nullptr) {}
  ~Staking_Unbond() override;
  explicit constexpr Staking_Unbond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_Unbond(const Staking_Unbond& from);
  Staking_Unbond(Staking_Unbond&& from) noexcept
    : Staking_Unbond() {
    *this = ::std::move(from);
  }

  inline Staking_Unbond& operator=(const Staking_Unbond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Unbond& operator=(Staking_Unbond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_Unbond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_Unbond* internal_default_instance() {
    return reinterpret_cast<const Staking_Unbond*>(
               &_Staking_Unbond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Staking_Unbond& a, Staking_Unbond& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Unbond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Unbond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_Unbond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_Unbond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_Unbond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_Unbond& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Unbond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Unbond";
  }
  protected:
  explicit Staking_Unbond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCallIndicesFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Unbond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Rebond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Rebond) */ {
 public:
  inline Staking_Rebond() : Staking_Rebond(nullptr) {}
  ~Staking_Rebond() override;
  explicit constexpr Staking_Rebond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_Rebond(const Staking_Rebond& from);
  Staking_Rebond(Staking_Rebond&& from) noexcept
    : Staking_Rebond() {
    *this = ::std::move(from);
  }

  inline Staking_Rebond& operator=(const Staking_Rebond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Rebond& operator=(Staking_Rebond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_Rebond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_Rebond* internal_default_instance() {
    return reinterpret_cast<const Staking_Rebond*>(
               &_Staking_Rebond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Staking_Rebond& a, Staking_Rebond& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Rebond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Rebond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_Rebond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_Rebond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_Rebond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_Rebond& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Rebond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Rebond";
  }
  protected:
  explicit Staking_Rebond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCallIndicesFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Rebond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_WithdrawUnbonded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.WithdrawUnbonded) */ {
 public:
  inline Staking_WithdrawUnbonded() : Staking_WithdrawUnbonded(nullptr) {}
  ~Staking_WithdrawUnbonded() override;
  explicit constexpr Staking_WithdrawUnbonded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_WithdrawUnbonded(const Staking_WithdrawUnbonded& from);
  Staking_WithdrawUnbonded(Staking_WithdrawUnbonded&& from) noexcept
    : Staking_WithdrawUnbonded() {
    *this = ::std::move(from);
  }

  inline Staking_WithdrawUnbonded& operator=(const Staking_WithdrawUnbonded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_WithdrawUnbonded& operator=(Staking_WithdrawUnbonded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_WithdrawUnbonded& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_WithdrawUnbonded* internal_default_instance() {
    return reinterpret_cast<const Staking_WithdrawUnbonded*>(
               &_Staking_WithdrawUnbonded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Staking_WithdrawUnbonded& a, Staking_WithdrawUnbonded& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_WithdrawUnbonded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_WithdrawUnbonded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_WithdrawUnbonded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_WithdrawUnbonded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_WithdrawUnbonded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_WithdrawUnbonded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_WithdrawUnbonded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.WithdrawUnbonded";
  }
  protected:
  explicit Staking_WithdrawUnbonded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallIndicesFieldNumber = 2,
    kSlashingSpansFieldNumber = 1,
  };
  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // int32 slashing_spans = 1;
  void clear_slashing_spans();
  int32_t slashing_spans() const;
  void set_slashing_spans(int32_t value);
  private:
  int32_t _internal_slashing_spans() const;
  void _internal_set_slashing_spans(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  int32_t slashing_spans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Nominate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Nominate) */ {
 public:
  inline Staking_Nominate() : Staking_Nominate(nullptr) {}
  ~Staking_Nominate() override;
  explicit constexpr Staking_Nominate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_Nominate(const Staking_Nominate& from);
  Staking_Nominate(Staking_Nominate&& from) noexcept
    : Staking_Nominate() {
    *this = ::std::move(from);
  }

  inline Staking_Nominate& operator=(const Staking_Nominate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Nominate& operator=(Staking_Nominate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_Nominate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_Nominate* internal_default_instance() {
    return reinterpret_cast<const Staking_Nominate*>(
               &_Staking_Nominate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Staking_Nominate& a, Staking_Nominate& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Nominate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Nominate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_Nominate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_Nominate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_Nominate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_Nominate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Nominate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Nominate";
  }
  protected:
  explicit Staking_Nominate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominatorsFieldNumber = 1,
    kCallIndicesFieldNumber = 2,
  };
  // repeated string nominators = 1;
  int nominators_size() const;
  private:
  int _internal_nominators_size() const;
  public:
  void clear_nominators();
  const std::string& nominators(int index) const;
  std::string* mutable_nominators(int index);
  void set_nominators(int index, const std::string& value);
  void set_nominators(int index, std::string&& value);
  void set_nominators(int index, const char* value);
  void set_nominators(int index, const char* value, size_t size);
  std::string* add_nominators();
  void add_nominators(const std::string& value);
  void add_nominators(std::string&& value);
  void add_nominators(const char* value);
  void add_nominators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nominators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nominators();
  private:
  const std::string& _internal_nominators(int index) const;
  std::string* _internal_add_nominators();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Nominate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nominators_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_ChillAndUnbond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.ChillAndUnbond) */ {
 public:
  inline Staking_ChillAndUnbond() : Staking_ChillAndUnbond(nullptr) {}
  ~Staking_ChillAndUnbond() override;
  explicit constexpr Staking_ChillAndUnbond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_ChillAndUnbond(const Staking_ChillAndUnbond& from);
  Staking_ChillAndUnbond(Staking_ChillAndUnbond&& from) noexcept
    : Staking_ChillAndUnbond() {
    *this = ::std::move(from);
  }

  inline Staking_ChillAndUnbond& operator=(const Staking_ChillAndUnbond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_ChillAndUnbond& operator=(Staking_ChillAndUnbond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_ChillAndUnbond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_ChillAndUnbond* internal_default_instance() {
    return reinterpret_cast<const Staking_ChillAndUnbond*>(
               &_Staking_ChillAndUnbond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Staking_ChillAndUnbond& a, Staking_ChillAndUnbond& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_ChillAndUnbond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_ChillAndUnbond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_ChillAndUnbond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_ChillAndUnbond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_ChillAndUnbond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_ChillAndUnbond& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_ChillAndUnbond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.ChillAndUnbond";
  }
  protected:
  explicit Staking_ChillAndUnbond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCallIndicesFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.ChillAndUnbond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking_Chill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking.Chill) */ {
 public:
  inline Staking_Chill() : Staking_Chill(nullptr) {}
  ~Staking_Chill() override;
  explicit constexpr Staking_Chill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking_Chill(const Staking_Chill& from);
  Staking_Chill(Staking_Chill&& from) noexcept
    : Staking_Chill() {
    *this = ::std::move(from);
  }

  inline Staking_Chill& operator=(const Staking_Chill& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking_Chill& operator=(Staking_Chill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking_Chill& default_instance() {
    return *internal_default_instance();
  }
  static inline const Staking_Chill* internal_default_instance() {
    return reinterpret_cast<const Staking_Chill*>(
               &_Staking_Chill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Staking_Chill& a, Staking_Chill& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking_Chill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking_Chill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking_Chill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking_Chill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking_Chill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking_Chill& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking_Chill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking.Chill";
  }
  protected:
  explicit Staking_Chill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallIndicesFieldNumber = 1,
  };
  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking.Chill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Staking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Staking) */ {
 public:
  inline Staking() : Staking(nullptr) {}
  ~Staking() override;
  explicit constexpr Staking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Staking(const Staking& from);
  Staking(Staking&& from) noexcept
    : Staking() {
    *this = ::std::move(from);
  }

  inline Staking& operator=(const Staking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Staking& operator=(Staking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Staking& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kBond = 1,
    kBondAndNominate = 2,
    kBondExtra = 3,
    kUnbond = 4,
    kWithdrawUnbonded = 5,
    kNominate = 6,
    kChill = 7,
    kChillAndUnbond = 8,
    kRebond = 9,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Staking* internal_default_instance() {
    return reinterpret_cast<const Staking*>(
               &_Staking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Staking& a, Staking& b) {
    a.Swap(&b);
  }
  inline void Swap(Staking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Staking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Staking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Staking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Staking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Staking& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Staking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Staking";
  }
  protected:
  explicit Staking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Staking_Bond Bond;
  typedef Staking_BondAndNominate BondAndNominate;
  typedef Staking_BondExtra BondExtra;
  typedef Staking_Unbond Unbond;
  typedef Staking_Rebond Rebond;
  typedef Staking_WithdrawUnbonded WithdrawUnbonded;
  typedef Staking_Nominate Nominate;
  typedef Staking_ChillAndUnbond ChillAndUnbond;
  typedef Staking_Chill Chill;

  // accessors -------------------------------------------------------

  enum : int {
    kBondFieldNumber = 1,
    kBondAndNominateFieldNumber = 2,
    kBondExtraFieldNumber = 3,
    kUnbondFieldNumber = 4,
    kWithdrawUnbondedFieldNumber = 5,
    kNominateFieldNumber = 6,
    kChillFieldNumber = 7,
    kChillAndUnbondFieldNumber = 8,
    kRebondFieldNumber = 9,
  };
  // .TW.Polkadot.Proto.Staking.Bond bond = 1;
  bool has_bond() const;
  private:
  bool _internal_has_bond() const;
  public:
  void clear_bond();
  const ::TW::Polkadot::Proto::Staking_Bond& bond() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_Bond* release_bond();
  ::TW::Polkadot::Proto::Staking_Bond* mutable_bond();
  void set_allocated_bond(::TW::Polkadot::Proto::Staking_Bond* bond);
  private:
  const ::TW::Polkadot::Proto::Staking_Bond& _internal_bond() const;
  ::TW::Polkadot::Proto::Staking_Bond* _internal_mutable_bond();
  public:
  void unsafe_arena_set_allocated_bond(
      ::TW::Polkadot::Proto::Staking_Bond* bond);
  ::TW::Polkadot::Proto::Staking_Bond* unsafe_arena_release_bond();

  // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
  bool has_bond_and_nominate() const;
  private:
  bool _internal_has_bond_and_nominate() const;
  public:
  void clear_bond_and_nominate();
  const ::TW::Polkadot::Proto::Staking_BondAndNominate& bond_and_nominate() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_BondAndNominate* release_bond_and_nominate();
  ::TW::Polkadot::Proto::Staking_BondAndNominate* mutable_bond_and_nominate();
  void set_allocated_bond_and_nominate(::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate);
  private:
  const ::TW::Polkadot::Proto::Staking_BondAndNominate& _internal_bond_and_nominate() const;
  ::TW::Polkadot::Proto::Staking_BondAndNominate* _internal_mutable_bond_and_nominate();
  public:
  void unsafe_arena_set_allocated_bond_and_nominate(
      ::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate);
  ::TW::Polkadot::Proto::Staking_BondAndNominate* unsafe_arena_release_bond_and_nominate();

  // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
  bool has_bond_extra() const;
  private:
  bool _internal_has_bond_extra() const;
  public:
  void clear_bond_extra();
  const ::TW::Polkadot::Proto::Staking_BondExtra& bond_extra() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_BondExtra* release_bond_extra();
  ::TW::Polkadot::Proto::Staking_BondExtra* mutable_bond_extra();
  void set_allocated_bond_extra(::TW::Polkadot::Proto::Staking_BondExtra* bond_extra);
  private:
  const ::TW::Polkadot::Proto::Staking_BondExtra& _internal_bond_extra() const;
  ::TW::Polkadot::Proto::Staking_BondExtra* _internal_mutable_bond_extra();
  public:
  void unsafe_arena_set_allocated_bond_extra(
      ::TW::Polkadot::Proto::Staking_BondExtra* bond_extra);
  ::TW::Polkadot::Proto::Staking_BondExtra* unsafe_arena_release_bond_extra();

  // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
  bool has_unbond() const;
  private:
  bool _internal_has_unbond() const;
  public:
  void clear_unbond();
  const ::TW::Polkadot::Proto::Staking_Unbond& unbond() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_Unbond* release_unbond();
  ::TW::Polkadot::Proto::Staking_Unbond* mutable_unbond();
  void set_allocated_unbond(::TW::Polkadot::Proto::Staking_Unbond* unbond);
  private:
  const ::TW::Polkadot::Proto::Staking_Unbond& _internal_unbond() const;
  ::TW::Polkadot::Proto::Staking_Unbond* _internal_mutable_unbond();
  public:
  void unsafe_arena_set_allocated_unbond(
      ::TW::Polkadot::Proto::Staking_Unbond* unbond);
  ::TW::Polkadot::Proto::Staking_Unbond* unsafe_arena_release_unbond();

  // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
  bool has_withdraw_unbonded() const;
  private:
  bool _internal_has_withdraw_unbonded() const;
  public:
  void clear_withdraw_unbonded();
  const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& withdraw_unbonded() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* release_withdraw_unbonded();
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* mutable_withdraw_unbonded();
  void set_allocated_withdraw_unbonded(::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded);
  private:
  const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& _internal_withdraw_unbonded() const;
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* _internal_mutable_withdraw_unbonded();
  public:
  void unsafe_arena_set_allocated_withdraw_unbonded(
      ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded);
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* unsafe_arena_release_withdraw_unbonded();

  // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
  bool has_nominate() const;
  private:
  bool _internal_has_nominate() const;
  public:
  void clear_nominate();
  const ::TW::Polkadot::Proto::Staking_Nominate& nominate() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_Nominate* release_nominate();
  ::TW::Polkadot::Proto::Staking_Nominate* mutable_nominate();
  void set_allocated_nominate(::TW::Polkadot::Proto::Staking_Nominate* nominate);
  private:
  const ::TW::Polkadot::Proto::Staking_Nominate& _internal_nominate() const;
  ::TW::Polkadot::Proto::Staking_Nominate* _internal_mutable_nominate();
  public:
  void unsafe_arena_set_allocated_nominate(
      ::TW::Polkadot::Proto::Staking_Nominate* nominate);
  ::TW::Polkadot::Proto::Staking_Nominate* unsafe_arena_release_nominate();

  // .TW.Polkadot.Proto.Staking.Chill chill = 7;
  bool has_chill() const;
  private:
  bool _internal_has_chill() const;
  public:
  void clear_chill();
  const ::TW::Polkadot::Proto::Staking_Chill& chill() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_Chill* release_chill();
  ::TW::Polkadot::Proto::Staking_Chill* mutable_chill();
  void set_allocated_chill(::TW::Polkadot::Proto::Staking_Chill* chill);
  private:
  const ::TW::Polkadot::Proto::Staking_Chill& _internal_chill() const;
  ::TW::Polkadot::Proto::Staking_Chill* _internal_mutable_chill();
  public:
  void unsafe_arena_set_allocated_chill(
      ::TW::Polkadot::Proto::Staking_Chill* chill);
  ::TW::Polkadot::Proto::Staking_Chill* unsafe_arena_release_chill();

  // .TW.Polkadot.Proto.Staking.ChillAndUnbond chill_and_unbond = 8;
  bool has_chill_and_unbond() const;
  private:
  bool _internal_has_chill_and_unbond() const;
  public:
  void clear_chill_and_unbond();
  const ::TW::Polkadot::Proto::Staking_ChillAndUnbond& chill_and_unbond() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_ChillAndUnbond* release_chill_and_unbond();
  ::TW::Polkadot::Proto::Staking_ChillAndUnbond* mutable_chill_and_unbond();
  void set_allocated_chill_and_unbond(::TW::Polkadot::Proto::Staking_ChillAndUnbond* chill_and_unbond);
  private:
  const ::TW::Polkadot::Proto::Staking_ChillAndUnbond& _internal_chill_and_unbond() const;
  ::TW::Polkadot::Proto::Staking_ChillAndUnbond* _internal_mutable_chill_and_unbond();
  public:
  void unsafe_arena_set_allocated_chill_and_unbond(
      ::TW::Polkadot::Proto::Staking_ChillAndUnbond* chill_and_unbond);
  ::TW::Polkadot::Proto::Staking_ChillAndUnbond* unsafe_arena_release_chill_and_unbond();

  // .TW.Polkadot.Proto.Staking.Rebond rebond = 9;
  bool has_rebond() const;
  private:
  bool _internal_has_rebond() const;
  public:
  void clear_rebond();
  const ::TW::Polkadot::Proto::Staking_Rebond& rebond() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking_Rebond* release_rebond();
  ::TW::Polkadot::Proto::Staking_Rebond* mutable_rebond();
  void set_allocated_rebond(::TW::Polkadot::Proto::Staking_Rebond* rebond);
  private:
  const ::TW::Polkadot::Proto::Staking_Rebond& _internal_rebond() const;
  ::TW::Polkadot::Proto::Staking_Rebond* _internal_mutable_rebond();
  public:
  void unsafe_arena_set_allocated_rebond(
      ::TW::Polkadot::Proto::Staking_Rebond* rebond);
  ::TW::Polkadot::Proto::Staking_Rebond* unsafe_arena_release_rebond();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Staking)
 private:
  class _Internal;
  void set_has_bond();
  void set_has_bond_and_nominate();
  void set_has_bond_extra();
  void set_has_unbond();
  void set_has_withdraw_unbonded();
  void set_has_nominate();
  void set_has_chill();
  void set_has_chill_and_unbond();
  void set_has_rebond();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Polkadot::Proto::Staking_Bond* bond_;
    ::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate_;
    ::TW::Polkadot::Proto::Staking_BondExtra* bond_extra_;
    ::TW::Polkadot::Proto::Staking_Unbond* unbond_;
    ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded_;
    ::TW::Polkadot::Proto::Staking_Nominate* nominate_;
    ::TW::Polkadot::Proto::Staking_Chill* chill_;
    ::TW::Polkadot::Proto::Staking_ChillAndUnbond* chill_and_unbond_;
    ::TW::Polkadot::Proto::Staking_Rebond* rebond_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Identity_JoinIdentityAsKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Identity.JoinIdentityAsKey) */ {
 public:
  inline Identity_JoinIdentityAsKey() : Identity_JoinIdentityAsKey(nullptr) {}
  ~Identity_JoinIdentityAsKey() override;
  explicit constexpr Identity_JoinIdentityAsKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identity_JoinIdentityAsKey(const Identity_JoinIdentityAsKey& from);
  Identity_JoinIdentityAsKey(Identity_JoinIdentityAsKey&& from) noexcept
    : Identity_JoinIdentityAsKey() {
    *this = ::std::move(from);
  }

  inline Identity_JoinIdentityAsKey& operator=(const Identity_JoinIdentityAsKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity_JoinIdentityAsKey& operator=(Identity_JoinIdentityAsKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Identity_JoinIdentityAsKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const Identity_JoinIdentityAsKey* internal_default_instance() {
    return reinterpret_cast<const Identity_JoinIdentityAsKey*>(
               &_Identity_JoinIdentityAsKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Identity_JoinIdentityAsKey& a, Identity_JoinIdentityAsKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity_JoinIdentityAsKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identity_JoinIdentityAsKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Identity_JoinIdentityAsKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Identity_JoinIdentityAsKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Identity_JoinIdentityAsKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Identity_JoinIdentityAsKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity_JoinIdentityAsKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Identity.JoinIdentityAsKey";
  }
  protected:
  explicit Identity_JoinIdentityAsKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallIndicesFieldNumber = 1,
    kAuthIdFieldNumber = 2,
  };
  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // uint64 auth_id = 2;
  void clear_auth_id();
  uint64_t auth_id() const;
  void set_auth_id(uint64_t value);
  private:
  uint64_t _internal_auth_id() const;
  void _internal_set_auth_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  uint64_t auth_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Identity_AddAuthorization_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Identity.AddAuthorization.Data) */ {
 public:
  inline Identity_AddAuthorization_Data() : Identity_AddAuthorization_Data(nullptr) {}
  ~Identity_AddAuthorization_Data() override;
  explicit constexpr Identity_AddAuthorization_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identity_AddAuthorization_Data(const Identity_AddAuthorization_Data& from);
  Identity_AddAuthorization_Data(Identity_AddAuthorization_Data&& from) noexcept
    : Identity_AddAuthorization_Data() {
    *this = ::std::move(from);
  }

  inline Identity_AddAuthorization_Data& operator=(const Identity_AddAuthorization_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity_AddAuthorization_Data& operator=(Identity_AddAuthorization_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Identity_AddAuthorization_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Identity_AddAuthorization_Data* internal_default_instance() {
    return reinterpret_cast<const Identity_AddAuthorization_Data*>(
               &_Identity_AddAuthorization_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Identity_AddAuthorization_Data& a, Identity_AddAuthorization_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity_AddAuthorization_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identity_AddAuthorization_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Identity_AddAuthorization_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Identity_AddAuthorization_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Identity_AddAuthorization_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Identity_AddAuthorization_Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity_AddAuthorization_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Identity.AddAuthorization.Data";
  }
  protected:
  explicit Identity_AddAuthorization_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Identity_AddAuthorization_AuthData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData) */ {
 public:
  inline Identity_AddAuthorization_AuthData() : Identity_AddAuthorization_AuthData(nullptr) {}
  ~Identity_AddAuthorization_AuthData() override;
  explicit constexpr Identity_AddAuthorization_AuthData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identity_AddAuthorization_AuthData(const Identity_AddAuthorization_AuthData& from);
  Identity_AddAuthorization_AuthData(Identity_AddAuthorization_AuthData&& from) noexcept
    : Identity_AddAuthorization_AuthData() {
    *this = ::std::move(from);
  }

  inline Identity_AddAuthorization_AuthData& operator=(const Identity_AddAuthorization_AuthData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity_AddAuthorization_AuthData& operator=(Identity_AddAuthorization_AuthData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Identity_AddAuthorization_AuthData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Identity_AddAuthorization_AuthData* internal_default_instance() {
    return reinterpret_cast<const Identity_AddAuthorization_AuthData*>(
               &_Identity_AddAuthorization_AuthData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Identity_AddAuthorization_AuthData& a, Identity_AddAuthorization_AuthData& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity_AddAuthorization_AuthData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identity_AddAuthorization_AuthData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Identity_AddAuthorization_AuthData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Identity_AddAuthorization_AuthData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Identity_AddAuthorization_AuthData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Identity_AddAuthorization_AuthData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity_AddAuthorization_AuthData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Identity.AddAuthorization.AuthData";
  }
  protected:
  explicit Identity_AddAuthorization_AuthData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
    kExtrinsicFieldNumber = 2,
    kPortfolioFieldNumber = 3,
  };
  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data asset = 1;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& asset() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* release_asset();
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* mutable_asset();
  void set_allocated_asset(::TW::Polkadot::Proto::Identity_AddAuthorization_Data* asset);
  private:
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& _internal_asset() const;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* asset);
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* unsafe_arena_release_asset();

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data extrinsic = 2;
  bool has_extrinsic() const;
  private:
  bool _internal_has_extrinsic() const;
  public:
  void clear_extrinsic();
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& extrinsic() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* release_extrinsic();
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* mutable_extrinsic();
  void set_allocated_extrinsic(::TW::Polkadot::Proto::Identity_AddAuthorization_Data* extrinsic);
  private:
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& _internal_extrinsic() const;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* _internal_mutable_extrinsic();
  public:
  void unsafe_arena_set_allocated_extrinsic(
      ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* extrinsic);
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* unsafe_arena_release_extrinsic();

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data portfolio = 3;
  bool has_portfolio() const;
  private:
  bool _internal_has_portfolio() const;
  public:
  void clear_portfolio();
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& portfolio() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* release_portfolio();
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* mutable_portfolio();
  void set_allocated_portfolio(::TW::Polkadot::Proto::Identity_AddAuthorization_Data* portfolio);
  private:
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& _internal_portfolio() const;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* _internal_mutable_portfolio();
  public:
  void unsafe_arena_set_allocated_portfolio(
      ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* portfolio);
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* unsafe_arena_release_portfolio();

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* asset_;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* extrinsic_;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* portfolio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Identity_AddAuthorization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Identity.AddAuthorization) */ {
 public:
  inline Identity_AddAuthorization() : Identity_AddAuthorization(nullptr) {}
  ~Identity_AddAuthorization() override;
  explicit constexpr Identity_AddAuthorization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identity_AddAuthorization(const Identity_AddAuthorization& from);
  Identity_AddAuthorization(Identity_AddAuthorization&& from) noexcept
    : Identity_AddAuthorization() {
    *this = ::std::move(from);
  }

  inline Identity_AddAuthorization& operator=(const Identity_AddAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity_AddAuthorization& operator=(Identity_AddAuthorization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Identity_AddAuthorization& default_instance() {
    return *internal_default_instance();
  }
  static inline const Identity_AddAuthorization* internal_default_instance() {
    return reinterpret_cast<const Identity_AddAuthorization*>(
               &_Identity_AddAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Identity_AddAuthorization& a, Identity_AddAuthorization& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity_AddAuthorization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identity_AddAuthorization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Identity_AddAuthorization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Identity_AddAuthorization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Identity_AddAuthorization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Identity_AddAuthorization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity_AddAuthorization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Identity.AddAuthorization";
  }
  protected:
  explicit Identity_AddAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Identity_AddAuthorization_Data Data;
  typedef Identity_AddAuthorization_AuthData AuthData;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kCallIndicesFieldNumber = 1,
    kDataFieldNumber = 3,
    kExpiryFieldNumber = 4,
  };
  // string target = 2;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  bool has_call_indices() const;
  private:
  bool _internal_has_call_indices() const;
  public:
  void clear_call_indices();
  const ::TW::Polkadot::Proto::CallIndices& call_indices() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::CallIndices* release_call_indices();
  ::TW::Polkadot::Proto::CallIndices* mutable_call_indices();
  void set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices);
  private:
  const ::TW::Polkadot::Proto::CallIndices& _internal_call_indices() const;
  ::TW::Polkadot::Proto::CallIndices* _internal_mutable_call_indices();
  public:
  void unsafe_arena_set_allocated_call_indices(
      ::TW::Polkadot::Proto::CallIndices* call_indices);
  ::TW::Polkadot::Proto::CallIndices* unsafe_arena_release_call_indices();

  // .TW.Polkadot.Proto.Identity.AddAuthorization.AuthData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData& data() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* release_data();
  ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* mutable_data();
  void set_allocated_data(::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* data);
  private:
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData& _internal_data() const;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* data);
  ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* unsafe_arena_release_data();

  // uint64 expiry = 4;
  void clear_expiry();
  uint64_t expiry() const;
  void set_expiry(uint64_t value);
  private:
  uint64_t _internal_expiry() const;
  void _internal_set_expiry(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Identity.AddAuthorization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::TW::Polkadot::Proto::CallIndices* call_indices_;
  ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* data_;
  uint64_t expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class Identity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.Identity) */ {
 public:
  inline Identity() : Identity(nullptr) {}
  ~Identity() override;
  explicit constexpr Identity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identity(const Identity& from);
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity& operator=(Identity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Identity& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kJoinIdentityAsKey = 1,
    kAddAuthorization = 2,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Identity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Identity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.Identity";
  }
  protected:
  explicit Identity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Identity_JoinIdentityAsKey JoinIdentityAsKey;
  typedef Identity_AddAuthorization AddAuthorization;

  // accessors -------------------------------------------------------

  enum : int {
    kJoinIdentityAsKeyFieldNumber = 1,
    kAddAuthorizationFieldNumber = 2,
  };
  // .TW.Polkadot.Proto.Identity.JoinIdentityAsKey join_identity_as_key = 1;
  bool has_join_identity_as_key() const;
  private:
  bool _internal_has_join_identity_as_key() const;
  public:
  void clear_join_identity_as_key();
  const ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey& join_identity_as_key() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* release_join_identity_as_key();
  ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* mutable_join_identity_as_key();
  void set_allocated_join_identity_as_key(::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* join_identity_as_key);
  private:
  const ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey& _internal_join_identity_as_key() const;
  ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* _internal_mutable_join_identity_as_key();
  public:
  void unsafe_arena_set_allocated_join_identity_as_key(
      ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* join_identity_as_key);
  ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* unsafe_arena_release_join_identity_as_key();

  // .TW.Polkadot.Proto.Identity.AddAuthorization add_authorization = 2;
  bool has_add_authorization() const;
  private:
  bool _internal_has_add_authorization() const;
  public:
  void clear_add_authorization();
  const ::TW::Polkadot::Proto::Identity_AddAuthorization& add_authorization() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Identity_AddAuthorization* release_add_authorization();
  ::TW::Polkadot::Proto::Identity_AddAuthorization* mutable_add_authorization();
  void set_allocated_add_authorization(::TW::Polkadot::Proto::Identity_AddAuthorization* add_authorization);
  private:
  const ::TW::Polkadot::Proto::Identity_AddAuthorization& _internal_add_authorization() const;
  ::TW::Polkadot::Proto::Identity_AddAuthorization* _internal_mutable_add_authorization();
  public:
  void unsafe_arena_set_allocated_add_authorization(
      ::TW::Polkadot::Proto::Identity_AddAuthorization* add_authorization);
  ::TW::Polkadot::Proto::Identity_AddAuthorization* unsafe_arena_release_add_authorization();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.Identity)
 private:
  class _Internal;
  void set_has_join_identity_as_key();
  void set_has_add_authorization();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* join_identity_as_key_;
    ::TW::Polkadot::Proto::Identity_AddAuthorization* add_authorization_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class PolymeshCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.PolymeshCall) */ {
 public:
  inline PolymeshCall() : PolymeshCall(nullptr) {}
  ~PolymeshCall() override;
  explicit constexpr PolymeshCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolymeshCall(const PolymeshCall& from);
  PolymeshCall(PolymeshCall&& from) noexcept
    : PolymeshCall() {
    *this = ::std::move(from);
  }

  inline PolymeshCall& operator=(const PolymeshCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolymeshCall& operator=(PolymeshCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolymeshCall& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kIdentityCall = 2,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const PolymeshCall* internal_default_instance() {
    return reinterpret_cast<const PolymeshCall*>(
               &_PolymeshCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PolymeshCall& a, PolymeshCall& b) {
    a.Swap(&b);
  }
  inline void Swap(PolymeshCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolymeshCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolymeshCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolymeshCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolymeshCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolymeshCall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolymeshCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.PolymeshCall";
  }
  protected:
  explicit PolymeshCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityCallFieldNumber = 2,
  };
  // .TW.Polkadot.Proto.Identity identity_call = 2;
  bool has_identity_call() const;
  private:
  bool _internal_has_identity_call() const;
  public:
  void clear_identity_call();
  const ::TW::Polkadot::Proto::Identity& identity_call() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Identity* release_identity_call();
  ::TW::Polkadot::Proto::Identity* mutable_identity_call();
  void set_allocated_identity_call(::TW::Polkadot::Proto::Identity* identity_call);
  private:
  const ::TW::Polkadot::Proto::Identity& _internal_identity_call() const;
  ::TW::Polkadot::Proto::Identity* _internal_mutable_identity_call();
  public:
  void unsafe_arena_set_allocated_identity_call(
      ::TW::Polkadot::Proto::Identity* identity_call);
  ::TW::Polkadot::Proto::Identity* unsafe_arena_release_identity_call();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.PolymeshCall)
 private:
  class _Internal;
  void set_has_identity_call();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Polkadot::Proto::Identity* identity_call_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kBalanceCall = 11,
    kStakingCall = 12,
    kPolymeshCall = 13,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 1,
    kGenesisHashFieldNumber = 2,
    kTipFieldNumber = 6,
    kPrivateKeyFieldNumber = 8,
    kEraFieldNumber = 7,
    kNonceFieldNumber = 3,
    kSpecVersionFieldNumber = 4,
    kTransactionVersionFieldNumber = 5,
    kNetworkFieldNumber = 9,
    kMultiAddressFieldNumber = 10,
    kBalanceCallFieldNumber = 11,
    kStakingCallFieldNumber = 12,
    kPolymeshCallFieldNumber = 13,
  };
  // bytes block_hash = 1;
  void clear_block_hash();
  const std::string& block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // bytes genesis_hash = 2;
  void clear_genesis_hash();
  const std::string& genesis_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_genesis_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_genesis_hash();
  PROTOBUF_NODISCARD std::string* release_genesis_hash();
  void set_allocated_genesis_hash(std::string* genesis_hash);
  private:
  const std::string& _internal_genesis_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_genesis_hash(const std::string& value);
  std::string* _internal_mutable_genesis_hash();
  public:

  // bytes tip = 6;
  void clear_tip();
  const std::string& tip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tip();
  PROTOBUF_NODISCARD std::string* release_tip();
  void set_allocated_tip(std::string* tip);
  private:
  const std::string& _internal_tip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tip(const std::string& value);
  std::string* _internal_mutable_tip();
  public:

  // bytes private_key = 8;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Polkadot.Proto.Era era = 7;
  bool has_era() const;
  private:
  bool _internal_has_era() const;
  public:
  void clear_era();
  const ::TW::Polkadot::Proto::Era& era() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Era* release_era();
  ::TW::Polkadot::Proto::Era* mutable_era();
  void set_allocated_era(::TW::Polkadot::Proto::Era* era);
  private:
  const ::TW::Polkadot::Proto::Era& _internal_era() const;
  ::TW::Polkadot::Proto::Era* _internal_mutable_era();
  public:
  void unsafe_arena_set_allocated_era(
      ::TW::Polkadot::Proto::Era* era);
  ::TW::Polkadot::Proto::Era* unsafe_arena_release_era();

  // uint64 nonce = 3;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // uint32 spec_version = 4;
  void clear_spec_version();
  uint32_t spec_version() const;
  void set_spec_version(uint32_t value);
  private:
  uint32_t _internal_spec_version() const;
  void _internal_set_spec_version(uint32_t value);
  public:

  // uint32 transaction_version = 5;
  void clear_transaction_version();
  uint32_t transaction_version() const;
  void set_transaction_version(uint32_t value);
  private:
  uint32_t _internal_transaction_version() const;
  void _internal_set_transaction_version(uint32_t value);
  public:

  // uint32 network = 9;
  void clear_network();
  uint32_t network() const;
  void set_network(uint32_t value);
  private:
  uint32_t _internal_network() const;
  void _internal_set_network(uint32_t value);
  public:

  // bool multi_address = 10;
  void clear_multi_address();
  bool multi_address() const;
  void set_multi_address(bool value);
  private:
  bool _internal_multi_address() const;
  void _internal_set_multi_address(bool value);
  public:

  // .TW.Polkadot.Proto.Balance balance_call = 11;
  bool has_balance_call() const;
  private:
  bool _internal_has_balance_call() const;
  public:
  void clear_balance_call();
  const ::TW::Polkadot::Proto::Balance& balance_call() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Balance* release_balance_call();
  ::TW::Polkadot::Proto::Balance* mutable_balance_call();
  void set_allocated_balance_call(::TW::Polkadot::Proto::Balance* balance_call);
  private:
  const ::TW::Polkadot::Proto::Balance& _internal_balance_call() const;
  ::TW::Polkadot::Proto::Balance* _internal_mutable_balance_call();
  public:
  void unsafe_arena_set_allocated_balance_call(
      ::TW::Polkadot::Proto::Balance* balance_call);
  ::TW::Polkadot::Proto::Balance* unsafe_arena_release_balance_call();

  // .TW.Polkadot.Proto.Staking staking_call = 12;
  bool has_staking_call() const;
  private:
  bool _internal_has_staking_call() const;
  public:
  void clear_staking_call();
  const ::TW::Polkadot::Proto::Staking& staking_call() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::Staking* release_staking_call();
  ::TW::Polkadot::Proto::Staking* mutable_staking_call();
  void set_allocated_staking_call(::TW::Polkadot::Proto::Staking* staking_call);
  private:
  const ::TW::Polkadot::Proto::Staking& _internal_staking_call() const;
  ::TW::Polkadot::Proto::Staking* _internal_mutable_staking_call();
  public:
  void unsafe_arena_set_allocated_staking_call(
      ::TW::Polkadot::Proto::Staking* staking_call);
  ::TW::Polkadot::Proto::Staking* unsafe_arena_release_staking_call();

  // .TW.Polkadot.Proto.PolymeshCall polymesh_call = 13;
  bool has_polymesh_call() const;
  private:
  bool _internal_has_polymesh_call() const;
  public:
  void clear_polymesh_call();
  const ::TW::Polkadot::Proto::PolymeshCall& polymesh_call() const;
  PROTOBUF_NODISCARD ::TW::Polkadot::Proto::PolymeshCall* release_polymesh_call();
  ::TW::Polkadot::Proto::PolymeshCall* mutable_polymesh_call();
  void set_allocated_polymesh_call(::TW::Polkadot::Proto::PolymeshCall* polymesh_call);
  private:
  const ::TW::Polkadot::Proto::PolymeshCall& _internal_polymesh_call() const;
  ::TW::Polkadot::Proto::PolymeshCall* _internal_mutable_polymesh_call();
  public:
  void unsafe_arena_set_allocated_polymesh_call(
      ::TW::Polkadot::Proto::PolymeshCall* polymesh_call);
  ::TW::Polkadot::Proto::PolymeshCall* unsafe_arena_release_polymesh_call();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_balance_call();
  void set_has_staking_call();
  void set_has_polymesh_call();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genesis_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Polkadot::Proto::Era* era_;
  uint64_t nonce_;
  uint32_t spec_version_;
  uint32_t transaction_version_;
  uint32_t network_;
  bool multi_address_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Polkadot::Proto::Balance* balance_call_;
    ::TW::Polkadot::Proto::Staking* staking_call_;
    ::TW::Polkadot::Proto::PolymeshCall* polymesh_call_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Polkadot_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Polkadot.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Polkadot.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kErrorFieldNumber = 2,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Polkadot.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Polkadot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Era

// uint64 block_number = 1;
inline void Era::clear_block_number() {
  block_number_ = uint64_t{0u};
}
inline uint64_t Era::_internal_block_number() const {
  return block_number_;
}
inline uint64_t Era::block_number() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Era.block_number)
  return _internal_block_number();
}
inline void Era::_internal_set_block_number(uint64_t value) {
  
  block_number_ = value;
}
inline void Era::set_block_number(uint64_t value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Era.block_number)
}

// uint64 period = 2;
inline void Era::clear_period() {
  period_ = uint64_t{0u};
}
inline uint64_t Era::_internal_period() const {
  return period_;
}
inline uint64_t Era::period() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Era.period)
  return _internal_period();
}
inline void Era::_internal_set_period(uint64_t value) {
  
  period_ = value;
}
inline void Era::set_period(uint64_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Era.period)
}

// -------------------------------------------------------------------

// CustomCallIndices

// int32 module_index = 4;
inline void CustomCallIndices::clear_module_index() {
  module_index_ = 0;
}
inline int32_t CustomCallIndices::_internal_module_index() const {
  return module_index_;
}
inline int32_t CustomCallIndices::module_index() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.CustomCallIndices.module_index)
  return _internal_module_index();
}
inline void CustomCallIndices::_internal_set_module_index(int32_t value) {
  
  module_index_ = value;
}
inline void CustomCallIndices::set_module_index(int32_t value) {
  _internal_set_module_index(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.CustomCallIndices.module_index)
}

// int32 method_index = 5;
inline void CustomCallIndices::clear_method_index() {
  method_index_ = 0;
}
inline int32_t CustomCallIndices::_internal_method_index() const {
  return method_index_;
}
inline int32_t CustomCallIndices::method_index() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.CustomCallIndices.method_index)
  return _internal_method_index();
}
inline void CustomCallIndices::_internal_set_method_index(int32_t value) {
  
  method_index_ = value;
}
inline void CustomCallIndices::set_method_index(int32_t value) {
  _internal_set_method_index(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.CustomCallIndices.method_index)
}

// -------------------------------------------------------------------

// CallIndices

// .TW.Polkadot.Proto.CustomCallIndices custom = 1;
inline bool CallIndices::_internal_has_custom() const {
  return variant_case() == kCustom;
}
inline bool CallIndices::has_custom() const {
  return _internal_has_custom();
}
inline void CallIndices::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void CallIndices::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete variant_.custom_;
    }
    clear_has_variant();
  }
}
inline ::TW::Polkadot::Proto::CustomCallIndices* CallIndices::release_custom() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.CallIndices.custom)
  if (_internal_has_custom()) {
    clear_has_variant();
      ::TW::Polkadot::Proto::CustomCallIndices* temp = variant_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    variant_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::CustomCallIndices& CallIndices::_internal_custom() const {
  return _internal_has_custom()
      ? *variant_.custom_
      : reinterpret_cast< ::TW::Polkadot::Proto::CustomCallIndices&>(::TW::Polkadot::Proto::_CustomCallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CustomCallIndices& CallIndices::custom() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.CallIndices.custom)
  return _internal_custom();
}
inline ::TW::Polkadot::Proto::CustomCallIndices* CallIndices::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.CallIndices.custom)
  if (_internal_has_custom()) {
    clear_has_variant();
    ::TW::Polkadot::Proto::CustomCallIndices* temp = variant_.custom_;
    variant_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallIndices::unsafe_arena_set_allocated_custom(::TW::Polkadot::Proto::CustomCallIndices* custom) {
  clear_variant();
  if (custom) {
    set_has_custom();
    variant_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.CallIndices.custom)
}
inline ::TW::Polkadot::Proto::CustomCallIndices* CallIndices::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_variant();
    set_has_custom();
    variant_.custom_ = CreateMaybeMessage< ::TW::Polkadot::Proto::CustomCallIndices >(GetArenaForAllocation());
  }
  return variant_.custom_;
}
inline ::TW::Polkadot::Proto::CustomCallIndices* CallIndices::mutable_custom() {
  ::TW::Polkadot::Proto::CustomCallIndices* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.CallIndices.custom)
  return _msg;
}

inline bool CallIndices::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
inline void CallIndices::clear_has_variant() {
  _oneof_case_[0] = VARIANT_NOT_SET;
}
inline CallIndices::VariantCase CallIndices::variant_case() const {
  return CallIndices::VariantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Balance_Transfer

// string to_address = 1;
inline void Balance_Transfer::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Balance_Transfer::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.Transfer.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Balance_Transfer::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.Transfer.to_address)
}
inline std::string* Balance_Transfer::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.Transfer.to_address)
  return _s;
}
inline const std::string& Balance_Transfer::_internal_to_address() const {
  return to_address_.Get();
}
inline void Balance_Transfer::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Balance_Transfer::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Balance_Transfer::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.Transfer.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Balance_Transfer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.Transfer.to_address)
}

// bytes value = 2;
inline void Balance_Transfer::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Balance_Transfer::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.Transfer.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Balance_Transfer::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.Transfer.value)
}
inline std::string* Balance_Transfer::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.Transfer.value)
  return _s;
}
inline const std::string& Balance_Transfer::_internal_value() const {
  return value_.Get();
}
inline void Balance_Transfer::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Balance_Transfer::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Balance_Transfer::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.Transfer.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Balance_Transfer::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.Transfer.value)
}

// string memo = 3;
inline void Balance_Transfer::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& Balance_Transfer::memo() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.Transfer.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Balance_Transfer::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.Transfer.memo)
}
inline std::string* Balance_Transfer::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.Transfer.memo)
  return _s;
}
inline const std::string& Balance_Transfer::_internal_memo() const {
  return memo_.Get();
}
inline void Balance_Transfer::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Balance_Transfer::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Balance_Transfer::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.Transfer.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Balance_Transfer::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.Transfer.memo)
}

// .TW.Polkadot.Proto.CallIndices call_indices = 4;
inline bool Balance_Transfer::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Balance_Transfer::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Balance_Transfer::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_Transfer::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_Transfer::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.Transfer.call_indices)
  return _internal_call_indices();
}
inline void Balance_Transfer::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.Transfer.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_Transfer::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_Transfer::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.Transfer.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_Transfer::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_Transfer::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.Transfer.call_indices)
  return _msg;
}
inline void Balance_Transfer::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.Transfer.call_indices)
}

// -------------------------------------------------------------------

// Balance_BatchTransfer

// .TW.Polkadot.Proto.CallIndices call_indices = 1;
inline bool Balance_BatchTransfer::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Balance_BatchTransfer::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Balance_BatchTransfer::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_BatchTransfer::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_BatchTransfer::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.BatchTransfer.call_indices)
  return _internal_call_indices();
}
inline void Balance_BatchTransfer::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.BatchTransfer.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchTransfer::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchTransfer::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.BatchTransfer.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchTransfer::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchTransfer::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.BatchTransfer.call_indices)
  return _msg;
}
inline void Balance_BatchTransfer::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.BatchTransfer.call_indices)
}

// repeated .TW.Polkadot.Proto.Balance.Transfer transfers = 2;
inline int Balance_BatchTransfer::_internal_transfers_size() const {
  return transfers_.size();
}
inline int Balance_BatchTransfer::transfers_size() const {
  return _internal_transfers_size();
}
inline void Balance_BatchTransfer::clear_transfers() {
  transfers_.Clear();
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance_BatchTransfer::mutable_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.BatchTransfer.transfers)
  return transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_Transfer >*
Balance_BatchTransfer::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_list:TW.Polkadot.Proto.Balance.BatchTransfer.transfers)
  return &transfers_;
}
inline const ::TW::Polkadot::Proto::Balance_Transfer& Balance_BatchTransfer::_internal_transfers(int index) const {
  return transfers_.Get(index);
}
inline const ::TW::Polkadot::Proto::Balance_Transfer& Balance_BatchTransfer::transfers(int index) const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.BatchTransfer.transfers)
  return _internal_transfers(index);
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance_BatchTransfer::_internal_add_transfers() {
  return transfers_.Add();
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance_BatchTransfer::add_transfers() {
  ::TW::Polkadot::Proto::Balance_Transfer* _add = _internal_add_transfers();
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Balance.BatchTransfer.transfers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_Transfer >&
Balance_BatchTransfer::transfers() const {
  // @@protoc_insertion_point(field_list:TW.Polkadot.Proto.Balance.BatchTransfer.transfers)
  return transfers_;
}

// -------------------------------------------------------------------

// Balance_AssetTransfer

// .TW.Polkadot.Proto.CallIndices call_indices = 1;
inline bool Balance_AssetTransfer::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Balance_AssetTransfer::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Balance_AssetTransfer::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_AssetTransfer::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_AssetTransfer::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.AssetTransfer.call_indices)
  return _internal_call_indices();
}
inline void Balance_AssetTransfer::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.AssetTransfer.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_AssetTransfer::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_AssetTransfer::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.AssetTransfer.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_AssetTransfer::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_AssetTransfer::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.AssetTransfer.call_indices)
  return _msg;
}
inline void Balance_AssetTransfer::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.AssetTransfer.call_indices)
}

// string to_address = 2;
inline void Balance_AssetTransfer::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Balance_AssetTransfer::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.AssetTransfer.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Balance_AssetTransfer::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.AssetTransfer.to_address)
}
inline std::string* Balance_AssetTransfer::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.AssetTransfer.to_address)
  return _s;
}
inline const std::string& Balance_AssetTransfer::_internal_to_address() const {
  return to_address_.Get();
}
inline void Balance_AssetTransfer::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Balance_AssetTransfer::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Balance_AssetTransfer::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.AssetTransfer.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Balance_AssetTransfer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.AssetTransfer.to_address)
}

// bytes value = 3;
inline void Balance_AssetTransfer::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Balance_AssetTransfer::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.AssetTransfer.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Balance_AssetTransfer::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.AssetTransfer.value)
}
inline std::string* Balance_AssetTransfer::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.AssetTransfer.value)
  return _s;
}
inline const std::string& Balance_AssetTransfer::_internal_value() const {
  return value_.Get();
}
inline void Balance_AssetTransfer::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Balance_AssetTransfer::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Balance_AssetTransfer::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.AssetTransfer.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Balance_AssetTransfer::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.AssetTransfer.value)
}

// uint32 asset_id = 4;
inline void Balance_AssetTransfer::clear_asset_id() {
  asset_id_ = 0u;
}
inline uint32_t Balance_AssetTransfer::_internal_asset_id() const {
  return asset_id_;
}
inline uint32_t Balance_AssetTransfer::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.AssetTransfer.asset_id)
  return _internal_asset_id();
}
inline void Balance_AssetTransfer::_internal_set_asset_id(uint32_t value) {
  
  asset_id_ = value;
}
inline void Balance_AssetTransfer::set_asset_id(uint32_t value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.AssetTransfer.asset_id)
}

// uint32 fee_asset_id = 5;
inline void Balance_AssetTransfer::clear_fee_asset_id() {
  fee_asset_id_ = 0u;
}
inline uint32_t Balance_AssetTransfer::_internal_fee_asset_id() const {
  return fee_asset_id_;
}
inline uint32_t Balance_AssetTransfer::fee_asset_id() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.AssetTransfer.fee_asset_id)
  return _internal_fee_asset_id();
}
inline void Balance_AssetTransfer::_internal_set_fee_asset_id(uint32_t value) {
  
  fee_asset_id_ = value;
}
inline void Balance_AssetTransfer::set_fee_asset_id(uint32_t value) {
  _internal_set_fee_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.AssetTransfer.fee_asset_id)
}

// -------------------------------------------------------------------

// Balance_BatchAssetTransfer

// .TW.Polkadot.Proto.CallIndices call_indices = 1;
inline bool Balance_BatchAssetTransfer::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Balance_BatchAssetTransfer::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Balance_BatchAssetTransfer::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_BatchAssetTransfer::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Balance_BatchAssetTransfer::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.BatchAssetTransfer.call_indices)
  return _internal_call_indices();
}
inline void Balance_BatchAssetTransfer::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.BatchAssetTransfer.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchAssetTransfer::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchAssetTransfer::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.BatchAssetTransfer.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchAssetTransfer::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Balance_BatchAssetTransfer::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.BatchAssetTransfer.call_indices)
  return _msg;
}
inline void Balance_BatchAssetTransfer::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.BatchAssetTransfer.call_indices)
}

// uint32 fee_asset_id = 2;
inline void Balance_BatchAssetTransfer::clear_fee_asset_id() {
  fee_asset_id_ = 0u;
}
inline uint32_t Balance_BatchAssetTransfer::_internal_fee_asset_id() const {
  return fee_asset_id_;
}
inline uint32_t Balance_BatchAssetTransfer::fee_asset_id() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.BatchAssetTransfer.fee_asset_id)
  return _internal_fee_asset_id();
}
inline void Balance_BatchAssetTransfer::_internal_set_fee_asset_id(uint32_t value) {
  
  fee_asset_id_ = value;
}
inline void Balance_BatchAssetTransfer::set_fee_asset_id(uint32_t value) {
  _internal_set_fee_asset_id(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Balance.BatchAssetTransfer.fee_asset_id)
}

// repeated .TW.Polkadot.Proto.Balance.AssetTransfer transfers = 3;
inline int Balance_BatchAssetTransfer::_internal_transfers_size() const {
  return transfers_.size();
}
inline int Balance_BatchAssetTransfer::transfers_size() const {
  return _internal_transfers_size();
}
inline void Balance_BatchAssetTransfer::clear_transfers() {
  transfers_.Clear();
}
inline ::TW::Polkadot::Proto::Balance_AssetTransfer* Balance_BatchAssetTransfer::mutable_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.BatchAssetTransfer.transfers)
  return transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_AssetTransfer >*
Balance_BatchAssetTransfer::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_list:TW.Polkadot.Proto.Balance.BatchAssetTransfer.transfers)
  return &transfers_;
}
inline const ::TW::Polkadot::Proto::Balance_AssetTransfer& Balance_BatchAssetTransfer::_internal_transfers(int index) const {
  return transfers_.Get(index);
}
inline const ::TW::Polkadot::Proto::Balance_AssetTransfer& Balance_BatchAssetTransfer::transfers(int index) const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.BatchAssetTransfer.transfers)
  return _internal_transfers(index);
}
inline ::TW::Polkadot::Proto::Balance_AssetTransfer* Balance_BatchAssetTransfer::_internal_add_transfers() {
  return transfers_.Add();
}
inline ::TW::Polkadot::Proto::Balance_AssetTransfer* Balance_BatchAssetTransfer::add_transfers() {
  ::TW::Polkadot::Proto::Balance_AssetTransfer* _add = _internal_add_transfers();
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Balance.BatchAssetTransfer.transfers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Polkadot::Proto::Balance_AssetTransfer >&
Balance_BatchAssetTransfer::transfers() const {
  // @@protoc_insertion_point(field_list:TW.Polkadot.Proto.Balance.BatchAssetTransfer.transfers)
  return transfers_;
}

// -------------------------------------------------------------------

// Balance

// .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
inline bool Balance::_internal_has_transfer() const {
  return message_oneof_case() == kTransfer;
}
inline bool Balance::has_transfer() const {
  return _internal_has_transfer();
}
inline void Balance::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void Balance::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Balance_Transfer* temp = message_oneof_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Balance_Transfer& Balance::_internal_transfer() const {
  return _internal_has_transfer()
      ? *message_oneof_.transfer_
      : reinterpret_cast< ::TW::Polkadot::Proto::Balance_Transfer&>(::TW::Polkadot::Proto::_Balance_Transfer_default_instance_);
}
inline const ::TW::Polkadot::Proto::Balance_Transfer& Balance::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.transfer)
  return _internal_transfer();
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Balance.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Balance_Transfer* temp = message_oneof_.transfer_;
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Balance::unsafe_arena_set_allocated_transfer(::TW::Polkadot::Proto::Balance_Transfer* transfer) {
  clear_message_oneof();
  if (transfer) {
    set_has_transfer();
    message_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.transfer)
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_message_oneof();
    set_has_transfer();
    message_oneof_.transfer_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_Transfer >(GetArenaForAllocation());
  }
  return message_oneof_.transfer_;
}
inline ::TW::Polkadot::Proto::Balance_Transfer* Balance::mutable_transfer() {
  ::TW::Polkadot::Proto::Balance_Transfer* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.transfer)
  return _msg;
}

// .TW.Polkadot.Proto.Balance.BatchTransfer batchTransfer = 2;
inline bool Balance::_internal_has_batchtransfer() const {
  return message_oneof_case() == kBatchTransfer;
}
inline bool Balance::has_batchtransfer() const {
  return _internal_has_batchtransfer();
}
inline void Balance::set_has_batchtransfer() {
  _oneof_case_[0] = kBatchTransfer;
}
inline void Balance::clear_batchtransfer() {
  if (_internal_has_batchtransfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.batchtransfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Balance_BatchTransfer* Balance::release_batchtransfer() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.batchTransfer)
  if (_internal_has_batchtransfer()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Balance_BatchTransfer* temp = message_oneof_.batchtransfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.batchtransfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Balance_BatchTransfer& Balance::_internal_batchtransfer() const {
  return _internal_has_batchtransfer()
      ? *message_oneof_.batchtransfer_
      : reinterpret_cast< ::TW::Polkadot::Proto::Balance_BatchTransfer&>(::TW::Polkadot::Proto::_Balance_BatchTransfer_default_instance_);
}
inline const ::TW::Polkadot::Proto::Balance_BatchTransfer& Balance::batchtransfer() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.batchTransfer)
  return _internal_batchtransfer();
}
inline ::TW::Polkadot::Proto::Balance_BatchTransfer* Balance::unsafe_arena_release_batchtransfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Balance.batchTransfer)
  if (_internal_has_batchtransfer()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Balance_BatchTransfer* temp = message_oneof_.batchtransfer_;
    message_oneof_.batchtransfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Balance::unsafe_arena_set_allocated_batchtransfer(::TW::Polkadot::Proto::Balance_BatchTransfer* batchtransfer) {
  clear_message_oneof();
  if (batchtransfer) {
    set_has_batchtransfer();
    message_oneof_.batchtransfer_ = batchtransfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.batchTransfer)
}
inline ::TW::Polkadot::Proto::Balance_BatchTransfer* Balance::_internal_mutable_batchtransfer() {
  if (!_internal_has_batchtransfer()) {
    clear_message_oneof();
    set_has_batchtransfer();
    message_oneof_.batchtransfer_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_BatchTransfer >(GetArenaForAllocation());
  }
  return message_oneof_.batchtransfer_;
}
inline ::TW::Polkadot::Proto::Balance_BatchTransfer* Balance::mutable_batchtransfer() {
  ::TW::Polkadot::Proto::Balance_BatchTransfer* _msg = _internal_mutable_batchtransfer();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.batchTransfer)
  return _msg;
}

// .TW.Polkadot.Proto.Balance.AssetTransfer asset_transfer = 3;
inline bool Balance::_internal_has_asset_transfer() const {
  return message_oneof_case() == kAssetTransfer;
}
inline bool Balance::has_asset_transfer() const {
  return _internal_has_asset_transfer();
}
inline void Balance::set_has_asset_transfer() {
  _oneof_case_[0] = kAssetTransfer;
}
inline void Balance::clear_asset_transfer() {
  if (_internal_has_asset_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.asset_transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Balance_AssetTransfer* Balance::release_asset_transfer() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.asset_transfer)
  if (_internal_has_asset_transfer()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Balance_AssetTransfer* temp = message_oneof_.asset_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.asset_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Balance_AssetTransfer& Balance::_internal_asset_transfer() const {
  return _internal_has_asset_transfer()
      ? *message_oneof_.asset_transfer_
      : reinterpret_cast< ::TW::Polkadot::Proto::Balance_AssetTransfer&>(::TW::Polkadot::Proto::_Balance_AssetTransfer_default_instance_);
}
inline const ::TW::Polkadot::Proto::Balance_AssetTransfer& Balance::asset_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.asset_transfer)
  return _internal_asset_transfer();
}
inline ::TW::Polkadot::Proto::Balance_AssetTransfer* Balance::unsafe_arena_release_asset_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Balance.asset_transfer)
  if (_internal_has_asset_transfer()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Balance_AssetTransfer* temp = message_oneof_.asset_transfer_;
    message_oneof_.asset_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Balance::unsafe_arena_set_allocated_asset_transfer(::TW::Polkadot::Proto::Balance_AssetTransfer* asset_transfer) {
  clear_message_oneof();
  if (asset_transfer) {
    set_has_asset_transfer();
    message_oneof_.asset_transfer_ = asset_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.asset_transfer)
}
inline ::TW::Polkadot::Proto::Balance_AssetTransfer* Balance::_internal_mutable_asset_transfer() {
  if (!_internal_has_asset_transfer()) {
    clear_message_oneof();
    set_has_asset_transfer();
    message_oneof_.asset_transfer_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_AssetTransfer >(GetArenaForAllocation());
  }
  return message_oneof_.asset_transfer_;
}
inline ::TW::Polkadot::Proto::Balance_AssetTransfer* Balance::mutable_asset_transfer() {
  ::TW::Polkadot::Proto::Balance_AssetTransfer* _msg = _internal_mutable_asset_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.asset_transfer)
  return _msg;
}

// .TW.Polkadot.Proto.Balance.BatchAssetTransfer batch_asset_transfer = 4;
inline bool Balance::_internal_has_batch_asset_transfer() const {
  return message_oneof_case() == kBatchAssetTransfer;
}
inline bool Balance::has_batch_asset_transfer() const {
  return _internal_has_batch_asset_transfer();
}
inline void Balance::set_has_batch_asset_transfer() {
  _oneof_case_[0] = kBatchAssetTransfer;
}
inline void Balance::clear_batch_asset_transfer() {
  if (_internal_has_batch_asset_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.batch_asset_transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* Balance::release_batch_asset_transfer() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Balance.batch_asset_transfer)
  if (_internal_has_batch_asset_transfer()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* temp = message_oneof_.batch_asset_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.batch_asset_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Balance_BatchAssetTransfer& Balance::_internal_batch_asset_transfer() const {
  return _internal_has_batch_asset_transfer()
      ? *message_oneof_.batch_asset_transfer_
      : reinterpret_cast< ::TW::Polkadot::Proto::Balance_BatchAssetTransfer&>(::TW::Polkadot::Proto::_Balance_BatchAssetTransfer_default_instance_);
}
inline const ::TW::Polkadot::Proto::Balance_BatchAssetTransfer& Balance::batch_asset_transfer() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Balance.batch_asset_transfer)
  return _internal_batch_asset_transfer();
}
inline ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* Balance::unsafe_arena_release_batch_asset_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Balance.batch_asset_transfer)
  if (_internal_has_batch_asset_transfer()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* temp = message_oneof_.batch_asset_transfer_;
    message_oneof_.batch_asset_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Balance::unsafe_arena_set_allocated_batch_asset_transfer(::TW::Polkadot::Proto::Balance_BatchAssetTransfer* batch_asset_transfer) {
  clear_message_oneof();
  if (batch_asset_transfer) {
    set_has_batch_asset_transfer();
    message_oneof_.batch_asset_transfer_ = batch_asset_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Balance.batch_asset_transfer)
}
inline ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* Balance::_internal_mutable_batch_asset_transfer() {
  if (!_internal_has_batch_asset_transfer()) {
    clear_message_oneof();
    set_has_batch_asset_transfer();
    message_oneof_.batch_asset_transfer_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_BatchAssetTransfer >(GetArenaForAllocation());
  }
  return message_oneof_.batch_asset_transfer_;
}
inline ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* Balance::mutable_batch_asset_transfer() {
  ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* _msg = _internal_mutable_batch_asset_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Balance.batch_asset_transfer)
  return _msg;
}

inline bool Balance::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Balance::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Balance::MessageOneofCase Balance::message_oneof_case() const {
  return Balance::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Staking_Bond

// string controller = 1;
inline void Staking_Bond::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& Staking_Bond::controller() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Bond.controller)
  return _internal_controller();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_Bond::set_controller(ArgT0&& arg0, ArgT... args) {
 
 controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Bond.controller)
}
inline std::string* Staking_Bond::mutable_controller() {
  std::string* _s = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Bond.controller)
  return _s;
}
inline const std::string& Staking_Bond::_internal_controller() const {
  return controller_.Get();
}
inline void Staking_Bond::_internal_set_controller(const std::string& value) {
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_Bond::_internal_mutable_controller() {
  
  return controller_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_Bond::release_controller() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Bond.controller)
  return controller_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_Bond::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Bond.controller)
}

// bytes value = 2;
inline void Staking_Bond::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_Bond::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Bond.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_Bond::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Bond.value)
}
inline std::string* Staking_Bond::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Bond.value)
  return _s;
}
inline const std::string& Staking_Bond::_internal_value() const {
  return value_.Get();
}
inline void Staking_Bond::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_Bond::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_Bond::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Bond.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_Bond::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Bond.value)
}

// .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
inline void Staking_Bond::clear_reward_destination() {
  reward_destination_ = 0;
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_Bond::_internal_reward_destination() const {
  return static_cast< ::TW::Polkadot::Proto::RewardDestination >(reward_destination_);
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_Bond::reward_destination() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Bond.reward_destination)
  return _internal_reward_destination();
}
inline void Staking_Bond::_internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  
  reward_destination_ = value;
}
inline void Staking_Bond::set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  _internal_set_reward_destination(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Bond.reward_destination)
}

// .TW.Polkadot.Proto.CallIndices call_indices = 4;
inline bool Staking_Bond::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_Bond::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_Bond::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Bond::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Bond::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Bond.call_indices)
  return _internal_call_indices();
}
inline void Staking_Bond::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.Bond.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Bond::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Bond::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Bond.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Bond::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Bond::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Bond.call_indices)
  return _msg;
}
inline void Staking_Bond::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Bond.call_indices)
}

// -------------------------------------------------------------------

// Staking_BondAndNominate

// string controller = 1;
inline void Staking_BondAndNominate::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& Staking_BondAndNominate::controller() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
  return _internal_controller();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_BondAndNominate::set_controller(ArgT0&& arg0, ArgT... args) {
 
 controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
}
inline std::string* Staking_BondAndNominate::mutable_controller() {
  std::string* _s = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
  return _s;
}
inline const std::string& Staking_BondAndNominate::_internal_controller() const {
  return controller_.Get();
}
inline void Staking_BondAndNominate::_internal_set_controller(const std::string& value) {
  
  controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_BondAndNominate::_internal_mutable_controller() {
  
  return controller_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_BondAndNominate::release_controller() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
  return controller_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_BondAndNominate::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondAndNominate.controller)
}

// bytes value = 2;
inline void Staking_BondAndNominate::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_BondAndNominate::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_BondAndNominate::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.value)
}
inline std::string* Staking_BondAndNominate::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.value)
  return _s;
}
inline const std::string& Staking_BondAndNominate::_internal_value() const {
  return value_.Get();
}
inline void Staking_BondAndNominate::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_BondAndNominate::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_BondAndNominate::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondAndNominate.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_BondAndNominate::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondAndNominate.value)
}

// .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
inline void Staking_BondAndNominate::clear_reward_destination() {
  reward_destination_ = 0;
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_BondAndNominate::_internal_reward_destination() const {
  return static_cast< ::TW::Polkadot::Proto::RewardDestination >(reward_destination_);
}
inline ::TW::Polkadot::Proto::RewardDestination Staking_BondAndNominate::reward_destination() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.reward_destination)
  return _internal_reward_destination();
}
inline void Staking_BondAndNominate::_internal_set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  
  reward_destination_ = value;
}
inline void Staking_BondAndNominate::set_reward_destination(::TW::Polkadot::Proto::RewardDestination value) {
  _internal_set_reward_destination(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.reward_destination)
}

// repeated string nominators = 4;
inline int Staking_BondAndNominate::_internal_nominators_size() const {
  return nominators_.size();
}
inline int Staking_BondAndNominate::nominators_size() const {
  return _internal_nominators_size();
}
inline void Staking_BondAndNominate::clear_nominators() {
  nominators_.Clear();
}
inline std::string* Staking_BondAndNominate::add_nominators() {
  std::string* _s = _internal_add_nominators();
  // @@protoc_insertion_point(field_add_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return _s;
}
inline const std::string& Staking_BondAndNominate::_internal_nominators(int index) const {
  return nominators_.Get(index);
}
inline const std::string& Staking_BondAndNominate::nominators(int index) const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return _internal_nominators(index);
}
inline std::string* Staking_BondAndNominate::mutable_nominators(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return nominators_.Mutable(index);
}
inline void Staking_BondAndNominate::set_nominators(int index, const std::string& value) {
  nominators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::set_nominators(int index, std::string&& value) {
  nominators_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::set_nominators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::set_nominators(int index, const char* value, size_t size) {
  nominators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline std::string* Staking_BondAndNominate::_internal_add_nominators() {
  return nominators_.Add();
}
inline void Staking_BondAndNominate::add_nominators(const std::string& value) {
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::add_nominators(std::string&& value) {
  nominators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::add_nominators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline void Staking_BondAndNominate::add_nominators(const char* value, size_t size) {
  nominators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Staking_BondAndNominate::nominators() const {
  // @@protoc_insertion_point(field_list:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return nominators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Staking_BondAndNominate::mutable_nominators() {
  // @@protoc_insertion_point(field_mutable_list:TW.Polkadot.Proto.Staking.BondAndNominate.nominators)
  return &nominators_;
}

// .TW.Polkadot.Proto.CallIndices call_indices = 5;
inline bool Staking_BondAndNominate::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_BondAndNominate::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_BondAndNominate::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_BondAndNominate::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_BondAndNominate::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondAndNominate.call_indices)
  return _internal_call_indices();
}
inline void Staking_BondAndNominate::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.BondAndNominate.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondAndNominate::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondAndNominate::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondAndNominate.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondAndNominate::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondAndNominate::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondAndNominate.call_indices)
  return _msg;
}
inline void Staking_BondAndNominate::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondAndNominate.call_indices)
}

// -------------------------------------------------------------------

// Staking_BondExtra

// bytes value = 1;
inline void Staking_BondExtra::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_BondExtra::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondExtra.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_BondExtra::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.BondExtra.value)
}
inline std::string* Staking_BondExtra::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondExtra.value)
  return _s;
}
inline const std::string& Staking_BondExtra::_internal_value() const {
  return value_.Get();
}
inline void Staking_BondExtra::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_BondExtra::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_BondExtra::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondExtra.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_BondExtra::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondExtra.value)
}

// .TW.Polkadot.Proto.CallIndices call_indices = 2;
inline bool Staking_BondExtra::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_BondExtra::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_BondExtra::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_BondExtra::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_BondExtra::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.BondExtra.call_indices)
  return _internal_call_indices();
}
inline void Staking_BondExtra::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.BondExtra.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondExtra::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondExtra::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.BondExtra.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondExtra::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_BondExtra::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.BondExtra.call_indices)
  return _msg;
}
inline void Staking_BondExtra::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.BondExtra.call_indices)
}

// -------------------------------------------------------------------

// Staking_Unbond

// bytes value = 1;
inline void Staking_Unbond::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_Unbond::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Unbond.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_Unbond::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Unbond.value)
}
inline std::string* Staking_Unbond::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Unbond.value)
  return _s;
}
inline const std::string& Staking_Unbond::_internal_value() const {
  return value_.Get();
}
inline void Staking_Unbond::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_Unbond::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_Unbond::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Unbond.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_Unbond::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Unbond.value)
}

// .TW.Polkadot.Proto.CallIndices call_indices = 2;
inline bool Staking_Unbond::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_Unbond::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_Unbond::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Unbond::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Unbond::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Unbond.call_indices)
  return _internal_call_indices();
}
inline void Staking_Unbond::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.Unbond.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Unbond::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Unbond::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Unbond.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Unbond::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Unbond::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Unbond.call_indices)
  return _msg;
}
inline void Staking_Unbond::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Unbond.call_indices)
}

// -------------------------------------------------------------------

// Staking_Rebond

// bytes value = 1;
inline void Staking_Rebond::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_Rebond::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Rebond.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_Rebond::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Rebond.value)
}
inline std::string* Staking_Rebond::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Rebond.value)
  return _s;
}
inline const std::string& Staking_Rebond::_internal_value() const {
  return value_.Get();
}
inline void Staking_Rebond::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_Rebond::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_Rebond::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Rebond.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_Rebond::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Rebond.value)
}

// .TW.Polkadot.Proto.CallIndices call_indices = 2;
inline bool Staking_Rebond::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_Rebond::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_Rebond::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Rebond::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Rebond::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Rebond.call_indices)
  return _internal_call_indices();
}
inline void Staking_Rebond::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.Rebond.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Rebond::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Rebond::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Rebond.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Rebond::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Rebond::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Rebond.call_indices)
  return _msg;
}
inline void Staking_Rebond::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Rebond.call_indices)
}

// -------------------------------------------------------------------

// Staking_WithdrawUnbonded

// int32 slashing_spans = 1;
inline void Staking_WithdrawUnbonded::clear_slashing_spans() {
  slashing_spans_ = 0;
}
inline int32_t Staking_WithdrawUnbonded::_internal_slashing_spans() const {
  return slashing_spans_;
}
inline int32_t Staking_WithdrawUnbonded::slashing_spans() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.WithdrawUnbonded.slashing_spans)
  return _internal_slashing_spans();
}
inline void Staking_WithdrawUnbonded::_internal_set_slashing_spans(int32_t value) {
  
  slashing_spans_ = value;
}
inline void Staking_WithdrawUnbonded::set_slashing_spans(int32_t value) {
  _internal_set_slashing_spans(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.WithdrawUnbonded.slashing_spans)
}

// .TW.Polkadot.Proto.CallIndices call_indices = 2;
inline bool Staking_WithdrawUnbonded::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_WithdrawUnbonded::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_WithdrawUnbonded::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_WithdrawUnbonded::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_WithdrawUnbonded::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.WithdrawUnbonded.call_indices)
  return _internal_call_indices();
}
inline void Staking_WithdrawUnbonded::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.WithdrawUnbonded.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_WithdrawUnbonded::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_WithdrawUnbonded::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.WithdrawUnbonded.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_WithdrawUnbonded::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_WithdrawUnbonded::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.WithdrawUnbonded.call_indices)
  return _msg;
}
inline void Staking_WithdrawUnbonded::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.WithdrawUnbonded.call_indices)
}

// -------------------------------------------------------------------

// Staking_Nominate

// repeated string nominators = 1;
inline int Staking_Nominate::_internal_nominators_size() const {
  return nominators_.size();
}
inline int Staking_Nominate::nominators_size() const {
  return _internal_nominators_size();
}
inline void Staking_Nominate::clear_nominators() {
  nominators_.Clear();
}
inline std::string* Staking_Nominate::add_nominators() {
  std::string* _s = _internal_add_nominators();
  // @@protoc_insertion_point(field_add_mutable:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return _s;
}
inline const std::string& Staking_Nominate::_internal_nominators(int index) const {
  return nominators_.Get(index);
}
inline const std::string& Staking_Nominate::nominators(int index) const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return _internal_nominators(index);
}
inline std::string* Staking_Nominate::mutable_nominators(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return nominators_.Mutable(index);
}
inline void Staking_Nominate::set_nominators(int index, const std::string& value) {
  nominators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::set_nominators(int index, std::string&& value) {
  nominators_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::set_nominators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::set_nominators(int index, const char* value, size_t size) {
  nominators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline std::string* Staking_Nominate::_internal_add_nominators() {
  return nominators_.Add();
}
inline void Staking_Nominate::add_nominators(const std::string& value) {
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::add_nominators(std::string&& value) {
  nominators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::add_nominators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nominators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline void Staking_Nominate::add_nominators(const char* value, size_t size) {
  nominators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Polkadot.Proto.Staking.Nominate.nominators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Staking_Nominate::nominators() const {
  // @@protoc_insertion_point(field_list:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return nominators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Staking_Nominate::mutable_nominators() {
  // @@protoc_insertion_point(field_mutable_list:TW.Polkadot.Proto.Staking.Nominate.nominators)
  return &nominators_;
}

// .TW.Polkadot.Proto.CallIndices call_indices = 2;
inline bool Staking_Nominate::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_Nominate::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_Nominate::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Nominate::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Nominate::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Nominate.call_indices)
  return _internal_call_indices();
}
inline void Staking_Nominate::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.Nominate.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Nominate::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Nominate::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Nominate.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Nominate::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Nominate::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Nominate.call_indices)
  return _msg;
}
inline void Staking_Nominate::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Nominate.call_indices)
}

// -------------------------------------------------------------------

// Staking_ChillAndUnbond

// bytes value = 1;
inline void Staking_ChillAndUnbond::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Staking_ChillAndUnbond::value() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.ChillAndUnbond.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Staking_ChillAndUnbond::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Staking.ChillAndUnbond.value)
}
inline std::string* Staking_ChillAndUnbond::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.ChillAndUnbond.value)
  return _s;
}
inline const std::string& Staking_ChillAndUnbond::_internal_value() const {
  return value_.Get();
}
inline void Staking_ChillAndUnbond::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Staking_ChillAndUnbond::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Staking_ChillAndUnbond::release_value() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.ChillAndUnbond.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Staking_ChillAndUnbond::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.ChillAndUnbond.value)
}

// .TW.Polkadot.Proto.CallIndices call_indices = 2;
inline bool Staking_ChillAndUnbond::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_ChillAndUnbond::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_ChillAndUnbond::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_ChillAndUnbond::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_ChillAndUnbond::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.ChillAndUnbond.call_indices)
  return _internal_call_indices();
}
inline void Staking_ChillAndUnbond::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.ChillAndUnbond.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_ChillAndUnbond::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_ChillAndUnbond::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.ChillAndUnbond.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_ChillAndUnbond::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_ChillAndUnbond::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.ChillAndUnbond.call_indices)
  return _msg;
}
inline void Staking_ChillAndUnbond::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.ChillAndUnbond.call_indices)
}

// -------------------------------------------------------------------

// Staking_Chill

// .TW.Polkadot.Proto.CallIndices call_indices = 1;
inline bool Staking_Chill::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Staking_Chill::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Staking_Chill::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Chill::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Staking_Chill::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.Chill.call_indices)
  return _internal_call_indices();
}
inline void Staking_Chill::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.Chill.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Chill::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Chill::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.Chill.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Chill::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Staking_Chill::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.Chill.call_indices)
  return _msg;
}
inline void Staking_Chill::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.Chill.call_indices)
}

// -------------------------------------------------------------------

// Staking

// .TW.Polkadot.Proto.Staking.Bond bond = 1;
inline bool Staking::_internal_has_bond() const {
  return message_oneof_case() == kBond;
}
inline bool Staking::has_bond() const {
  return _internal_has_bond();
}
inline void Staking::set_has_bond() {
  _oneof_case_[0] = kBond;
}
inline void Staking::clear_bond() {
  if (_internal_has_bond()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.bond_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::release_bond() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.bond)
  if (_internal_has_bond()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Bond* temp = message_oneof_.bond_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Bond& Staking::_internal_bond() const {
  return _internal_has_bond()
      ? *message_oneof_.bond_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Bond&>(::TW::Polkadot::Proto::_Staking_Bond_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Bond& Staking::bond() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.bond)
  return _internal_bond();
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::unsafe_arena_release_bond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.bond)
  if (_internal_has_bond()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Bond* temp = message_oneof_.bond_;
    message_oneof_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_bond(::TW::Polkadot::Proto::Staking_Bond* bond) {
  clear_message_oneof();
  if (bond) {
    set_has_bond();
    message_oneof_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.bond)
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::_internal_mutable_bond() {
  if (!_internal_has_bond()) {
    clear_message_oneof();
    set_has_bond();
    message_oneof_.bond_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Bond >(GetArenaForAllocation());
  }
  return message_oneof_.bond_;
}
inline ::TW::Polkadot::Proto::Staking_Bond* Staking::mutable_bond() {
  ::TW::Polkadot::Proto::Staking_Bond* _msg = _internal_mutable_bond();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.bond)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
inline bool Staking::_internal_has_bond_and_nominate() const {
  return message_oneof_case() == kBondAndNominate;
}
inline bool Staking::has_bond_and_nominate() const {
  return _internal_has_bond_and_nominate();
}
inline void Staking::set_has_bond_and_nominate() {
  _oneof_case_[0] = kBondAndNominate;
}
inline void Staking::clear_bond_and_nominate() {
  if (_internal_has_bond_and_nominate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.bond_and_nominate_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::release_bond_and_nominate() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.bond_and_nominate)
  if (_internal_has_bond_and_nominate()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_BondAndNominate* temp = message_oneof_.bond_and_nominate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.bond_and_nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_BondAndNominate& Staking::_internal_bond_and_nominate() const {
  return _internal_has_bond_and_nominate()
      ? *message_oneof_.bond_and_nominate_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_BondAndNominate&>(::TW::Polkadot::Proto::_Staking_BondAndNominate_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_BondAndNominate& Staking::bond_and_nominate() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.bond_and_nominate)
  return _internal_bond_and_nominate();
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::unsafe_arena_release_bond_and_nominate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.bond_and_nominate)
  if (_internal_has_bond_and_nominate()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_BondAndNominate* temp = message_oneof_.bond_and_nominate_;
    message_oneof_.bond_and_nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_bond_and_nominate(::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate) {
  clear_message_oneof();
  if (bond_and_nominate) {
    set_has_bond_and_nominate();
    message_oneof_.bond_and_nominate_ = bond_and_nominate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.bond_and_nominate)
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::_internal_mutable_bond_and_nominate() {
  if (!_internal_has_bond_and_nominate()) {
    clear_message_oneof();
    set_has_bond_and_nominate();
    message_oneof_.bond_and_nominate_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondAndNominate >(GetArenaForAllocation());
  }
  return message_oneof_.bond_and_nominate_;
}
inline ::TW::Polkadot::Proto::Staking_BondAndNominate* Staking::mutable_bond_and_nominate() {
  ::TW::Polkadot::Proto::Staking_BondAndNominate* _msg = _internal_mutable_bond_and_nominate();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.bond_and_nominate)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
inline bool Staking::_internal_has_bond_extra() const {
  return message_oneof_case() == kBondExtra;
}
inline bool Staking::has_bond_extra() const {
  return _internal_has_bond_extra();
}
inline void Staking::set_has_bond_extra() {
  _oneof_case_[0] = kBondExtra;
}
inline void Staking::clear_bond_extra() {
  if (_internal_has_bond_extra()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.bond_extra_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::release_bond_extra() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.bond_extra)
  if (_internal_has_bond_extra()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_BondExtra* temp = message_oneof_.bond_extra_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.bond_extra_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_BondExtra& Staking::_internal_bond_extra() const {
  return _internal_has_bond_extra()
      ? *message_oneof_.bond_extra_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_BondExtra&>(::TW::Polkadot::Proto::_Staking_BondExtra_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_BondExtra& Staking::bond_extra() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.bond_extra)
  return _internal_bond_extra();
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::unsafe_arena_release_bond_extra() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.bond_extra)
  if (_internal_has_bond_extra()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_BondExtra* temp = message_oneof_.bond_extra_;
    message_oneof_.bond_extra_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_bond_extra(::TW::Polkadot::Proto::Staking_BondExtra* bond_extra) {
  clear_message_oneof();
  if (bond_extra) {
    set_has_bond_extra();
    message_oneof_.bond_extra_ = bond_extra;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.bond_extra)
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::_internal_mutable_bond_extra() {
  if (!_internal_has_bond_extra()) {
    clear_message_oneof();
    set_has_bond_extra();
    message_oneof_.bond_extra_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondExtra >(GetArenaForAllocation());
  }
  return message_oneof_.bond_extra_;
}
inline ::TW::Polkadot::Proto::Staking_BondExtra* Staking::mutable_bond_extra() {
  ::TW::Polkadot::Proto::Staking_BondExtra* _msg = _internal_mutable_bond_extra();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.bond_extra)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
inline bool Staking::_internal_has_unbond() const {
  return message_oneof_case() == kUnbond;
}
inline bool Staking::has_unbond() const {
  return _internal_has_unbond();
}
inline void Staking::set_has_unbond() {
  _oneof_case_[0] = kUnbond;
}
inline void Staking::clear_unbond() {
  if (_internal_has_unbond()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.unbond_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::release_unbond() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.unbond)
  if (_internal_has_unbond()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Unbond* temp = message_oneof_.unbond_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.unbond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Unbond& Staking::_internal_unbond() const {
  return _internal_has_unbond()
      ? *message_oneof_.unbond_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Unbond&>(::TW::Polkadot::Proto::_Staking_Unbond_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Unbond& Staking::unbond() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.unbond)
  return _internal_unbond();
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::unsafe_arena_release_unbond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.unbond)
  if (_internal_has_unbond()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Unbond* temp = message_oneof_.unbond_;
    message_oneof_.unbond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_unbond(::TW::Polkadot::Proto::Staking_Unbond* unbond) {
  clear_message_oneof();
  if (unbond) {
    set_has_unbond();
    message_oneof_.unbond_ = unbond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.unbond)
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::_internal_mutable_unbond() {
  if (!_internal_has_unbond()) {
    clear_message_oneof();
    set_has_unbond();
    message_oneof_.unbond_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Unbond >(GetArenaForAllocation());
  }
  return message_oneof_.unbond_;
}
inline ::TW::Polkadot::Proto::Staking_Unbond* Staking::mutable_unbond() {
  ::TW::Polkadot::Proto::Staking_Unbond* _msg = _internal_mutable_unbond();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.unbond)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
inline bool Staking::_internal_has_withdraw_unbonded() const {
  return message_oneof_case() == kWithdrawUnbonded;
}
inline bool Staking::has_withdraw_unbonded() const {
  return _internal_has_withdraw_unbonded();
}
inline void Staking::set_has_withdraw_unbonded() {
  _oneof_case_[0] = kWithdrawUnbonded;
}
inline void Staking::clear_withdraw_unbonded() {
  if (_internal_has_withdraw_unbonded()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.withdraw_unbonded_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::release_withdraw_unbonded() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  if (_internal_has_withdraw_unbonded()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* temp = message_oneof_.withdraw_unbonded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.withdraw_unbonded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& Staking::_internal_withdraw_unbonded() const {
  return _internal_has_withdraw_unbonded()
      ? *message_oneof_.withdraw_unbonded_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded&>(::TW::Polkadot::Proto::_Staking_WithdrawUnbonded_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& Staking::withdraw_unbonded() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  return _internal_withdraw_unbonded();
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::unsafe_arena_release_withdraw_unbonded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  if (_internal_has_withdraw_unbonded()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* temp = message_oneof_.withdraw_unbonded_;
    message_oneof_.withdraw_unbonded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_withdraw_unbonded(::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded) {
  clear_message_oneof();
  if (withdraw_unbonded) {
    set_has_withdraw_unbonded();
    message_oneof_.withdraw_unbonded_ = withdraw_unbonded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.withdraw_unbonded)
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::_internal_mutable_withdraw_unbonded() {
  if (!_internal_has_withdraw_unbonded()) {
    clear_message_oneof();
    set_has_withdraw_unbonded();
    message_oneof_.withdraw_unbonded_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded >(GetArenaForAllocation());
  }
  return message_oneof_.withdraw_unbonded_;
}
inline ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Staking::mutable_withdraw_unbonded() {
  ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* _msg = _internal_mutable_withdraw_unbonded();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.withdraw_unbonded)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
inline bool Staking::_internal_has_nominate() const {
  return message_oneof_case() == kNominate;
}
inline bool Staking::has_nominate() const {
  return _internal_has_nominate();
}
inline void Staking::set_has_nominate() {
  _oneof_case_[0] = kNominate;
}
inline void Staking::clear_nominate() {
  if (_internal_has_nominate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.nominate_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::release_nominate() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.nominate)
  if (_internal_has_nominate()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Nominate* temp = message_oneof_.nominate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Nominate& Staking::_internal_nominate() const {
  return _internal_has_nominate()
      ? *message_oneof_.nominate_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Nominate&>(::TW::Polkadot::Proto::_Staking_Nominate_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Nominate& Staking::nominate() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.nominate)
  return _internal_nominate();
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::unsafe_arena_release_nominate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.nominate)
  if (_internal_has_nominate()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Nominate* temp = message_oneof_.nominate_;
    message_oneof_.nominate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_nominate(::TW::Polkadot::Proto::Staking_Nominate* nominate) {
  clear_message_oneof();
  if (nominate) {
    set_has_nominate();
    message_oneof_.nominate_ = nominate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.nominate)
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::_internal_mutable_nominate() {
  if (!_internal_has_nominate()) {
    clear_message_oneof();
    set_has_nominate();
    message_oneof_.nominate_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Nominate >(GetArenaForAllocation());
  }
  return message_oneof_.nominate_;
}
inline ::TW::Polkadot::Proto::Staking_Nominate* Staking::mutable_nominate() {
  ::TW::Polkadot::Proto::Staking_Nominate* _msg = _internal_mutable_nominate();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.nominate)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.Chill chill = 7;
inline bool Staking::_internal_has_chill() const {
  return message_oneof_case() == kChill;
}
inline bool Staking::has_chill() const {
  return _internal_has_chill();
}
inline void Staking::set_has_chill() {
  _oneof_case_[0] = kChill;
}
inline void Staking::clear_chill() {
  if (_internal_has_chill()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.chill_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::release_chill() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.chill)
  if (_internal_has_chill()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Chill* temp = message_oneof_.chill_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.chill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Chill& Staking::_internal_chill() const {
  return _internal_has_chill()
      ? *message_oneof_.chill_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Chill&>(::TW::Polkadot::Proto::_Staking_Chill_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Chill& Staking::chill() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.chill)
  return _internal_chill();
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::unsafe_arena_release_chill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.chill)
  if (_internal_has_chill()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Chill* temp = message_oneof_.chill_;
    message_oneof_.chill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_chill(::TW::Polkadot::Proto::Staking_Chill* chill) {
  clear_message_oneof();
  if (chill) {
    set_has_chill();
    message_oneof_.chill_ = chill;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.chill)
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::_internal_mutable_chill() {
  if (!_internal_has_chill()) {
    clear_message_oneof();
    set_has_chill();
    message_oneof_.chill_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Chill >(GetArenaForAllocation());
  }
  return message_oneof_.chill_;
}
inline ::TW::Polkadot::Proto::Staking_Chill* Staking::mutable_chill() {
  ::TW::Polkadot::Proto::Staking_Chill* _msg = _internal_mutable_chill();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.chill)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.ChillAndUnbond chill_and_unbond = 8;
inline bool Staking::_internal_has_chill_and_unbond() const {
  return message_oneof_case() == kChillAndUnbond;
}
inline bool Staking::has_chill_and_unbond() const {
  return _internal_has_chill_and_unbond();
}
inline void Staking::set_has_chill_and_unbond() {
  _oneof_case_[0] = kChillAndUnbond;
}
inline void Staking::clear_chill_and_unbond() {
  if (_internal_has_chill_and_unbond()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.chill_and_unbond_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_ChillAndUnbond* Staking::release_chill_and_unbond() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.chill_and_unbond)
  if (_internal_has_chill_and_unbond()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_ChillAndUnbond* temp = message_oneof_.chill_and_unbond_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.chill_and_unbond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_ChillAndUnbond& Staking::_internal_chill_and_unbond() const {
  return _internal_has_chill_and_unbond()
      ? *message_oneof_.chill_and_unbond_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_ChillAndUnbond&>(::TW::Polkadot::Proto::_Staking_ChillAndUnbond_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_ChillAndUnbond& Staking::chill_and_unbond() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.chill_and_unbond)
  return _internal_chill_and_unbond();
}
inline ::TW::Polkadot::Proto::Staking_ChillAndUnbond* Staking::unsafe_arena_release_chill_and_unbond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.chill_and_unbond)
  if (_internal_has_chill_and_unbond()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_ChillAndUnbond* temp = message_oneof_.chill_and_unbond_;
    message_oneof_.chill_and_unbond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_chill_and_unbond(::TW::Polkadot::Proto::Staking_ChillAndUnbond* chill_and_unbond) {
  clear_message_oneof();
  if (chill_and_unbond) {
    set_has_chill_and_unbond();
    message_oneof_.chill_and_unbond_ = chill_and_unbond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.chill_and_unbond)
}
inline ::TW::Polkadot::Proto::Staking_ChillAndUnbond* Staking::_internal_mutable_chill_and_unbond() {
  if (!_internal_has_chill_and_unbond()) {
    clear_message_oneof();
    set_has_chill_and_unbond();
    message_oneof_.chill_and_unbond_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_ChillAndUnbond >(GetArenaForAllocation());
  }
  return message_oneof_.chill_and_unbond_;
}
inline ::TW::Polkadot::Proto::Staking_ChillAndUnbond* Staking::mutable_chill_and_unbond() {
  ::TW::Polkadot::Proto::Staking_ChillAndUnbond* _msg = _internal_mutable_chill_and_unbond();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.chill_and_unbond)
  return _msg;
}

// .TW.Polkadot.Proto.Staking.Rebond rebond = 9;
inline bool Staking::_internal_has_rebond() const {
  return message_oneof_case() == kRebond;
}
inline bool Staking::has_rebond() const {
  return _internal_has_rebond();
}
inline void Staking::set_has_rebond() {
  _oneof_case_[0] = kRebond;
}
inline void Staking::clear_rebond() {
  if (_internal_has_rebond()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.rebond_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking_Rebond* Staking::release_rebond() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Staking.rebond)
  if (_internal_has_rebond()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking_Rebond* temp = message_oneof_.rebond_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.rebond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking_Rebond& Staking::_internal_rebond() const {
  return _internal_has_rebond()
      ? *message_oneof_.rebond_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking_Rebond&>(::TW::Polkadot::Proto::_Staking_Rebond_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking_Rebond& Staking::rebond() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Staking.rebond)
  return _internal_rebond();
}
inline ::TW::Polkadot::Proto::Staking_Rebond* Staking::unsafe_arena_release_rebond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Staking.rebond)
  if (_internal_has_rebond()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking_Rebond* temp = message_oneof_.rebond_;
    message_oneof_.rebond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Staking::unsafe_arena_set_allocated_rebond(::TW::Polkadot::Proto::Staking_Rebond* rebond) {
  clear_message_oneof();
  if (rebond) {
    set_has_rebond();
    message_oneof_.rebond_ = rebond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Staking.rebond)
}
inline ::TW::Polkadot::Proto::Staking_Rebond* Staking::_internal_mutable_rebond() {
  if (!_internal_has_rebond()) {
    clear_message_oneof();
    set_has_rebond();
    message_oneof_.rebond_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Rebond >(GetArenaForAllocation());
  }
  return message_oneof_.rebond_;
}
inline ::TW::Polkadot::Proto::Staking_Rebond* Staking::mutable_rebond() {
  ::TW::Polkadot::Proto::Staking_Rebond* _msg = _internal_mutable_rebond();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Staking.rebond)
  return _msg;
}

inline bool Staking::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Staking::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Staking::MessageOneofCase Staking::message_oneof_case() const {
  return Staking::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Identity_JoinIdentityAsKey

// .TW.Polkadot.Proto.CallIndices call_indices = 1;
inline bool Identity_JoinIdentityAsKey::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Identity_JoinIdentityAsKey::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Identity_JoinIdentityAsKey::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Identity_JoinIdentityAsKey::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Identity_JoinIdentityAsKey::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.JoinIdentityAsKey.call_indices)
  return _internal_call_indices();
}
inline void Identity_JoinIdentityAsKey::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.JoinIdentityAsKey.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_JoinIdentityAsKey::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_JoinIdentityAsKey::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.JoinIdentityAsKey.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_JoinIdentityAsKey::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_JoinIdentityAsKey::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.JoinIdentityAsKey.call_indices)
  return _msg;
}
inline void Identity_JoinIdentityAsKey::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.JoinIdentityAsKey.call_indices)
}

// uint64 auth_id = 2;
inline void Identity_JoinIdentityAsKey::clear_auth_id() {
  auth_id_ = uint64_t{0u};
}
inline uint64_t Identity_JoinIdentityAsKey::_internal_auth_id() const {
  return auth_id_;
}
inline uint64_t Identity_JoinIdentityAsKey::auth_id() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.JoinIdentityAsKey.auth_id)
  return _internal_auth_id();
}
inline void Identity_JoinIdentityAsKey::_internal_set_auth_id(uint64_t value) {
  
  auth_id_ = value;
}
inline void Identity_JoinIdentityAsKey::set_auth_id(uint64_t value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Identity.JoinIdentityAsKey.auth_id)
}

// -------------------------------------------------------------------

// Identity_AddAuthorization_Data

// bytes data = 1;
inline void Identity_AddAuthorization_Data::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Identity_AddAuthorization_Data::data() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.Data.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Identity_AddAuthorization_Data::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Identity.AddAuthorization.Data.data)
}
inline std::string* Identity_AddAuthorization_Data::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.AddAuthorization.Data.data)
  return _s;
}
inline const std::string& Identity_AddAuthorization_Data::_internal_data() const {
  return data_.Get();
}
inline void Identity_AddAuthorization_Data::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Identity_AddAuthorization_Data::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Identity_AddAuthorization_Data::release_data() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.AddAuthorization.Data.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Identity_AddAuthorization_Data::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.Data.data)
}

// -------------------------------------------------------------------

// Identity_AddAuthorization_AuthData

// .TW.Polkadot.Proto.Identity.AddAuthorization.Data asset = 1;
inline bool Identity_AddAuthorization_AuthData::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool Identity_AddAuthorization_AuthData::has_asset() const {
  return _internal_has_asset();
}
inline void Identity_AddAuthorization_AuthData::clear_asset() {
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& Identity_AddAuthorization_AuthData::_internal_asset() const {
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data&>(
      ::TW::Polkadot::Proto::_Identity_AddAuthorization_Data_default_instance_);
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& Identity_AddAuthorization_AuthData::asset() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.asset)
  return _internal_asset();
}
inline void Identity_AddAuthorization_AuthData::unsafe_arena_set_allocated_asset(
    ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* asset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.asset)
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::release_asset() {
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* temp = asset_;
  asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.asset)
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::Identity_AddAuthorization_Data>(GetArenaForAllocation());
    asset_ = p;
  }
  return asset_;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::mutable_asset() {
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* _msg = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.asset)
  return _msg;
}
inline void Identity_AddAuthorization_AuthData::set_allocated_asset(::TW::Polkadot::Proto::Identity_AddAuthorization_Data* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Identity_AddAuthorization_Data>::GetOwningArena(asset);
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.asset)
}

// .TW.Polkadot.Proto.Identity.AddAuthorization.Data extrinsic = 2;
inline bool Identity_AddAuthorization_AuthData::_internal_has_extrinsic() const {
  return this != internal_default_instance() && extrinsic_ != nullptr;
}
inline bool Identity_AddAuthorization_AuthData::has_extrinsic() const {
  return _internal_has_extrinsic();
}
inline void Identity_AddAuthorization_AuthData::clear_extrinsic() {
  if (GetArenaForAllocation() == nullptr && extrinsic_ != nullptr) {
    delete extrinsic_;
  }
  extrinsic_ = nullptr;
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& Identity_AddAuthorization_AuthData::_internal_extrinsic() const {
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* p = extrinsic_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data&>(
      ::TW::Polkadot::Proto::_Identity_AddAuthorization_Data_default_instance_);
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& Identity_AddAuthorization_AuthData::extrinsic() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.extrinsic)
  return _internal_extrinsic();
}
inline void Identity_AddAuthorization_AuthData::unsafe_arena_set_allocated_extrinsic(
    ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* extrinsic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extrinsic_);
  }
  extrinsic_ = extrinsic;
  if (extrinsic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.extrinsic)
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::release_extrinsic() {
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* temp = extrinsic_;
  extrinsic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::unsafe_arena_release_extrinsic() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.extrinsic)
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* temp = extrinsic_;
  extrinsic_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::_internal_mutable_extrinsic() {
  
  if (extrinsic_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::Identity_AddAuthorization_Data>(GetArenaForAllocation());
    extrinsic_ = p;
  }
  return extrinsic_;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::mutable_extrinsic() {
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* _msg = _internal_mutable_extrinsic();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.extrinsic)
  return _msg;
}
inline void Identity_AddAuthorization_AuthData::set_allocated_extrinsic(::TW::Polkadot::Proto::Identity_AddAuthorization_Data* extrinsic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete extrinsic_;
  }
  if (extrinsic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Identity_AddAuthorization_Data>::GetOwningArena(extrinsic);
    if (message_arena != submessage_arena) {
      extrinsic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrinsic, submessage_arena);
    }
    
  } else {
    
  }
  extrinsic_ = extrinsic;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.extrinsic)
}

// .TW.Polkadot.Proto.Identity.AddAuthorization.Data portfolio = 3;
inline bool Identity_AddAuthorization_AuthData::_internal_has_portfolio() const {
  return this != internal_default_instance() && portfolio_ != nullptr;
}
inline bool Identity_AddAuthorization_AuthData::has_portfolio() const {
  return _internal_has_portfolio();
}
inline void Identity_AddAuthorization_AuthData::clear_portfolio() {
  if (GetArenaForAllocation() == nullptr && portfolio_ != nullptr) {
    delete portfolio_;
  }
  portfolio_ = nullptr;
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& Identity_AddAuthorization_AuthData::_internal_portfolio() const {
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* p = portfolio_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data&>(
      ::TW::Polkadot::Proto::_Identity_AddAuthorization_Data_default_instance_);
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& Identity_AddAuthorization_AuthData::portfolio() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.portfolio)
  return _internal_portfolio();
}
inline void Identity_AddAuthorization_AuthData::unsafe_arena_set_allocated_portfolio(
    ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* portfolio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(portfolio_);
  }
  portfolio_ = portfolio;
  if (portfolio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.portfolio)
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::release_portfolio() {
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* temp = portfolio_;
  portfolio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::unsafe_arena_release_portfolio() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.portfolio)
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* temp = portfolio_;
  portfolio_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::_internal_mutable_portfolio() {
  
  if (portfolio_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::Identity_AddAuthorization_Data>(GetArenaForAllocation());
    portfolio_ = p;
  }
  return portfolio_;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Identity_AddAuthorization_AuthData::mutable_portfolio() {
  ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* _msg = _internal_mutable_portfolio();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.portfolio)
  return _msg;
}
inline void Identity_AddAuthorization_AuthData::set_allocated_portfolio(::TW::Polkadot::Proto::Identity_AddAuthorization_Data* portfolio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete portfolio_;
  }
  if (portfolio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Identity_AddAuthorization_Data>::GetOwningArena(portfolio);
    if (message_arena != submessage_arena) {
      portfolio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, portfolio, submessage_arena);
    }
    
  } else {
    
  }
  portfolio_ = portfolio;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.portfolio)
}

// -------------------------------------------------------------------

// Identity_AddAuthorization

// .TW.Polkadot.Proto.CallIndices call_indices = 1;
inline bool Identity_AddAuthorization::_internal_has_call_indices() const {
  return this != internal_default_instance() && call_indices_ != nullptr;
}
inline bool Identity_AddAuthorization::has_call_indices() const {
  return _internal_has_call_indices();
}
inline void Identity_AddAuthorization::clear_call_indices() {
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
}
inline const ::TW::Polkadot::Proto::CallIndices& Identity_AddAuthorization::_internal_call_indices() const {
  const ::TW::Polkadot::Proto::CallIndices* p = call_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::CallIndices&>(
      ::TW::Polkadot::Proto::_CallIndices_default_instance_);
}
inline const ::TW::Polkadot::Proto::CallIndices& Identity_AddAuthorization::call_indices() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.call_indices)
  return _internal_call_indices();
}
inline void Identity_AddAuthorization::unsafe_arena_set_allocated_call_indices(
    ::TW::Polkadot::Proto::CallIndices* call_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_indices_);
  }
  call_indices_ = call_indices;
  if (call_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.call_indices)
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_AddAuthorization::release_call_indices() {
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_AddAuthorization::unsafe_arena_release_call_indices() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.AddAuthorization.call_indices)
  
  ::TW::Polkadot::Proto::CallIndices* temp = call_indices_;
  call_indices_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_AddAuthorization::_internal_mutable_call_indices() {
  
  if (call_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::CallIndices>(GetArenaForAllocation());
    call_indices_ = p;
  }
  return call_indices_;
}
inline ::TW::Polkadot::Proto::CallIndices* Identity_AddAuthorization::mutable_call_indices() {
  ::TW::Polkadot::Proto::CallIndices* _msg = _internal_mutable_call_indices();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.AddAuthorization.call_indices)
  return _msg;
}
inline void Identity_AddAuthorization::set_allocated_call_indices(::TW::Polkadot::Proto::CallIndices* call_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_indices_;
  }
  if (call_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CallIndices>::GetOwningArena(call_indices);
    if (message_arena != submessage_arena) {
      call_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_indices, submessage_arena);
    }
    
  } else {
    
  }
  call_indices_ = call_indices;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.call_indices)
}

// string target = 2;
inline void Identity_AddAuthorization::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& Identity_AddAuthorization::target() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Identity_AddAuthorization::set_target(ArgT0&& arg0, ArgT... args) {
 
 target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Identity.AddAuthorization.target)
}
inline std::string* Identity_AddAuthorization::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.AddAuthorization.target)
  return _s;
}
inline const std::string& Identity_AddAuthorization::_internal_target() const {
  return target_.Get();
}
inline void Identity_AddAuthorization::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Identity_AddAuthorization::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Identity_AddAuthorization::release_target() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.AddAuthorization.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Identity_AddAuthorization::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.target)
}

// .TW.Polkadot.Proto.Identity.AddAuthorization.AuthData data = 3;
inline bool Identity_AddAuthorization::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Identity_AddAuthorization::has_data() const {
  return _internal_has_data();
}
inline void Identity_AddAuthorization::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData& Identity_AddAuthorization::_internal_data() const {
  const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData&>(
      ::TW::Polkadot::Proto::_Identity_AddAuthorization_AuthData_default_instance_);
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData& Identity_AddAuthorization::data() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.data)
  return _internal_data();
}
inline void Identity_AddAuthorization::unsafe_arena_set_allocated_data(
    ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.data)
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* Identity_AddAuthorization::release_data() {
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* Identity_AddAuthorization::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.AddAuthorization.data)
  
  ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* Identity_AddAuthorization::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* Identity_AddAuthorization::mutable_data() {
  ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.AddAuthorization.data)
  return _msg;
}
inline void Identity_AddAuthorization::set_allocated_data(::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.AddAuthorization.data)
}

// uint64 expiry = 4;
inline void Identity_AddAuthorization::clear_expiry() {
  expiry_ = uint64_t{0u};
}
inline uint64_t Identity_AddAuthorization::_internal_expiry() const {
  return expiry_;
}
inline uint64_t Identity_AddAuthorization::expiry() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.AddAuthorization.expiry)
  return _internal_expiry();
}
inline void Identity_AddAuthorization::_internal_set_expiry(uint64_t value) {
  
  expiry_ = value;
}
inline void Identity_AddAuthorization::set_expiry(uint64_t value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.Identity.AddAuthorization.expiry)
}

// -------------------------------------------------------------------

// Identity

// .TW.Polkadot.Proto.Identity.JoinIdentityAsKey join_identity_as_key = 1;
inline bool Identity::_internal_has_join_identity_as_key() const {
  return message_oneof_case() == kJoinIdentityAsKey;
}
inline bool Identity::has_join_identity_as_key() const {
  return _internal_has_join_identity_as_key();
}
inline void Identity::set_has_join_identity_as_key() {
  _oneof_case_[0] = kJoinIdentityAsKey;
}
inline void Identity::clear_join_identity_as_key() {
  if (_internal_has_join_identity_as_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.join_identity_as_key_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* Identity::release_join_identity_as_key() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.join_identity_as_key)
  if (_internal_has_join_identity_as_key()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* temp = message_oneof_.join_identity_as_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.join_identity_as_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey& Identity::_internal_join_identity_as_key() const {
  return _internal_has_join_identity_as_key()
      ? *message_oneof_.join_identity_as_key_
      : reinterpret_cast< ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey&>(::TW::Polkadot::Proto::_Identity_JoinIdentityAsKey_default_instance_);
}
inline const ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey& Identity::join_identity_as_key() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.join_identity_as_key)
  return _internal_join_identity_as_key();
}
inline ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* Identity::unsafe_arena_release_join_identity_as_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Identity.join_identity_as_key)
  if (_internal_has_join_identity_as_key()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* temp = message_oneof_.join_identity_as_key_;
    message_oneof_.join_identity_as_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Identity::unsafe_arena_set_allocated_join_identity_as_key(::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* join_identity_as_key) {
  clear_message_oneof();
  if (join_identity_as_key) {
    set_has_join_identity_as_key();
    message_oneof_.join_identity_as_key_ = join_identity_as_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.join_identity_as_key)
}
inline ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* Identity::_internal_mutable_join_identity_as_key() {
  if (!_internal_has_join_identity_as_key()) {
    clear_message_oneof();
    set_has_join_identity_as_key();
    message_oneof_.join_identity_as_key_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey >(GetArenaForAllocation());
  }
  return message_oneof_.join_identity_as_key_;
}
inline ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* Identity::mutable_join_identity_as_key() {
  ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* _msg = _internal_mutable_join_identity_as_key();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.join_identity_as_key)
  return _msg;
}

// .TW.Polkadot.Proto.Identity.AddAuthorization add_authorization = 2;
inline bool Identity::_internal_has_add_authorization() const {
  return message_oneof_case() == kAddAuthorization;
}
inline bool Identity::has_add_authorization() const {
  return _internal_has_add_authorization();
}
inline void Identity::set_has_add_authorization() {
  _oneof_case_[0] = kAddAuthorization;
}
inline void Identity::clear_add_authorization() {
  if (_internal_has_add_authorization()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.add_authorization_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization* Identity::release_add_authorization() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.Identity.add_authorization)
  if (_internal_has_add_authorization()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Identity_AddAuthorization* temp = message_oneof_.add_authorization_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.add_authorization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization& Identity::_internal_add_authorization() const {
  return _internal_has_add_authorization()
      ? *message_oneof_.add_authorization_
      : reinterpret_cast< ::TW::Polkadot::Proto::Identity_AddAuthorization&>(::TW::Polkadot::Proto::_Identity_AddAuthorization_default_instance_);
}
inline const ::TW::Polkadot::Proto::Identity_AddAuthorization& Identity::add_authorization() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.Identity.add_authorization)
  return _internal_add_authorization();
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization* Identity::unsafe_arena_release_add_authorization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.Identity.add_authorization)
  if (_internal_has_add_authorization()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Identity_AddAuthorization* temp = message_oneof_.add_authorization_;
    message_oneof_.add_authorization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Identity::unsafe_arena_set_allocated_add_authorization(::TW::Polkadot::Proto::Identity_AddAuthorization* add_authorization) {
  clear_message_oneof();
  if (add_authorization) {
    set_has_add_authorization();
    message_oneof_.add_authorization_ = add_authorization;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.Identity.add_authorization)
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization* Identity::_internal_mutable_add_authorization() {
  if (!_internal_has_add_authorization()) {
    clear_message_oneof();
    set_has_add_authorization();
    message_oneof_.add_authorization_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Identity_AddAuthorization >(GetArenaForAllocation());
  }
  return message_oneof_.add_authorization_;
}
inline ::TW::Polkadot::Proto::Identity_AddAuthorization* Identity::mutable_add_authorization() {
  ::TW::Polkadot::Proto::Identity_AddAuthorization* _msg = _internal_mutable_add_authorization();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.Identity.add_authorization)
  return _msg;
}

inline bool Identity::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Identity::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Identity::MessageOneofCase Identity::message_oneof_case() const {
  return Identity::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PolymeshCall

// .TW.Polkadot.Proto.Identity identity_call = 2;
inline bool PolymeshCall::_internal_has_identity_call() const {
  return message_oneof_case() == kIdentityCall;
}
inline bool PolymeshCall::has_identity_call() const {
  return _internal_has_identity_call();
}
inline void PolymeshCall::set_has_identity_call() {
  _oneof_case_[0] = kIdentityCall;
}
inline void PolymeshCall::clear_identity_call() {
  if (_internal_has_identity_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.identity_call_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Identity* PolymeshCall::release_identity_call() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.PolymeshCall.identity_call)
  if (_internal_has_identity_call()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Identity* temp = message_oneof_.identity_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.identity_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Identity& PolymeshCall::_internal_identity_call() const {
  return _internal_has_identity_call()
      ? *message_oneof_.identity_call_
      : reinterpret_cast< ::TW::Polkadot::Proto::Identity&>(::TW::Polkadot::Proto::_Identity_default_instance_);
}
inline const ::TW::Polkadot::Proto::Identity& PolymeshCall::identity_call() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.PolymeshCall.identity_call)
  return _internal_identity_call();
}
inline ::TW::Polkadot::Proto::Identity* PolymeshCall::unsafe_arena_release_identity_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.PolymeshCall.identity_call)
  if (_internal_has_identity_call()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Identity* temp = message_oneof_.identity_call_;
    message_oneof_.identity_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PolymeshCall::unsafe_arena_set_allocated_identity_call(::TW::Polkadot::Proto::Identity* identity_call) {
  clear_message_oneof();
  if (identity_call) {
    set_has_identity_call();
    message_oneof_.identity_call_ = identity_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.PolymeshCall.identity_call)
}
inline ::TW::Polkadot::Proto::Identity* PolymeshCall::_internal_mutable_identity_call() {
  if (!_internal_has_identity_call()) {
    clear_message_oneof();
    set_has_identity_call();
    message_oneof_.identity_call_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Identity >(GetArenaForAllocation());
  }
  return message_oneof_.identity_call_;
}
inline ::TW::Polkadot::Proto::Identity* PolymeshCall::mutable_identity_call() {
  ::TW::Polkadot::Proto::Identity* _msg = _internal_mutable_identity_call();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.PolymeshCall.identity_call)
  return _msg;
}

inline bool PolymeshCall::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void PolymeshCall::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline PolymeshCall::MessageOneofCase PolymeshCall::message_oneof_case() const {
  return PolymeshCall::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// bytes block_hash = 1;
inline void SigningInput::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& SigningInput::block_hash() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.block_hash)
  return _internal_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_block_hash(ArgT0&& arg0, ArgT... args) {
 
 block_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.block_hash)
}
inline std::string* SigningInput::mutable_block_hash() {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.block_hash)
  return _s;
}
inline const std::string& SigningInput::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void SigningInput::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_block_hash() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.block_hash)
}

// bytes genesis_hash = 2;
inline void SigningInput::clear_genesis_hash() {
  genesis_hash_.ClearToEmpty();
}
inline const std::string& SigningInput::genesis_hash() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.genesis_hash)
  return _internal_genesis_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_genesis_hash(ArgT0&& arg0, ArgT... args) {
 
 genesis_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.genesis_hash)
}
inline std::string* SigningInput::mutable_genesis_hash() {
  std::string* _s = _internal_mutable_genesis_hash();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.genesis_hash)
  return _s;
}
inline const std::string& SigningInput::_internal_genesis_hash() const {
  return genesis_hash_.Get();
}
inline void SigningInput::_internal_set_genesis_hash(const std::string& value) {
  
  genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_genesis_hash() {
  
  return genesis_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_genesis_hash() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.genesis_hash)
  return genesis_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_genesis_hash(std::string* genesis_hash) {
  if (genesis_hash != nullptr) {
    
  } else {
    
  }
  genesis_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genesis_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (genesis_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    genesis_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.genesis_hash)
}

// uint64 nonce = 3;
inline void SigningInput::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_nonce() const {
  return nonce_;
}
inline uint64_t SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void SigningInput::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.nonce)
}

// uint32 spec_version = 4;
inline void SigningInput::clear_spec_version() {
  spec_version_ = 0u;
}
inline uint32_t SigningInput::_internal_spec_version() const {
  return spec_version_;
}
inline uint32_t SigningInput::spec_version() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.spec_version)
  return _internal_spec_version();
}
inline void SigningInput::_internal_set_spec_version(uint32_t value) {
  
  spec_version_ = value;
}
inline void SigningInput::set_spec_version(uint32_t value) {
  _internal_set_spec_version(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.spec_version)
}

// uint32 transaction_version = 5;
inline void SigningInput::clear_transaction_version() {
  transaction_version_ = 0u;
}
inline uint32_t SigningInput::_internal_transaction_version() const {
  return transaction_version_;
}
inline uint32_t SigningInput::transaction_version() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.transaction_version)
  return _internal_transaction_version();
}
inline void SigningInput::_internal_set_transaction_version(uint32_t value) {
  
  transaction_version_ = value;
}
inline void SigningInput::set_transaction_version(uint32_t value) {
  _internal_set_transaction_version(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.transaction_version)
}

// bytes tip = 6;
inline void SigningInput::clear_tip() {
  tip_.ClearToEmpty();
}
inline const std::string& SigningInput::tip() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.tip)
  return _internal_tip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_tip(ArgT0&& arg0, ArgT... args) {
 
 tip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.tip)
}
inline std::string* SigningInput::mutable_tip() {
  std::string* _s = _internal_mutable_tip();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.tip)
  return _s;
}
inline const std::string& SigningInput::_internal_tip() const {
  return tip_.Get();
}
inline void SigningInput::_internal_set_tip(const std::string& value) {
  
  tip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_tip() {
  
  return tip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_tip() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.tip)
  return tip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_tip(std::string* tip) {
  if (tip != nullptr) {
    
  } else {
    
  }
  tip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.tip)
}

// .TW.Polkadot.Proto.Era era = 7;
inline bool SigningInput::_internal_has_era() const {
  return this != internal_default_instance() && era_ != nullptr;
}
inline bool SigningInput::has_era() const {
  return _internal_has_era();
}
inline void SigningInput::clear_era() {
  if (GetArenaForAllocation() == nullptr && era_ != nullptr) {
    delete era_;
  }
  era_ = nullptr;
}
inline const ::TW::Polkadot::Proto::Era& SigningInput::_internal_era() const {
  const ::TW::Polkadot::Proto::Era* p = era_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Polkadot::Proto::Era&>(
      ::TW::Polkadot::Proto::_Era_default_instance_);
}
inline const ::TW::Polkadot::Proto::Era& SigningInput::era() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.era)
  return _internal_era();
}
inline void SigningInput::unsafe_arena_set_allocated_era(
    ::TW::Polkadot::Proto::Era* era) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(era_);
  }
  era_ = era;
  if (era) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.SigningInput.era)
}
inline ::TW::Polkadot::Proto::Era* SigningInput::release_era() {
  
  ::TW::Polkadot::Proto::Era* temp = era_;
  era_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Polkadot::Proto::Era* SigningInput::unsafe_arena_release_era() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.era)
  
  ::TW::Polkadot::Proto::Era* temp = era_;
  era_ = nullptr;
  return temp;
}
inline ::TW::Polkadot::Proto::Era* SigningInput::_internal_mutable_era() {
  
  if (era_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Polkadot::Proto::Era>(GetArenaForAllocation());
    era_ = p;
  }
  return era_;
}
inline ::TW::Polkadot::Proto::Era* SigningInput::mutable_era() {
  ::TW::Polkadot::Proto::Era* _msg = _internal_mutable_era();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.era)
  return _msg;
}
inline void SigningInput::set_allocated_era(::TW::Polkadot::Proto::Era* era) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete era_;
  }
  if (era) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Era>::GetOwningArena(era);
    if (message_arena != submessage_arena) {
      era = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, era, submessage_arena);
    }
    
  } else {
    
  }
  era_ = era;
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.era)
}

// bytes private_key = 8;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.private_key)
}

// uint32 network = 9;
inline void SigningInput::clear_network() {
  network_ = 0u;
}
inline uint32_t SigningInput::_internal_network() const {
  return network_;
}
inline uint32_t SigningInput::network() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.network)
  return _internal_network();
}
inline void SigningInput::_internal_set_network(uint32_t value) {
  
  network_ = value;
}
inline void SigningInput::set_network(uint32_t value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.network)
}

// bool multi_address = 10;
inline void SigningInput::clear_multi_address() {
  multi_address_ = false;
}
inline bool SigningInput::_internal_multi_address() const {
  return multi_address_;
}
inline bool SigningInput::multi_address() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.multi_address)
  return _internal_multi_address();
}
inline void SigningInput::_internal_set_multi_address(bool value) {
  
  multi_address_ = value;
}
inline void SigningInput::set_multi_address(bool value) {
  _internal_set_multi_address(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningInput.multi_address)
}

// .TW.Polkadot.Proto.Balance balance_call = 11;
inline bool SigningInput::_internal_has_balance_call() const {
  return message_oneof_case() == kBalanceCall;
}
inline bool SigningInput::has_balance_call() const {
  return _internal_has_balance_call();
}
inline void SigningInput::set_has_balance_call() {
  _oneof_case_[0] = kBalanceCall;
}
inline void SigningInput::clear_balance_call() {
  if (_internal_has_balance_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.balance_call_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::release_balance_call() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.balance_call)
  if (_internal_has_balance_call()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Balance* temp = message_oneof_.balance_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.balance_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Balance& SigningInput::_internal_balance_call() const {
  return _internal_has_balance_call()
      ? *message_oneof_.balance_call_
      : reinterpret_cast< ::TW::Polkadot::Proto::Balance&>(::TW::Polkadot::Proto::_Balance_default_instance_);
}
inline const ::TW::Polkadot::Proto::Balance& SigningInput::balance_call() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.balance_call)
  return _internal_balance_call();
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::unsafe_arena_release_balance_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.SigningInput.balance_call)
  if (_internal_has_balance_call()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Balance* temp = message_oneof_.balance_call_;
    message_oneof_.balance_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_balance_call(::TW::Polkadot::Proto::Balance* balance_call) {
  clear_message_oneof();
  if (balance_call) {
    set_has_balance_call();
    message_oneof_.balance_call_ = balance_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.SigningInput.balance_call)
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::_internal_mutable_balance_call() {
  if (!_internal_has_balance_call()) {
    clear_message_oneof();
    set_has_balance_call();
    message_oneof_.balance_call_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Balance >(GetArenaForAllocation());
  }
  return message_oneof_.balance_call_;
}
inline ::TW::Polkadot::Proto::Balance* SigningInput::mutable_balance_call() {
  ::TW::Polkadot::Proto::Balance* _msg = _internal_mutable_balance_call();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.balance_call)
  return _msg;
}

// .TW.Polkadot.Proto.Staking staking_call = 12;
inline bool SigningInput::_internal_has_staking_call() const {
  return message_oneof_case() == kStakingCall;
}
inline bool SigningInput::has_staking_call() const {
  return _internal_has_staking_call();
}
inline void SigningInput::set_has_staking_call() {
  _oneof_case_[0] = kStakingCall;
}
inline void SigningInput::clear_staking_call() {
  if (_internal_has_staking_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.staking_call_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::release_staking_call() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.staking_call)
  if (_internal_has_staking_call()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::Staking* temp = message_oneof_.staking_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.staking_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::Staking& SigningInput::_internal_staking_call() const {
  return _internal_has_staking_call()
      ? *message_oneof_.staking_call_
      : reinterpret_cast< ::TW::Polkadot::Proto::Staking&>(::TW::Polkadot::Proto::_Staking_default_instance_);
}
inline const ::TW::Polkadot::Proto::Staking& SigningInput::staking_call() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.staking_call)
  return _internal_staking_call();
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::unsafe_arena_release_staking_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.SigningInput.staking_call)
  if (_internal_has_staking_call()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::Staking* temp = message_oneof_.staking_call_;
    message_oneof_.staking_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_staking_call(::TW::Polkadot::Proto::Staking* staking_call) {
  clear_message_oneof();
  if (staking_call) {
    set_has_staking_call();
    message_oneof_.staking_call_ = staking_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.SigningInput.staking_call)
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::_internal_mutable_staking_call() {
  if (!_internal_has_staking_call()) {
    clear_message_oneof();
    set_has_staking_call();
    message_oneof_.staking_call_ = CreateMaybeMessage< ::TW::Polkadot::Proto::Staking >(GetArenaForAllocation());
  }
  return message_oneof_.staking_call_;
}
inline ::TW::Polkadot::Proto::Staking* SigningInput::mutable_staking_call() {
  ::TW::Polkadot::Proto::Staking* _msg = _internal_mutable_staking_call();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.staking_call)
  return _msg;
}

// .TW.Polkadot.Proto.PolymeshCall polymesh_call = 13;
inline bool SigningInput::_internal_has_polymesh_call() const {
  return message_oneof_case() == kPolymeshCall;
}
inline bool SigningInput::has_polymesh_call() const {
  return _internal_has_polymesh_call();
}
inline void SigningInput::set_has_polymesh_call() {
  _oneof_case_[0] = kPolymeshCall;
}
inline void SigningInput::clear_polymesh_call() {
  if (_internal_has_polymesh_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.polymesh_call_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Polkadot::Proto::PolymeshCall* SigningInput::release_polymesh_call() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningInput.polymesh_call)
  if (_internal_has_polymesh_call()) {
    clear_has_message_oneof();
      ::TW::Polkadot::Proto::PolymeshCall* temp = message_oneof_.polymesh_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.polymesh_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Polkadot::Proto::PolymeshCall& SigningInput::_internal_polymesh_call() const {
  return _internal_has_polymesh_call()
      ? *message_oneof_.polymesh_call_
      : reinterpret_cast< ::TW::Polkadot::Proto::PolymeshCall&>(::TW::Polkadot::Proto::_PolymeshCall_default_instance_);
}
inline const ::TW::Polkadot::Proto::PolymeshCall& SigningInput::polymesh_call() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningInput.polymesh_call)
  return _internal_polymesh_call();
}
inline ::TW::Polkadot::Proto::PolymeshCall* SigningInput::unsafe_arena_release_polymesh_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Polkadot.Proto.SigningInput.polymesh_call)
  if (_internal_has_polymesh_call()) {
    clear_has_message_oneof();
    ::TW::Polkadot::Proto::PolymeshCall* temp = message_oneof_.polymesh_call_;
    message_oneof_.polymesh_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_polymesh_call(::TW::Polkadot::Proto::PolymeshCall* polymesh_call) {
  clear_message_oneof();
  if (polymesh_call) {
    set_has_polymesh_call();
    message_oneof_.polymesh_call_ = polymesh_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Polkadot.Proto.SigningInput.polymesh_call)
}
inline ::TW::Polkadot::Proto::PolymeshCall* SigningInput::_internal_mutable_polymesh_call() {
  if (!_internal_has_polymesh_call()) {
    clear_message_oneof();
    set_has_polymesh_call();
    message_oneof_.polymesh_call_ = CreateMaybeMessage< ::TW::Polkadot::Proto::PolymeshCall >(GetArenaForAllocation());
  }
  return message_oneof_.polymesh_call_;
}
inline ::TW::Polkadot::Proto::PolymeshCall* SigningInput::mutable_polymesh_call() {
  ::TW::Polkadot::Proto::PolymeshCall* _msg = _internal_mutable_polymesh_call();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningInput.polymesh_call)
  return _msg;
}

inline bool SigningInput::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline SigningInput::MessageOneofCase SigningInput::message_oneof_case() const {
  return SigningInput::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningOutput.error)
}

// string error_message = 3;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Polkadot.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Polkadot.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Polkadot.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Polkadot.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Polkadot::Proto::RewardDestination> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Polkadot::Proto::RewardDestination>() {
  return ::TW::Polkadot::Proto::RewardDestination_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Polkadot_2eproto
