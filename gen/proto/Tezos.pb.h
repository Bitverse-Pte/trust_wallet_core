// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tezos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Tezos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Tezos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Tezos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Tezos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Tezos_2eproto;
namespace TW {
namespace Tezos {
namespace Proto {
class DelegationOperationData;
struct DelegationOperationDataDefaultTypeInternal;
extern DelegationOperationDataDefaultTypeInternal _DelegationOperationData_default_instance_;
class FA12Parameters;
struct FA12ParametersDefaultTypeInternal;
extern FA12ParametersDefaultTypeInternal _FA12Parameters_default_instance_;
class FA2Parameters;
struct FA2ParametersDefaultTypeInternal;
extern FA2ParametersDefaultTypeInternal _FA2Parameters_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class OperationList;
struct OperationListDefaultTypeInternal;
extern OperationListDefaultTypeInternal _OperationList_default_instance_;
class OperationParameters;
struct OperationParametersDefaultTypeInternal;
extern OperationParametersDefaultTypeInternal _OperationParameters_default_instance_;
class RevealOperationData;
struct RevealOperationDataDefaultTypeInternal;
extern RevealOperationDataDefaultTypeInternal _RevealOperationData_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class TransactionOperationData;
struct TransactionOperationDataDefaultTypeInternal;
extern TransactionOperationDataDefaultTypeInternal _TransactionOperationData_default_instance_;
class TxObject;
struct TxObjectDefaultTypeInternal;
extern TxObjectDefaultTypeInternal _TxObject_default_instance_;
class Txs;
struct TxsDefaultTypeInternal;
extern TxsDefaultTypeInternal _Txs_default_instance_;
}  // namespace Proto
}  // namespace Tezos
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Tezos::Proto::DelegationOperationData* Arena::CreateMaybeMessage<::TW::Tezos::Proto::DelegationOperationData>(Arena*);
template<> ::TW::Tezos::Proto::FA12Parameters* Arena::CreateMaybeMessage<::TW::Tezos::Proto::FA12Parameters>(Arena*);
template<> ::TW::Tezos::Proto::FA2Parameters* Arena::CreateMaybeMessage<::TW::Tezos::Proto::FA2Parameters>(Arena*);
template<> ::TW::Tezos::Proto::Operation* Arena::CreateMaybeMessage<::TW::Tezos::Proto::Operation>(Arena*);
template<> ::TW::Tezos::Proto::OperationList* Arena::CreateMaybeMessage<::TW::Tezos::Proto::OperationList>(Arena*);
template<> ::TW::Tezos::Proto::OperationParameters* Arena::CreateMaybeMessage<::TW::Tezos::Proto::OperationParameters>(Arena*);
template<> ::TW::Tezos::Proto::RevealOperationData* Arena::CreateMaybeMessage<::TW::Tezos::Proto::RevealOperationData>(Arena*);
template<> ::TW::Tezos::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Tezos::Proto::SigningInput>(Arena*);
template<> ::TW::Tezos::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Tezos::Proto::SigningOutput>(Arena*);
template<> ::TW::Tezos::Proto::TransactionOperationData* Arena::CreateMaybeMessage<::TW::Tezos::Proto::TransactionOperationData>(Arena*);
template<> ::TW::Tezos::Proto::TxObject* Arena::CreateMaybeMessage<::TW::Tezos::Proto::TxObject>(Arena*);
template<> ::TW::Tezos::Proto::Txs* Arena::CreateMaybeMessage<::TW::Tezos::Proto::Txs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Tezos {
namespace Proto {

enum Operation_OperationKind : int {
  Operation_OperationKind_ENDORSEMENT = 0,
  Operation_OperationKind_REVEAL = 107,
  Operation_OperationKind_TRANSACTION = 108,
  Operation_OperationKind_DELEGATION = 110,
  Operation_OperationKind_Operation_OperationKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Operation_OperationKind_Operation_OperationKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Operation_OperationKind_IsValid(int value);
constexpr Operation_OperationKind Operation_OperationKind_OperationKind_MIN = Operation_OperationKind_ENDORSEMENT;
constexpr Operation_OperationKind Operation_OperationKind_OperationKind_MAX = Operation_OperationKind_DELEGATION;
constexpr int Operation_OperationKind_OperationKind_ARRAYSIZE = Operation_OperationKind_OperationKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationKind_descriptor();
template<typename T>
inline const std::string& Operation_OperationKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_OperationKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_OperationKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_OperationKind_descriptor(), enum_t_value);
}
inline bool Operation_OperationKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operation_OperationKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_OperationKind>(
    Operation_OperationKind_descriptor(), name, value);
}
// ===================================================================

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedOperationsFieldNumber = 2,
    kPrivateKeyFieldNumber = 3,
    kOperationListFieldNumber = 1,
  };
  // bytes encoded_operations = 2;
  void clear_encoded_operations();
  const std::string& encoded_operations() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded_operations(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded_operations();
  PROTOBUF_NODISCARD std::string* release_encoded_operations();
  void set_allocated_encoded_operations(std::string* encoded_operations);
  private:
  const std::string& _internal_encoded_operations() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_operations(const std::string& value);
  std::string* _internal_mutable_encoded_operations();
  public:

  // bytes private_key = 3;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Tezos.Proto.OperationList operation_list = 1;
  bool has_operation_list() const;
  private:
  bool _internal_has_operation_list() const;
  public:
  void clear_operation_list();
  const ::TW::Tezos::Proto::OperationList& operation_list() const;
  PROTOBUF_NODISCARD ::TW::Tezos::Proto::OperationList* release_operation_list();
  ::TW::Tezos::Proto::OperationList* mutable_operation_list();
  void set_allocated_operation_list(::TW::Tezos::Proto::OperationList* operation_list);
  private:
  const ::TW::Tezos::Proto::OperationList& _internal_operation_list() const;
  ::TW::Tezos::Proto::OperationList* _internal_mutable_operation_list();
  public:
  void unsafe_arena_set_allocated_operation_list(
      ::TW::Tezos::Proto::OperationList* operation_list);
  ::TW::Tezos::Proto::OperationList* unsafe_arena_release_operation_list();

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Tezos::Proto::OperationList* operation_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kErrorFieldNumber = 2,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class OperationList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.OperationList) */ {
 public:
  inline OperationList() : OperationList(nullptr) {}
  ~OperationList() override;
  explicit constexpr OperationList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationList(const OperationList& from);
  OperationList(OperationList&& from) noexcept
    : OperationList() {
    *this = ::std::move(from);
  }

  inline OperationList& operator=(const OperationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationList& operator=(OperationList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationList& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationList* internal_default_instance() {
    return reinterpret_cast<const OperationList*>(
               &_OperationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OperationList& a, OperationList& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OperationList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.OperationList";
  }
  protected:
  explicit OperationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 2,
    kBranchFieldNumber = 1,
  };
  // repeated .TW.Tezos.Proto.Operation operations = 2;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::TW::Tezos::Proto::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Operation >*
      mutable_operations();
  private:
  const ::TW::Tezos::Proto::Operation& _internal_operations(int index) const;
  ::TW::Tezos::Proto::Operation* _internal_add_operations();
  public:
  const ::TW::Tezos::Proto::Operation& operations(int index) const;
  ::TW::Tezos::Proto::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Operation >&
      operations() const;

  // string branch = 1;
  void clear_branch();
  const std::string& branch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_branch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_branch();
  PROTOBUF_NODISCARD std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  private:
  const std::string& _internal_branch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.OperationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit constexpr Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  enum OperationDataCase {
    kRevealOperationData = 8,
    kTransactionOperationData = 9,
    kDelegationOperationData = 11,
    OPERATION_DATA_NOT_SET = 0,
  };

  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operation_OperationKind OperationKind;
  static constexpr OperationKind ENDORSEMENT =
    Operation_OperationKind_ENDORSEMENT;
  static constexpr OperationKind REVEAL =
    Operation_OperationKind_REVEAL;
  static constexpr OperationKind TRANSACTION =
    Operation_OperationKind_TRANSACTION;
  static constexpr OperationKind DELEGATION =
    Operation_OperationKind_DELEGATION;
  static inline bool OperationKind_IsValid(int value) {
    return Operation_OperationKind_IsValid(value);
  }
  static constexpr OperationKind OperationKind_MIN =
    Operation_OperationKind_OperationKind_MIN;
  static constexpr OperationKind OperationKind_MAX =
    Operation_OperationKind_OperationKind_MAX;
  static constexpr int OperationKind_ARRAYSIZE =
    Operation_OperationKind_OperationKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationKind_descriptor() {
    return Operation_OperationKind_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationKind_Name.");
    return Operation_OperationKind_Name(enum_t_value);
  }
  static inline bool OperationKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperationKind* value) {
    return Operation_OperationKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kCounterFieldNumber = 1,
    kFeeFieldNumber = 3,
    kGasLimitFieldNumber = 4,
    kStorageLimitFieldNumber = 5,
    kKindFieldNumber = 7,
    kRevealOperationDataFieldNumber = 8,
    kTransactionOperationDataFieldNumber = 9,
    kDelegationOperationDataFieldNumber = 11,
  };
  // string source = 2;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // int64 counter = 1;
  void clear_counter();
  int64_t counter() const;
  void set_counter(int64_t value);
  private:
  int64_t _internal_counter() const;
  void _internal_set_counter(int64_t value);
  public:

  // int64 fee = 3;
  void clear_fee();
  int64_t fee() const;
  void set_fee(int64_t value);
  private:
  int64_t _internal_fee() const;
  void _internal_set_fee(int64_t value);
  public:

  // int64 gas_limit = 4;
  void clear_gas_limit();
  int64_t gas_limit() const;
  void set_gas_limit(int64_t value);
  private:
  int64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(int64_t value);
  public:

  // int64 storage_limit = 5;
  void clear_storage_limit();
  int64_t storage_limit() const;
  void set_storage_limit(int64_t value);
  private:
  int64_t _internal_storage_limit() const;
  void _internal_set_storage_limit(int64_t value);
  public:

  // .TW.Tezos.Proto.Operation.OperationKind kind = 7;
  void clear_kind();
  ::TW::Tezos::Proto::Operation_OperationKind kind() const;
  void set_kind(::TW::Tezos::Proto::Operation_OperationKind value);
  private:
  ::TW::Tezos::Proto::Operation_OperationKind _internal_kind() const;
  void _internal_set_kind(::TW::Tezos::Proto::Operation_OperationKind value);
  public:

  // .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
  bool has_reveal_operation_data() const;
  private:
  bool _internal_has_reveal_operation_data() const;
  public:
  void clear_reveal_operation_data();
  const ::TW::Tezos::Proto::RevealOperationData& reveal_operation_data() const;
  PROTOBUF_NODISCARD ::TW::Tezos::Proto::RevealOperationData* release_reveal_operation_data();
  ::TW::Tezos::Proto::RevealOperationData* mutable_reveal_operation_data();
  void set_allocated_reveal_operation_data(::TW::Tezos::Proto::RevealOperationData* reveal_operation_data);
  private:
  const ::TW::Tezos::Proto::RevealOperationData& _internal_reveal_operation_data() const;
  ::TW::Tezos::Proto::RevealOperationData* _internal_mutable_reveal_operation_data();
  public:
  void unsafe_arena_set_allocated_reveal_operation_data(
      ::TW::Tezos::Proto::RevealOperationData* reveal_operation_data);
  ::TW::Tezos::Proto::RevealOperationData* unsafe_arena_release_reveal_operation_data();

  // .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
  bool has_transaction_operation_data() const;
  private:
  bool _internal_has_transaction_operation_data() const;
  public:
  void clear_transaction_operation_data();
  const ::TW::Tezos::Proto::TransactionOperationData& transaction_operation_data() const;
  PROTOBUF_NODISCARD ::TW::Tezos::Proto::TransactionOperationData* release_transaction_operation_data();
  ::TW::Tezos::Proto::TransactionOperationData* mutable_transaction_operation_data();
  void set_allocated_transaction_operation_data(::TW::Tezos::Proto::TransactionOperationData* transaction_operation_data);
  private:
  const ::TW::Tezos::Proto::TransactionOperationData& _internal_transaction_operation_data() const;
  ::TW::Tezos::Proto::TransactionOperationData* _internal_mutable_transaction_operation_data();
  public:
  void unsafe_arena_set_allocated_transaction_operation_data(
      ::TW::Tezos::Proto::TransactionOperationData* transaction_operation_data);
  ::TW::Tezos::Proto::TransactionOperationData* unsafe_arena_release_transaction_operation_data();

  // .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
  bool has_delegation_operation_data() const;
  private:
  bool _internal_has_delegation_operation_data() const;
  public:
  void clear_delegation_operation_data();
  const ::TW::Tezos::Proto::DelegationOperationData& delegation_operation_data() const;
  PROTOBUF_NODISCARD ::TW::Tezos::Proto::DelegationOperationData* release_delegation_operation_data();
  ::TW::Tezos::Proto::DelegationOperationData* mutable_delegation_operation_data();
  void set_allocated_delegation_operation_data(::TW::Tezos::Proto::DelegationOperationData* delegation_operation_data);
  private:
  const ::TW::Tezos::Proto::DelegationOperationData& _internal_delegation_operation_data() const;
  ::TW::Tezos::Proto::DelegationOperationData* _internal_mutable_delegation_operation_data();
  public:
  void unsafe_arena_set_allocated_delegation_operation_data(
      ::TW::Tezos::Proto::DelegationOperationData* delegation_operation_data);
  ::TW::Tezos::Proto::DelegationOperationData* unsafe_arena_release_delegation_operation_data();

  void clear_operation_data();
  OperationDataCase operation_data_case() const;
  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.Operation)
 private:
  class _Internal;
  void set_has_reveal_operation_data();
  void set_has_transaction_operation_data();
  void set_has_delegation_operation_data();

  inline bool has_operation_data() const;
  inline void clear_has_operation_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  int64_t counter_;
  int64_t fee_;
  int64_t gas_limit_;
  int64_t storage_limit_;
  int kind_;
  union OperationDataUnion {
    constexpr OperationDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Tezos::Proto::RevealOperationData* reveal_operation_data_;
    ::TW::Tezos::Proto::TransactionOperationData* transaction_operation_data_;
    ::TW::Tezos::Proto::DelegationOperationData* delegation_operation_data_;
  } operation_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class FA12Parameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.FA12Parameters) */ {
 public:
  inline FA12Parameters() : FA12Parameters(nullptr) {}
  ~FA12Parameters() override;
  explicit constexpr FA12Parameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FA12Parameters(const FA12Parameters& from);
  FA12Parameters(FA12Parameters&& from) noexcept
    : FA12Parameters() {
    *this = ::std::move(from);
  }

  inline FA12Parameters& operator=(const FA12Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline FA12Parameters& operator=(FA12Parameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FA12Parameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const FA12Parameters* internal_default_instance() {
    return reinterpret_cast<const FA12Parameters*>(
               &_FA12Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FA12Parameters& a, FA12Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(FA12Parameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FA12Parameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FA12Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FA12Parameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FA12Parameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FA12Parameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FA12Parameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.FA12Parameters";
  }
  protected:
  explicit FA12Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntrypointFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string entrypoint = 1;
  void clear_entrypoint();
  const std::string& entrypoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entrypoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entrypoint();
  PROTOBUF_NODISCARD std::string* release_entrypoint();
  void set_allocated_entrypoint(std::string* entrypoint);
  private:
  const std::string& _internal_entrypoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entrypoint(const std::string& value);
  std::string* _internal_mutable_entrypoint();
  public:

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 3;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.FA12Parameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entrypoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class Txs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.Txs) */ {
 public:
  inline Txs() : Txs(nullptr) {}
  ~Txs() override;
  explicit constexpr Txs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Txs(const Txs& from);
  Txs(Txs&& from) noexcept
    : Txs() {
    *this = ::std::move(from);
  }

  inline Txs& operator=(const Txs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Txs& operator=(Txs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Txs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Txs* internal_default_instance() {
    return reinterpret_cast<const Txs*>(
               &_Txs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Txs& a, Txs& b) {
    a.Swap(&b);
  }
  inline void Swap(Txs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Txs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Txs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Txs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Txs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Txs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Txs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.Txs";
  }
  protected:
  explicit Txs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kTokenIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string to = 1;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string token_id = 2;
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // string amount = 3;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.Txs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class TxObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.TxObject) */ {
 public:
  inline TxObject() : TxObject(nullptr) {}
  ~TxObject() override;
  explicit constexpr TxObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxObject(const TxObject& from);
  TxObject(TxObject&& from) noexcept
    : TxObject() {
    *this = ::std::move(from);
  }

  inline TxObject& operator=(const TxObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxObject& operator=(TxObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxObject* internal_default_instance() {
    return reinterpret_cast<const TxObject*>(
               &_TxObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TxObject& a, TxObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TxObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TxObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.TxObject";
  }
  protected:
  explicit TxObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 2,
    kFromFieldNumber = 1,
  };
  // repeated .TW.Tezos.Proto.Txs txs = 2;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::TW::Tezos::Proto::Txs* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Txs >*
      mutable_txs();
  private:
  const ::TW::Tezos::Proto::Txs& _internal_txs(int index) const;
  ::TW::Tezos::Proto::Txs* _internal_add_txs();
  public:
  const ::TW::Tezos::Proto::Txs& txs(int index) const;
  ::TW::Tezos::Proto::Txs* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Txs >&
      txs() const;

  // string from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.TxObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Txs > txs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class FA2Parameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.FA2Parameters) */ {
 public:
  inline FA2Parameters() : FA2Parameters(nullptr) {}
  ~FA2Parameters() override;
  explicit constexpr FA2Parameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FA2Parameters(const FA2Parameters& from);
  FA2Parameters(FA2Parameters&& from) noexcept
    : FA2Parameters() {
    *this = ::std::move(from);
  }

  inline FA2Parameters& operator=(const FA2Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline FA2Parameters& operator=(FA2Parameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FA2Parameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const FA2Parameters* internal_default_instance() {
    return reinterpret_cast<const FA2Parameters*>(
               &_FA2Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FA2Parameters& a, FA2Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(FA2Parameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FA2Parameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FA2Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FA2Parameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FA2Parameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FA2Parameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FA2Parameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.FA2Parameters";
  }
  protected:
  explicit FA2Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsObjectFieldNumber = 2,
    kEntrypointFieldNumber = 1,
  };
  // repeated .TW.Tezos.Proto.TxObject txs_object = 2;
  int txs_object_size() const;
  private:
  int _internal_txs_object_size() const;
  public:
  void clear_txs_object();
  ::TW::Tezos::Proto::TxObject* mutable_txs_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::TxObject >*
      mutable_txs_object();
  private:
  const ::TW::Tezos::Proto::TxObject& _internal_txs_object(int index) const;
  ::TW::Tezos::Proto::TxObject* _internal_add_txs_object();
  public:
  const ::TW::Tezos::Proto::TxObject& txs_object(int index) const;
  ::TW::Tezos::Proto::TxObject* add_txs_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::TxObject >&
      txs_object() const;

  // string entrypoint = 1;
  void clear_entrypoint();
  const std::string& entrypoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entrypoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entrypoint();
  PROTOBUF_NODISCARD std::string* release_entrypoint();
  void set_allocated_entrypoint(std::string* entrypoint);
  private:
  const std::string& _internal_entrypoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entrypoint(const std::string& value);
  std::string* _internal_mutable_entrypoint();
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.FA2Parameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::TxObject > txs_object_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entrypoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class OperationParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.OperationParameters) */ {
 public:
  inline OperationParameters() : OperationParameters(nullptr) {}
  ~OperationParameters() override;
  explicit constexpr OperationParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationParameters(const OperationParameters& from);
  OperationParameters(OperationParameters&& from) noexcept
    : OperationParameters() {
    *this = ::std::move(from);
  }

  inline OperationParameters& operator=(const OperationParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationParameters& operator=(OperationParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationParameters& default_instance() {
    return *internal_default_instance();
  }
  enum ParametersCase {
    kFa12Parameters = 1,
    kFa2Parameters = 2,
    PARAMETERS_NOT_SET = 0,
  };

  static inline const OperationParameters* internal_default_instance() {
    return reinterpret_cast<const OperationParameters*>(
               &_OperationParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OperationParameters& a, OperationParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OperationParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.OperationParameters";
  }
  protected:
  explicit OperationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFa12ParametersFieldNumber = 1,
    kFa2ParametersFieldNumber = 2,
  };
  // .TW.Tezos.Proto.FA12Parameters fa12_parameters = 1;
  bool has_fa12_parameters() const;
  private:
  bool _internal_has_fa12_parameters() const;
  public:
  void clear_fa12_parameters();
  const ::TW::Tezos::Proto::FA12Parameters& fa12_parameters() const;
  PROTOBUF_NODISCARD ::TW::Tezos::Proto::FA12Parameters* release_fa12_parameters();
  ::TW::Tezos::Proto::FA12Parameters* mutable_fa12_parameters();
  void set_allocated_fa12_parameters(::TW::Tezos::Proto::FA12Parameters* fa12_parameters);
  private:
  const ::TW::Tezos::Proto::FA12Parameters& _internal_fa12_parameters() const;
  ::TW::Tezos::Proto::FA12Parameters* _internal_mutable_fa12_parameters();
  public:
  void unsafe_arena_set_allocated_fa12_parameters(
      ::TW::Tezos::Proto::FA12Parameters* fa12_parameters);
  ::TW::Tezos::Proto::FA12Parameters* unsafe_arena_release_fa12_parameters();

  // .TW.Tezos.Proto.FA2Parameters fa2_parameters = 2;
  bool has_fa2_parameters() const;
  private:
  bool _internal_has_fa2_parameters() const;
  public:
  void clear_fa2_parameters();
  const ::TW::Tezos::Proto::FA2Parameters& fa2_parameters() const;
  PROTOBUF_NODISCARD ::TW::Tezos::Proto::FA2Parameters* release_fa2_parameters();
  ::TW::Tezos::Proto::FA2Parameters* mutable_fa2_parameters();
  void set_allocated_fa2_parameters(::TW::Tezos::Proto::FA2Parameters* fa2_parameters);
  private:
  const ::TW::Tezos::Proto::FA2Parameters& _internal_fa2_parameters() const;
  ::TW::Tezos::Proto::FA2Parameters* _internal_mutable_fa2_parameters();
  public:
  void unsafe_arena_set_allocated_fa2_parameters(
      ::TW::Tezos::Proto::FA2Parameters* fa2_parameters);
  ::TW::Tezos::Proto::FA2Parameters* unsafe_arena_release_fa2_parameters();

  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.OperationParameters)
 private:
  class _Internal;
  void set_has_fa12_parameters();
  void set_has_fa2_parameters();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ParametersUnion {
    constexpr ParametersUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Tezos::Proto::FA12Parameters* fa12_parameters_;
    ::TW::Tezos::Proto::FA2Parameters* fa2_parameters_;
  } parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class TransactionOperationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.TransactionOperationData) */ {
 public:
  inline TransactionOperationData() : TransactionOperationData(nullptr) {}
  ~TransactionOperationData() override;
  explicit constexpr TransactionOperationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOperationData(const TransactionOperationData& from);
  TransactionOperationData(TransactionOperationData&& from) noexcept
    : TransactionOperationData() {
    *this = ::std::move(from);
  }

  inline TransactionOperationData& operator=(const TransactionOperationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOperationData& operator=(TransactionOperationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOperationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOperationData* internal_default_instance() {
    return reinterpret_cast<const TransactionOperationData*>(
               &_TransactionOperationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransactionOperationData& a, TransactionOperationData& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOperationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOperationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOperationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOperationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOperationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionOperationData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOperationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.TransactionOperationData";
  }
  protected:
  explicit TransactionOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 1,
    kEncodedParameterFieldNumber = 3,
    kParametersFieldNumber = 4,
    kAmountFieldNumber = 2,
  };
  // string destination = 1;
  void clear_destination();
  const std::string& destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // bytes encoded_parameter = 3;
  void clear_encoded_parameter();
  const std::string& encoded_parameter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded_parameter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded_parameter();
  PROTOBUF_NODISCARD std::string* release_encoded_parameter();
  void set_allocated_encoded_parameter(std::string* encoded_parameter);
  private:
  const std::string& _internal_encoded_parameter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_parameter(const std::string& value);
  std::string* _internal_mutable_encoded_parameter();
  public:

  // .TW.Tezos.Proto.OperationParameters parameters = 4;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::TW::Tezos::Proto::OperationParameters& parameters() const;
  PROTOBUF_NODISCARD ::TW::Tezos::Proto::OperationParameters* release_parameters();
  ::TW::Tezos::Proto::OperationParameters* mutable_parameters();
  void set_allocated_parameters(::TW::Tezos::Proto::OperationParameters* parameters);
  private:
  const ::TW::Tezos::Proto::OperationParameters& _internal_parameters() const;
  ::TW::Tezos::Proto::OperationParameters* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::TW::Tezos::Proto::OperationParameters* parameters);
  ::TW::Tezos::Proto::OperationParameters* unsafe_arena_release_parameters();

  // int64 amount = 2;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.TransactionOperationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_parameter_;
  ::TW::Tezos::Proto::OperationParameters* parameters_;
  int64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class RevealOperationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.RevealOperationData) */ {
 public:
  inline RevealOperationData() : RevealOperationData(nullptr) {}
  ~RevealOperationData() override;
  explicit constexpr RevealOperationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevealOperationData(const RevealOperationData& from);
  RevealOperationData(RevealOperationData&& from) noexcept
    : RevealOperationData() {
    *this = ::std::move(from);
  }

  inline RevealOperationData& operator=(const RevealOperationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevealOperationData& operator=(RevealOperationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevealOperationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevealOperationData* internal_default_instance() {
    return reinterpret_cast<const RevealOperationData*>(
               &_RevealOperationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RevealOperationData& a, RevealOperationData& b) {
    a.Swap(&b);
  }
  inline void Swap(RevealOperationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevealOperationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevealOperationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevealOperationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RevealOperationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RevealOperationData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevealOperationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.RevealOperationData";
  }
  protected:
  explicit RevealOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.RevealOperationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// -------------------------------------------------------------------

class DelegationOperationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Tezos.Proto.DelegationOperationData) */ {
 public:
  inline DelegationOperationData() : DelegationOperationData(nullptr) {}
  ~DelegationOperationData() override;
  explicit constexpr DelegationOperationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelegationOperationData(const DelegationOperationData& from);
  DelegationOperationData(DelegationOperationData&& from) noexcept
    : DelegationOperationData() {
    *this = ::std::move(from);
  }

  inline DelegationOperationData& operator=(const DelegationOperationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegationOperationData& operator=(DelegationOperationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelegationOperationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelegationOperationData* internal_default_instance() {
    return reinterpret_cast<const DelegationOperationData*>(
               &_DelegationOperationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DelegationOperationData& a, DelegationOperationData& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegationOperationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegationOperationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelegationOperationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelegationOperationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelegationOperationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelegationOperationData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegationOperationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Tezos.Proto.DelegationOperationData";
  }
  protected:
  explicit DelegationOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegateFieldNumber = 1,
  };
  // string delegate = 1;
  void clear_delegate();
  const std::string& delegate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegate();
  PROTOBUF_NODISCARD std::string* release_delegate();
  void set_allocated_delegate(std::string* delegate);
  private:
  const std::string& _internal_delegate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate(const std::string& value);
  std::string* _internal_mutable_delegate();
  public:

  // @@protoc_insertion_point(class_scope:TW.Tezos.Proto.DelegationOperationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tezos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SigningInput

// .TW.Tezos.Proto.OperationList operation_list = 1;
inline bool SigningInput::_internal_has_operation_list() const {
  return this != internal_default_instance() && operation_list_ != nullptr;
}
inline bool SigningInput::has_operation_list() const {
  return _internal_has_operation_list();
}
inline void SigningInput::clear_operation_list() {
  if (GetArenaForAllocation() == nullptr && operation_list_ != nullptr) {
    delete operation_list_;
  }
  operation_list_ = nullptr;
}
inline const ::TW::Tezos::Proto::OperationList& SigningInput::_internal_operation_list() const {
  const ::TW::Tezos::Proto::OperationList* p = operation_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Tezos::Proto::OperationList&>(
      ::TW::Tezos::Proto::_OperationList_default_instance_);
}
inline const ::TW::Tezos::Proto::OperationList& SigningInput::operation_list() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.SigningInput.operation_list)
  return _internal_operation_list();
}
inline void SigningInput::unsafe_arena_set_allocated_operation_list(
    ::TW::Tezos::Proto::OperationList* operation_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_list_);
  }
  operation_list_ = operation_list;
  if (operation_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Tezos.Proto.SigningInput.operation_list)
}
inline ::TW::Tezos::Proto::OperationList* SigningInput::release_operation_list() {
  
  ::TW::Tezos::Proto::OperationList* temp = operation_list_;
  operation_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Tezos::Proto::OperationList* SigningInput::unsafe_arena_release_operation_list() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.SigningInput.operation_list)
  
  ::TW::Tezos::Proto::OperationList* temp = operation_list_;
  operation_list_ = nullptr;
  return temp;
}
inline ::TW::Tezos::Proto::OperationList* SigningInput::_internal_mutable_operation_list() {
  
  if (operation_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Tezos::Proto::OperationList>(GetArenaForAllocation());
    operation_list_ = p;
  }
  return operation_list_;
}
inline ::TW::Tezos::Proto::OperationList* SigningInput::mutable_operation_list() {
  ::TW::Tezos::Proto::OperationList* _msg = _internal_mutable_operation_list();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.SigningInput.operation_list)
  return _msg;
}
inline void SigningInput::set_allocated_operation_list(::TW::Tezos::Proto::OperationList* operation_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete operation_list_;
  }
  if (operation_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Tezos::Proto::OperationList>::GetOwningArena(operation_list);
    if (message_arena != submessage_arena) {
      operation_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation_list, submessage_arena);
    }
    
  } else {
    
  }
  operation_list_ = operation_list;
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.SigningInput.operation_list)
}

// bytes encoded_operations = 2;
inline void SigningInput::clear_encoded_operations() {
  encoded_operations_.ClearToEmpty();
}
inline const std::string& SigningInput::encoded_operations() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.SigningInput.encoded_operations)
  return _internal_encoded_operations();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_encoded_operations(ArgT0&& arg0, ArgT... args) {
 
 encoded_operations_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.SigningInput.encoded_operations)
}
inline std::string* SigningInput::mutable_encoded_operations() {
  std::string* _s = _internal_mutable_encoded_operations();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.SigningInput.encoded_operations)
  return _s;
}
inline const std::string& SigningInput::_internal_encoded_operations() const {
  return encoded_operations_.Get();
}
inline void SigningInput::_internal_set_encoded_operations(const std::string& value) {
  
  encoded_operations_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_encoded_operations() {
  
  return encoded_operations_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_encoded_operations() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.SigningInput.encoded_operations)
  return encoded_operations_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_encoded_operations(std::string* encoded_operations) {
  if (encoded_operations != nullptr) {
    
  } else {
    
  }
  encoded_operations_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded_operations,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_operations_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_operations_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.SigningInput.encoded_operations)
}

// bytes private_key = 3;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.SigningInput.private_key)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.SigningOutput.error)
}

// string error_message = 3;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.SigningOutput.error_message)
}

// -------------------------------------------------------------------

// OperationList

// string branch = 1;
inline void OperationList::clear_branch() {
  branch_.ClearToEmpty();
}
inline const std::string& OperationList::branch() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.OperationList.branch)
  return _internal_branch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationList::set_branch(ArgT0&& arg0, ArgT... args) {
 
 branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.OperationList.branch)
}
inline std::string* OperationList::mutable_branch() {
  std::string* _s = _internal_mutable_branch();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.OperationList.branch)
  return _s;
}
inline const std::string& OperationList::_internal_branch() const {
  return branch_.Get();
}
inline void OperationList::_internal_set_branch(const std::string& value) {
  
  branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OperationList::_internal_mutable_branch() {
  
  return branch_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OperationList::release_branch() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.OperationList.branch)
  return branch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OperationList::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (branch_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.OperationList.branch)
}

// repeated .TW.Tezos.Proto.Operation operations = 2;
inline int OperationList::_internal_operations_size() const {
  return operations_.size();
}
inline int OperationList::operations_size() const {
  return _internal_operations_size();
}
inline void OperationList::clear_operations() {
  operations_.Clear();
}
inline ::TW::Tezos::Proto::Operation* OperationList::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.OperationList.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Operation >*
OperationList::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:TW.Tezos.Proto.OperationList.operations)
  return &operations_;
}
inline const ::TW::Tezos::Proto::Operation& OperationList::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::TW::Tezos::Proto::Operation& OperationList::operations(int index) const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.OperationList.operations)
  return _internal_operations(index);
}
inline ::TW::Tezos::Proto::Operation* OperationList::_internal_add_operations() {
  return operations_.Add();
}
inline ::TW::Tezos::Proto::Operation* OperationList::add_operations() {
  ::TW::Tezos::Proto::Operation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:TW.Tezos.Proto.OperationList.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Operation >&
OperationList::operations() const {
  // @@protoc_insertion_point(field_list:TW.Tezos.Proto.OperationList.operations)
  return operations_;
}

// -------------------------------------------------------------------

// Operation

// int64 counter = 1;
inline void Operation::clear_counter() {
  counter_ = int64_t{0};
}
inline int64_t Operation::_internal_counter() const {
  return counter_;
}
inline int64_t Operation::counter() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.counter)
  return _internal_counter();
}
inline void Operation::_internal_set_counter(int64_t value) {
  
  counter_ = value;
}
inline void Operation::set_counter(int64_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Operation.counter)
}

// string source = 2;
inline void Operation::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& Operation::source() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_source(ArgT0&& arg0, ArgT... args) {
 
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Operation.source)
}
inline std::string* Operation::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.Operation.source)
  return _s;
}
inline const std::string& Operation::_internal_source() const {
  return source_.Get();
}
inline void Operation::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_source() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.Operation.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Operation.source)
}

// int64 fee = 3;
inline void Operation::clear_fee() {
  fee_ = int64_t{0};
}
inline int64_t Operation::_internal_fee() const {
  return fee_;
}
inline int64_t Operation::fee() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.fee)
  return _internal_fee();
}
inline void Operation::_internal_set_fee(int64_t value) {
  
  fee_ = value;
}
inline void Operation::set_fee(int64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Operation.fee)
}

// int64 gas_limit = 4;
inline void Operation::clear_gas_limit() {
  gas_limit_ = int64_t{0};
}
inline int64_t Operation::_internal_gas_limit() const {
  return gas_limit_;
}
inline int64_t Operation::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.gas_limit)
  return _internal_gas_limit();
}
inline void Operation::_internal_set_gas_limit(int64_t value) {
  
  gas_limit_ = value;
}
inline void Operation::set_gas_limit(int64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Operation.gas_limit)
}

// int64 storage_limit = 5;
inline void Operation::clear_storage_limit() {
  storage_limit_ = int64_t{0};
}
inline int64_t Operation::_internal_storage_limit() const {
  return storage_limit_;
}
inline int64_t Operation::storage_limit() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.storage_limit)
  return _internal_storage_limit();
}
inline void Operation::_internal_set_storage_limit(int64_t value) {
  
  storage_limit_ = value;
}
inline void Operation::set_storage_limit(int64_t value) {
  _internal_set_storage_limit(value);
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Operation.storage_limit)
}

// .TW.Tezos.Proto.Operation.OperationKind kind = 7;
inline void Operation::clear_kind() {
  kind_ = 0;
}
inline ::TW::Tezos::Proto::Operation_OperationKind Operation::_internal_kind() const {
  return static_cast< ::TW::Tezos::Proto::Operation_OperationKind >(kind_);
}
inline ::TW::Tezos::Proto::Operation_OperationKind Operation::kind() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.kind)
  return _internal_kind();
}
inline void Operation::_internal_set_kind(::TW::Tezos::Proto::Operation_OperationKind value) {
  
  kind_ = value;
}
inline void Operation::set_kind(::TW::Tezos::Proto::Operation_OperationKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Operation.kind)
}

// .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
inline bool Operation::_internal_has_reveal_operation_data() const {
  return operation_data_case() == kRevealOperationData;
}
inline bool Operation::has_reveal_operation_data() const {
  return _internal_has_reveal_operation_data();
}
inline void Operation::set_has_reveal_operation_data() {
  _oneof_case_[0] = kRevealOperationData;
}
inline void Operation::clear_reveal_operation_data() {
  if (_internal_has_reveal_operation_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_data_.reveal_operation_data_;
    }
    clear_has_operation_data();
  }
}
inline ::TW::Tezos::Proto::RevealOperationData* Operation::release_reveal_operation_data() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.Operation.reveal_operation_data)
  if (_internal_has_reveal_operation_data()) {
    clear_has_operation_data();
      ::TW::Tezos::Proto::RevealOperationData* temp = operation_data_.reveal_operation_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_data_.reveal_operation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Tezos::Proto::RevealOperationData& Operation::_internal_reveal_operation_data() const {
  return _internal_has_reveal_operation_data()
      ? *operation_data_.reveal_operation_data_
      : reinterpret_cast< ::TW::Tezos::Proto::RevealOperationData&>(::TW::Tezos::Proto::_RevealOperationData_default_instance_);
}
inline const ::TW::Tezos::Proto::RevealOperationData& Operation::reveal_operation_data() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.reveal_operation_data)
  return _internal_reveal_operation_data();
}
inline ::TW::Tezos::Proto::RevealOperationData* Operation::unsafe_arena_release_reveal_operation_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Tezos.Proto.Operation.reveal_operation_data)
  if (_internal_has_reveal_operation_data()) {
    clear_has_operation_data();
    ::TW::Tezos::Proto::RevealOperationData* temp = operation_data_.reveal_operation_data_;
    operation_data_.reveal_operation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_reveal_operation_data(::TW::Tezos::Proto::RevealOperationData* reveal_operation_data) {
  clear_operation_data();
  if (reveal_operation_data) {
    set_has_reveal_operation_data();
    operation_data_.reveal_operation_data_ = reveal_operation_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Tezos.Proto.Operation.reveal_operation_data)
}
inline ::TW::Tezos::Proto::RevealOperationData* Operation::_internal_mutable_reveal_operation_data() {
  if (!_internal_has_reveal_operation_data()) {
    clear_operation_data();
    set_has_reveal_operation_data();
    operation_data_.reveal_operation_data_ = CreateMaybeMessage< ::TW::Tezos::Proto::RevealOperationData >(GetArenaForAllocation());
  }
  return operation_data_.reveal_operation_data_;
}
inline ::TW::Tezos::Proto::RevealOperationData* Operation::mutable_reveal_operation_data() {
  ::TW::Tezos::Proto::RevealOperationData* _msg = _internal_mutable_reveal_operation_data();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.Operation.reveal_operation_data)
  return _msg;
}

// .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
inline bool Operation::_internal_has_transaction_operation_data() const {
  return operation_data_case() == kTransactionOperationData;
}
inline bool Operation::has_transaction_operation_data() const {
  return _internal_has_transaction_operation_data();
}
inline void Operation::set_has_transaction_operation_data() {
  _oneof_case_[0] = kTransactionOperationData;
}
inline void Operation::clear_transaction_operation_data() {
  if (_internal_has_transaction_operation_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_data_.transaction_operation_data_;
    }
    clear_has_operation_data();
  }
}
inline ::TW::Tezos::Proto::TransactionOperationData* Operation::release_transaction_operation_data() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.Operation.transaction_operation_data)
  if (_internal_has_transaction_operation_data()) {
    clear_has_operation_data();
      ::TW::Tezos::Proto::TransactionOperationData* temp = operation_data_.transaction_operation_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_data_.transaction_operation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Tezos::Proto::TransactionOperationData& Operation::_internal_transaction_operation_data() const {
  return _internal_has_transaction_operation_data()
      ? *operation_data_.transaction_operation_data_
      : reinterpret_cast< ::TW::Tezos::Proto::TransactionOperationData&>(::TW::Tezos::Proto::_TransactionOperationData_default_instance_);
}
inline const ::TW::Tezos::Proto::TransactionOperationData& Operation::transaction_operation_data() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.transaction_operation_data)
  return _internal_transaction_operation_data();
}
inline ::TW::Tezos::Proto::TransactionOperationData* Operation::unsafe_arena_release_transaction_operation_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Tezos.Proto.Operation.transaction_operation_data)
  if (_internal_has_transaction_operation_data()) {
    clear_has_operation_data();
    ::TW::Tezos::Proto::TransactionOperationData* temp = operation_data_.transaction_operation_data_;
    operation_data_.transaction_operation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_transaction_operation_data(::TW::Tezos::Proto::TransactionOperationData* transaction_operation_data) {
  clear_operation_data();
  if (transaction_operation_data) {
    set_has_transaction_operation_data();
    operation_data_.transaction_operation_data_ = transaction_operation_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Tezos.Proto.Operation.transaction_operation_data)
}
inline ::TW::Tezos::Proto::TransactionOperationData* Operation::_internal_mutable_transaction_operation_data() {
  if (!_internal_has_transaction_operation_data()) {
    clear_operation_data();
    set_has_transaction_operation_data();
    operation_data_.transaction_operation_data_ = CreateMaybeMessage< ::TW::Tezos::Proto::TransactionOperationData >(GetArenaForAllocation());
  }
  return operation_data_.transaction_operation_data_;
}
inline ::TW::Tezos::Proto::TransactionOperationData* Operation::mutable_transaction_operation_data() {
  ::TW::Tezos::Proto::TransactionOperationData* _msg = _internal_mutable_transaction_operation_data();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.Operation.transaction_operation_data)
  return _msg;
}

// .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
inline bool Operation::_internal_has_delegation_operation_data() const {
  return operation_data_case() == kDelegationOperationData;
}
inline bool Operation::has_delegation_operation_data() const {
  return _internal_has_delegation_operation_data();
}
inline void Operation::set_has_delegation_operation_data() {
  _oneof_case_[0] = kDelegationOperationData;
}
inline void Operation::clear_delegation_operation_data() {
  if (_internal_has_delegation_operation_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_data_.delegation_operation_data_;
    }
    clear_has_operation_data();
  }
}
inline ::TW::Tezos::Proto::DelegationOperationData* Operation::release_delegation_operation_data() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.Operation.delegation_operation_data)
  if (_internal_has_delegation_operation_data()) {
    clear_has_operation_data();
      ::TW::Tezos::Proto::DelegationOperationData* temp = operation_data_.delegation_operation_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_data_.delegation_operation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Tezos::Proto::DelegationOperationData& Operation::_internal_delegation_operation_data() const {
  return _internal_has_delegation_operation_data()
      ? *operation_data_.delegation_operation_data_
      : reinterpret_cast< ::TW::Tezos::Proto::DelegationOperationData&>(::TW::Tezos::Proto::_DelegationOperationData_default_instance_);
}
inline const ::TW::Tezos::Proto::DelegationOperationData& Operation::delegation_operation_data() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Operation.delegation_operation_data)
  return _internal_delegation_operation_data();
}
inline ::TW::Tezos::Proto::DelegationOperationData* Operation::unsafe_arena_release_delegation_operation_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Tezos.Proto.Operation.delegation_operation_data)
  if (_internal_has_delegation_operation_data()) {
    clear_has_operation_data();
    ::TW::Tezos::Proto::DelegationOperationData* temp = operation_data_.delegation_operation_data_;
    operation_data_.delegation_operation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_delegation_operation_data(::TW::Tezos::Proto::DelegationOperationData* delegation_operation_data) {
  clear_operation_data();
  if (delegation_operation_data) {
    set_has_delegation_operation_data();
    operation_data_.delegation_operation_data_ = delegation_operation_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Tezos.Proto.Operation.delegation_operation_data)
}
inline ::TW::Tezos::Proto::DelegationOperationData* Operation::_internal_mutable_delegation_operation_data() {
  if (!_internal_has_delegation_operation_data()) {
    clear_operation_data();
    set_has_delegation_operation_data();
    operation_data_.delegation_operation_data_ = CreateMaybeMessage< ::TW::Tezos::Proto::DelegationOperationData >(GetArenaForAllocation());
  }
  return operation_data_.delegation_operation_data_;
}
inline ::TW::Tezos::Proto::DelegationOperationData* Operation::mutable_delegation_operation_data() {
  ::TW::Tezos::Proto::DelegationOperationData* _msg = _internal_mutable_delegation_operation_data();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.Operation.delegation_operation_data)
  return _msg;
}

inline bool Operation::has_operation_data() const {
  return operation_data_case() != OPERATION_DATA_NOT_SET;
}
inline void Operation::clear_has_operation_data() {
  _oneof_case_[0] = OPERATION_DATA_NOT_SET;
}
inline Operation::OperationDataCase Operation::operation_data_case() const {
  return Operation::OperationDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FA12Parameters

// string entrypoint = 1;
inline void FA12Parameters::clear_entrypoint() {
  entrypoint_.ClearToEmpty();
}
inline const std::string& FA12Parameters::entrypoint() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.FA12Parameters.entrypoint)
  return _internal_entrypoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FA12Parameters::set_entrypoint(ArgT0&& arg0, ArgT... args) {
 
 entrypoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.FA12Parameters.entrypoint)
}
inline std::string* FA12Parameters::mutable_entrypoint() {
  std::string* _s = _internal_mutable_entrypoint();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.FA12Parameters.entrypoint)
  return _s;
}
inline const std::string& FA12Parameters::_internal_entrypoint() const {
  return entrypoint_.Get();
}
inline void FA12Parameters::_internal_set_entrypoint(const std::string& value) {
  
  entrypoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FA12Parameters::_internal_mutable_entrypoint() {
  
  return entrypoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FA12Parameters::release_entrypoint() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.FA12Parameters.entrypoint)
  return entrypoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FA12Parameters::set_allocated_entrypoint(std::string* entrypoint) {
  if (entrypoint != nullptr) {
    
  } else {
    
  }
  entrypoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entrypoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entrypoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    entrypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.FA12Parameters.entrypoint)
}

// string from = 2;
inline void FA12Parameters::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& FA12Parameters::from() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.FA12Parameters.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FA12Parameters::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.FA12Parameters.from)
}
inline std::string* FA12Parameters::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.FA12Parameters.from)
  return _s;
}
inline const std::string& FA12Parameters::_internal_from() const {
  return from_.Get();
}
inline void FA12Parameters::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FA12Parameters::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FA12Parameters::release_from() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.FA12Parameters.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FA12Parameters::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.FA12Parameters.from)
}

// string to = 3;
inline void FA12Parameters::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& FA12Parameters::to() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.FA12Parameters.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FA12Parameters::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.FA12Parameters.to)
}
inline std::string* FA12Parameters::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.FA12Parameters.to)
  return _s;
}
inline const std::string& FA12Parameters::_internal_to() const {
  return to_.Get();
}
inline void FA12Parameters::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FA12Parameters::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FA12Parameters::release_to() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.FA12Parameters.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FA12Parameters::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.FA12Parameters.to)
}

// string value = 4;
inline void FA12Parameters::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& FA12Parameters::value() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.FA12Parameters.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FA12Parameters::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.FA12Parameters.value)
}
inline std::string* FA12Parameters::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.FA12Parameters.value)
  return _s;
}
inline const std::string& FA12Parameters::_internal_value() const {
  return value_.Get();
}
inline void FA12Parameters::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FA12Parameters::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FA12Parameters::release_value() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.FA12Parameters.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FA12Parameters::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.FA12Parameters.value)
}

// -------------------------------------------------------------------

// Txs

// string to = 1;
inline void Txs::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Txs::to() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Txs.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Txs::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Txs.to)
}
inline std::string* Txs::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.Txs.to)
  return _s;
}
inline const std::string& Txs::_internal_to() const {
  return to_.Get();
}
inline void Txs::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Txs::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Txs::release_to() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.Txs.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Txs::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Txs.to)
}

// string token_id = 2;
inline void Txs::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& Txs::token_id() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Txs.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Txs::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Txs.token_id)
}
inline std::string* Txs::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.Txs.token_id)
  return _s;
}
inline const std::string& Txs::_internal_token_id() const {
  return token_id_.Get();
}
inline void Txs::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Txs::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Txs::release_token_id() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.Txs.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Txs::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Txs.token_id)
}

// string amount = 3;
inline void Txs::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Txs::amount() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.Txs.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Txs::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.Txs.amount)
}
inline std::string* Txs::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.Txs.amount)
  return _s;
}
inline const std::string& Txs::_internal_amount() const {
  return amount_.Get();
}
inline void Txs::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Txs::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Txs::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.Txs.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Txs::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Txs.amount)
}

// -------------------------------------------------------------------

// TxObject

// string from = 1;
inline void TxObject::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TxObject::from() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.TxObject.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxObject::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.TxObject.from)
}
inline std::string* TxObject::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.TxObject.from)
  return _s;
}
inline const std::string& TxObject::_internal_from() const {
  return from_.Get();
}
inline void TxObject::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TxObject::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TxObject::release_from() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.TxObject.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TxObject::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.TxObject.from)
}

// repeated .TW.Tezos.Proto.Txs txs = 2;
inline int TxObject::_internal_txs_size() const {
  return txs_.size();
}
inline int TxObject::txs_size() const {
  return _internal_txs_size();
}
inline void TxObject::clear_txs() {
  txs_.Clear();
}
inline ::TW::Tezos::Proto::Txs* TxObject::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.TxObject.txs)
  return txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Txs >*
TxObject::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Tezos.Proto.TxObject.txs)
  return &txs_;
}
inline const ::TW::Tezos::Proto::Txs& TxObject::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const ::TW::Tezos::Proto::Txs& TxObject::txs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.TxObject.txs)
  return _internal_txs(index);
}
inline ::TW::Tezos::Proto::Txs* TxObject::_internal_add_txs() {
  return txs_.Add();
}
inline ::TW::Tezos::Proto::Txs* TxObject::add_txs() {
  ::TW::Tezos::Proto::Txs* _add = _internal_add_txs();
  // @@protoc_insertion_point(field_add:TW.Tezos.Proto.TxObject.txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::Txs >&
TxObject::txs() const {
  // @@protoc_insertion_point(field_list:TW.Tezos.Proto.TxObject.txs)
  return txs_;
}

// -------------------------------------------------------------------

// FA2Parameters

// string entrypoint = 1;
inline void FA2Parameters::clear_entrypoint() {
  entrypoint_.ClearToEmpty();
}
inline const std::string& FA2Parameters::entrypoint() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.FA2Parameters.entrypoint)
  return _internal_entrypoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FA2Parameters::set_entrypoint(ArgT0&& arg0, ArgT... args) {
 
 entrypoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.FA2Parameters.entrypoint)
}
inline std::string* FA2Parameters::mutable_entrypoint() {
  std::string* _s = _internal_mutable_entrypoint();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.FA2Parameters.entrypoint)
  return _s;
}
inline const std::string& FA2Parameters::_internal_entrypoint() const {
  return entrypoint_.Get();
}
inline void FA2Parameters::_internal_set_entrypoint(const std::string& value) {
  
  entrypoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FA2Parameters::_internal_mutable_entrypoint() {
  
  return entrypoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FA2Parameters::release_entrypoint() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.FA2Parameters.entrypoint)
  return entrypoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FA2Parameters::set_allocated_entrypoint(std::string* entrypoint) {
  if (entrypoint != nullptr) {
    
  } else {
    
  }
  entrypoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entrypoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entrypoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    entrypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.FA2Parameters.entrypoint)
}

// repeated .TW.Tezos.Proto.TxObject txs_object = 2;
inline int FA2Parameters::_internal_txs_object_size() const {
  return txs_object_.size();
}
inline int FA2Parameters::txs_object_size() const {
  return _internal_txs_object_size();
}
inline void FA2Parameters::clear_txs_object() {
  txs_object_.Clear();
}
inline ::TW::Tezos::Proto::TxObject* FA2Parameters::mutable_txs_object(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.FA2Parameters.txs_object)
  return txs_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::TxObject >*
FA2Parameters::mutable_txs_object() {
  // @@protoc_insertion_point(field_mutable_list:TW.Tezos.Proto.FA2Parameters.txs_object)
  return &txs_object_;
}
inline const ::TW::Tezos::Proto::TxObject& FA2Parameters::_internal_txs_object(int index) const {
  return txs_object_.Get(index);
}
inline const ::TW::Tezos::Proto::TxObject& FA2Parameters::txs_object(int index) const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.FA2Parameters.txs_object)
  return _internal_txs_object(index);
}
inline ::TW::Tezos::Proto::TxObject* FA2Parameters::_internal_add_txs_object() {
  return txs_object_.Add();
}
inline ::TW::Tezos::Proto::TxObject* FA2Parameters::add_txs_object() {
  ::TW::Tezos::Proto::TxObject* _add = _internal_add_txs_object();
  // @@protoc_insertion_point(field_add:TW.Tezos.Proto.FA2Parameters.txs_object)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Tezos::Proto::TxObject >&
FA2Parameters::txs_object() const {
  // @@protoc_insertion_point(field_list:TW.Tezos.Proto.FA2Parameters.txs_object)
  return txs_object_;
}

// -------------------------------------------------------------------

// OperationParameters

// .TW.Tezos.Proto.FA12Parameters fa12_parameters = 1;
inline bool OperationParameters::_internal_has_fa12_parameters() const {
  return parameters_case() == kFa12Parameters;
}
inline bool OperationParameters::has_fa12_parameters() const {
  return _internal_has_fa12_parameters();
}
inline void OperationParameters::set_has_fa12_parameters() {
  _oneof_case_[0] = kFa12Parameters;
}
inline void OperationParameters::clear_fa12_parameters() {
  if (_internal_has_fa12_parameters()) {
    if (GetArenaForAllocation() == nullptr) {
      delete parameters_.fa12_parameters_;
    }
    clear_has_parameters();
  }
}
inline ::TW::Tezos::Proto::FA12Parameters* OperationParameters::release_fa12_parameters() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.OperationParameters.fa12_parameters)
  if (_internal_has_fa12_parameters()) {
    clear_has_parameters();
      ::TW::Tezos::Proto::FA12Parameters* temp = parameters_.fa12_parameters_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    parameters_.fa12_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Tezos::Proto::FA12Parameters& OperationParameters::_internal_fa12_parameters() const {
  return _internal_has_fa12_parameters()
      ? *parameters_.fa12_parameters_
      : reinterpret_cast< ::TW::Tezos::Proto::FA12Parameters&>(::TW::Tezos::Proto::_FA12Parameters_default_instance_);
}
inline const ::TW::Tezos::Proto::FA12Parameters& OperationParameters::fa12_parameters() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.OperationParameters.fa12_parameters)
  return _internal_fa12_parameters();
}
inline ::TW::Tezos::Proto::FA12Parameters* OperationParameters::unsafe_arena_release_fa12_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Tezos.Proto.OperationParameters.fa12_parameters)
  if (_internal_has_fa12_parameters()) {
    clear_has_parameters();
    ::TW::Tezos::Proto::FA12Parameters* temp = parameters_.fa12_parameters_;
    parameters_.fa12_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationParameters::unsafe_arena_set_allocated_fa12_parameters(::TW::Tezos::Proto::FA12Parameters* fa12_parameters) {
  clear_parameters();
  if (fa12_parameters) {
    set_has_fa12_parameters();
    parameters_.fa12_parameters_ = fa12_parameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Tezos.Proto.OperationParameters.fa12_parameters)
}
inline ::TW::Tezos::Proto::FA12Parameters* OperationParameters::_internal_mutable_fa12_parameters() {
  if (!_internal_has_fa12_parameters()) {
    clear_parameters();
    set_has_fa12_parameters();
    parameters_.fa12_parameters_ = CreateMaybeMessage< ::TW::Tezos::Proto::FA12Parameters >(GetArenaForAllocation());
  }
  return parameters_.fa12_parameters_;
}
inline ::TW::Tezos::Proto::FA12Parameters* OperationParameters::mutable_fa12_parameters() {
  ::TW::Tezos::Proto::FA12Parameters* _msg = _internal_mutable_fa12_parameters();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.OperationParameters.fa12_parameters)
  return _msg;
}

// .TW.Tezos.Proto.FA2Parameters fa2_parameters = 2;
inline bool OperationParameters::_internal_has_fa2_parameters() const {
  return parameters_case() == kFa2Parameters;
}
inline bool OperationParameters::has_fa2_parameters() const {
  return _internal_has_fa2_parameters();
}
inline void OperationParameters::set_has_fa2_parameters() {
  _oneof_case_[0] = kFa2Parameters;
}
inline void OperationParameters::clear_fa2_parameters() {
  if (_internal_has_fa2_parameters()) {
    if (GetArenaForAllocation() == nullptr) {
      delete parameters_.fa2_parameters_;
    }
    clear_has_parameters();
  }
}
inline ::TW::Tezos::Proto::FA2Parameters* OperationParameters::release_fa2_parameters() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.OperationParameters.fa2_parameters)
  if (_internal_has_fa2_parameters()) {
    clear_has_parameters();
      ::TW::Tezos::Proto::FA2Parameters* temp = parameters_.fa2_parameters_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    parameters_.fa2_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Tezos::Proto::FA2Parameters& OperationParameters::_internal_fa2_parameters() const {
  return _internal_has_fa2_parameters()
      ? *parameters_.fa2_parameters_
      : reinterpret_cast< ::TW::Tezos::Proto::FA2Parameters&>(::TW::Tezos::Proto::_FA2Parameters_default_instance_);
}
inline const ::TW::Tezos::Proto::FA2Parameters& OperationParameters::fa2_parameters() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.OperationParameters.fa2_parameters)
  return _internal_fa2_parameters();
}
inline ::TW::Tezos::Proto::FA2Parameters* OperationParameters::unsafe_arena_release_fa2_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Tezos.Proto.OperationParameters.fa2_parameters)
  if (_internal_has_fa2_parameters()) {
    clear_has_parameters();
    ::TW::Tezos::Proto::FA2Parameters* temp = parameters_.fa2_parameters_;
    parameters_.fa2_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationParameters::unsafe_arena_set_allocated_fa2_parameters(::TW::Tezos::Proto::FA2Parameters* fa2_parameters) {
  clear_parameters();
  if (fa2_parameters) {
    set_has_fa2_parameters();
    parameters_.fa2_parameters_ = fa2_parameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Tezos.Proto.OperationParameters.fa2_parameters)
}
inline ::TW::Tezos::Proto::FA2Parameters* OperationParameters::_internal_mutable_fa2_parameters() {
  if (!_internal_has_fa2_parameters()) {
    clear_parameters();
    set_has_fa2_parameters();
    parameters_.fa2_parameters_ = CreateMaybeMessage< ::TW::Tezos::Proto::FA2Parameters >(GetArenaForAllocation());
  }
  return parameters_.fa2_parameters_;
}
inline ::TW::Tezos::Proto::FA2Parameters* OperationParameters::mutable_fa2_parameters() {
  ::TW::Tezos::Proto::FA2Parameters* _msg = _internal_mutable_fa2_parameters();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.OperationParameters.fa2_parameters)
  return _msg;
}

inline bool OperationParameters::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void OperationParameters::clear_has_parameters() {
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline OperationParameters::ParametersCase OperationParameters::parameters_case() const {
  return OperationParameters::ParametersCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOperationData

// string destination = 1;
inline void TransactionOperationData::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& TransactionOperationData::destination() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.TransactionOperationData.destination)
  return _internal_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOperationData::set_destination(ArgT0&& arg0, ArgT... args) {
 
 destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.TransactionOperationData.destination)
}
inline std::string* TransactionOperationData::mutable_destination() {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.TransactionOperationData.destination)
  return _s;
}
inline const std::string& TransactionOperationData::_internal_destination() const {
  return destination_.Get();
}
inline void TransactionOperationData::_internal_set_destination(const std::string& value) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOperationData::_internal_mutable_destination() {
  
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOperationData::release_destination() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.TransactionOperationData.destination)
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOperationData::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.TransactionOperationData.destination)
}

// int64 amount = 2;
inline void TransactionOperationData::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t TransactionOperationData::_internal_amount() const {
  return amount_;
}
inline int64_t TransactionOperationData::amount() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.TransactionOperationData.amount)
  return _internal_amount();
}
inline void TransactionOperationData::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void TransactionOperationData::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.TransactionOperationData.amount)
}

// bytes encoded_parameter = 3;
inline void TransactionOperationData::clear_encoded_parameter() {
  encoded_parameter_.ClearToEmpty();
}
inline const std::string& TransactionOperationData::encoded_parameter() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.TransactionOperationData.encoded_parameter)
  return _internal_encoded_parameter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOperationData::set_encoded_parameter(ArgT0&& arg0, ArgT... args) {
 
 encoded_parameter_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.TransactionOperationData.encoded_parameter)
}
inline std::string* TransactionOperationData::mutable_encoded_parameter() {
  std::string* _s = _internal_mutable_encoded_parameter();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.TransactionOperationData.encoded_parameter)
  return _s;
}
inline const std::string& TransactionOperationData::_internal_encoded_parameter() const {
  return encoded_parameter_.Get();
}
inline void TransactionOperationData::_internal_set_encoded_parameter(const std::string& value) {
  
  encoded_parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOperationData::_internal_mutable_encoded_parameter() {
  
  return encoded_parameter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOperationData::release_encoded_parameter() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.TransactionOperationData.encoded_parameter)
  return encoded_parameter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOperationData::set_allocated_encoded_parameter(std::string* encoded_parameter) {
  if (encoded_parameter != nullptr) {
    
  } else {
    
  }
  encoded_parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded_parameter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_parameter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.TransactionOperationData.encoded_parameter)
}

// .TW.Tezos.Proto.OperationParameters parameters = 4;
inline bool TransactionOperationData::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool TransactionOperationData::has_parameters() const {
  return _internal_has_parameters();
}
inline void TransactionOperationData::clear_parameters() {
  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
inline const ::TW::Tezos::Proto::OperationParameters& TransactionOperationData::_internal_parameters() const {
  const ::TW::Tezos::Proto::OperationParameters* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Tezos::Proto::OperationParameters&>(
      ::TW::Tezos::Proto::_OperationParameters_default_instance_);
}
inline const ::TW::Tezos::Proto::OperationParameters& TransactionOperationData::parameters() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.TransactionOperationData.parameters)
  return _internal_parameters();
}
inline void TransactionOperationData::unsafe_arena_set_allocated_parameters(
    ::TW::Tezos::Proto::OperationParameters* parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Tezos.Proto.TransactionOperationData.parameters)
}
inline ::TW::Tezos::Proto::OperationParameters* TransactionOperationData::release_parameters() {
  
  ::TW::Tezos::Proto::OperationParameters* temp = parameters_;
  parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Tezos::Proto::OperationParameters* TransactionOperationData::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.TransactionOperationData.parameters)
  
  ::TW::Tezos::Proto::OperationParameters* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::TW::Tezos::Proto::OperationParameters* TransactionOperationData::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Tezos::Proto::OperationParameters>(GetArenaForAllocation());
    parameters_ = p;
  }
  return parameters_;
}
inline ::TW::Tezos::Proto::OperationParameters* TransactionOperationData::mutable_parameters() {
  ::TW::Tezos::Proto::OperationParameters* _msg = _internal_mutable_parameters();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.TransactionOperationData.parameters)
  return _msg;
}
inline void TransactionOperationData::set_allocated_parameters(::TW::Tezos::Proto::OperationParameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Tezos::Proto::OperationParameters>::GetOwningArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.TransactionOperationData.parameters)
}

// -------------------------------------------------------------------

// RevealOperationData

// bytes public_key = 1;
inline void RevealOperationData::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& RevealOperationData::public_key() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.RevealOperationData.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RevealOperationData::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.RevealOperationData.public_key)
}
inline std::string* RevealOperationData::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.RevealOperationData.public_key)
  return _s;
}
inline const std::string& RevealOperationData::_internal_public_key() const {
  return public_key_.Get();
}
inline void RevealOperationData::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RevealOperationData::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RevealOperationData::release_public_key() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.RevealOperationData.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RevealOperationData::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.RevealOperationData.public_key)
}

// -------------------------------------------------------------------

// DelegationOperationData

// string delegate = 1;
inline void DelegationOperationData::clear_delegate() {
  delegate_.ClearToEmpty();
}
inline const std::string& DelegationOperationData::delegate() const {
  // @@protoc_insertion_point(field_get:TW.Tezos.Proto.DelegationOperationData.delegate)
  return _internal_delegate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelegationOperationData::set_delegate(ArgT0&& arg0, ArgT... args) {
 
 delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Tezos.Proto.DelegationOperationData.delegate)
}
inline std::string* DelegationOperationData::mutable_delegate() {
  std::string* _s = _internal_mutable_delegate();
  // @@protoc_insertion_point(field_mutable:TW.Tezos.Proto.DelegationOperationData.delegate)
  return _s;
}
inline const std::string& DelegationOperationData::_internal_delegate() const {
  return delegate_.Get();
}
inline void DelegationOperationData::_internal_set_delegate(const std::string& value) {
  
  delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DelegationOperationData::_internal_mutable_delegate() {
  
  return delegate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DelegationOperationData::release_delegate() {
  // @@protoc_insertion_point(field_release:TW.Tezos.Proto.DelegationOperationData.delegate)
  return delegate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DelegationOperationData::set_allocated_delegate(std::string* delegate) {
  if (delegate != nullptr) {
    
  } else {
    
  }
  delegate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegate,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.DelegationOperationData.delegate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Tezos
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Tezos::Proto::Operation_OperationKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Tezos::Proto::Operation_OperationKind>() {
  return ::TW::Tezos::Proto::Operation_OperationKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Tezos_2eproto
