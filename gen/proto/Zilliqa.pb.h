// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Zilliqa.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Zilliqa_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Zilliqa_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Zilliqa_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Zilliqa_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Zilliqa_2eproto;
namespace TW {
namespace Zilliqa {
namespace Proto {
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transaction_Raw;
struct Transaction_RawDefaultTypeInternal;
extern Transaction_RawDefaultTypeInternal _Transaction_Raw_default_instance_;
class Transaction_Transfer;
struct Transaction_TransferDefaultTypeInternal;
extern Transaction_TransferDefaultTypeInternal _Transaction_Transfer_default_instance_;
}  // namespace Proto
}  // namespace Zilliqa
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Zilliqa::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Zilliqa::Proto::SigningInput>(Arena*);
template<> ::TW::Zilliqa::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Zilliqa::Proto::SigningOutput>(Arena*);
template<> ::TW::Zilliqa::Proto::Transaction* Arena::CreateMaybeMessage<::TW::Zilliqa::Proto::Transaction>(Arena*);
template<> ::TW::Zilliqa::Proto::Transaction_Raw* Arena::CreateMaybeMessage<::TW::Zilliqa::Proto::Transaction_Raw>(Arena*);
template<> ::TW::Zilliqa::Proto::Transaction_Transfer* Arena::CreateMaybeMessage<::TW::Zilliqa::Proto::Transaction_Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Zilliqa {
namespace Proto {

// ===================================================================

class Transaction_Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Zilliqa.Proto.Transaction.Transfer) */ {
 public:
  inline Transaction_Transfer() : Transaction_Transfer(nullptr) {}
  ~Transaction_Transfer() override;
  explicit constexpr Transaction_Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Transfer(const Transaction_Transfer& from);
  Transaction_Transfer(Transaction_Transfer&& from) noexcept
    : Transaction_Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_Transfer& operator=(const Transaction_Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Transfer& operator=(Transaction_Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_Transfer*>(
               &_Transaction_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction_Transfer& a, Transaction_Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Zilliqa.Proto.Transaction.Transfer";
  }
  protected:
  explicit Transaction_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // bytes amount = 1;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Zilliqa.Proto.Transaction.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Zilliqa_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Raw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Zilliqa.Proto.Transaction.Raw) */ {
 public:
  inline Transaction_Raw() : Transaction_Raw(nullptr) {}
  ~Transaction_Raw() override;
  explicit constexpr Transaction_Raw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Raw(const Transaction_Raw& from);
  Transaction_Raw(Transaction_Raw&& from) noexcept
    : Transaction_Raw() {
    *this = ::std::move(from);
  }

  inline Transaction_Raw& operator=(const Transaction_Raw& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Raw& operator=(Transaction_Raw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_Raw& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Raw* internal_default_instance() {
    return reinterpret_cast<const Transaction_Raw*>(
               &_Transaction_Raw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction_Raw& a, Transaction_Raw& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Raw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Raw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_Raw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_Raw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_Raw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_Raw& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Raw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Zilliqa.Proto.Transaction.Raw";
  }
  protected:
  explicit Transaction_Raw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kCodeFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // bytes amount = 1;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.Zilliqa.Proto.Transaction.Raw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Zilliqa_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Zilliqa.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kTransfer = 1,
    kRawTransaction = 2,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Zilliqa.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_Transfer Transfer;
  typedef Transaction_Raw Raw;

  // accessors -------------------------------------------------------

  enum : int {
    kTransferFieldNumber = 1,
    kRawTransactionFieldNumber = 2,
  };
  // .TW.Zilliqa.Proto.Transaction.Transfer transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Zilliqa::Proto::Transaction_Transfer& transfer() const;
  PROTOBUF_NODISCARD ::TW::Zilliqa::Proto::Transaction_Transfer* release_transfer();
  ::TW::Zilliqa::Proto::Transaction_Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::Zilliqa::Proto::Transaction_Transfer* transfer);
  private:
  const ::TW::Zilliqa::Proto::Transaction_Transfer& _internal_transfer() const;
  ::TW::Zilliqa::Proto::Transaction_Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Zilliqa::Proto::Transaction_Transfer* transfer);
  ::TW::Zilliqa::Proto::Transaction_Transfer* unsafe_arena_release_transfer();

  // .TW.Zilliqa.Proto.Transaction.Raw raw_transaction = 2;
  bool has_raw_transaction() const;
  private:
  bool _internal_has_raw_transaction() const;
  public:
  void clear_raw_transaction();
  const ::TW::Zilliqa::Proto::Transaction_Raw& raw_transaction() const;
  PROTOBUF_NODISCARD ::TW::Zilliqa::Proto::Transaction_Raw* release_raw_transaction();
  ::TW::Zilliqa::Proto::Transaction_Raw* mutable_raw_transaction();
  void set_allocated_raw_transaction(::TW::Zilliqa::Proto::Transaction_Raw* raw_transaction);
  private:
  const ::TW::Zilliqa::Proto::Transaction_Raw& _internal_raw_transaction() const;
  ::TW::Zilliqa::Proto::Transaction_Raw* _internal_mutable_raw_transaction();
  public:
  void unsafe_arena_set_allocated_raw_transaction(
      ::TW::Zilliqa::Proto::Transaction_Raw* raw_transaction);
  ::TW::Zilliqa::Proto::Transaction_Raw* unsafe_arena_release_raw_transaction();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Zilliqa.Proto.Transaction)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_raw_transaction();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Zilliqa::Proto::Transaction_Transfer* transfer_;
    ::TW::Zilliqa::Proto::Transaction_Raw* raw_transaction_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Zilliqa_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Zilliqa.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Zilliqa.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 3,
    kGasPriceFieldNumber = 4,
    kPrivateKeyFieldNumber = 6,
    kTransactionFieldNumber = 7,
    kNonceFieldNumber = 2,
    kGasLimitFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // string to = 3;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes gas_price = 4;
  void clear_gas_price();
  const std::string& gas_price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_price();
  PROTOBUF_NODISCARD std::string* release_gas_price();
  void set_allocated_gas_price(std::string* gas_price);
  private:
  const std::string& _internal_gas_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_price(const std::string& value);
  std::string* _internal_mutable_gas_price();
  public:

  // bytes private_key = 6;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Zilliqa.Proto.Transaction transaction = 7;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::Zilliqa::Proto::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::TW::Zilliqa::Proto::Transaction* release_transaction();
  ::TW::Zilliqa::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::Zilliqa::Proto::Transaction* transaction);
  private:
  const ::TW::Zilliqa::Proto::Transaction& _internal_transaction() const;
  ::TW::Zilliqa::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::Zilliqa::Proto::Transaction* transaction);
  ::TW::Zilliqa::Proto::Transaction* unsafe_arena_release_transaction();

  // uint64 nonce = 2;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // uint64 gas_limit = 5;
  void clear_gas_limit();
  uint64_t gas_limit() const;
  void set_gas_limit(uint64_t value);
  private:
  uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(uint64_t value);
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Zilliqa.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Zilliqa::Proto::Transaction* transaction_;
  uint64_t nonce_;
  uint64_t gas_limit_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Zilliqa_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Zilliqa.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Zilliqa.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kJsonFieldNumber = 2,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string json = 2;
  void clear_json();
  const std::string& json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json();
  PROTOBUF_NODISCARD std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:TW.Zilliqa.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Zilliqa_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction_Transfer

// bytes amount = 1;
inline void Transaction_Transfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.Transaction.Transfer.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Transfer::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.Transaction.Transfer.amount)
}
inline std::string* Transaction_Transfer::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.Transaction.Transfer.amount)
  return _s;
}
inline const std::string& Transaction_Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.Transaction.Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.Transaction.Transfer.amount)
}

// -------------------------------------------------------------------

// Transaction_Raw

// bytes amount = 1;
inline void Transaction_Raw::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_Raw::amount() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.Transaction.Raw.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Raw::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.Transaction.Raw.amount)
}
inline std::string* Transaction_Raw::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.Transaction.Raw.amount)
  return _s;
}
inline const std::string& Transaction_Raw::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_Raw::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Raw::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Raw::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.Transaction.Raw.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Raw::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.Transaction.Raw.amount)
}

// bytes code = 2;
inline void Transaction_Raw::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Transaction_Raw::code() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.Transaction.Raw.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Raw::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.Transaction.Raw.code)
}
inline std::string* Transaction_Raw::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.Transaction.Raw.code)
  return _s;
}
inline const std::string& Transaction_Raw::_internal_code() const {
  return code_.Get();
}
inline void Transaction_Raw::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Raw::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Raw::release_code() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.Transaction.Raw.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Raw::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.Transaction.Raw.code)
}

// bytes data = 3;
inline void Transaction_Raw::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Transaction_Raw::data() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.Transaction.Raw.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Raw::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.Transaction.Raw.data)
}
inline std::string* Transaction_Raw::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.Transaction.Raw.data)
  return _s;
}
inline const std::string& Transaction_Raw::_internal_data() const {
  return data_.Get();
}
inline void Transaction_Raw::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Raw::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Raw::release_data() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.Transaction.Raw.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Raw::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.Transaction.Raw.data)
}

// -------------------------------------------------------------------

// Transaction

// .TW.Zilliqa.Proto.Transaction.Transfer transfer = 1;
inline bool Transaction::_internal_has_transfer() const {
  return message_oneof_case() == kTransfer;
}
inline bool Transaction::has_transfer() const {
  return _internal_has_transfer();
}
inline void Transaction::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void Transaction::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Zilliqa::Proto::Transaction_Transfer* Transaction::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.Transaction.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
      ::TW::Zilliqa::Proto::Transaction_Transfer* temp = message_oneof_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Zilliqa::Proto::Transaction_Transfer& Transaction::_internal_transfer() const {
  return _internal_has_transfer()
      ? *message_oneof_.transfer_
      : reinterpret_cast< ::TW::Zilliqa::Proto::Transaction_Transfer&>(::TW::Zilliqa::Proto::_Transaction_Transfer_default_instance_);
}
inline const ::TW::Zilliqa::Proto::Transaction_Transfer& Transaction::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.Transaction.transfer)
  return _internal_transfer();
}
inline ::TW::Zilliqa::Proto::Transaction_Transfer* Transaction::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Zilliqa.Proto.Transaction.transfer)
  if (_internal_has_transfer()) {
    clear_has_message_oneof();
    ::TW::Zilliqa::Proto::Transaction_Transfer* temp = message_oneof_.transfer_;
    message_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_transfer(::TW::Zilliqa::Proto::Transaction_Transfer* transfer) {
  clear_message_oneof();
  if (transfer) {
    set_has_transfer();
    message_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Zilliqa.Proto.Transaction.transfer)
}
inline ::TW::Zilliqa::Proto::Transaction_Transfer* Transaction::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_message_oneof();
    set_has_transfer();
    message_oneof_.transfer_ = CreateMaybeMessage< ::TW::Zilliqa::Proto::Transaction_Transfer >(GetArenaForAllocation());
  }
  return message_oneof_.transfer_;
}
inline ::TW::Zilliqa::Proto::Transaction_Transfer* Transaction::mutable_transfer() {
  ::TW::Zilliqa::Proto::Transaction_Transfer* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.Transaction.transfer)
  return _msg;
}

// .TW.Zilliqa.Proto.Transaction.Raw raw_transaction = 2;
inline bool Transaction::_internal_has_raw_transaction() const {
  return message_oneof_case() == kRawTransaction;
}
inline bool Transaction::has_raw_transaction() const {
  return _internal_has_raw_transaction();
}
inline void Transaction::set_has_raw_transaction() {
  _oneof_case_[0] = kRawTransaction;
}
inline void Transaction::clear_raw_transaction() {
  if (_internal_has_raw_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.raw_transaction_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Zilliqa::Proto::Transaction_Raw* Transaction::release_raw_transaction() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.Transaction.raw_transaction)
  if (_internal_has_raw_transaction()) {
    clear_has_message_oneof();
      ::TW::Zilliqa::Proto::Transaction_Raw* temp = message_oneof_.raw_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.raw_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Zilliqa::Proto::Transaction_Raw& Transaction::_internal_raw_transaction() const {
  return _internal_has_raw_transaction()
      ? *message_oneof_.raw_transaction_
      : reinterpret_cast< ::TW::Zilliqa::Proto::Transaction_Raw&>(::TW::Zilliqa::Proto::_Transaction_Raw_default_instance_);
}
inline const ::TW::Zilliqa::Proto::Transaction_Raw& Transaction::raw_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.Transaction.raw_transaction)
  return _internal_raw_transaction();
}
inline ::TW::Zilliqa::Proto::Transaction_Raw* Transaction::unsafe_arena_release_raw_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Zilliqa.Proto.Transaction.raw_transaction)
  if (_internal_has_raw_transaction()) {
    clear_has_message_oneof();
    ::TW::Zilliqa::Proto::Transaction_Raw* temp = message_oneof_.raw_transaction_;
    message_oneof_.raw_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_raw_transaction(::TW::Zilliqa::Proto::Transaction_Raw* raw_transaction) {
  clear_message_oneof();
  if (raw_transaction) {
    set_has_raw_transaction();
    message_oneof_.raw_transaction_ = raw_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Zilliqa.Proto.Transaction.raw_transaction)
}
inline ::TW::Zilliqa::Proto::Transaction_Raw* Transaction::_internal_mutable_raw_transaction() {
  if (!_internal_has_raw_transaction()) {
    clear_message_oneof();
    set_has_raw_transaction();
    message_oneof_.raw_transaction_ = CreateMaybeMessage< ::TW::Zilliqa::Proto::Transaction_Raw >(GetArenaForAllocation());
  }
  return message_oneof_.raw_transaction_;
}
inline ::TW::Zilliqa::Proto::Transaction_Raw* Transaction::mutable_raw_transaction() {
  ::TW::Zilliqa::Proto::Transaction_Raw* _msg = _internal_mutable_raw_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.Transaction.raw_transaction)
  return _msg;
}

inline bool Transaction::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Transaction::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Transaction::MessageOneofCase Transaction::message_oneof_case() const {
  return Transaction::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// uint32 version = 1;
inline void SigningInput::clear_version() {
  version_ = 0u;
}
inline uint32_t SigningInput::_internal_version() const {
  return version_;
}
inline uint32_t SigningInput::version() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningInput.version)
  return _internal_version();
}
inline void SigningInput::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void SigningInput::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningInput.version)
}

// uint64 nonce = 2;
inline void SigningInput::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_nonce() const {
  return nonce_;
}
inline uint64_t SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void SigningInput::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningInput.nonce)
}

// string to = 3;
inline void SigningInput::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& SigningInput::to() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningInput.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningInput.to)
}
inline std::string* SigningInput::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.SigningInput.to)
  return _s;
}
inline const std::string& SigningInput::_internal_to() const {
  return to_.Get();
}
inline void SigningInput::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_to() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.SigningInput.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.SigningInput.to)
}

// bytes gas_price = 4;
inline void SigningInput::clear_gas_price() {
  gas_price_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningInput.gas_price)
  return _internal_gas_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_gas_price(ArgT0&& arg0, ArgT... args) {
 
 gas_price_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningInput.gas_price)
}
inline std::string* SigningInput::mutable_gas_price() {
  std::string* _s = _internal_mutable_gas_price();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.SigningInput.gas_price)
  return _s;
}
inline const std::string& SigningInput::_internal_gas_price() const {
  return gas_price_.Get();
}
inline void SigningInput::_internal_set_gas_price(const std::string& value) {
  
  gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_gas_price() {
  
  return gas_price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_gas_price() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.SigningInput.gas_price)
  return gas_price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_gas_price(std::string* gas_price) {
  if (gas_price != nullptr) {
    
  } else {
    
  }
  gas_price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_price,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_price_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.SigningInput.gas_price)
}

// uint64 gas_limit = 5;
inline void SigningInput::clear_gas_limit() {
  gas_limit_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_gas_limit() const {
  return gas_limit_;
}
inline uint64_t SigningInput::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningInput.gas_limit)
  return _internal_gas_limit();
}
inline void SigningInput::_internal_set_gas_limit(uint64_t value) {
  
  gas_limit_ = value;
}
inline void SigningInput::set_gas_limit(uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningInput.gas_limit)
}

// bytes private_key = 6;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.SigningInput.private_key)
}

// .TW.Zilliqa.Proto.Transaction transaction = 7;
inline bool SigningInput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningInput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningInput::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::Zilliqa::Proto::Transaction& SigningInput::_internal_transaction() const {
  const ::TW::Zilliqa::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Zilliqa::Proto::Transaction&>(
      ::TW::Zilliqa::Proto::_Transaction_default_instance_);
}
inline const ::TW::Zilliqa::Proto::Transaction& SigningInput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningInput.transaction)
  return _internal_transaction();
}
inline void SigningInput::unsafe_arena_set_allocated_transaction(
    ::TW::Zilliqa::Proto::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Zilliqa.Proto.SigningInput.transaction)
}
inline ::TW::Zilliqa::Proto::Transaction* SigningInput::release_transaction() {
  
  ::TW::Zilliqa::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Zilliqa::Proto::Transaction* SigningInput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.SigningInput.transaction)
  
  ::TW::Zilliqa::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::Zilliqa::Proto::Transaction* SigningInput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Zilliqa::Proto::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::Zilliqa::Proto::Transaction* SigningInput::mutable_transaction() {
  ::TW::Zilliqa::Proto::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.SigningInput.transaction)
  return _msg;
}
inline void SigningInput::set_allocated_transaction(::TW::Zilliqa::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Zilliqa::Proto::Transaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.SigningInput.transaction)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes signature = 1;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningOutput.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.SigningOutput.signature)
  return _s;
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.SigningOutput.signature)
}

// string json = 2;
inline void SigningOutput::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& SigningOutput::json() const {
  // @@protoc_insertion_point(field_get:TW.Zilliqa.Proto.SigningOutput.json)
  return _internal_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_json(ArgT0&& arg0, ArgT... args) {
 
 json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Zilliqa.Proto.SigningOutput.json)
}
inline std::string* SigningOutput::mutable_json() {
  std::string* _s = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:TW.Zilliqa.Proto.SigningOutput.json)
  return _s;
}
inline const std::string& SigningOutput::_internal_json() const {
  return json_.Get();
}
inline void SigningOutput::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_json() {
  // @@protoc_insertion_point(field_release:TW.Zilliqa.Proto.SigningOutput.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Zilliqa.Proto.SigningOutput.json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Zilliqa
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Zilliqa_2eproto
