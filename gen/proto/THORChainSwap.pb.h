// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: THORChainSwap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_THORChainSwap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_THORChainSwap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Bitcoin.pb.h"
#include "Ethereum.pb.h"
#include "Binance.pb.h"
#include "Cosmos.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_THORChainSwap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_THORChainSwap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_THORChainSwap_2eproto;
namespace TW {
namespace THORChainSwap {
namespace Proto {
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class StreamParams;
struct StreamParamsDefaultTypeInternal;
extern StreamParamsDefaultTypeInternal _StreamParams_default_instance_;
class SwapInput;
struct SwapInputDefaultTypeInternal;
extern SwapInputDefaultTypeInternal _SwapInput_default_instance_;
class SwapOutput;
struct SwapOutputDefaultTypeInternal;
extern SwapOutputDefaultTypeInternal _SwapOutput_default_instance_;
}  // namespace Proto
}  // namespace THORChainSwap
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::THORChainSwap::Proto::Asset* Arena::CreateMaybeMessage<::TW::THORChainSwap::Proto::Asset>(Arena*);
template<> ::TW::THORChainSwap::Proto::Error* Arena::CreateMaybeMessage<::TW::THORChainSwap::Proto::Error>(Arena*);
template<> ::TW::THORChainSwap::Proto::StreamParams* Arena::CreateMaybeMessage<::TW::THORChainSwap::Proto::StreamParams>(Arena*);
template<> ::TW::THORChainSwap::Proto::SwapInput* Arena::CreateMaybeMessage<::TW::THORChainSwap::Proto::SwapInput>(Arena*);
template<> ::TW::THORChainSwap::Proto::SwapOutput* Arena::CreateMaybeMessage<::TW::THORChainSwap::Proto::SwapOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace THORChainSwap {
namespace Proto {

enum Chain : int {
  THOR = 0,
  BTC = 1,
  ETH = 2,
  BNB = 3,
  DOGE = 4,
  BCH = 5,
  LTC = 6,
  ATOM = 7,
  AVAX = 8,
  Chain_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Chain_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Chain_IsValid(int value);
constexpr Chain Chain_MIN = THOR;
constexpr Chain Chain_MAX = AVAX;
constexpr int Chain_ARRAYSIZE = Chain_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chain_descriptor();
template<typename T>
inline const std::string& Chain_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chain>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chain_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chain_descriptor(), enum_t_value);
}
inline bool Chain_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Chain* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chain>(
    Chain_descriptor(), name, value);
}
enum ErrorCode : int {
  OK = 0,
  Error_general = 1,
  Error_Input_proto_deserialization = 2,
  Error_Unsupported_from_chain = 13,
  Error_Unsupported_to_chain = 14,
  Error_Invalid_from_address = 15,
  Error_Invalid_to_address = 16,
  Error_Invalid_vault_address = 21,
  Error_Invalid_router_address = 22,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = OK;
constexpr ErrorCode ErrorCode_MAX = Error_Invalid_router_address;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.THORChainSwap.Proto.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.THORChainSwap.Proto.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .TW.THORChainSwap.Proto.ErrorCode code = 1;
  void clear_code();
  ::TW::THORChainSwap::Proto::ErrorCode code() const;
  void set_code(::TW::THORChainSwap::Proto::ErrorCode value);
  private:
  ::TW::THORChainSwap::Proto::ErrorCode _internal_code() const;
  void _internal_set_code(::TW::THORChainSwap::Proto::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:TW.THORChainSwap.Proto.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_THORChainSwap_2eproto;
};
// -------------------------------------------------------------------

class Asset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.THORChainSwap.Proto.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  ~Asset() override;
  explicit constexpr Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Asset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Asset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.THORChainSwap.Proto.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kChainFieldNumber = 1,
  };
  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // .TW.THORChainSwap.Proto.Chain chain = 1;
  void clear_chain();
  ::TW::THORChainSwap::Proto::Chain chain() const;
  void set_chain(::TW::THORChainSwap::Proto::Chain value);
  private:
  ::TW::THORChainSwap::Proto::Chain _internal_chain() const;
  void _internal_set_chain(::TW::THORChainSwap::Proto::Chain value);
  public:

  // @@protoc_insertion_point(class_scope:TW.THORChainSwap.Proto.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  int chain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_THORChainSwap_2eproto;
};
// -------------------------------------------------------------------

class StreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.THORChainSwap.Proto.StreamParams) */ {
 public:
  inline StreamParams() : StreamParams(nullptr) {}
  ~StreamParams() override;
  explicit constexpr StreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamParams(const StreamParams& from);
  StreamParams(StreamParams&& from) noexcept
    : StreamParams() {
    *this = ::std::move(from);
  }

  inline StreamParams& operator=(const StreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamParams& operator=(StreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamParams* internal_default_instance() {
    return reinterpret_cast<const StreamParams*>(
               &_StreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamParams& a, StreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.THORChainSwap.Proto.StreamParams";
  }
  protected:
  explicit StreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // string interval = 1;
  void clear_interval();
  const std::string& interval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interval();
  PROTOBUF_NODISCARD std::string* release_interval();
  void set_allocated_interval(std::string* interval);
  private:
  const std::string& _internal_interval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interval(const std::string& value);
  std::string* _internal_mutable_interval();
  public:

  // string quantity = 2;
  void clear_quantity();
  const std::string& quantity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quantity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quantity();
  PROTOBUF_NODISCARD std::string* release_quantity();
  void set_allocated_quantity(std::string* quantity);
  private:
  const std::string& _internal_quantity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quantity(const std::string& value);
  std::string* _internal_mutable_quantity();
  public:

  // @@protoc_insertion_point(class_scope:TW.THORChainSwap.Proto.StreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interval_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_THORChainSwap_2eproto;
};
// -------------------------------------------------------------------

class SwapInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.THORChainSwap.Proto.SwapInput) */ {
 public:
  inline SwapInput() : SwapInput(nullptr) {}
  ~SwapInput() override;
  explicit constexpr SwapInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapInput(const SwapInput& from);
  SwapInput(SwapInput&& from) noexcept
    : SwapInput() {
    *this = ::std::move(from);
  }

  inline SwapInput& operator=(const SwapInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapInput& operator=(SwapInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapInput* internal_default_instance() {
    return reinterpret_cast<const SwapInput*>(
               &_SwapInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SwapInput& a, SwapInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.THORChainSwap.Proto.SwapInput";
  }
  protected:
  explicit SwapInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kVaultAddressFieldNumber = 5,
    kRouterAddressFieldNumber = 6,
    kFromAmountFieldNumber = 7,
    kToAmountLimitFieldNumber = 8,
    kAffiliateFeeAddressFieldNumber = 9,
    kAffiliateFeeRateBpFieldNumber = 10,
    kExtraMemoFieldNumber = 11,
    kFromAssetFieldNumber = 1,
    kToAssetFieldNumber = 3,
    kStreamParamsFieldNumber = 13,
    kExpirationTimeFieldNumber = 12,
  };
  // string from_address = 2;
  void clear_from_address();
  const std::string& from_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_address();
  PROTOBUF_NODISCARD std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // string to_address = 4;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string vault_address = 5;
  void clear_vault_address();
  const std::string& vault_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vault_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vault_address();
  PROTOBUF_NODISCARD std::string* release_vault_address();
  void set_allocated_vault_address(std::string* vault_address);
  private:
  const std::string& _internal_vault_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vault_address(const std::string& value);
  std::string* _internal_mutable_vault_address();
  public:

  // string router_address = 6;
  void clear_router_address();
  const std::string& router_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_router_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_router_address();
  PROTOBUF_NODISCARD std::string* release_router_address();
  void set_allocated_router_address(std::string* router_address);
  private:
  const std::string& _internal_router_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_router_address(const std::string& value);
  std::string* _internal_mutable_router_address();
  public:

  // string from_amount = 7;
  void clear_from_amount();
  const std::string& from_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_amount();
  PROTOBUF_NODISCARD std::string* release_from_amount();
  void set_allocated_from_amount(std::string* from_amount);
  private:
  const std::string& _internal_from_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_amount(const std::string& value);
  std::string* _internal_mutable_from_amount();
  public:

  // string to_amount_limit = 8;
  void clear_to_amount_limit();
  const std::string& to_amount_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_amount_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_amount_limit();
  PROTOBUF_NODISCARD std::string* release_to_amount_limit();
  void set_allocated_to_amount_limit(std::string* to_amount_limit);
  private:
  const std::string& _internal_to_amount_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_amount_limit(const std::string& value);
  std::string* _internal_mutable_to_amount_limit();
  public:

  // string affiliate_fee_address = 9;
  void clear_affiliate_fee_address();
  const std::string& affiliate_fee_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affiliate_fee_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affiliate_fee_address();
  PROTOBUF_NODISCARD std::string* release_affiliate_fee_address();
  void set_allocated_affiliate_fee_address(std::string* affiliate_fee_address);
  private:
  const std::string& _internal_affiliate_fee_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affiliate_fee_address(const std::string& value);
  std::string* _internal_mutable_affiliate_fee_address();
  public:

  // string affiliate_fee_rate_bp = 10;
  void clear_affiliate_fee_rate_bp();
  const std::string& affiliate_fee_rate_bp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affiliate_fee_rate_bp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affiliate_fee_rate_bp();
  PROTOBUF_NODISCARD std::string* release_affiliate_fee_rate_bp();
  void set_allocated_affiliate_fee_rate_bp(std::string* affiliate_fee_rate_bp);
  private:
  const std::string& _internal_affiliate_fee_rate_bp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affiliate_fee_rate_bp(const std::string& value);
  std::string* _internal_mutable_affiliate_fee_rate_bp();
  public:

  // string extra_memo = 11;
  void clear_extra_memo();
  const std::string& extra_memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_memo();
  PROTOBUF_NODISCARD std::string* release_extra_memo();
  void set_allocated_extra_memo(std::string* extra_memo);
  private:
  const std::string& _internal_extra_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_memo(const std::string& value);
  std::string* _internal_mutable_extra_memo();
  public:

  // .TW.THORChainSwap.Proto.Asset from_asset = 1;
  bool has_from_asset() const;
  private:
  bool _internal_has_from_asset() const;
  public:
  void clear_from_asset();
  const ::TW::THORChainSwap::Proto::Asset& from_asset() const;
  PROTOBUF_NODISCARD ::TW::THORChainSwap::Proto::Asset* release_from_asset();
  ::TW::THORChainSwap::Proto::Asset* mutable_from_asset();
  void set_allocated_from_asset(::TW::THORChainSwap::Proto::Asset* from_asset);
  private:
  const ::TW::THORChainSwap::Proto::Asset& _internal_from_asset() const;
  ::TW::THORChainSwap::Proto::Asset* _internal_mutable_from_asset();
  public:
  void unsafe_arena_set_allocated_from_asset(
      ::TW::THORChainSwap::Proto::Asset* from_asset);
  ::TW::THORChainSwap::Proto::Asset* unsafe_arena_release_from_asset();

  // .TW.THORChainSwap.Proto.Asset to_asset = 3;
  bool has_to_asset() const;
  private:
  bool _internal_has_to_asset() const;
  public:
  void clear_to_asset();
  const ::TW::THORChainSwap::Proto::Asset& to_asset() const;
  PROTOBUF_NODISCARD ::TW::THORChainSwap::Proto::Asset* release_to_asset();
  ::TW::THORChainSwap::Proto::Asset* mutable_to_asset();
  void set_allocated_to_asset(::TW::THORChainSwap::Proto::Asset* to_asset);
  private:
  const ::TW::THORChainSwap::Proto::Asset& _internal_to_asset() const;
  ::TW::THORChainSwap::Proto::Asset* _internal_mutable_to_asset();
  public:
  void unsafe_arena_set_allocated_to_asset(
      ::TW::THORChainSwap::Proto::Asset* to_asset);
  ::TW::THORChainSwap::Proto::Asset* unsafe_arena_release_to_asset();

  // .TW.THORChainSwap.Proto.StreamParams stream_params = 13;
  bool has_stream_params() const;
  private:
  bool _internal_has_stream_params() const;
  public:
  void clear_stream_params();
  const ::TW::THORChainSwap::Proto::StreamParams& stream_params() const;
  PROTOBUF_NODISCARD ::TW::THORChainSwap::Proto::StreamParams* release_stream_params();
  ::TW::THORChainSwap::Proto::StreamParams* mutable_stream_params();
  void set_allocated_stream_params(::TW::THORChainSwap::Proto::StreamParams* stream_params);
  private:
  const ::TW::THORChainSwap::Proto::StreamParams& _internal_stream_params() const;
  ::TW::THORChainSwap::Proto::StreamParams* _internal_mutable_stream_params();
  public:
  void unsafe_arena_set_allocated_stream_params(
      ::TW::THORChainSwap::Proto::StreamParams* stream_params);
  ::TW::THORChainSwap::Proto::StreamParams* unsafe_arena_release_stream_params();

  // uint64 expiration_time = 12;
  void clear_expiration_time();
  uint64_t expiration_time() const;
  void set_expiration_time(uint64_t value);
  private:
  uint64_t _internal_expiration_time() const;
  void _internal_set_expiration_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.THORChainSwap.Proto.SwapInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vault_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr router_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_amount_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affiliate_fee_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affiliate_fee_rate_bp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_memo_;
  ::TW::THORChainSwap::Proto::Asset* from_asset_;
  ::TW::THORChainSwap::Proto::Asset* to_asset_;
  ::TW::THORChainSwap::Proto::StreamParams* stream_params_;
  uint64_t expiration_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_THORChainSwap_2eproto;
};
// -------------------------------------------------------------------

class SwapOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.THORChainSwap.Proto.SwapOutput) */ {
 public:
  inline SwapOutput() : SwapOutput(nullptr) {}
  ~SwapOutput() override;
  explicit constexpr SwapOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapOutput(const SwapOutput& from);
  SwapOutput(SwapOutput&& from) noexcept
    : SwapOutput() {
    *this = ::std::move(from);
  }

  inline SwapOutput& operator=(const SwapOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapOutput& operator=(SwapOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapOutput& default_instance() {
    return *internal_default_instance();
  }
  enum SigningInputOneofCase {
    kBitcoin = 4,
    kEthereum = 5,
    kBinance = 6,
    kCosmos = 7,
    SIGNING_INPUT_ONEOF_NOT_SET = 0,
  };

  static inline const SwapOutput* internal_default_instance() {
    return reinterpret_cast<const SwapOutput*>(
               &_SwapOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SwapOutput& a, SwapOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.THORChainSwap.Proto.SwapOutput";
  }
  protected:
  explicit SwapOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kFromChainFieldNumber = 1,
    kToChainFieldNumber = 2,
    kBitcoinFieldNumber = 4,
    kEthereumFieldNumber = 5,
    kBinanceFieldNumber = 6,
    kCosmosFieldNumber = 7,
  };
  // .TW.THORChainSwap.Proto.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::TW::THORChainSwap::Proto::Error& error() const;
  PROTOBUF_NODISCARD ::TW::THORChainSwap::Proto::Error* release_error();
  ::TW::THORChainSwap::Proto::Error* mutable_error();
  void set_allocated_error(::TW::THORChainSwap::Proto::Error* error);
  private:
  const ::TW::THORChainSwap::Proto::Error& _internal_error() const;
  ::TW::THORChainSwap::Proto::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::TW::THORChainSwap::Proto::Error* error);
  ::TW::THORChainSwap::Proto::Error* unsafe_arena_release_error();

  // .TW.THORChainSwap.Proto.Chain from_chain = 1;
  void clear_from_chain();
  ::TW::THORChainSwap::Proto::Chain from_chain() const;
  void set_from_chain(::TW::THORChainSwap::Proto::Chain value);
  private:
  ::TW::THORChainSwap::Proto::Chain _internal_from_chain() const;
  void _internal_set_from_chain(::TW::THORChainSwap::Proto::Chain value);
  public:

  // .TW.THORChainSwap.Proto.Chain to_chain = 2;
  void clear_to_chain();
  ::TW::THORChainSwap::Proto::Chain to_chain() const;
  void set_to_chain(::TW::THORChainSwap::Proto::Chain value);
  private:
  ::TW::THORChainSwap::Proto::Chain _internal_to_chain() const;
  void _internal_set_to_chain(::TW::THORChainSwap::Proto::Chain value);
  public:

  // .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
  bool has_bitcoin() const;
  private:
  bool _internal_has_bitcoin() const;
  public:
  void clear_bitcoin();
  const ::TW::Bitcoin::Proto::SigningInput& bitcoin() const;
  PROTOBUF_NODISCARD ::TW::Bitcoin::Proto::SigningInput* release_bitcoin();
  ::TW::Bitcoin::Proto::SigningInput* mutable_bitcoin();
  void set_allocated_bitcoin(::TW::Bitcoin::Proto::SigningInput* bitcoin);
  private:
  const ::TW::Bitcoin::Proto::SigningInput& _internal_bitcoin() const;
  ::TW::Bitcoin::Proto::SigningInput* _internal_mutable_bitcoin();
  public:
  void unsafe_arena_set_allocated_bitcoin(
      ::TW::Bitcoin::Proto::SigningInput* bitcoin);
  ::TW::Bitcoin::Proto::SigningInput* unsafe_arena_release_bitcoin();

  // .TW.Ethereum.Proto.SigningInput ethereum = 5;
  bool has_ethereum() const;
  private:
  bool _internal_has_ethereum() const;
  public:
  void clear_ethereum();
  const ::TW::Ethereum::Proto::SigningInput& ethereum() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::SigningInput* release_ethereum();
  ::TW::Ethereum::Proto::SigningInput* mutable_ethereum();
  void set_allocated_ethereum(::TW::Ethereum::Proto::SigningInput* ethereum);
  private:
  const ::TW::Ethereum::Proto::SigningInput& _internal_ethereum() const;
  ::TW::Ethereum::Proto::SigningInput* _internal_mutable_ethereum();
  public:
  void unsafe_arena_set_allocated_ethereum(
      ::TW::Ethereum::Proto::SigningInput* ethereum);
  ::TW::Ethereum::Proto::SigningInput* unsafe_arena_release_ethereum();

  // .TW.Binance.Proto.SigningInput binance = 6;
  bool has_binance() const;
  private:
  bool _internal_has_binance() const;
  public:
  void clear_binance();
  const ::TW::Binance::Proto::SigningInput& binance() const;
  PROTOBUF_NODISCARD ::TW::Binance::Proto::SigningInput* release_binance();
  ::TW::Binance::Proto::SigningInput* mutable_binance();
  void set_allocated_binance(::TW::Binance::Proto::SigningInput* binance);
  private:
  const ::TW::Binance::Proto::SigningInput& _internal_binance() const;
  ::TW::Binance::Proto::SigningInput* _internal_mutable_binance();
  public:
  void unsafe_arena_set_allocated_binance(
      ::TW::Binance::Proto::SigningInput* binance);
  ::TW::Binance::Proto::SigningInput* unsafe_arena_release_binance();

  // .TW.Cosmos.Proto.SigningInput cosmos = 7;
  bool has_cosmos() const;
  private:
  bool _internal_has_cosmos() const;
  public:
  void clear_cosmos();
  const ::TW::Cosmos::Proto::SigningInput& cosmos() const;
  PROTOBUF_NODISCARD ::TW::Cosmos::Proto::SigningInput* release_cosmos();
  ::TW::Cosmos::Proto::SigningInput* mutable_cosmos();
  void set_allocated_cosmos(::TW::Cosmos::Proto::SigningInput* cosmos);
  private:
  const ::TW::Cosmos::Proto::SigningInput& _internal_cosmos() const;
  ::TW::Cosmos::Proto::SigningInput* _internal_mutable_cosmos();
  public:
  void unsafe_arena_set_allocated_cosmos(
      ::TW::Cosmos::Proto::SigningInput* cosmos);
  ::TW::Cosmos::Proto::SigningInput* unsafe_arena_release_cosmos();

  void clear_signing_input_oneof();
  SigningInputOneofCase signing_input_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.THORChainSwap.Proto.SwapOutput)
 private:
  class _Internal;
  void set_has_bitcoin();
  void set_has_ethereum();
  void set_has_binance();
  void set_has_cosmos();

  inline bool has_signing_input_oneof() const;
  inline void clear_has_signing_input_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::THORChainSwap::Proto::Error* error_;
  int from_chain_;
  int to_chain_;
  union SigningInputOneofUnion {
    constexpr SigningInputOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Bitcoin::Proto::SigningInput* bitcoin_;
    ::TW::Ethereum::Proto::SigningInput* ethereum_;
    ::TW::Binance::Proto::SigningInput* binance_;
    ::TW::Cosmos::Proto::SigningInput* cosmos_;
  } signing_input_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_THORChainSwap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Error

// .TW.THORChainSwap.Proto.ErrorCode code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::TW::THORChainSwap::Proto::ErrorCode Error::_internal_code() const {
  return static_cast< ::TW::THORChainSwap::Proto::ErrorCode >(code_);
}
inline ::TW::THORChainSwap::Proto::ErrorCode Error::code() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.Error.code)
  return _internal_code();
}
inline void Error::_internal_set_code(::TW::THORChainSwap::Proto::ErrorCode value) {
  
  code_ = value;
}
inline void Error::set_code(::TW::THORChainSwap::Proto::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.Error.code)
}

// string message = 2;
inline void Error::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.Error.message)
}
inline std::string* Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.Error.message)
  return _s;
}
inline const std::string& Error::_internal_message() const {
  return message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.Error.message)
}

// -------------------------------------------------------------------

// Asset

// .TW.THORChainSwap.Proto.Chain chain = 1;
inline void Asset::clear_chain() {
  chain_ = 0;
}
inline ::TW::THORChainSwap::Proto::Chain Asset::_internal_chain() const {
  return static_cast< ::TW::THORChainSwap::Proto::Chain >(chain_);
}
inline ::TW::THORChainSwap::Proto::Chain Asset::chain() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.Asset.chain)
  return _internal_chain();
}
inline void Asset::_internal_set_chain(::TW::THORChainSwap::Proto::Chain value) {
  
  chain_ = value;
}
inline void Asset::set_chain(::TW::THORChainSwap::Proto::Chain value) {
  _internal_set_chain(value);
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.Asset.chain)
}

// string symbol = 2;
inline void Asset::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Asset::symbol() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.Asset.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.Asset.symbol)
}
inline std::string* Asset::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.Asset.symbol)
  return _s;
}
inline const std::string& Asset::_internal_symbol() const {
  return symbol_.Get();
}
inline void Asset::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_symbol() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.Asset.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (symbol_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.Asset.symbol)
}

// string token_id = 3;
inline void Asset::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& Asset::token_id() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.Asset.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.Asset.token_id)
}
inline std::string* Asset::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.Asset.token_id)
  return _s;
}
inline const std::string& Asset::_internal_token_id() const {
  return token_id_.Get();
}
inline void Asset::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_token_id() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.Asset.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.Asset.token_id)
}

// -------------------------------------------------------------------

// StreamParams

// string interval = 1;
inline void StreamParams::clear_interval() {
  interval_.ClearToEmpty();
}
inline const std::string& StreamParams::interval() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.StreamParams.interval)
  return _internal_interval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamParams::set_interval(ArgT0&& arg0, ArgT... args) {
 
 interval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.StreamParams.interval)
}
inline std::string* StreamParams::mutable_interval() {
  std::string* _s = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.StreamParams.interval)
  return _s;
}
inline const std::string& StreamParams::_internal_interval() const {
  return interval_.Get();
}
inline void StreamParams::_internal_set_interval(const std::string& value) {
  
  interval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamParams::_internal_mutable_interval() {
  
  return interval_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamParams::release_interval() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.StreamParams.interval)
  return interval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamParams::set_allocated_interval(std::string* interval) {
  if (interval != nullptr) {
    
  } else {
    
  }
  interval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interval,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (interval_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.StreamParams.interval)
}

// string quantity = 2;
inline void StreamParams::clear_quantity() {
  quantity_.ClearToEmpty();
}
inline const std::string& StreamParams::quantity() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.StreamParams.quantity)
  return _internal_quantity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamParams::set_quantity(ArgT0&& arg0, ArgT... args) {
 
 quantity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.StreamParams.quantity)
}
inline std::string* StreamParams::mutable_quantity() {
  std::string* _s = _internal_mutable_quantity();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.StreamParams.quantity)
  return _s;
}
inline const std::string& StreamParams::_internal_quantity() const {
  return quantity_.Get();
}
inline void StreamParams::_internal_set_quantity(const std::string& value) {
  
  quantity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamParams::_internal_mutable_quantity() {
  
  return quantity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamParams::release_quantity() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.StreamParams.quantity)
  return quantity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamParams::set_allocated_quantity(std::string* quantity) {
  if (quantity != nullptr) {
    
  } else {
    
  }
  quantity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quantity,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (quantity_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    quantity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.StreamParams.quantity)
}

// -------------------------------------------------------------------

// SwapInput

// .TW.THORChainSwap.Proto.Asset from_asset = 1;
inline bool SwapInput::_internal_has_from_asset() const {
  return this != internal_default_instance() && from_asset_ != nullptr;
}
inline bool SwapInput::has_from_asset() const {
  return _internal_has_from_asset();
}
inline void SwapInput::clear_from_asset() {
  if (GetArenaForAllocation() == nullptr && from_asset_ != nullptr) {
    delete from_asset_;
  }
  from_asset_ = nullptr;
}
inline const ::TW::THORChainSwap::Proto::Asset& SwapInput::_internal_from_asset() const {
  const ::TW::THORChainSwap::Proto::Asset* p = from_asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::THORChainSwap::Proto::Asset&>(
      ::TW::THORChainSwap::Proto::_Asset_default_instance_);
}
inline const ::TW::THORChainSwap::Proto::Asset& SwapInput::from_asset() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.from_asset)
  return _internal_from_asset();
}
inline void SwapInput::unsafe_arena_set_allocated_from_asset(
    ::TW::THORChainSwap::Proto::Asset* from_asset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_asset_);
  }
  from_asset_ = from_asset;
  if (from_asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapInput.from_asset)
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::release_from_asset() {
  
  ::TW::THORChainSwap::Proto::Asset* temp = from_asset_;
  from_asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::unsafe_arena_release_from_asset() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.from_asset)
  
  ::TW::THORChainSwap::Proto::Asset* temp = from_asset_;
  from_asset_ = nullptr;
  return temp;
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::_internal_mutable_from_asset() {
  
  if (from_asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::THORChainSwap::Proto::Asset>(GetArenaForAllocation());
    from_asset_ = p;
  }
  return from_asset_;
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::mutable_from_asset() {
  ::TW::THORChainSwap::Proto::Asset* _msg = _internal_mutable_from_asset();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.from_asset)
  return _msg;
}
inline void SwapInput::set_allocated_from_asset(::TW::THORChainSwap::Proto::Asset* from_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete from_asset_;
  }
  if (from_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::THORChainSwap::Proto::Asset>::GetOwningArena(from_asset);
    if (message_arena != submessage_arena) {
      from_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_asset, submessage_arena);
    }
    
  } else {
    
  }
  from_asset_ = from_asset;
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.from_asset)
}

// string from_address = 2;
inline void SwapInput::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& SwapInput::from_address() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.from_address)
  return _internal_from_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_from_address(ArgT0&& arg0, ArgT... args) {
 
 from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.from_address)
}
inline std::string* SwapInput::mutable_from_address() {
  std::string* _s = _internal_mutable_from_address();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.from_address)
  return _s;
}
inline const std::string& SwapInput::_internal_from_address() const {
  return from_address_.Get();
}
inline void SwapInput::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.from_address)
}

// .TW.THORChainSwap.Proto.Asset to_asset = 3;
inline bool SwapInput::_internal_has_to_asset() const {
  return this != internal_default_instance() && to_asset_ != nullptr;
}
inline bool SwapInput::has_to_asset() const {
  return _internal_has_to_asset();
}
inline void SwapInput::clear_to_asset() {
  if (GetArenaForAllocation() == nullptr && to_asset_ != nullptr) {
    delete to_asset_;
  }
  to_asset_ = nullptr;
}
inline const ::TW::THORChainSwap::Proto::Asset& SwapInput::_internal_to_asset() const {
  const ::TW::THORChainSwap::Proto::Asset* p = to_asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::THORChainSwap::Proto::Asset&>(
      ::TW::THORChainSwap::Proto::_Asset_default_instance_);
}
inline const ::TW::THORChainSwap::Proto::Asset& SwapInput::to_asset() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.to_asset)
  return _internal_to_asset();
}
inline void SwapInput::unsafe_arena_set_allocated_to_asset(
    ::TW::THORChainSwap::Proto::Asset* to_asset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_asset_);
  }
  to_asset_ = to_asset;
  if (to_asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapInput.to_asset)
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::release_to_asset() {
  
  ::TW::THORChainSwap::Proto::Asset* temp = to_asset_;
  to_asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::unsafe_arena_release_to_asset() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.to_asset)
  
  ::TW::THORChainSwap::Proto::Asset* temp = to_asset_;
  to_asset_ = nullptr;
  return temp;
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::_internal_mutable_to_asset() {
  
  if (to_asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::THORChainSwap::Proto::Asset>(GetArenaForAllocation());
    to_asset_ = p;
  }
  return to_asset_;
}
inline ::TW::THORChainSwap::Proto::Asset* SwapInput::mutable_to_asset() {
  ::TW::THORChainSwap::Proto::Asset* _msg = _internal_mutable_to_asset();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.to_asset)
  return _msg;
}
inline void SwapInput::set_allocated_to_asset(::TW::THORChainSwap::Proto::Asset* to_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete to_asset_;
  }
  if (to_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::THORChainSwap::Proto::Asset>::GetOwningArena(to_asset);
    if (message_arena != submessage_arena) {
      to_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_asset, submessage_arena);
    }
    
  } else {
    
  }
  to_asset_ = to_asset;
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.to_asset)
}

// string to_address = 4;
inline void SwapInput::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& SwapInput::to_address() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.to_address)
}
inline std::string* SwapInput::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.to_address)
  return _s;
}
inline const std::string& SwapInput::_internal_to_address() const {
  return to_address_.Get();
}
inline void SwapInput::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.to_address)
}

// string vault_address = 5;
inline void SwapInput::clear_vault_address() {
  vault_address_.ClearToEmpty();
}
inline const std::string& SwapInput::vault_address() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.vault_address)
  return _internal_vault_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_vault_address(ArgT0&& arg0, ArgT... args) {
 
 vault_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.vault_address)
}
inline std::string* SwapInput::mutable_vault_address() {
  std::string* _s = _internal_mutable_vault_address();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.vault_address)
  return _s;
}
inline const std::string& SwapInput::_internal_vault_address() const {
  return vault_address_.Get();
}
inline void SwapInput::_internal_set_vault_address(const std::string& value) {
  
  vault_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_vault_address() {
  
  return vault_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_vault_address() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.vault_address)
  return vault_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_vault_address(std::string* vault_address) {
  if (vault_address != nullptr) {
    
  } else {
    
  }
  vault_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vault_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vault_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vault_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.vault_address)
}

// string router_address = 6;
inline void SwapInput::clear_router_address() {
  router_address_.ClearToEmpty();
}
inline const std::string& SwapInput::router_address() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.router_address)
  return _internal_router_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_router_address(ArgT0&& arg0, ArgT... args) {
 
 router_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.router_address)
}
inline std::string* SwapInput::mutable_router_address() {
  std::string* _s = _internal_mutable_router_address();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.router_address)
  return _s;
}
inline const std::string& SwapInput::_internal_router_address() const {
  return router_address_.Get();
}
inline void SwapInput::_internal_set_router_address(const std::string& value) {
  
  router_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_router_address() {
  
  return router_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_router_address() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.router_address)
  return router_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_router_address(std::string* router_address) {
  if (router_address != nullptr) {
    
  } else {
    
  }
  router_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), router_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (router_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    router_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.router_address)
}

// string from_amount = 7;
inline void SwapInput::clear_from_amount() {
  from_amount_.ClearToEmpty();
}
inline const std::string& SwapInput::from_amount() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.from_amount)
  return _internal_from_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_from_amount(ArgT0&& arg0, ArgT... args) {
 
 from_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.from_amount)
}
inline std::string* SwapInput::mutable_from_amount() {
  std::string* _s = _internal_mutable_from_amount();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.from_amount)
  return _s;
}
inline const std::string& SwapInput::_internal_from_amount() const {
  return from_amount_.Get();
}
inline void SwapInput::_internal_set_from_amount(const std::string& value) {
  
  from_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_from_amount() {
  
  return from_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_from_amount() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.from_amount)
  return from_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_from_amount(std::string* from_amount) {
  if (from_amount != nullptr) {
    
  } else {
    
  }
  from_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.from_amount)
}

// string to_amount_limit = 8;
inline void SwapInput::clear_to_amount_limit() {
  to_amount_limit_.ClearToEmpty();
}
inline const std::string& SwapInput::to_amount_limit() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.to_amount_limit)
  return _internal_to_amount_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_to_amount_limit(ArgT0&& arg0, ArgT... args) {
 
 to_amount_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.to_amount_limit)
}
inline std::string* SwapInput::mutable_to_amount_limit() {
  std::string* _s = _internal_mutable_to_amount_limit();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.to_amount_limit)
  return _s;
}
inline const std::string& SwapInput::_internal_to_amount_limit() const {
  return to_amount_limit_.Get();
}
inline void SwapInput::_internal_set_to_amount_limit(const std::string& value) {
  
  to_amount_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_to_amount_limit() {
  
  return to_amount_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_to_amount_limit() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.to_amount_limit)
  return to_amount_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_to_amount_limit(std::string* to_amount_limit) {
  if (to_amount_limit != nullptr) {
    
  } else {
    
  }
  to_amount_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_amount_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_amount_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_amount_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.to_amount_limit)
}

// string affiliate_fee_address = 9;
inline void SwapInput::clear_affiliate_fee_address() {
  affiliate_fee_address_.ClearToEmpty();
}
inline const std::string& SwapInput::affiliate_fee_address() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_address)
  return _internal_affiliate_fee_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_affiliate_fee_address(ArgT0&& arg0, ArgT... args) {
 
 affiliate_fee_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_address)
}
inline std::string* SwapInput::mutable_affiliate_fee_address() {
  std::string* _s = _internal_mutable_affiliate_fee_address();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_address)
  return _s;
}
inline const std::string& SwapInput::_internal_affiliate_fee_address() const {
  return affiliate_fee_address_.Get();
}
inline void SwapInput::_internal_set_affiliate_fee_address(const std::string& value) {
  
  affiliate_fee_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_affiliate_fee_address() {
  
  return affiliate_fee_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_affiliate_fee_address() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_address)
  return affiliate_fee_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_affiliate_fee_address(std::string* affiliate_fee_address) {
  if (affiliate_fee_address != nullptr) {
    
  } else {
    
  }
  affiliate_fee_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affiliate_fee_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (affiliate_fee_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    affiliate_fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_address)
}

// string affiliate_fee_rate_bp = 10;
inline void SwapInput::clear_affiliate_fee_rate_bp() {
  affiliate_fee_rate_bp_.ClearToEmpty();
}
inline const std::string& SwapInput::affiliate_fee_rate_bp() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_rate_bp)
  return _internal_affiliate_fee_rate_bp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_affiliate_fee_rate_bp(ArgT0&& arg0, ArgT... args) {
 
 affiliate_fee_rate_bp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_rate_bp)
}
inline std::string* SwapInput::mutable_affiliate_fee_rate_bp() {
  std::string* _s = _internal_mutable_affiliate_fee_rate_bp();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_rate_bp)
  return _s;
}
inline const std::string& SwapInput::_internal_affiliate_fee_rate_bp() const {
  return affiliate_fee_rate_bp_.Get();
}
inline void SwapInput::_internal_set_affiliate_fee_rate_bp(const std::string& value) {
  
  affiliate_fee_rate_bp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_affiliate_fee_rate_bp() {
  
  return affiliate_fee_rate_bp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_affiliate_fee_rate_bp() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_rate_bp)
  return affiliate_fee_rate_bp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_affiliate_fee_rate_bp(std::string* affiliate_fee_rate_bp) {
  if (affiliate_fee_rate_bp != nullptr) {
    
  } else {
    
  }
  affiliate_fee_rate_bp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affiliate_fee_rate_bp,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (affiliate_fee_rate_bp_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    affiliate_fee_rate_bp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.affiliate_fee_rate_bp)
}

// string extra_memo = 11;
inline void SwapInput::clear_extra_memo() {
  extra_memo_.ClearToEmpty();
}
inline const std::string& SwapInput::extra_memo() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.extra_memo)
  return _internal_extra_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapInput::set_extra_memo(ArgT0&& arg0, ArgT... args) {
 
 extra_memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.extra_memo)
}
inline std::string* SwapInput::mutable_extra_memo() {
  std::string* _s = _internal_mutable_extra_memo();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.extra_memo)
  return _s;
}
inline const std::string& SwapInput::_internal_extra_memo() const {
  return extra_memo_.Get();
}
inline void SwapInput::_internal_set_extra_memo(const std::string& value) {
  
  extra_memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapInput::_internal_mutable_extra_memo() {
  
  return extra_memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapInput::release_extra_memo() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.extra_memo)
  return extra_memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapInput::set_allocated_extra_memo(std::string* extra_memo) {
  if (extra_memo != nullptr) {
    
  } else {
    
  }
  extra_memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extra_memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    extra_memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.extra_memo)
}

// uint64 expiration_time = 12;
inline void SwapInput::clear_expiration_time() {
  expiration_time_ = uint64_t{0u};
}
inline uint64_t SwapInput::_internal_expiration_time() const {
  return expiration_time_;
}
inline uint64_t SwapInput::expiration_time() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.expiration_time)
  return _internal_expiration_time();
}
inline void SwapInput::_internal_set_expiration_time(uint64_t value) {
  
  expiration_time_ = value;
}
inline void SwapInput::set_expiration_time(uint64_t value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapInput.expiration_time)
}

// .TW.THORChainSwap.Proto.StreamParams stream_params = 13;
inline bool SwapInput::_internal_has_stream_params() const {
  return this != internal_default_instance() && stream_params_ != nullptr;
}
inline bool SwapInput::has_stream_params() const {
  return _internal_has_stream_params();
}
inline void SwapInput::clear_stream_params() {
  if (GetArenaForAllocation() == nullptr && stream_params_ != nullptr) {
    delete stream_params_;
  }
  stream_params_ = nullptr;
}
inline const ::TW::THORChainSwap::Proto::StreamParams& SwapInput::_internal_stream_params() const {
  const ::TW::THORChainSwap::Proto::StreamParams* p = stream_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::THORChainSwap::Proto::StreamParams&>(
      ::TW::THORChainSwap::Proto::_StreamParams_default_instance_);
}
inline const ::TW::THORChainSwap::Proto::StreamParams& SwapInput::stream_params() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapInput.stream_params)
  return _internal_stream_params();
}
inline void SwapInput::unsafe_arena_set_allocated_stream_params(
    ::TW::THORChainSwap::Proto::StreamParams* stream_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_params_);
  }
  stream_params_ = stream_params;
  if (stream_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapInput.stream_params)
}
inline ::TW::THORChainSwap::Proto::StreamParams* SwapInput::release_stream_params() {
  
  ::TW::THORChainSwap::Proto::StreamParams* temp = stream_params_;
  stream_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::THORChainSwap::Proto::StreamParams* SwapInput::unsafe_arena_release_stream_params() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapInput.stream_params)
  
  ::TW::THORChainSwap::Proto::StreamParams* temp = stream_params_;
  stream_params_ = nullptr;
  return temp;
}
inline ::TW::THORChainSwap::Proto::StreamParams* SwapInput::_internal_mutable_stream_params() {
  
  if (stream_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::THORChainSwap::Proto::StreamParams>(GetArenaForAllocation());
    stream_params_ = p;
  }
  return stream_params_;
}
inline ::TW::THORChainSwap::Proto::StreamParams* SwapInput::mutable_stream_params() {
  ::TW::THORChainSwap::Proto::StreamParams* _msg = _internal_mutable_stream_params();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapInput.stream_params)
  return _msg;
}
inline void SwapInput::set_allocated_stream_params(::TW::THORChainSwap::Proto::StreamParams* stream_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stream_params_;
  }
  if (stream_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::THORChainSwap::Proto::StreamParams>::GetOwningArena(stream_params);
    if (message_arena != submessage_arena) {
      stream_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_params, submessage_arena);
    }
    
  } else {
    
  }
  stream_params_ = stream_params;
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapInput.stream_params)
}

// -------------------------------------------------------------------

// SwapOutput

// .TW.THORChainSwap.Proto.Chain from_chain = 1;
inline void SwapOutput::clear_from_chain() {
  from_chain_ = 0;
}
inline ::TW::THORChainSwap::Proto::Chain SwapOutput::_internal_from_chain() const {
  return static_cast< ::TW::THORChainSwap::Proto::Chain >(from_chain_);
}
inline ::TW::THORChainSwap::Proto::Chain SwapOutput::from_chain() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapOutput.from_chain)
  return _internal_from_chain();
}
inline void SwapOutput::_internal_set_from_chain(::TW::THORChainSwap::Proto::Chain value) {
  
  from_chain_ = value;
}
inline void SwapOutput::set_from_chain(::TW::THORChainSwap::Proto::Chain value) {
  _internal_set_from_chain(value);
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapOutput.from_chain)
}

// .TW.THORChainSwap.Proto.Chain to_chain = 2;
inline void SwapOutput::clear_to_chain() {
  to_chain_ = 0;
}
inline ::TW::THORChainSwap::Proto::Chain SwapOutput::_internal_to_chain() const {
  return static_cast< ::TW::THORChainSwap::Proto::Chain >(to_chain_);
}
inline ::TW::THORChainSwap::Proto::Chain SwapOutput::to_chain() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapOutput.to_chain)
  return _internal_to_chain();
}
inline void SwapOutput::_internal_set_to_chain(::TW::THORChainSwap::Proto::Chain value) {
  
  to_chain_ = value;
}
inline void SwapOutput::set_to_chain(::TW::THORChainSwap::Proto::Chain value) {
  _internal_set_to_chain(value);
  // @@protoc_insertion_point(field_set:TW.THORChainSwap.Proto.SwapOutput.to_chain)
}

// .TW.THORChainSwap.Proto.Error error = 3;
inline bool SwapOutput::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool SwapOutput::has_error() const {
  return _internal_has_error();
}
inline void SwapOutput::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::TW::THORChainSwap::Proto::Error& SwapOutput::_internal_error() const {
  const ::TW::THORChainSwap::Proto::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::THORChainSwap::Proto::Error&>(
      ::TW::THORChainSwap::Proto::_Error_default_instance_);
}
inline const ::TW::THORChainSwap::Proto::Error& SwapOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapOutput.error)
  return _internal_error();
}
inline void SwapOutput::unsafe_arena_set_allocated_error(
    ::TW::THORChainSwap::Proto::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapOutput.error)
}
inline ::TW::THORChainSwap::Proto::Error* SwapOutput::release_error() {
  
  ::TW::THORChainSwap::Proto::Error* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::THORChainSwap::Proto::Error* SwapOutput::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapOutput.error)
  
  ::TW::THORChainSwap::Proto::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::TW::THORChainSwap::Proto::Error* SwapOutput::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::THORChainSwap::Proto::Error>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::TW::THORChainSwap::Proto::Error* SwapOutput::mutable_error() {
  ::TW::THORChainSwap::Proto::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapOutput.error)
  return _msg;
}
inline void SwapOutput::set_allocated_error(::TW::THORChainSwap::Proto::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::THORChainSwap::Proto::Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.error)
}

// .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
inline bool SwapOutput::_internal_has_bitcoin() const {
  return signing_input_oneof_case() == kBitcoin;
}
inline bool SwapOutput::has_bitcoin() const {
  return _internal_has_bitcoin();
}
inline void SwapOutput::set_has_bitcoin() {
  _oneof_case_[0] = kBitcoin;
}
inline ::TW::Bitcoin::Proto::SigningInput* SwapOutput::release_bitcoin() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapOutput.bitcoin)
  if (_internal_has_bitcoin()) {
    clear_has_signing_input_oneof();
      ::TW::Bitcoin::Proto::SigningInput* temp = signing_input_oneof_.bitcoin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    signing_input_oneof_.bitcoin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Bitcoin::Proto::SigningInput& SwapOutput::_internal_bitcoin() const {
  return _internal_has_bitcoin()
      ? *signing_input_oneof_.bitcoin_
      : reinterpret_cast< ::TW::Bitcoin::Proto::SigningInput&>(::TW::Bitcoin::Proto::_SigningInput_default_instance_);
}
inline const ::TW::Bitcoin::Proto::SigningInput& SwapOutput::bitcoin() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapOutput.bitcoin)
  return _internal_bitcoin();
}
inline ::TW::Bitcoin::Proto::SigningInput* SwapOutput::unsafe_arena_release_bitcoin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.THORChainSwap.Proto.SwapOutput.bitcoin)
  if (_internal_has_bitcoin()) {
    clear_has_signing_input_oneof();
    ::TW::Bitcoin::Proto::SigningInput* temp = signing_input_oneof_.bitcoin_;
    signing_input_oneof_.bitcoin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SwapOutput::unsafe_arena_set_allocated_bitcoin(::TW::Bitcoin::Proto::SigningInput* bitcoin) {
  clear_signing_input_oneof();
  if (bitcoin) {
    set_has_bitcoin();
    signing_input_oneof_.bitcoin_ = bitcoin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapOutput.bitcoin)
}
inline ::TW::Bitcoin::Proto::SigningInput* SwapOutput::_internal_mutable_bitcoin() {
  if (!_internal_has_bitcoin()) {
    clear_signing_input_oneof();
    set_has_bitcoin();
    signing_input_oneof_.bitcoin_ = CreateMaybeMessage< ::TW::Bitcoin::Proto::SigningInput >(GetArenaForAllocation());
  }
  return signing_input_oneof_.bitcoin_;
}
inline ::TW::Bitcoin::Proto::SigningInput* SwapOutput::mutable_bitcoin() {
  ::TW::Bitcoin::Proto::SigningInput* _msg = _internal_mutable_bitcoin();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapOutput.bitcoin)
  return _msg;
}

// .TW.Ethereum.Proto.SigningInput ethereum = 5;
inline bool SwapOutput::_internal_has_ethereum() const {
  return signing_input_oneof_case() == kEthereum;
}
inline bool SwapOutput::has_ethereum() const {
  return _internal_has_ethereum();
}
inline void SwapOutput::set_has_ethereum() {
  _oneof_case_[0] = kEthereum;
}
inline ::TW::Ethereum::Proto::SigningInput* SwapOutput::release_ethereum() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapOutput.ethereum)
  if (_internal_has_ethereum()) {
    clear_has_signing_input_oneof();
      ::TW::Ethereum::Proto::SigningInput* temp = signing_input_oneof_.ethereum_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    signing_input_oneof_.ethereum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::SigningInput& SwapOutput::_internal_ethereum() const {
  return _internal_has_ethereum()
      ? *signing_input_oneof_.ethereum_
      : reinterpret_cast< ::TW::Ethereum::Proto::SigningInput&>(::TW::Ethereum::Proto::_SigningInput_default_instance_);
}
inline const ::TW::Ethereum::Proto::SigningInput& SwapOutput::ethereum() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapOutput.ethereum)
  return _internal_ethereum();
}
inline ::TW::Ethereum::Proto::SigningInput* SwapOutput::unsafe_arena_release_ethereum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.THORChainSwap.Proto.SwapOutput.ethereum)
  if (_internal_has_ethereum()) {
    clear_has_signing_input_oneof();
    ::TW::Ethereum::Proto::SigningInput* temp = signing_input_oneof_.ethereum_;
    signing_input_oneof_.ethereum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SwapOutput::unsafe_arena_set_allocated_ethereum(::TW::Ethereum::Proto::SigningInput* ethereum) {
  clear_signing_input_oneof();
  if (ethereum) {
    set_has_ethereum();
    signing_input_oneof_.ethereum_ = ethereum;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapOutput.ethereum)
}
inline ::TW::Ethereum::Proto::SigningInput* SwapOutput::_internal_mutable_ethereum() {
  if (!_internal_has_ethereum()) {
    clear_signing_input_oneof();
    set_has_ethereum();
    signing_input_oneof_.ethereum_ = CreateMaybeMessage< ::TW::Ethereum::Proto::SigningInput >(GetArenaForAllocation());
  }
  return signing_input_oneof_.ethereum_;
}
inline ::TW::Ethereum::Proto::SigningInput* SwapOutput::mutable_ethereum() {
  ::TW::Ethereum::Proto::SigningInput* _msg = _internal_mutable_ethereum();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapOutput.ethereum)
  return _msg;
}

// .TW.Binance.Proto.SigningInput binance = 6;
inline bool SwapOutput::_internal_has_binance() const {
  return signing_input_oneof_case() == kBinance;
}
inline bool SwapOutput::has_binance() const {
  return _internal_has_binance();
}
inline void SwapOutput::set_has_binance() {
  _oneof_case_[0] = kBinance;
}
inline ::TW::Binance::Proto::SigningInput* SwapOutput::release_binance() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapOutput.binance)
  if (_internal_has_binance()) {
    clear_has_signing_input_oneof();
      ::TW::Binance::Proto::SigningInput* temp = signing_input_oneof_.binance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    signing_input_oneof_.binance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Binance::Proto::SigningInput& SwapOutput::_internal_binance() const {
  return _internal_has_binance()
      ? *signing_input_oneof_.binance_
      : reinterpret_cast< ::TW::Binance::Proto::SigningInput&>(::TW::Binance::Proto::_SigningInput_default_instance_);
}
inline const ::TW::Binance::Proto::SigningInput& SwapOutput::binance() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapOutput.binance)
  return _internal_binance();
}
inline ::TW::Binance::Proto::SigningInput* SwapOutput::unsafe_arena_release_binance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.THORChainSwap.Proto.SwapOutput.binance)
  if (_internal_has_binance()) {
    clear_has_signing_input_oneof();
    ::TW::Binance::Proto::SigningInput* temp = signing_input_oneof_.binance_;
    signing_input_oneof_.binance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SwapOutput::unsafe_arena_set_allocated_binance(::TW::Binance::Proto::SigningInput* binance) {
  clear_signing_input_oneof();
  if (binance) {
    set_has_binance();
    signing_input_oneof_.binance_ = binance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapOutput.binance)
}
inline ::TW::Binance::Proto::SigningInput* SwapOutput::_internal_mutable_binance() {
  if (!_internal_has_binance()) {
    clear_signing_input_oneof();
    set_has_binance();
    signing_input_oneof_.binance_ = CreateMaybeMessage< ::TW::Binance::Proto::SigningInput >(GetArenaForAllocation());
  }
  return signing_input_oneof_.binance_;
}
inline ::TW::Binance::Proto::SigningInput* SwapOutput::mutable_binance() {
  ::TW::Binance::Proto::SigningInput* _msg = _internal_mutable_binance();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapOutput.binance)
  return _msg;
}

// .TW.Cosmos.Proto.SigningInput cosmos = 7;
inline bool SwapOutput::_internal_has_cosmos() const {
  return signing_input_oneof_case() == kCosmos;
}
inline bool SwapOutput::has_cosmos() const {
  return _internal_has_cosmos();
}
inline void SwapOutput::set_has_cosmos() {
  _oneof_case_[0] = kCosmos;
}
inline ::TW::Cosmos::Proto::SigningInput* SwapOutput::release_cosmos() {
  // @@protoc_insertion_point(field_release:TW.THORChainSwap.Proto.SwapOutput.cosmos)
  if (_internal_has_cosmos()) {
    clear_has_signing_input_oneof();
      ::TW::Cosmos::Proto::SigningInput* temp = signing_input_oneof_.cosmos_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    signing_input_oneof_.cosmos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::SigningInput& SwapOutput::_internal_cosmos() const {
  return _internal_has_cosmos()
      ? *signing_input_oneof_.cosmos_
      : reinterpret_cast< ::TW::Cosmos::Proto::SigningInput&>(::TW::Cosmos::Proto::_SigningInput_default_instance_);
}
inline const ::TW::Cosmos::Proto::SigningInput& SwapOutput::cosmos() const {
  // @@protoc_insertion_point(field_get:TW.THORChainSwap.Proto.SwapOutput.cosmos)
  return _internal_cosmos();
}
inline ::TW::Cosmos::Proto::SigningInput* SwapOutput::unsafe_arena_release_cosmos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.THORChainSwap.Proto.SwapOutput.cosmos)
  if (_internal_has_cosmos()) {
    clear_has_signing_input_oneof();
    ::TW::Cosmos::Proto::SigningInput* temp = signing_input_oneof_.cosmos_;
    signing_input_oneof_.cosmos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SwapOutput::unsafe_arena_set_allocated_cosmos(::TW::Cosmos::Proto::SigningInput* cosmos) {
  clear_signing_input_oneof();
  if (cosmos) {
    set_has_cosmos();
    signing_input_oneof_.cosmos_ = cosmos;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.THORChainSwap.Proto.SwapOutput.cosmos)
}
inline ::TW::Cosmos::Proto::SigningInput* SwapOutput::_internal_mutable_cosmos() {
  if (!_internal_has_cosmos()) {
    clear_signing_input_oneof();
    set_has_cosmos();
    signing_input_oneof_.cosmos_ = CreateMaybeMessage< ::TW::Cosmos::Proto::SigningInput >(GetArenaForAllocation());
  }
  return signing_input_oneof_.cosmos_;
}
inline ::TW::Cosmos::Proto::SigningInput* SwapOutput::mutable_cosmos() {
  ::TW::Cosmos::Proto::SigningInput* _msg = _internal_mutable_cosmos();
  // @@protoc_insertion_point(field_mutable:TW.THORChainSwap.Proto.SwapOutput.cosmos)
  return _msg;
}

inline bool SwapOutput::has_signing_input_oneof() const {
  return signing_input_oneof_case() != SIGNING_INPUT_ONEOF_NOT_SET;
}
inline void SwapOutput::clear_has_signing_input_oneof() {
  _oneof_case_[0] = SIGNING_INPUT_ONEOF_NOT_SET;
}
inline SwapOutput::SigningInputOneofCase SwapOutput::signing_input_oneof_case() const {
  return SwapOutput::SigningInputOneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace THORChainSwap
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::THORChainSwap::Proto::Chain> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::THORChainSwap::Proto::Chain>() {
  return ::TW::THORChainSwap::Proto::Chain_descriptor();
}
template <> struct is_proto_enum< ::TW::THORChainSwap::Proto::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::THORChainSwap::Proto::ErrorCode>() {
  return ::TW::THORChainSwap::Proto::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_THORChainSwap_2eproto
