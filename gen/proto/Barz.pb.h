// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Barz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Barz_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Barz_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Barz_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Barz_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Barz_2eproto;
namespace TW {
namespace Barz {
namespace Proto {
class ContractAddressInput;
struct ContractAddressInputDefaultTypeInternal;
extern ContractAddressInputDefaultTypeInternal _ContractAddressInput_default_instance_;
}  // namespace Proto
}  // namespace Barz
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Barz::Proto::ContractAddressInput* Arena::CreateMaybeMessage<::TW::Barz::Proto::ContractAddressInput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Barz {
namespace Proto {

// ===================================================================

class ContractAddressInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Barz.Proto.ContractAddressInput) */ {
 public:
  inline ContractAddressInput() : ContractAddressInput(nullptr) {}
  ~ContractAddressInput() override;
  explicit constexpr ContractAddressInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractAddressInput(const ContractAddressInput& from);
  ContractAddressInput(ContractAddressInput&& from) noexcept
    : ContractAddressInput() {
    *this = ::std::move(from);
  }

  inline ContractAddressInput& operator=(const ContractAddressInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractAddressInput& operator=(ContractAddressInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractAddressInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractAddressInput* internal_default_instance() {
    return reinterpret_cast<const ContractAddressInput*>(
               &_ContractAddressInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractAddressInput& a, ContractAddressInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractAddressInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractAddressInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractAddressInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractAddressInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractAddressInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContractAddressInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractAddressInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Barz.Proto.ContractAddressInput";
  }
  protected:
  explicit ContractAddressInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryPointFieldNumber = 1,
    kFactoryFieldNumber = 2,
    kAccountFacetFieldNumber = 3,
    kVerificationFacetFieldNumber = 4,
    kFacetRegistryFieldNumber = 5,
    kDefaultFallbackFieldNumber = 6,
    kBytecodeFieldNumber = 7,
    kPublicKeyFieldNumber = 8,
    kSaltFieldNumber = 9,
  };
  // string entry_point = 1;
  void clear_entry_point();
  const std::string& entry_point() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entry_point(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entry_point();
  PROTOBUF_NODISCARD std::string* release_entry_point();
  void set_allocated_entry_point(std::string* entry_point);
  private:
  const std::string& _internal_entry_point() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry_point(const std::string& value);
  std::string* _internal_mutable_entry_point();
  public:

  // string factory = 2;
  void clear_factory();
  const std::string& factory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_factory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_factory();
  PROTOBUF_NODISCARD std::string* release_factory();
  void set_allocated_factory(std::string* factory);
  private:
  const std::string& _internal_factory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_factory(const std::string& value);
  std::string* _internal_mutable_factory();
  public:

  // string account_facet = 3;
  void clear_account_facet();
  const std::string& account_facet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_facet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_facet();
  PROTOBUF_NODISCARD std::string* release_account_facet();
  void set_allocated_account_facet(std::string* account_facet);
  private:
  const std::string& _internal_account_facet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_facet(const std::string& value);
  std::string* _internal_mutable_account_facet();
  public:

  // string verification_facet = 4;
  void clear_verification_facet();
  const std::string& verification_facet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verification_facet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verification_facet();
  PROTOBUF_NODISCARD std::string* release_verification_facet();
  void set_allocated_verification_facet(std::string* verification_facet);
  private:
  const std::string& _internal_verification_facet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_facet(const std::string& value);
  std::string* _internal_mutable_verification_facet();
  public:

  // string facet_registry = 5;
  void clear_facet_registry();
  const std::string& facet_registry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_facet_registry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_facet_registry();
  PROTOBUF_NODISCARD std::string* release_facet_registry();
  void set_allocated_facet_registry(std::string* facet_registry);
  private:
  const std::string& _internal_facet_registry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_facet_registry(const std::string& value);
  std::string* _internal_mutable_facet_registry();
  public:

  // string default_fallback = 6;
  void clear_default_fallback();
  const std::string& default_fallback() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_fallback(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_fallback();
  PROTOBUF_NODISCARD std::string* release_default_fallback();
  void set_allocated_default_fallback(std::string* default_fallback);
  private:
  const std::string& _internal_default_fallback() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_fallback(const std::string& value);
  std::string* _internal_mutable_default_fallback();
  public:

  // string bytecode = 7;
  void clear_bytecode();
  const std::string& bytecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytecode();
  PROTOBUF_NODISCARD std::string* release_bytecode();
  void set_allocated_bytecode(std::string* bytecode);
  private:
  const std::string& _internal_bytecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytecode(const std::string& value);
  std::string* _internal_mutable_bytecode();
  public:

  // string public_key = 8;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint32 salt = 9;
  void clear_salt();
  uint32_t salt() const;
  void set_salt(uint32_t value);
  private:
  uint32_t _internal_salt() const;
  void _internal_set_salt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Barz.Proto.ContractAddressInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr factory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_facet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_facet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facet_registry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_fallback_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  uint32_t salt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Barz_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractAddressInput

// string entry_point = 1;
inline void ContractAddressInput::clear_entry_point() {
  entry_point_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::entry_point() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.entry_point)
  return _internal_entry_point();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_entry_point(ArgT0&& arg0, ArgT... args) {
 
 entry_point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.entry_point)
}
inline std::string* ContractAddressInput::mutable_entry_point() {
  std::string* _s = _internal_mutable_entry_point();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.entry_point)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_entry_point() const {
  return entry_point_.Get();
}
inline void ContractAddressInput::_internal_set_entry_point(const std::string& value) {
  
  entry_point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_entry_point() {
  
  return entry_point_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_entry_point() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.entry_point)
  return entry_point_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_entry_point(std::string* entry_point) {
  if (entry_point != nullptr) {
    
  } else {
    
  }
  entry_point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry_point,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (entry_point_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    entry_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.entry_point)
}

// string factory = 2;
inline void ContractAddressInput::clear_factory() {
  factory_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::factory() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.factory)
  return _internal_factory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_factory(ArgT0&& arg0, ArgT... args) {
 
 factory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.factory)
}
inline std::string* ContractAddressInput::mutable_factory() {
  std::string* _s = _internal_mutable_factory();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.factory)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_factory() const {
  return factory_.Get();
}
inline void ContractAddressInput::_internal_set_factory(const std::string& value) {
  
  factory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_factory() {
  
  return factory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_factory() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.factory)
  return factory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_factory(std::string* factory) {
  if (factory != nullptr) {
    
  } else {
    
  }
  factory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), factory,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (factory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    factory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.factory)
}

// string account_facet = 3;
inline void ContractAddressInput::clear_account_facet() {
  account_facet_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::account_facet() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.account_facet)
  return _internal_account_facet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_account_facet(ArgT0&& arg0, ArgT... args) {
 
 account_facet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.account_facet)
}
inline std::string* ContractAddressInput::mutable_account_facet() {
  std::string* _s = _internal_mutable_account_facet();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.account_facet)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_account_facet() const {
  return account_facet_.Get();
}
inline void ContractAddressInput::_internal_set_account_facet(const std::string& value) {
  
  account_facet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_account_facet() {
  
  return account_facet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_account_facet() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.account_facet)
  return account_facet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_account_facet(std::string* account_facet) {
  if (account_facet != nullptr) {
    
  } else {
    
  }
  account_facet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_facet,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_facet_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_facet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.account_facet)
}

// string verification_facet = 4;
inline void ContractAddressInput::clear_verification_facet() {
  verification_facet_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::verification_facet() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.verification_facet)
  return _internal_verification_facet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_verification_facet(ArgT0&& arg0, ArgT... args) {
 
 verification_facet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.verification_facet)
}
inline std::string* ContractAddressInput::mutable_verification_facet() {
  std::string* _s = _internal_mutable_verification_facet();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.verification_facet)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_verification_facet() const {
  return verification_facet_.Get();
}
inline void ContractAddressInput::_internal_set_verification_facet(const std::string& value) {
  
  verification_facet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_verification_facet() {
  
  return verification_facet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_verification_facet() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.verification_facet)
  return verification_facet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_verification_facet(std::string* verification_facet) {
  if (verification_facet != nullptr) {
    
  } else {
    
  }
  verification_facet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification_facet,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_facet_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_facet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.verification_facet)
}

// string facet_registry = 5;
inline void ContractAddressInput::clear_facet_registry() {
  facet_registry_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::facet_registry() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.facet_registry)
  return _internal_facet_registry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_facet_registry(ArgT0&& arg0, ArgT... args) {
 
 facet_registry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.facet_registry)
}
inline std::string* ContractAddressInput::mutable_facet_registry() {
  std::string* _s = _internal_mutable_facet_registry();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.facet_registry)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_facet_registry() const {
  return facet_registry_.Get();
}
inline void ContractAddressInput::_internal_set_facet_registry(const std::string& value) {
  
  facet_registry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_facet_registry() {
  
  return facet_registry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_facet_registry() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.facet_registry)
  return facet_registry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_facet_registry(std::string* facet_registry) {
  if (facet_registry != nullptr) {
    
  } else {
    
  }
  facet_registry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facet_registry,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (facet_registry_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    facet_registry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.facet_registry)
}

// string default_fallback = 6;
inline void ContractAddressInput::clear_default_fallback() {
  default_fallback_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::default_fallback() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.default_fallback)
  return _internal_default_fallback();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_default_fallback(ArgT0&& arg0, ArgT... args) {
 
 default_fallback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.default_fallback)
}
inline std::string* ContractAddressInput::mutable_default_fallback() {
  std::string* _s = _internal_mutable_default_fallback();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.default_fallback)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_default_fallback() const {
  return default_fallback_.Get();
}
inline void ContractAddressInput::_internal_set_default_fallback(const std::string& value) {
  
  default_fallback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_default_fallback() {
  
  return default_fallback_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_default_fallback() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.default_fallback)
  return default_fallback_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_default_fallback(std::string* default_fallback) {
  if (default_fallback != nullptr) {
    
  } else {
    
  }
  default_fallback_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_fallback,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_fallback_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    default_fallback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.default_fallback)
}

// string bytecode = 7;
inline void ContractAddressInput::clear_bytecode() {
  bytecode_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::bytecode() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.bytecode)
  return _internal_bytecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_bytecode(ArgT0&& arg0, ArgT... args) {
 
 bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.bytecode)
}
inline std::string* ContractAddressInput::mutable_bytecode() {
  std::string* _s = _internal_mutable_bytecode();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.bytecode)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_bytecode() const {
  return bytecode_.Get();
}
inline void ContractAddressInput::_internal_set_bytecode(const std::string& value) {
  
  bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_bytecode() {
  
  return bytecode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_bytecode() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.bytecode)
  return bytecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_bytecode(std::string* bytecode) {
  if (bytecode != nullptr) {
    
  } else {
    
  }
  bytecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytecode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytecode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bytecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.bytecode)
}

// string public_key = 8;
inline void ContractAddressInput::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& ContractAddressInput::public_key() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractAddressInput::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.public_key)
}
inline std::string* ContractAddressInput::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.Barz.Proto.ContractAddressInput.public_key)
  return _s;
}
inline const std::string& ContractAddressInput::_internal_public_key() const {
  return public_key_.Get();
}
inline void ContractAddressInput::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractAddressInput::release_public_key() {
  // @@protoc_insertion_point(field_release:TW.Barz.Proto.ContractAddressInput.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractAddressInput::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Barz.Proto.ContractAddressInput.public_key)
}

// uint32 salt = 9;
inline void ContractAddressInput::clear_salt() {
  salt_ = 0u;
}
inline uint32_t ContractAddressInput::_internal_salt() const {
  return salt_;
}
inline uint32_t ContractAddressInput::salt() const {
  // @@protoc_insertion_point(field_get:TW.Barz.Proto.ContractAddressInput.salt)
  return _internal_salt();
}
inline void ContractAddressInput::_internal_set_salt(uint32_t value) {
  
  salt_ = value;
}
inline void ContractAddressInput::set_salt(uint32_t value) {
  _internal_set_salt(value);
  // @@protoc_insertion_point(field_set:TW.Barz.Proto.ContractAddressInput.salt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Barz
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Barz_2eproto
