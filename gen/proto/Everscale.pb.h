// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Everscale.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Everscale_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Everscale_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Everscale_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Everscale_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Everscale_2eproto;
namespace TW {
namespace Everscale {
namespace Proto {
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transfer;
struct TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace Proto
}  // namespace Everscale
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Everscale::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Everscale::Proto::SigningInput>(Arena*);
template<> ::TW::Everscale::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Everscale::Proto::SigningOutput>(Arena*);
template<> ::TW::Everscale::Proto::Transfer* Arena::CreateMaybeMessage<::TW::Everscale::Proto::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Everscale {
namespace Proto {

enum MessageBehavior : int {
  SimpleTransfer = 0,
  SendAllBalance = 1,
  MessageBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageBehavior_IsValid(int value);
constexpr MessageBehavior MessageBehavior_MIN = SimpleTransfer;
constexpr MessageBehavior MessageBehavior_MAX = SendAllBalance;
constexpr int MessageBehavior_ARRAYSIZE = MessageBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageBehavior_descriptor();
template<typename T>
inline const std::string& MessageBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageBehavior_descriptor(), enum_t_value);
}
inline bool MessageBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageBehavior>(
    MessageBehavior_descriptor(), name, value);
}
// ===================================================================

class Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Everscale.Proto.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  ~Transfer() override;
  explicit constexpr Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transfer& default_instance() {
    return *internal_default_instance();
  }
  enum AccountStateOneofCase {
    kEncodedContractData = 6,
    ACCOUNT_STATE_ONEOF_NOT_SET = 0,
  };

  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Everscale.Proto.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 5,
    kBounceFieldNumber = 1,
    kBehaviorFieldNumber = 2,
    kAmountFieldNumber = 3,
    kExpiredAtFieldNumber = 4,
    kEncodedContractDataFieldNumber = 6,
  };
  // string to = 5;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bool bounce = 1;
  void clear_bounce();
  bool bounce() const;
  void set_bounce(bool value);
  private:
  bool _internal_bounce() const;
  void _internal_set_bounce(bool value);
  public:

  // .TW.Everscale.Proto.MessageBehavior behavior = 2;
  void clear_behavior();
  ::TW::Everscale::Proto::MessageBehavior behavior() const;
  void set_behavior(::TW::Everscale::Proto::MessageBehavior value);
  private:
  ::TW::Everscale::Proto::MessageBehavior _internal_behavior() const;
  void _internal_set_behavior(::TW::Everscale::Proto::MessageBehavior value);
  public:

  // uint64 amount = 3;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // uint32 expired_at = 4;
  void clear_expired_at();
  uint32_t expired_at() const;
  void set_expired_at(uint32_t value);
  private:
  uint32_t _internal_expired_at() const;
  void _internal_set_expired_at(uint32_t value);
  public:

  // string encoded_contract_data = 6;
  bool has_encoded_contract_data() const;
  private:
  bool _internal_has_encoded_contract_data() const;
  public:
  void clear_encoded_contract_data();
  const std::string& encoded_contract_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded_contract_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded_contract_data();
  PROTOBUF_NODISCARD std::string* release_encoded_contract_data();
  void set_allocated_encoded_contract_data(std::string* encoded_contract_data);
  private:
  const std::string& _internal_encoded_contract_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_contract_data(const std::string& value);
  std::string* _internal_mutable_encoded_contract_data();
  public:

  void clear_account_state_oneof();
  AccountStateOneofCase account_state_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Everscale.Proto.Transfer)
 private:
  class _Internal;
  void set_has_encoded_contract_data();

  inline bool has_account_state_oneof() const;
  inline void clear_has_account_state_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  bool bounce_;
  int behavior_;
  uint64_t amount_;
  uint32_t expired_at_;
  union AccountStateOneofUnion {
    constexpr AccountStateOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_contract_data_;
  } account_state_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Everscale_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Everscale.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum ActionOneofCase {
    kTransfer = 1,
    ACTION_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Everscale.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 2,
    kTransferFieldNumber = 1,
  };
  // bytes private_key = 2;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Everscale.Proto.Transfer transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Everscale::Proto::Transfer& transfer() const;
  PROTOBUF_NODISCARD ::TW::Everscale::Proto::Transfer* release_transfer();
  ::TW::Everscale::Proto::Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::Everscale::Proto::Transfer* transfer);
  private:
  const ::TW::Everscale::Proto::Transfer& _internal_transfer() const;
  ::TW::Everscale::Proto::Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Everscale::Proto::Transfer* transfer);
  ::TW::Everscale::Proto::Transfer* unsafe_arena_release_transfer();

  void clear_action_oneof();
  ActionOneofCase action_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Everscale.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer();

  inline bool has_action_oneof() const;
  inline void clear_has_action_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  union ActionOneofUnion {
    constexpr ActionOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Everscale::Proto::Transfer* transfer_;
  } action_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Everscale_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Everscale.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Everscale.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // string encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // @@protoc_insertion_point(class_scope:TW.Everscale.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Everscale_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// bool bounce = 1;
inline void Transfer::clear_bounce() {
  bounce_ = false;
}
inline bool Transfer::_internal_bounce() const {
  return bounce_;
}
inline bool Transfer::bounce() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.Transfer.bounce)
  return _internal_bounce();
}
inline void Transfer::_internal_set_bounce(bool value) {
  
  bounce_ = value;
}
inline void Transfer::set_bounce(bool value) {
  _internal_set_bounce(value);
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.Transfer.bounce)
}

// .TW.Everscale.Proto.MessageBehavior behavior = 2;
inline void Transfer::clear_behavior() {
  behavior_ = 0;
}
inline ::TW::Everscale::Proto::MessageBehavior Transfer::_internal_behavior() const {
  return static_cast< ::TW::Everscale::Proto::MessageBehavior >(behavior_);
}
inline ::TW::Everscale::Proto::MessageBehavior Transfer::behavior() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.Transfer.behavior)
  return _internal_behavior();
}
inline void Transfer::_internal_set_behavior(::TW::Everscale::Proto::MessageBehavior value) {
  
  behavior_ = value;
}
inline void Transfer::set_behavior(::TW::Everscale::Proto::MessageBehavior value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.Transfer.behavior)
}

// uint64 amount = 3;
inline void Transfer::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t Transfer::_internal_amount() const {
  return amount_;
}
inline uint64_t Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void Transfer::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.Transfer.amount)
}

// uint32 expired_at = 4;
inline void Transfer::clear_expired_at() {
  expired_at_ = 0u;
}
inline uint32_t Transfer::_internal_expired_at() const {
  return expired_at_;
}
inline uint32_t Transfer::expired_at() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.Transfer.expired_at)
  return _internal_expired_at();
}
inline void Transfer::_internal_set_expired_at(uint32_t value) {
  
  expired_at_ = value;
}
inline void Transfer::set_expired_at(uint32_t value) {
  _internal_set_expired_at(value);
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.Transfer.expired_at)
}

// string to = 5;
inline void Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.Transfer.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transfer::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.Transfer.to)
}
inline std::string* Transfer::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Everscale.Proto.Transfer.to)
  return _s;
}
inline const std::string& Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.Everscale.Proto.Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Everscale.Proto.Transfer.to)
}

// string encoded_contract_data = 6;
inline bool Transfer::_internal_has_encoded_contract_data() const {
  return account_state_oneof_case() == kEncodedContractData;
}
inline bool Transfer::has_encoded_contract_data() const {
  return _internal_has_encoded_contract_data();
}
inline void Transfer::set_has_encoded_contract_data() {
  _oneof_case_[0] = kEncodedContractData;
}
inline void Transfer::clear_encoded_contract_data() {
  if (_internal_has_encoded_contract_data()) {
    account_state_oneof_.encoded_contract_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_account_state_oneof();
  }
}
inline const std::string& Transfer::encoded_contract_data() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.Transfer.encoded_contract_data)
  return _internal_encoded_contract_data();
}
template <typename ArgT0, typename... ArgT>
inline void Transfer::set_encoded_contract_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_encoded_contract_data()) {
    clear_account_state_oneof();
    set_has_encoded_contract_data();
    account_state_oneof_.encoded_contract_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  account_state_oneof_.encoded_contract_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.Transfer.encoded_contract_data)
}
inline std::string* Transfer::mutable_encoded_contract_data() {
  std::string* _s = _internal_mutable_encoded_contract_data();
  // @@protoc_insertion_point(field_mutable:TW.Everscale.Proto.Transfer.encoded_contract_data)
  return _s;
}
inline const std::string& Transfer::_internal_encoded_contract_data() const {
  if (_internal_has_encoded_contract_data()) {
    return account_state_oneof_.encoded_contract_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Transfer::_internal_set_encoded_contract_data(const std::string& value) {
  if (!_internal_has_encoded_contract_data()) {
    clear_account_state_oneof();
    set_has_encoded_contract_data();
    account_state_oneof_.encoded_contract_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  account_state_oneof_.encoded_contract_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transfer::_internal_mutable_encoded_contract_data() {
  if (!_internal_has_encoded_contract_data()) {
    clear_account_state_oneof();
    set_has_encoded_contract_data();
    account_state_oneof_.encoded_contract_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return account_state_oneof_.encoded_contract_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transfer::release_encoded_contract_data() {
  // @@protoc_insertion_point(field_release:TW.Everscale.Proto.Transfer.encoded_contract_data)
  if (_internal_has_encoded_contract_data()) {
    clear_has_account_state_oneof();
    return account_state_oneof_.encoded_contract_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Transfer::set_allocated_encoded_contract_data(std::string* encoded_contract_data) {
  if (has_account_state_oneof()) {
    clear_account_state_oneof();
  }
  if (encoded_contract_data != nullptr) {
    set_has_encoded_contract_data();
    account_state_oneof_.encoded_contract_data_.UnsafeSetDefault(encoded_contract_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(encoded_contract_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Everscale.Proto.Transfer.encoded_contract_data)
}

inline bool Transfer::has_account_state_oneof() const {
  return account_state_oneof_case() != ACCOUNT_STATE_ONEOF_NOT_SET;
}
inline void Transfer::clear_has_account_state_oneof() {
  _oneof_case_[0] = ACCOUNT_STATE_ONEOF_NOT_SET;
}
inline Transfer::AccountStateOneofCase Transfer::account_state_oneof_case() const {
  return Transfer::AccountStateOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// .TW.Everscale.Proto.Transfer transfer = 1;
inline bool SigningInput::_internal_has_transfer() const {
  return action_oneof_case() == kTransfer;
}
inline bool SigningInput::has_transfer() const {
  return _internal_has_transfer();
}
inline void SigningInput::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void SigningInput::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_oneof_.transfer_;
    }
    clear_has_action_oneof();
  }
}
inline ::TW::Everscale::Proto::Transfer* SigningInput::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Everscale.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_action_oneof();
      ::TW::Everscale::Proto::Transfer* temp = action_oneof_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Everscale::Proto::Transfer& SigningInput::_internal_transfer() const {
  return _internal_has_transfer()
      ? *action_oneof_.transfer_
      : reinterpret_cast< ::TW::Everscale::Proto::Transfer&>(::TW::Everscale::Proto::_Transfer_default_instance_);
}
inline const ::TW::Everscale::Proto::Transfer& SigningInput::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.SigningInput.transfer)
  return _internal_transfer();
}
inline ::TW::Everscale::Proto::Transfer* SigningInput::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Everscale.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_action_oneof();
    ::TW::Everscale::Proto::Transfer* temp = action_oneof_.transfer_;
    action_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer(::TW::Everscale::Proto::Transfer* transfer) {
  clear_action_oneof();
  if (transfer) {
    set_has_transfer();
    action_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Everscale.Proto.SigningInput.transfer)
}
inline ::TW::Everscale::Proto::Transfer* SigningInput::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_action_oneof();
    set_has_transfer();
    action_oneof_.transfer_ = CreateMaybeMessage< ::TW::Everscale::Proto::Transfer >(GetArenaForAllocation());
  }
  return action_oneof_.transfer_;
}
inline ::TW::Everscale::Proto::Transfer* SigningInput::mutable_transfer() {
  ::TW::Everscale::Proto::Transfer* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Everscale.Proto.SigningInput.transfer)
  return _msg;
}

// bytes private_key = 2;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Everscale.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Everscale.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Everscale.Proto.SigningInput.private_key)
}

inline bool SigningInput::has_action_oneof() const {
  return action_oneof_case() != ACTION_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_action_oneof() {
  _oneof_case_[0] = ACTION_ONEOF_NOT_SET;
}
inline SigningInput::ActionOneofCase SigningInput::action_oneof_case() const {
  return SigningInput::ActionOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// string encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Everscale.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Everscale.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Everscale.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Everscale.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Everscale.Proto.SigningOutput.encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Everscale
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Everscale::Proto::MessageBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Everscale::Proto::MessageBehavior>() {
  return ::TW::Everscale::Proto::MessageBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Everscale_2eproto
