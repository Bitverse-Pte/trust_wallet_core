// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NEO.proto

#include "NEO.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace NEO {
namespace Proto {
constexpr TransactionInput::TransactionInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prev_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(int64_t{0})
  , prev_index_(0u){}
struct TransactionInputDefaultTypeInternal {
  constexpr TransactionInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionInputDefaultTypeInternal() {}
  union {
    TransactionInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
constexpr OutputAddress::OutputAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct OutputAddressDefaultTypeInternal {
  constexpr OutputAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputAddressDefaultTypeInternal() {}
  union {
    OutputAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputAddressDefaultTypeInternal _OutputAddress_default_instance_;
constexpr TransactionOutput::TransactionOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_outputs_()
  , asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , change_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct TransactionOutputDefaultTypeInternal {
  constexpr TransactionOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionOutputDefaultTypeInternal() {}
  union {
    TransactionOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
constexpr Transaction_Nep5Transfer::Transaction_Nep5Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , script_with_ret_(false){}
struct Transaction_Nep5TransferDefaultTypeInternal {
  constexpr Transaction_Nep5TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_Nep5TransferDefaultTypeInternal() {}
  union {
    Transaction_Nep5Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_Nep5TransferDefaultTypeInternal _Transaction_Nep5Transfer_default_instance_;
constexpr Transaction_InvocationGeneric::Transaction_InvocationGeneric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_(uint64_t{0u}){}
struct Transaction_InvocationGenericDefaultTypeInternal {
  constexpr Transaction_InvocationGenericDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_InvocationGenericDefaultTypeInternal() {}
  union {
    Transaction_InvocationGeneric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_InvocationGenericDefaultTypeInternal _Transaction_InvocationGeneric_default_instance_;
constexpr Transaction::Transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TransactionDefaultTypeInternal {
  constexpr TransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionDefaultTypeInternal _Transaction_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , outputs_()
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_change_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plan_(nullptr)
  , transaction_(nullptr)
  , fee_(int64_t{0}){}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
constexpr TransactionOutputPlan::TransactionOutputPlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_outputs_()
  , asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , change_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0})
  , available_amount_(int64_t{0})
  , change_(int64_t{0}){}
struct TransactionOutputPlanDefaultTypeInternal {
  constexpr TransactionOutputPlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionOutputPlanDefaultTypeInternal() {}
  union {
    TransactionOutputPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionOutputPlanDefaultTypeInternal _TransactionOutputPlan_default_instance_;
constexpr TransactionAttributePlan::TransactionAttributePlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , usage_(0){}
struct TransactionAttributePlanDefaultTypeInternal {
  constexpr TransactionAttributePlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionAttributePlanDefaultTypeInternal() {}
  union {
    TransactionAttributePlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionAttributePlanDefaultTypeInternal _TransactionAttributePlan_default_instance_;
constexpr TransactionPlan::TransactionPlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outputs_()
  , inputs_()
  , attributes_()
  , fee_(int64_t{0})
  , error_(0)
{}
struct TransactionPlanDefaultTypeInternal {
  constexpr TransactionPlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionPlanDefaultTypeInternal() {}
  union {
    TransactionPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionPlanDefaultTypeInternal _TransactionPlan_default_instance_;
}  // namespace Proto
}  // namespace NEO
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NEO_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NEO_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NEO_2eproto = nullptr;

const uint32_t TableStruct_NEO_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, prev_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, prev_index_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, value_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionInput, asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::OutputAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::OutputAddress, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::OutputAddress, to_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutput, extra_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_Nep5Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_Nep5Transfer, asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_Nep5Transfer, from_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_Nep5Transfer, to_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_Nep5Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_Nep5Transfer, script_with_ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_InvocationGeneric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_InvocationGeneric, gas_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction_InvocationGeneric, script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::Transaction, transaction_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, inputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, outputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, gas_asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, gas_change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, plan_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningInput, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::SigningOutput, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, available_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, change_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionOutputPlan, extra_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionAttributePlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionAttributePlan, usage_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionAttributePlan, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, outputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, inputs_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, error_),
  PROTOBUF_FIELD_OFFSET(::TW::NEO::Proto::TransactionPlan, attributes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::NEO::Proto::TransactionInput)},
  { 10, -1, -1, sizeof(::TW::NEO::Proto::OutputAddress)},
  { 18, -1, -1, sizeof(::TW::NEO::Proto::TransactionOutput)},
  { 29, -1, -1, sizeof(::TW::NEO::Proto::Transaction_Nep5Transfer)},
  { 40, -1, -1, sizeof(::TW::NEO::Proto::Transaction_InvocationGeneric)},
  { 48, -1, -1, sizeof(::TW::NEO::Proto::Transaction)},
  { 57, -1, -1, sizeof(::TW::NEO::Proto::SigningInput)},
  { 71, -1, -1, sizeof(::TW::NEO::Proto::SigningOutput)},
  { 80, -1, -1, sizeof(::TW::NEO::Proto::TransactionOutputPlan)},
  { 93, -1, -1, sizeof(::TW::NEO::Proto::TransactionAttributePlan)},
  { 101, -1, -1, sizeof(::TW::NEO::Proto::TransactionPlan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_OutputAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_Transaction_Nep5Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_Transaction_InvocationGeneric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_SigningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionOutputPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionAttributePlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEO::Proto::_TransactionPlan_default_instance_),
};

const char descriptor_table_protodef_NEO_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tNEO.proto\022\014TW.NEO.Proto\032\014Common.proto\""
  "Z\n\020TransactionInput\022\021\n\tprev_hash\030\001 \001(\014\022\022"
  "\n\nprev_index\030\002 \001(\007\022\r\n\005value\030\003 \001(\003\022\020\n\010ass"
  "et_id\030\004 \001(\t\"3\n\rOutputAddress\022\016\n\006amount\030\001"
  " \001(\022\022\022\n\nto_address\030\002 \001(\t\"\225\001\n\021Transaction"
  "Output\022\020\n\010asset_id\030\001 \001(\t\022\016\n\006amount\030\002 \001(\022"
  "\022\022\n\nto_address\030\003 \001(\t\022\026\n\016change_address\030\004"
  " \001(\t\0222\n\rextra_outputs\030\005 \003(\0132\033.TW.NEO.Pro"
  "to.OutputAddress\"\305\002\n\013Transaction\022\?\n\rnep5"
  "_transfer\030\001 \001(\0132&.TW.NEO.Proto.Transacti"
  "on.Nep5TransferH\000\022I\n\022invocation_generic\030"
  "\002 \001(\0132+.TW.NEO.Proto.Transaction.Invocat"
  "ionGenericH\000\032c\n\014Nep5Transfer\022\020\n\010asset_id"
  "\030\001 \001(\t\022\014\n\004from\030\002 \001(\t\022\n\n\002to\030\003 \001(\t\022\016\n\006amou"
  "nt\030\004 \001(\014\022\027\n\017script_with_ret\030\005 \001(\010\0320\n\021Inv"
  "ocationGeneric\022\013\n\003gas\030\001 \001(\004\022\016\n\006script\030\002 "
  "\001(\014B\023\n\021transaction_oneof\"\241\002\n\014SigningInpu"
  "t\022.\n\006inputs\030\001 \003(\0132\036.TW.NEO.Proto.Transac"
  "tionInput\0220\n\007outputs\030\002 \003(\0132\037.TW.NEO.Prot"
  "o.TransactionOutput\022\023\n\013private_key\030\003 \001(\014"
  "\022\013\n\003fee\030\004 \001(\003\022\024\n\014gas_asset_id\030\005 \001(\t\022\032\n\022g"
  "as_change_address\030\006 \001(\t\022+\n\004plan\030\007 \001(\0132\035."
  "TW.NEO.Proto.TransactionPlan\022.\n\013transact"
  "ion\030\010 \001(\0132\031.TW.NEO.Proto.Transaction\"e\n\r"
  "SigningOutput\022\017\n\007encoded\030\001 \001(\014\022,\n\005error\030"
  "\002 \001(\0162\035.TW.Common.Proto.SigningError\022\025\n\r"
  "error_message\030\003 \001(\t\"\303\001\n\025TransactionOutpu"
  "tPlan\022\016\n\006amount\030\001 \001(\003\022\030\n\020available_amoun"
  "t\030\002 \001(\003\022\016\n\006change\030\003 \001(\003\022\020\n\010asset_id\030\004 \001("
  "\t\022\022\n\nto_address\030\005 \001(\t\022\026\n\016change_address\030"
  "\006 \001(\t\0222\n\rextra_outputs\030\007 \003(\0132\033.TW.NEO.Pr"
  "oto.OutputAddress\"7\n\030TransactionAttribut"
  "ePlan\022\r\n\005usage\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"\356\001\n\017T"
  "ransactionPlan\0224\n\007outputs\030\001 \003(\0132#.TW.NEO"
  ".Proto.TransactionOutputPlan\022.\n\006inputs\030\002"
  " \003(\0132\036.TW.NEO.Proto.TransactionInput\022\013\n\003"
  "fee\030\003 \001(\003\022,\n\005error\030\004 \001(\0162\035.TW.Common.Pro"
  "to.SigningError\022:\n\nattributes\030\005 \003(\0132&.TW"
  ".NEO.Proto.TransactionAttributePlanB\027\n\025w"
  "allet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NEO_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NEO_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NEO_2eproto = {
  false, false, 1588, descriptor_table_protodef_NEO_2eproto, "NEO.proto", 
  &descriptor_table_NEO_2eproto_once, descriptor_table_NEO_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_NEO_2eproto::offsets,
  file_level_metadata_NEO_2eproto, file_level_enum_descriptors_NEO_2eproto, file_level_service_descriptors_NEO_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_NEO_2eproto_getter() {
  return &descriptor_table_NEO_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_NEO_2eproto(&descriptor_table_NEO_2eproto);
namespace TW {
namespace NEO {
namespace Proto {

// ===================================================================

class TransactionInput::_Internal {
 public:
};

TransactionInput::TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionInput)
}
TransactionInput::TransactionInput(const TransactionInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_hash().empty()) {
    prev_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_hash(), 
      GetArenaForAllocation());
  }
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_index_) -
    reinterpret_cast<char*>(&value_)) + sizeof(prev_index_));
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionInput)
}

inline void TransactionInput::SharedCtor() {
prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_index_) -
    reinterpret_cast<char*>(&value_)) + sizeof(prev_index_));
}

TransactionInput::~TransactionInput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prev_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionInput::ArenaDtor(void* object) {
  TransactionInput* _this = reinterpret_cast< TransactionInput* >(object);
  (void)_this;
}
void TransactionInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prev_hash_.ClearToEmpty();
  asset_id_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(prev_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes prev_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prev_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 prev_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          prev_index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string asset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionInput.asset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes prev_hash = 1;
  if (!this->_internal_prev_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_prev_hash(), target);
  }

  // fixed32 prev_index = 2;
  if (this->_internal_prev_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_prev_index(), target);
  }

  // int64 value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // string asset_id = 4;
  if (!this->_internal_asset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionInput.asset_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionInput)
  return target;
}

size_t TransactionInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes prev_hash = 1;
  if (!this->_internal_prev_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prev_hash());
  }

  // string asset_id = 4;
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // int64 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  // fixed32 prev_index = 2;
  if (this->_internal_prev_index() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionInput::GetClassData() const { return &_class_data_; }

void TransactionInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionInput *>(to)->MergeFrom(
      static_cast<const TransactionInput &>(from));
}


void TransactionInput::MergeFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prev_hash().empty()) {
    _internal_set_prev_hash(from._internal_prev_hash());
  }
  if (!from._internal_asset_id().empty()) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_prev_index() != 0) {
    _internal_set_prev_index(from._internal_prev_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInput::CopyFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInput::IsInitialized() const {
  return true;
}

void TransactionInput::InternalSwap(TransactionInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prev_hash_, lhs_arena,
      &other->prev_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_id_, lhs_arena,
      &other->asset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInput, prev_index_)
      + sizeof(TransactionInput::prev_index_)
      - PROTOBUF_FIELD_OFFSET(TransactionInput, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[0]);
}

// ===================================================================

class OutputAddress::_Internal {
 public:
};

OutputAddress::OutputAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.OutputAddress)
}
OutputAddress::OutputAddress(const OutputAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.OutputAddress)
}

inline void OutputAddress::SharedCtor() {
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = int64_t{0};
}

OutputAddress::~OutputAddress() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.OutputAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputAddress::ArenaDtor(void* object) {
  OutputAddress* _this = reinterpret_cast< OutputAddress* >(object);
  (void)_this;
}
void OutputAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.OutputAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.OutputAddress.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.OutputAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->_internal_amount(), target);
  }

  // string to_address = 2;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.OutputAddress.to_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.OutputAddress)
  return target;
}

size_t OutputAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.OutputAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 2;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // sint64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputAddress::GetClassData() const { return &_class_data_; }

void OutputAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutputAddress *>(to)->MergeFrom(
      static_cast<const OutputAddress &>(from));
}


void OutputAddress::MergeFrom(const OutputAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.OutputAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputAddress::CopyFrom(const OutputAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.OutputAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputAddress::IsInitialized() const {
  return true;
}

void OutputAddress::InternalSwap(OutputAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[1]);
}

// ===================================================================

class TransactionOutput::_Internal {
 public:
};

TransactionOutput::TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extra_outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionOutput)
}
TransactionOutput::TransactionOutput(const TransactionOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_outputs_(from.extra_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArenaForAllocation());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionOutput)
}

inline void TransactionOutput::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = int64_t{0};
}

TransactionOutput::~TransactionOutput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionOutput::ArenaDtor(void* object) {
  TransactionOutput* _this = reinterpret_cast< TransactionOutput* >(object);
  (void)_this;
}
void TransactionOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_outputs_.Clear();
  asset_id_.ClearToEmpty();
  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutput.asset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutput.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string change_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutput.change_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (!this->_internal_asset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutput.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // sint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_amount(), target);
  }

  // string to_address = 3;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutput.to_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_address(), target);
  }

  // string change_address = 4;
  if (!this->_internal_change_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutput.change_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_change_address(), target);
  }

  // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extra_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionOutput)
  return target;
}

size_t TransactionOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 5;
  total_size += 1UL * this->_internal_extra_outputs_size();
  for (const auto& msg : this->extra_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string asset_id = 1;
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string to_address = 3;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 4;
  if (!this->_internal_change_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // sint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOutput::GetClassData() const { return &_class_data_; }

void TransactionOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionOutput *>(to)->MergeFrom(
      static_cast<const TransactionOutput &>(from));
}


void TransactionOutput::MergeFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extra_outputs_.MergeFrom(from.extra_outputs_);
  if (!from._internal_asset_id().empty()) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (!from._internal_change_address().empty()) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOutput::CopyFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOutput::IsInitialized() const {
  return true;
}

void TransactionOutput::InternalSwap(TransactionOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extra_outputs_.InternalSwap(&other->extra_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_id_, lhs_arena,
      &other->asset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &change_address_, lhs_arena,
      &other->change_address_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[2]);
}

// ===================================================================

class Transaction_Nep5Transfer::_Internal {
 public:
};

Transaction_Nep5Transfer::Transaction_Nep5Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.Transaction.Nep5Transfer)
}
Transaction_Nep5Transfer::Transaction_Nep5Transfer(const Transaction_Nep5Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArenaForAllocation());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  script_with_ret_ = from.script_with_ret_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.Transaction.Nep5Transfer)
}

inline void Transaction_Nep5Transfer::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
script_with_ret_ = false;
}

Transaction_Nep5Transfer::~Transaction_Nep5Transfer() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.Transaction.Nep5Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_Nep5Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Nep5Transfer::ArenaDtor(void* object) {
  Transaction_Nep5Transfer* _this = reinterpret_cast< Transaction_Nep5Transfer* >(object);
  (void)_this;
}
void Transaction_Nep5Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Nep5Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Nep5Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.Transaction.Nep5Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  from_.ClearToEmpty();
  to_.ClearToEmpty();
  amount_.ClearToEmpty();
  script_with_ret_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Nep5Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.Transaction.Nep5Transfer.asset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.Transaction.Nep5Transfer.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.Transaction.Nep5Transfer.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool script_with_ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          script_with_ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_Nep5Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.Transaction.Nep5Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (!this->_internal_asset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.Transaction.Nep5Transfer.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.Transaction.Nep5Transfer.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.Transaction.Nep5Transfer.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // bytes amount = 4;
  if (!this->_internal_amount().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_amount(), target);
  }

  // bool script_with_ret = 5;
  if (this->_internal_script_with_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_script_with_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.Transaction.Nep5Transfer)
  return target;
}

size_t Transaction_Nep5Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.Transaction.Nep5Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes amount = 4;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bool script_with_ret = 5;
  if (this->_internal_script_with_ret() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_Nep5Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_Nep5Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_Nep5Transfer::GetClassData() const { return &_class_data_; }

void Transaction_Nep5Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_Nep5Transfer *>(to)->MergeFrom(
      static_cast<const Transaction_Nep5Transfer &>(from));
}


void Transaction_Nep5Transfer::MergeFrom(const Transaction_Nep5Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.Transaction.Nep5Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_id().empty()) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_script_with_ret() != 0) {
    _internal_set_script_with_ret(from._internal_script_with_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_Nep5Transfer::CopyFrom(const Transaction_Nep5Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.Transaction.Nep5Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Nep5Transfer::IsInitialized() const {
  return true;
}

void Transaction_Nep5Transfer::InternalSwap(Transaction_Nep5Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_id_, lhs_arena,
      &other->asset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  swap(script_with_ret_, other->script_with_ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Nep5Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[3]);
}

// ===================================================================

class Transaction_InvocationGeneric::_Internal {
 public:
};

Transaction_InvocationGeneric::Transaction_InvocationGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.Transaction.InvocationGeneric)
}
Transaction_InvocationGeneric::Transaction_InvocationGeneric(const Transaction_InvocationGeneric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArenaForAllocation());
  }
  gas_ = from.gas_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.Transaction.InvocationGeneric)
}

inline void Transaction_InvocationGeneric::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_ = uint64_t{0u};
}

Transaction_InvocationGeneric::~Transaction_InvocationGeneric() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.Transaction.InvocationGeneric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_InvocationGeneric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_InvocationGeneric::ArenaDtor(void* object) {
  Transaction_InvocationGeneric* _this = reinterpret_cast< Transaction_InvocationGeneric* >(object);
  (void)_this;
}
void Transaction_InvocationGeneric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_InvocationGeneric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_InvocationGeneric::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.Transaction.InvocationGeneric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  script_.ClearToEmpty();
  gas_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_InvocationGeneric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_InvocationGeneric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.Transaction.InvocationGeneric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gas = 1;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gas(), target);
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.Transaction.InvocationGeneric)
  return target;
}

size_t Transaction_InvocationGeneric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.Transaction.InvocationGeneric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  // uint64 gas = 1;
  if (this->_internal_gas() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_InvocationGeneric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_InvocationGeneric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_InvocationGeneric::GetClassData() const { return &_class_data_; }

void Transaction_InvocationGeneric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_InvocationGeneric *>(to)->MergeFrom(
      static_cast<const Transaction_InvocationGeneric &>(from));
}


void Transaction_InvocationGeneric::MergeFrom(const Transaction_InvocationGeneric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.Transaction.InvocationGeneric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_script().empty()) {
    _internal_set_script(from._internal_script());
  }
  if (from._internal_gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_InvocationGeneric::CopyFrom(const Transaction_InvocationGeneric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.Transaction.InvocationGeneric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_InvocationGeneric::IsInitialized() const {
  return true;
}

void Transaction_InvocationGeneric::InternalSwap(Transaction_InvocationGeneric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &script_, lhs_arena,
      &other->script_, rhs_arena
  );
  swap(gas_, other->gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_InvocationGeneric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[4]);
}

// ===================================================================

class Transaction::_Internal {
 public:
  static const ::TW::NEO::Proto::Transaction_Nep5Transfer& nep5_transfer(const Transaction* msg);
  static const ::TW::NEO::Proto::Transaction_InvocationGeneric& invocation_generic(const Transaction* msg);
};

const ::TW::NEO::Proto::Transaction_Nep5Transfer&
Transaction::_Internal::nep5_transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.nep5_transfer_;
}
const ::TW::NEO::Proto::Transaction_InvocationGeneric&
Transaction::_Internal::invocation_generic(const Transaction* msg) {
  return *msg->transaction_oneof_.invocation_generic_;
}
void Transaction::set_allocated_nep5_transfer(::TW::NEO::Proto::Transaction_Nep5Transfer* nep5_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (nep5_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEO::Proto::Transaction_Nep5Transfer>::GetOwningArena(nep5_transfer);
    if (message_arena != submessage_arena) {
      nep5_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nep5_transfer, submessage_arena);
    }
    set_has_nep5_transfer();
    transaction_oneof_.nep5_transfer_ = nep5_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.Transaction.nep5_transfer)
}
void Transaction::set_allocated_invocation_generic(::TW::NEO::Proto::Transaction_InvocationGeneric* invocation_generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (invocation_generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEO::Proto::Transaction_InvocationGeneric>::GetOwningArena(invocation_generic);
    if (message_arena != submessage_arena) {
      invocation_generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invocation_generic, submessage_arena);
    }
    set_has_invocation_generic();
    transaction_oneof_.invocation_generic_ = invocation_generic;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.Transaction.invocation_generic)
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_transaction_oneof();
  switch (from.transaction_oneof_case()) {
    case kNep5Transfer: {
      _internal_mutable_nep5_transfer()->::TW::NEO::Proto::Transaction_Nep5Transfer::MergeFrom(from._internal_nep5_transfer());
      break;
    }
    case kInvocationGeneric: {
      _internal_mutable_invocation_generic()->::TW::NEO::Proto::Transaction_InvocationGeneric::MergeFrom(from._internal_invocation_generic());
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.Transaction)
}

inline void Transaction::SharedCtor() {
clear_has_transaction_oneof();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.Transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_transaction_oneof()) {
    clear_transaction_oneof();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::clear_transaction_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.NEO.Proto.Transaction)
  switch (transaction_oneof_case()) {
    case kNep5Transfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.nep5_transfer_;
      }
      break;
    }
    case kInvocationGeneric: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.invocation_generic_;
      }
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_ONEOF_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.Transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_transaction_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.NEO.Proto.Transaction.Nep5Transfer nep5_transfer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nep5_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEO.Proto.Transaction.InvocationGeneric invocation_generic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_invocation_generic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.Transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.NEO.Proto.Transaction.Nep5Transfer nep5_transfer = 1;
  if (_internal_has_nep5_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nep5_transfer(this), target, stream);
  }

  // .TW.NEO.Proto.Transaction.InvocationGeneric invocation_generic = 2;
  if (_internal_has_invocation_generic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::invocation_generic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.Transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (transaction_oneof_case()) {
    // .TW.NEO.Proto.Transaction.Nep5Transfer nep5_transfer = 1;
    case kNep5Transfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.nep5_transfer_);
      break;
    }
    // .TW.NEO.Proto.Transaction.InvocationGeneric invocation_generic = 2;
    case kInvocationGeneric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.invocation_generic_);
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }

void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction *>(to)->MergeFrom(
      static_cast<const Transaction &>(from));
}


void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.transaction_oneof_case()) {
    case kNep5Transfer: {
      _internal_mutable_nep5_transfer()->::TW::NEO::Proto::Transaction_Nep5Transfer::MergeFrom(from._internal_nep5_transfer());
      break;
    }
    case kInvocationGeneric: {
      _internal_mutable_invocation_generic()->::TW::NEO::Proto::Transaction_InvocationGeneric::MergeFrom(from._internal_invocation_generic());
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_oneof_, other->transaction_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[5]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::NEO::Proto::TransactionPlan& plan(const SigningInput* msg);
  static const ::TW::NEO::Proto::Transaction& transaction(const SigningInput* msg);
};

const ::TW::NEO::Proto::TransactionPlan&
SigningInput::_Internal::plan(const SigningInput* msg) {
  return *msg->plan_;
}
const ::TW::NEO::Proto::Transaction&
SigningInput::_Internal::transaction(const SigningInput* msg) {
  return *msg->transaction_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  gas_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gas_asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_asset_id().empty()) {
    gas_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_asset_id(), 
      GetArenaForAllocation());
  }
  gas_change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gas_change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_change_address().empty()) {
    gas_change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_change_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_plan()) {
    plan_ = new ::TW::NEO::Proto::TransactionPlan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::TW::NEO::Proto::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gas_asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gas_change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&plan_)) + sizeof(fee_));
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plan_;
  if (this != internal_default_instance()) delete transaction_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  private_key_.ClearToEmpty();
  gas_asset_id_.ClearToEmpty();
  gas_change_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  fee_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gas_asset_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gas_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.SigningInput.gas_asset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gas_change_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_gas_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.SigningInput.gas_change_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEO.Proto.TransactionPlan plan = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEO.Proto.Transaction transaction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  // bytes private_key = 3;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_private_key(), target);
  }

  // int64 fee = 4;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fee(), target);
  }

  // string gas_asset_id = 5;
  if (!this->_internal_gas_asset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_asset_id().data(), static_cast<int>(this->_internal_gas_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.SigningInput.gas_asset_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gas_asset_id(), target);
  }

  // string gas_change_address = 6;
  if (!this->_internal_gas_change_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_change_address().data(), static_cast<int>(this->_internal_gas_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.SigningInput.gas_change_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gas_change_address(), target);
  }

  // .TW.NEO.Proto.TransactionPlan plan = 7;
  if (this->_internal_has_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::plan(this), target, stream);
  }

  // .TW.NEO.Proto.Transaction transaction = 8;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes private_key = 3;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string gas_asset_id = 5;
  if (!this->_internal_gas_asset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_asset_id());
  }

  // string gas_change_address = 6;
  if (!this->_internal_gas_change_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_change_address());
  }

  // .TW.NEO.Proto.TransactionPlan plan = 7;
  if (this->_internal_has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  // .TW.NEO.Proto.Transaction transaction = 8;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // int64 fee = 4;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_gas_asset_id().empty()) {
    _internal_set_gas_asset_id(from._internal_gas_asset_id());
  }
  if (!from._internal_gas_change_address().empty()) {
    _internal_set_gas_change_address(from._internal_gas_change_address());
  }
  if (from._internal_has_plan()) {
    _internal_mutable_plan()->::TW::NEO::Proto::TransactionPlan::MergeFrom(from._internal_plan());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::TW::NEO::Proto::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gas_asset_id_, lhs_arena,
      &other->gas_asset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gas_change_address_, lhs_arena,
      &other->gas_change_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, fee_)
      + sizeof(SigningInput::fee_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, plan_)>(
          reinterpret_cast<char*>(&plan_),
          reinterpret_cast<char*>(&other->plan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[6]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[7]);
}

// ===================================================================

class TransactionOutputPlan::_Internal {
 public:
};

TransactionOutputPlan::TransactionOutputPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extra_outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionOutputPlan)
}
TransactionOutputPlan::TransactionOutputPlan(const TransactionOutputPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_outputs_(from.extra_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArenaForAllocation());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(change_));
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionOutputPlan)
}

inline void TransactionOutputPlan::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(change_));
}

TransactionOutputPlan::~TransactionOutputPlan() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionOutputPlan)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionOutputPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionOutputPlan::ArenaDtor(void* object) {
  TransactionOutputPlan* _this = reinterpret_cast< TransactionOutputPlan* >(object);
  (void)_this;
}
void TransactionOutputPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOutputPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionOutputPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionOutputPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_outputs_.Clear();
  asset_id_.ClearToEmpty();
  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(change_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOutputPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 available_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          available_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string asset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutputPlan.asset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutputPlan.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string change_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEO.Proto.TransactionOutputPlan.change_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOutputPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionOutputPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  // int64 available_amount = 2;
  if (this->_internal_available_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_available_amount(), target);
  }

  // int64 change = 3;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_change(), target);
  }

  // string asset_id = 4;
  if (!this->_internal_asset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutputPlan.asset_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset_id(), target);
  }

  // string to_address = 5;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutputPlan.to_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_to_address(), target);
  }

  // string change_address = 6;
  if (!this->_internal_change_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEO.Proto.TransactionOutputPlan.change_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_change_address(), target);
  }

  // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_extra_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionOutputPlan)
  return target;
}

size_t TransactionOutputPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionOutputPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 7;
  total_size += 1UL * this->_internal_extra_outputs_size();
  for (const auto& msg : this->extra_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string asset_id = 4;
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string to_address = 5;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 6;
  if (!this->_internal_change_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  // int64 available_amount = 2;
  if (this->_internal_available_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_available_amount());
  }

  // int64 change = 3;
  if (this->_internal_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_change());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOutputPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionOutputPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOutputPlan::GetClassData() const { return &_class_data_; }

void TransactionOutputPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionOutputPlan *>(to)->MergeFrom(
      static_cast<const TransactionOutputPlan &>(from));
}


void TransactionOutputPlan::MergeFrom(const TransactionOutputPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionOutputPlan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extra_outputs_.MergeFrom(from.extra_outputs_);
  if (!from._internal_asset_id().empty()) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (!from._internal_change_address().empty()) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_available_amount() != 0) {
    _internal_set_available_amount(from._internal_available_amount());
  }
  if (from._internal_change() != 0) {
    _internal_set_change(from._internal_change());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOutputPlan::CopyFrom(const TransactionOutputPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionOutputPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOutputPlan::IsInitialized() const {
  return true;
}

void TransactionOutputPlan::InternalSwap(TransactionOutputPlan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extra_outputs_.InternalSwap(&other->extra_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_id_, lhs_arena,
      &other->asset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &change_address_, lhs_arena,
      &other->change_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOutputPlan, change_)
      + sizeof(TransactionOutputPlan::change_)
      - PROTOBUF_FIELD_OFFSET(TransactionOutputPlan, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOutputPlan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[8]);
}

// ===================================================================

class TransactionAttributePlan::_Internal {
 public:
};

TransactionAttributePlan::TransactionAttributePlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionAttributePlan)
}
TransactionAttributePlan::TransactionAttributePlan(const TransactionAttributePlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  usage_ = from.usage_;
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionAttributePlan)
}

inline void TransactionAttributePlan::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
usage_ = 0;
}

TransactionAttributePlan::~TransactionAttributePlan() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionAttributePlan)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionAttributePlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionAttributePlan::ArenaDtor(void* object) {
  TransactionAttributePlan* _this = reinterpret_cast< TransactionAttributePlan* >(object);
  (void)_this;
}
void TransactionAttributePlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionAttributePlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionAttributePlan::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionAttributePlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  usage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionAttributePlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionAttributePlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionAttributePlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 usage = 1;
  if (this->_internal_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_usage(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionAttributePlan)
  return target;
}

size_t TransactionAttributePlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionAttributePlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 usage = 1;
  if (this->_internal_usage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_usage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionAttributePlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionAttributePlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionAttributePlan::GetClassData() const { return &_class_data_; }

void TransactionAttributePlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionAttributePlan *>(to)->MergeFrom(
      static_cast<const TransactionAttributePlan &>(from));
}


void TransactionAttributePlan::MergeFrom(const TransactionAttributePlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionAttributePlan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_usage() != 0) {
    _internal_set_usage(from._internal_usage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionAttributePlan::CopyFrom(const TransactionAttributePlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionAttributePlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAttributePlan::IsInitialized() const {
  return true;
}

void TransactionAttributePlan::InternalSwap(TransactionAttributePlan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(usage_, other->usage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionAttributePlan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[9]);
}

// ===================================================================

class TransactionPlan::_Internal {
 public:
};

TransactionPlan::TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  outputs_(arena),
  inputs_(arena),
  attributes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEO.Proto.TransactionPlan)
}
TransactionPlan::TransactionPlan(const TransactionPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_),
      inputs_(from.inputs_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:TW.NEO.Proto.TransactionPlan)
}

inline void TransactionPlan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fee_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(error_));
}

TransactionPlan::~TransactionPlan() {
  // @@protoc_insertion_point(destructor:TW.NEO.Proto.TransactionPlan)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionPlan::ArenaDtor(void* object) {
  TransactionPlan* _this = reinterpret_cast< TransactionPlan* >(object);
  (void)_this;
}
void TransactionPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEO.Proto.TransactionPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  inputs_.Clear();
  attributes_.Clear();
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.NEO.Proto.TransactionAttributePlan attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEO.Proto.TransactionPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outputs(i), target, stream);
  }

  // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // int64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee(), target);
  }

  // .TW.Common.Proto.SigningError error = 4;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_error(), target);
  }

  // repeated .TW.NEO.Proto.TransactionAttributePlan attributes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEO.Proto.TransactionPlan)
  return target;
}

size_t TransactionPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEO.Proto.TransactionPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.NEO.Proto.TransactionAttributePlan attributes = 5;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fee());
  }

  // .TW.Common.Proto.SigningError error = 4;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionPlan::GetClassData() const { return &_class_data_; }

void TransactionPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionPlan *>(to)->MergeFrom(
      static_cast<const TransactionPlan &>(from));
}


void TransactionPlan::MergeFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEO.Proto.TransactionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  inputs_.MergeFrom(from.inputs_);
  attributes_.MergeFrom(from.attributes_);
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionPlan::CopyFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEO.Proto.TransactionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPlan::IsInitialized() const {
  return true;
}

void TransactionPlan::InternalSwap(TransactionPlan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  inputs_.InternalSwap(&other->inputs_);
  attributes_.InternalSwap(&other->attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionPlan, error_)
      + sizeof(TransactionPlan::error_)
      - PROTOBUF_FIELD_OFFSET(TransactionPlan, fee_)>(
          reinterpret_cast<char*>(&fee_),
          reinterpret_cast<char*>(&other->fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionPlan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEO_2eproto_getter, &descriptor_table_NEO_2eproto_once,
      file_level_metadata_NEO_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace NEO
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionInput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::OutputAddress* Arena::CreateMaybeMessage< ::TW::NEO::Proto::OutputAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::OutputAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionOutput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::Transaction_Nep5Transfer* Arena::CreateMaybeMessage< ::TW::NEO::Proto::Transaction_Nep5Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::Transaction_Nep5Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::Transaction_InvocationGeneric* Arena::CreateMaybeMessage< ::TW::NEO::Proto::Transaction_InvocationGeneric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::Transaction_InvocationGeneric >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::Transaction* Arena::CreateMaybeMessage< ::TW::NEO::Proto::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::NEO::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::SigningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionOutputPlan* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionOutputPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionOutputPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionAttributePlan* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionAttributePlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionAttributePlan >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEO::Proto::TransactionPlan* Arena::CreateMaybeMessage< ::TW::NEO::Proto::TransactionPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEO::Proto::TransactionPlan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
