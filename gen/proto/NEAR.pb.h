// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NEAR.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NEAR_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NEAR_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NEAR_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NEAR_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NEAR_2eproto;
namespace TW {
namespace NEAR {
namespace Proto {
class AccessKey;
struct AccessKeyDefaultTypeInternal;
extern AccessKeyDefaultTypeInternal _AccessKey_default_instance_;
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class AddKey;
struct AddKeyDefaultTypeInternal;
extern AddKeyDefaultTypeInternal _AddKey_default_instance_;
class CreateAccount;
struct CreateAccountDefaultTypeInternal;
extern CreateAccountDefaultTypeInternal _CreateAccount_default_instance_;
class DeleteAccount;
struct DeleteAccountDefaultTypeInternal;
extern DeleteAccountDefaultTypeInternal _DeleteAccount_default_instance_;
class DeleteKey;
struct DeleteKeyDefaultTypeInternal;
extern DeleteKeyDefaultTypeInternal _DeleteKey_default_instance_;
class DeployContract;
struct DeployContractDefaultTypeInternal;
extern DeployContractDefaultTypeInternal _DeployContract_default_instance_;
class FullAccessPermission;
struct FullAccessPermissionDefaultTypeInternal;
extern FullAccessPermissionDefaultTypeInternal _FullAccessPermission_default_instance_;
class FunctionCall;
struct FunctionCallDefaultTypeInternal;
extern FunctionCallDefaultTypeInternal _FunctionCall_default_instance_;
class FunctionCallPermission;
struct FunctionCallPermissionDefaultTypeInternal;
extern FunctionCallPermissionDefaultTypeInternal _FunctionCallPermission_default_instance_;
class PublicKey;
struct PublicKeyDefaultTypeInternal;
extern PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Stake;
struct StakeDefaultTypeInternal;
extern StakeDefaultTypeInternal _Stake_default_instance_;
class TokenTransfer;
struct TokenTransferDefaultTypeInternal;
extern TokenTransferDefaultTypeInternal _TokenTransfer_default_instance_;
class Transfer;
struct TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace Proto
}  // namespace NEAR
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::NEAR::Proto::AccessKey* Arena::CreateMaybeMessage<::TW::NEAR::Proto::AccessKey>(Arena*);
template<> ::TW::NEAR::Proto::Action* Arena::CreateMaybeMessage<::TW::NEAR::Proto::Action>(Arena*);
template<> ::TW::NEAR::Proto::AddKey* Arena::CreateMaybeMessage<::TW::NEAR::Proto::AddKey>(Arena*);
template<> ::TW::NEAR::Proto::CreateAccount* Arena::CreateMaybeMessage<::TW::NEAR::Proto::CreateAccount>(Arena*);
template<> ::TW::NEAR::Proto::DeleteAccount* Arena::CreateMaybeMessage<::TW::NEAR::Proto::DeleteAccount>(Arena*);
template<> ::TW::NEAR::Proto::DeleteKey* Arena::CreateMaybeMessage<::TW::NEAR::Proto::DeleteKey>(Arena*);
template<> ::TW::NEAR::Proto::DeployContract* Arena::CreateMaybeMessage<::TW::NEAR::Proto::DeployContract>(Arena*);
template<> ::TW::NEAR::Proto::FullAccessPermission* Arena::CreateMaybeMessage<::TW::NEAR::Proto::FullAccessPermission>(Arena*);
template<> ::TW::NEAR::Proto::FunctionCall* Arena::CreateMaybeMessage<::TW::NEAR::Proto::FunctionCall>(Arena*);
template<> ::TW::NEAR::Proto::FunctionCallPermission* Arena::CreateMaybeMessage<::TW::NEAR::Proto::FunctionCallPermission>(Arena*);
template<> ::TW::NEAR::Proto::PublicKey* Arena::CreateMaybeMessage<::TW::NEAR::Proto::PublicKey>(Arena*);
template<> ::TW::NEAR::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::NEAR::Proto::SigningInput>(Arena*);
template<> ::TW::NEAR::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::NEAR::Proto::SigningOutput>(Arena*);
template<> ::TW::NEAR::Proto::Stake* Arena::CreateMaybeMessage<::TW::NEAR::Proto::Stake>(Arena*);
template<> ::TW::NEAR::Proto::TokenTransfer* Arena::CreateMaybeMessage<::TW::NEAR::Proto::TokenTransfer>(Arena*);
template<> ::TW::NEAR::Proto::Transfer* Arena::CreateMaybeMessage<::TW::NEAR::Proto::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace NEAR {
namespace Proto {

// ===================================================================

class PublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.PublicKey) */ {
 public:
  inline PublicKey() : PublicKey(nullptr) {}
  ~PublicKey() override;
  explicit constexpr PublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicKey(const PublicKey& from);
  PublicKey(PublicKey&& from) noexcept
    : PublicKey() {
    *this = ::std::move(from);
  }

  inline PublicKey& operator=(const PublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKey& operator=(PublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicKey* internal_default_instance() {
    return reinterpret_cast<const PublicKey*>(
               &_PublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicKey& a, PublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublicKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.PublicKey";
  }
  protected:
  explicit PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kKeyTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 key_type = 1;
  void clear_key_type();
  uint32_t key_type() const;
  void set_key_type(uint32_t value);
  private:
  uint32_t _internal_key_type() const;
  void _internal_set_key_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.PublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t key_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class FunctionCallPermission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.FunctionCallPermission) */ {
 public:
  inline FunctionCallPermission() : FunctionCallPermission(nullptr) {}
  ~FunctionCallPermission() override;
  explicit constexpr FunctionCallPermission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCallPermission(const FunctionCallPermission& from);
  FunctionCallPermission(FunctionCallPermission&& from) noexcept
    : FunctionCallPermission() {
    *this = ::std::move(from);
  }

  inline FunctionCallPermission& operator=(const FunctionCallPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCallPermission& operator=(FunctionCallPermission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCallPermission& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCallPermission* internal_default_instance() {
    return reinterpret_cast<const FunctionCallPermission*>(
               &_FunctionCallPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FunctionCallPermission& a, FunctionCallPermission& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCallPermission* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCallPermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCallPermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCallPermission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCallPermission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCallPermission& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCallPermission* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.FunctionCallPermission";
  }
  protected:
  explicit FunctionCallPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNamesFieldNumber = 3,
    kAllowanceFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
  };
  // repeated string method_names = 3;
  int method_names_size() const;
  private:
  int _internal_method_names_size() const;
  public:
  void clear_method_names();
  const std::string& method_names(int index) const;
  std::string* mutable_method_names(int index);
  void set_method_names(int index, const std::string& value);
  void set_method_names(int index, std::string&& value);
  void set_method_names(int index, const char* value);
  void set_method_names(int index, const char* value, size_t size);
  std::string* add_method_names();
  void add_method_names(const std::string& value);
  void add_method_names(std::string&& value);
  void add_method_names(const char* value);
  void add_method_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& method_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_method_names();
  private:
  const std::string& _internal_method_names(int index) const;
  std::string* _internal_add_method_names();
  public:

  // bytes allowance = 1;
  void clear_allowance();
  const std::string& allowance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_allowance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_allowance();
  PROTOBUF_NODISCARD std::string* release_allowance();
  void set_allocated_allowance(std::string* allowance);
  private:
  const std::string& _internal_allowance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allowance(const std::string& value);
  std::string* _internal_mutable_allowance();
  public:

  // string receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.FunctionCallPermission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> method_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allowance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class FullAccessPermission final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.FullAccessPermission) */ {
 public:
  inline FullAccessPermission() : FullAccessPermission(nullptr) {}
  explicit constexpr FullAccessPermission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullAccessPermission(const FullAccessPermission& from);
  FullAccessPermission(FullAccessPermission&& from) noexcept
    : FullAccessPermission() {
    *this = ::std::move(from);
  }

  inline FullAccessPermission& operator=(const FullAccessPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullAccessPermission& operator=(FullAccessPermission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullAccessPermission& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullAccessPermission* internal_default_instance() {
    return reinterpret_cast<const FullAccessPermission*>(
               &_FullAccessPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FullAccessPermission& a, FullAccessPermission& b) {
    a.Swap(&b);
  }
  inline void Swap(FullAccessPermission* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullAccessPermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullAccessPermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullAccessPermission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FullAccessPermission& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FullAccessPermission& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.FullAccessPermission";
  }
  protected:
  explicit FullAccessPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.FullAccessPermission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class AccessKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.AccessKey) */ {
 public:
  inline AccessKey() : AccessKey(nullptr) {}
  ~AccessKey() override;
  explicit constexpr AccessKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessKey(const AccessKey& from);
  AccessKey(AccessKey&& from) noexcept
    : AccessKey() {
    *this = ::std::move(from);
  }

  inline AccessKey& operator=(const AccessKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessKey& operator=(AccessKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessKey& default_instance() {
    return *internal_default_instance();
  }
  enum PermissionCase {
    kFunctionCall = 2,
    kFullAccess = 3,
    PERMISSION_NOT_SET = 0,
  };

  static inline const AccessKey* internal_default_instance() {
    return reinterpret_cast<const AccessKey*>(
               &_AccessKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccessKey& a, AccessKey& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccessKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccessKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.AccessKey";
  }
  protected:
  explicit AccessKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
    kFunctionCallFieldNumber = 2,
    kFullAccessFieldNumber = 3,
  };
  // uint64 nonce = 1;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
  bool has_function_call() const;
  private:
  bool _internal_has_function_call() const;
  public:
  void clear_function_call();
  const ::TW::NEAR::Proto::FunctionCallPermission& function_call() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::FunctionCallPermission* release_function_call();
  ::TW::NEAR::Proto::FunctionCallPermission* mutable_function_call();
  void set_allocated_function_call(::TW::NEAR::Proto::FunctionCallPermission* function_call);
  private:
  const ::TW::NEAR::Proto::FunctionCallPermission& _internal_function_call() const;
  ::TW::NEAR::Proto::FunctionCallPermission* _internal_mutable_function_call();
  public:
  void unsafe_arena_set_allocated_function_call(
      ::TW::NEAR::Proto::FunctionCallPermission* function_call);
  ::TW::NEAR::Proto::FunctionCallPermission* unsafe_arena_release_function_call();

  // .TW.NEAR.Proto.FullAccessPermission full_access = 3;
  bool has_full_access() const;
  private:
  bool _internal_has_full_access() const;
  public:
  void clear_full_access();
  const ::TW::NEAR::Proto::FullAccessPermission& full_access() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::FullAccessPermission* release_full_access();
  ::TW::NEAR::Proto::FullAccessPermission* mutable_full_access();
  void set_allocated_full_access(::TW::NEAR::Proto::FullAccessPermission* full_access);
  private:
  const ::TW::NEAR::Proto::FullAccessPermission& _internal_full_access() const;
  ::TW::NEAR::Proto::FullAccessPermission* _internal_mutable_full_access();
  public:
  void unsafe_arena_set_allocated_full_access(
      ::TW::NEAR::Proto::FullAccessPermission* full_access);
  ::TW::NEAR::Proto::FullAccessPermission* unsafe_arena_release_full_access();

  void clear_permission();
  PermissionCase permission_case() const;
  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.AccessKey)
 private:
  class _Internal;
  void set_has_function_call();
  void set_has_full_access();

  inline bool has_permission() const;
  inline void clear_has_permission();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t nonce_;
  union PermissionUnion {
    constexpr PermissionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::NEAR::Proto::FunctionCallPermission* function_call_;
    ::TW::NEAR::Proto::FullAccessPermission* full_access_;
  } permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class CreateAccount final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.CreateAccount) */ {
 public:
  inline CreateAccount() : CreateAccount(nullptr) {}
  explicit constexpr CreateAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccount(const CreateAccount& from);
  CreateAccount(CreateAccount&& from) noexcept
    : CreateAccount() {
    *this = ::std::move(from);
  }

  inline CreateAccount& operator=(const CreateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccount& operator=(CreateAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccount* internal_default_instance() {
    return reinterpret_cast<const CreateAccount*>(
               &_CreateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateAccount& a, CreateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateAccount& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateAccount& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.CreateAccount";
  }
  protected:
  explicit CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.CreateAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class DeployContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.DeployContract) */ {
 public:
  inline DeployContract() : DeployContract(nullptr) {}
  ~DeployContract() override;
  explicit constexpr DeployContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployContract(const DeployContract& from);
  DeployContract(DeployContract&& from) noexcept
    : DeployContract() {
    *this = ::std::move(from);
  }

  inline DeployContract& operator=(const DeployContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployContract& operator=(DeployContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployContract* internal_default_instance() {
    return reinterpret_cast<const DeployContract*>(
               &_DeployContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeployContract& a, DeployContract& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeployContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.DeployContract";
  }
  protected:
  explicit DeployContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // bytes code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.DeployContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.FunctionCall) */ {
 public:
  inline FunctionCall() : FunctionCall(nullptr) {}
  ~FunctionCall() override;
  explicit constexpr FunctionCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall(const FunctionCall& from);
  FunctionCall(FunctionCall&& from) noexcept
    : FunctionCall() {
    *this = ::std::move(from);
  }

  inline FunctionCall& operator=(const FunctionCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall& operator=(FunctionCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall* internal_default_instance() {
    return reinterpret_cast<const FunctionCall*>(
               &_FunctionCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FunctionCall& a, FunctionCall& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.FunctionCall";
  }
  protected:
  explicit FunctionCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 1,
    kArgsFieldNumber = 2,
    kDepositFieldNumber = 4,
    kGasFieldNumber = 3,
  };
  // string method_name = 1;
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // bytes args = 2;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // bytes deposit = 4;
  void clear_deposit();
  const std::string& deposit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deposit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deposit();
  PROTOBUF_NODISCARD std::string* release_deposit();
  void set_allocated_deposit(std::string* deposit);
  private:
  const std::string& _internal_deposit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deposit(const std::string& value);
  std::string* _internal_mutable_deposit();
  public:

  // uint64 gas = 3;
  void clear_gas();
  uint64_t gas() const;
  void set_gas(uint64_t value);
  private:
  uint64_t _internal_gas() const;
  void _internal_set_gas(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.FunctionCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deposit_;
  uint64_t gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  ~Transfer() override;
  explicit constexpr Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositFieldNumber = 1,
  };
  // bytes deposit = 1;
  void clear_deposit();
  const std::string& deposit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deposit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deposit();
  PROTOBUF_NODISCARD std::string* release_deposit();
  void set_allocated_deposit(std::string* deposit);
  private:
  const std::string& _internal_deposit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deposit(const std::string& value);
  std::string* _internal_mutable_deposit();
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deposit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class Stake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.Stake) */ {
 public:
  inline Stake() : Stake(nullptr) {}
  ~Stake() override;
  explicit constexpr Stake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stake(const Stake& from);
  Stake(Stake&& from) noexcept
    : Stake() {
    *this = ::std::move(from);
  }

  inline Stake& operator=(const Stake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stake& operator=(Stake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stake& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stake* internal_default_instance() {
    return reinterpret_cast<const Stake*>(
               &_Stake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Stake& a, Stake& b) {
    a.Swap(&b);
  }
  inline void Swap(Stake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.Stake";
  }
  protected:
  explicit Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // bytes stake = 1;
  void clear_stake();
  const std::string& stake() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stake(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stake();
  PROTOBUF_NODISCARD std::string* release_stake();
  void set_allocated_stake(std::string* stake);
  private:
  const std::string& _internal_stake() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stake(const std::string& value);
  std::string* _internal_mutable_stake();
  public:

  // .TW.NEAR.Proto.PublicKey public_key = 2;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const ::TW::NEAR::Proto::PublicKey& public_key() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::PublicKey* release_public_key();
  ::TW::NEAR::Proto::PublicKey* mutable_public_key();
  void set_allocated_public_key(::TW::NEAR::Proto::PublicKey* public_key);
  private:
  const ::TW::NEAR::Proto::PublicKey& _internal_public_key() const;
  ::TW::NEAR::Proto::PublicKey* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::TW::NEAR::Proto::PublicKey* public_key);
  ::TW::NEAR::Proto::PublicKey* unsafe_arena_release_public_key();

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.Stake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_;
  ::TW::NEAR::Proto::PublicKey* public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class AddKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.AddKey) */ {
 public:
  inline AddKey() : AddKey(nullptr) {}
  ~AddKey() override;
  explicit constexpr AddKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddKey(const AddKey& from);
  AddKey(AddKey&& from) noexcept
    : AddKey() {
    *this = ::std::move(from);
  }

  inline AddKey& operator=(const AddKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddKey& operator=(AddKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddKey* internal_default_instance() {
    return reinterpret_cast<const AddKey*>(
               &_AddKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddKey& a, AddKey& b) {
    a.Swap(&b);
  }
  inline void Swap(AddKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.AddKey";
  }
  protected:
  explicit AddKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kAccessKeyFieldNumber = 2,
  };
  // .TW.NEAR.Proto.PublicKey public_key = 1;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const ::TW::NEAR::Proto::PublicKey& public_key() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::PublicKey* release_public_key();
  ::TW::NEAR::Proto::PublicKey* mutable_public_key();
  void set_allocated_public_key(::TW::NEAR::Proto::PublicKey* public_key);
  private:
  const ::TW::NEAR::Proto::PublicKey& _internal_public_key() const;
  ::TW::NEAR::Proto::PublicKey* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::TW::NEAR::Proto::PublicKey* public_key);
  ::TW::NEAR::Proto::PublicKey* unsafe_arena_release_public_key();

  // .TW.NEAR.Proto.AccessKey access_key = 2;
  bool has_access_key() const;
  private:
  bool _internal_has_access_key() const;
  public:
  void clear_access_key();
  const ::TW::NEAR::Proto::AccessKey& access_key() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::AccessKey* release_access_key();
  ::TW::NEAR::Proto::AccessKey* mutable_access_key();
  void set_allocated_access_key(::TW::NEAR::Proto::AccessKey* access_key);
  private:
  const ::TW::NEAR::Proto::AccessKey& _internal_access_key() const;
  ::TW::NEAR::Proto::AccessKey* _internal_mutable_access_key();
  public:
  void unsafe_arena_set_allocated_access_key(
      ::TW::NEAR::Proto::AccessKey* access_key);
  ::TW::NEAR::Proto::AccessKey* unsafe_arena_release_access_key();

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.AddKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::NEAR::Proto::PublicKey* public_key_;
  ::TW::NEAR::Proto::AccessKey* access_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class DeleteKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.DeleteKey) */ {
 public:
  inline DeleteKey() : DeleteKey(nullptr) {}
  ~DeleteKey() override;
  explicit constexpr DeleteKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteKey(const DeleteKey& from);
  DeleteKey(DeleteKey&& from) noexcept
    : DeleteKey() {
    *this = ::std::move(from);
  }

  inline DeleteKey& operator=(const DeleteKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteKey& operator=(DeleteKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteKey* internal_default_instance() {
    return reinterpret_cast<const DeleteKey*>(
               &_DeleteKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteKey& a, DeleteKey& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.DeleteKey";
  }
  protected:
  explicit DeleteKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // .TW.NEAR.Proto.PublicKey public_key = 1;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const ::TW::NEAR::Proto::PublicKey& public_key() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::PublicKey* release_public_key();
  ::TW::NEAR::Proto::PublicKey* mutable_public_key();
  void set_allocated_public_key(::TW::NEAR::Proto::PublicKey* public_key);
  private:
  const ::TW::NEAR::Proto::PublicKey& _internal_public_key() const;
  ::TW::NEAR::Proto::PublicKey* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::TW::NEAR::Proto::PublicKey* public_key);
  ::TW::NEAR::Proto::PublicKey* unsafe_arena_release_public_key();

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.DeleteKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::NEAR::Proto::PublicKey* public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class DeleteAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.DeleteAccount) */ {
 public:
  inline DeleteAccount() : DeleteAccount(nullptr) {}
  ~DeleteAccount() override;
  explicit constexpr DeleteAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAccount(const DeleteAccount& from);
  DeleteAccount(DeleteAccount&& from) noexcept
    : DeleteAccount() {
    *this = ::std::move(from);
  }

  inline DeleteAccount& operator=(const DeleteAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAccount& operator=(DeleteAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAccount* internal_default_instance() {
    return reinterpret_cast<const DeleteAccount*>(
               &_DeleteAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteAccount& a, DeleteAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.DeleteAccount";
  }
  protected:
  explicit DeleteAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeneficiaryIdFieldNumber = 1,
  };
  // string beneficiary_id = 1;
  void clear_beneficiary_id();
  const std::string& beneficiary_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_beneficiary_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_beneficiary_id();
  PROTOBUF_NODISCARD std::string* release_beneficiary_id();
  void set_allocated_beneficiary_id(std::string* beneficiary_id);
  private:
  const std::string& _internal_beneficiary_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_beneficiary_id(const std::string& value);
  std::string* _internal_mutable_beneficiary_id();
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.DeleteAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr beneficiary_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class TokenTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.TokenTransfer) */ {
 public:
  inline TokenTransfer() : TokenTransfer(nullptr) {}
  ~TokenTransfer() override;
  explicit constexpr TokenTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenTransfer(const TokenTransfer& from);
  TokenTransfer(TokenTransfer&& from) noexcept
    : TokenTransfer() {
    *this = ::std::move(from);
  }

  inline TokenTransfer& operator=(const TokenTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenTransfer& operator=(TokenTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenTransfer* internal_default_instance() {
    return reinterpret_cast<const TokenTransfer*>(
               &_TokenTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TokenTransfer& a, TokenTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TokenTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.TokenTransfer";
  }
  protected:
  explicit TokenTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenAmountFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kDepositFieldNumber = 4,
    kGasFieldNumber = 3,
  };
  // string token_amount = 1;
  void clear_token_amount();
  const std::string& token_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_amount();
  PROTOBUF_NODISCARD std::string* release_token_amount();
  void set_allocated_token_amount(std::string* token_amount);
  private:
  const std::string& _internal_token_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_amount(const std::string& value);
  std::string* _internal_mutable_token_amount();
  public:

  // string receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // bytes deposit = 4;
  void clear_deposit();
  const std::string& deposit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deposit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deposit();
  PROTOBUF_NODISCARD std::string* release_deposit();
  void set_allocated_deposit(std::string* deposit);
  private:
  const std::string& _internal_deposit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deposit(const std::string& value);
  std::string* _internal_mutable_deposit();
  public:

  // uint64 gas = 3;
  void clear_gas();
  uint64_t gas() const;
  void set_gas(uint64_t value);
  private:
  uint64_t _internal_gas() const;
  void _internal_set_gas(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.TokenTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deposit_;
  uint64_t gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kCreateAccount = 1,
    kDeployContract = 2,
    kFunctionCall = 3,
    kTransfer = 4,
    kStake = 5,
    kAddKey = 6,
    kDeleteKey = 7,
    kDeleteAccount = 8,
    kTokenTransfer = 13,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateAccountFieldNumber = 1,
    kDeployContractFieldNumber = 2,
    kFunctionCallFieldNumber = 3,
    kTransferFieldNumber = 4,
    kStakeFieldNumber = 5,
    kAddKeyFieldNumber = 6,
    kDeleteKeyFieldNumber = 7,
    kDeleteAccountFieldNumber = 8,
    kTokenTransferFieldNumber = 13,
  };
  // .TW.NEAR.Proto.CreateAccount create_account = 1;
  bool has_create_account() const;
  private:
  bool _internal_has_create_account() const;
  public:
  void clear_create_account();
  const ::TW::NEAR::Proto::CreateAccount& create_account() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::CreateAccount* release_create_account();
  ::TW::NEAR::Proto::CreateAccount* mutable_create_account();
  void set_allocated_create_account(::TW::NEAR::Proto::CreateAccount* create_account);
  private:
  const ::TW::NEAR::Proto::CreateAccount& _internal_create_account() const;
  ::TW::NEAR::Proto::CreateAccount* _internal_mutable_create_account();
  public:
  void unsafe_arena_set_allocated_create_account(
      ::TW::NEAR::Proto::CreateAccount* create_account);
  ::TW::NEAR::Proto::CreateAccount* unsafe_arena_release_create_account();

  // .TW.NEAR.Proto.DeployContract deploy_contract = 2;
  bool has_deploy_contract() const;
  private:
  bool _internal_has_deploy_contract() const;
  public:
  void clear_deploy_contract();
  const ::TW::NEAR::Proto::DeployContract& deploy_contract() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::DeployContract* release_deploy_contract();
  ::TW::NEAR::Proto::DeployContract* mutable_deploy_contract();
  void set_allocated_deploy_contract(::TW::NEAR::Proto::DeployContract* deploy_contract);
  private:
  const ::TW::NEAR::Proto::DeployContract& _internal_deploy_contract() const;
  ::TW::NEAR::Proto::DeployContract* _internal_mutable_deploy_contract();
  public:
  void unsafe_arena_set_allocated_deploy_contract(
      ::TW::NEAR::Proto::DeployContract* deploy_contract);
  ::TW::NEAR::Proto::DeployContract* unsafe_arena_release_deploy_contract();

  // .TW.NEAR.Proto.FunctionCall function_call = 3;
  bool has_function_call() const;
  private:
  bool _internal_has_function_call() const;
  public:
  void clear_function_call();
  const ::TW::NEAR::Proto::FunctionCall& function_call() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::FunctionCall* release_function_call();
  ::TW::NEAR::Proto::FunctionCall* mutable_function_call();
  void set_allocated_function_call(::TW::NEAR::Proto::FunctionCall* function_call);
  private:
  const ::TW::NEAR::Proto::FunctionCall& _internal_function_call() const;
  ::TW::NEAR::Proto::FunctionCall* _internal_mutable_function_call();
  public:
  void unsafe_arena_set_allocated_function_call(
      ::TW::NEAR::Proto::FunctionCall* function_call);
  ::TW::NEAR::Proto::FunctionCall* unsafe_arena_release_function_call();

  // .TW.NEAR.Proto.Transfer transfer = 4;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::NEAR::Proto::Transfer& transfer() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::Transfer* release_transfer();
  ::TW::NEAR::Proto::Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::NEAR::Proto::Transfer* transfer);
  private:
  const ::TW::NEAR::Proto::Transfer& _internal_transfer() const;
  ::TW::NEAR::Proto::Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::NEAR::Proto::Transfer* transfer);
  ::TW::NEAR::Proto::Transfer* unsafe_arena_release_transfer();

  // .TW.NEAR.Proto.Stake stake = 5;
  bool has_stake() const;
  private:
  bool _internal_has_stake() const;
  public:
  void clear_stake();
  const ::TW::NEAR::Proto::Stake& stake() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::Stake* release_stake();
  ::TW::NEAR::Proto::Stake* mutable_stake();
  void set_allocated_stake(::TW::NEAR::Proto::Stake* stake);
  private:
  const ::TW::NEAR::Proto::Stake& _internal_stake() const;
  ::TW::NEAR::Proto::Stake* _internal_mutable_stake();
  public:
  void unsafe_arena_set_allocated_stake(
      ::TW::NEAR::Proto::Stake* stake);
  ::TW::NEAR::Proto::Stake* unsafe_arena_release_stake();

  // .TW.NEAR.Proto.AddKey add_key = 6;
  bool has_add_key() const;
  private:
  bool _internal_has_add_key() const;
  public:
  void clear_add_key();
  const ::TW::NEAR::Proto::AddKey& add_key() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::AddKey* release_add_key();
  ::TW::NEAR::Proto::AddKey* mutable_add_key();
  void set_allocated_add_key(::TW::NEAR::Proto::AddKey* add_key);
  private:
  const ::TW::NEAR::Proto::AddKey& _internal_add_key() const;
  ::TW::NEAR::Proto::AddKey* _internal_mutable_add_key();
  public:
  void unsafe_arena_set_allocated_add_key(
      ::TW::NEAR::Proto::AddKey* add_key);
  ::TW::NEAR::Proto::AddKey* unsafe_arena_release_add_key();

  // .TW.NEAR.Proto.DeleteKey delete_key = 7;
  bool has_delete_key() const;
  private:
  bool _internal_has_delete_key() const;
  public:
  void clear_delete_key();
  const ::TW::NEAR::Proto::DeleteKey& delete_key() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::DeleteKey* release_delete_key();
  ::TW::NEAR::Proto::DeleteKey* mutable_delete_key();
  void set_allocated_delete_key(::TW::NEAR::Proto::DeleteKey* delete_key);
  private:
  const ::TW::NEAR::Proto::DeleteKey& _internal_delete_key() const;
  ::TW::NEAR::Proto::DeleteKey* _internal_mutable_delete_key();
  public:
  void unsafe_arena_set_allocated_delete_key(
      ::TW::NEAR::Proto::DeleteKey* delete_key);
  ::TW::NEAR::Proto::DeleteKey* unsafe_arena_release_delete_key();

  // .TW.NEAR.Proto.DeleteAccount delete_account = 8;
  bool has_delete_account() const;
  private:
  bool _internal_has_delete_account() const;
  public:
  void clear_delete_account();
  const ::TW::NEAR::Proto::DeleteAccount& delete_account() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::DeleteAccount* release_delete_account();
  ::TW::NEAR::Proto::DeleteAccount* mutable_delete_account();
  void set_allocated_delete_account(::TW::NEAR::Proto::DeleteAccount* delete_account);
  private:
  const ::TW::NEAR::Proto::DeleteAccount& _internal_delete_account() const;
  ::TW::NEAR::Proto::DeleteAccount* _internal_mutable_delete_account();
  public:
  void unsafe_arena_set_allocated_delete_account(
      ::TW::NEAR::Proto::DeleteAccount* delete_account);
  ::TW::NEAR::Proto::DeleteAccount* unsafe_arena_release_delete_account();

  // .TW.NEAR.Proto.TokenTransfer token_transfer = 13;
  bool has_token_transfer() const;
  private:
  bool _internal_has_token_transfer() const;
  public:
  void clear_token_transfer();
  const ::TW::NEAR::Proto::TokenTransfer& token_transfer() const;
  PROTOBUF_NODISCARD ::TW::NEAR::Proto::TokenTransfer* release_token_transfer();
  ::TW::NEAR::Proto::TokenTransfer* mutable_token_transfer();
  void set_allocated_token_transfer(::TW::NEAR::Proto::TokenTransfer* token_transfer);
  private:
  const ::TW::NEAR::Proto::TokenTransfer& _internal_token_transfer() const;
  ::TW::NEAR::Proto::TokenTransfer* _internal_mutable_token_transfer();
  public:
  void unsafe_arena_set_allocated_token_transfer(
      ::TW::NEAR::Proto::TokenTransfer* token_transfer);
  ::TW::NEAR::Proto::TokenTransfer* unsafe_arena_release_token_transfer();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.Action)
 private:
  class _Internal;
  void set_has_create_account();
  void set_has_deploy_contract();
  void set_has_function_call();
  void set_has_transfer();
  void set_has_stake();
  void set_has_add_key();
  void set_has_delete_key();
  void set_has_delete_account();
  void set_has_token_transfer();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::NEAR::Proto::CreateAccount* create_account_;
    ::TW::NEAR::Proto::DeployContract* deploy_contract_;
    ::TW::NEAR::Proto::FunctionCall* function_call_;
    ::TW::NEAR::Proto::Transfer* transfer_;
    ::TW::NEAR::Proto::Stake* stake_;
    ::TW::NEAR::Proto::AddKey* add_key_;
    ::TW::NEAR::Proto::DeleteKey* delete_key_;
    ::TW::NEAR::Proto::DeleteAccount* delete_account_;
    ::TW::NEAR::Proto::TokenTransfer* token_transfer_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 5,
    kSignerIdFieldNumber = 1,
    kReceiverIdFieldNumber = 3,
    kBlockHashFieldNumber = 4,
    kPrivateKeyFieldNumber = 6,
    kPublicKeyFieldNumber = 7,
    kNonceFieldNumber = 2,
  };
  // repeated .TW.NEAR.Proto.Action actions = 5;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::TW::NEAR::Proto::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEAR::Proto::Action >*
      mutable_actions();
  private:
  const ::TW::NEAR::Proto::Action& _internal_actions(int index) const;
  ::TW::NEAR::Proto::Action* _internal_add_actions();
  public:
  const ::TW::NEAR::Proto::Action& actions(int index) const;
  ::TW::NEAR::Proto::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEAR::Proto::Action >&
      actions() const;

  // string signer_id = 1;
  void clear_signer_id();
  const std::string& signer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signer_id();
  PROTOBUF_NODISCARD std::string* release_signer_id();
  void set_allocated_signer_id(std::string* signer_id);
  private:
  const std::string& _internal_signer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer_id(const std::string& value);
  std::string* _internal_mutable_signer_id();
  public:

  // string receiver_id = 3;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // bytes block_hash = 4;
  void clear_block_hash();
  const std::string& block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // bytes private_key = 6;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // bytes public_key = 7;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint64 nonce = 2;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEAR::Proto::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  uint64_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEAR.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEAR.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignedTransactionFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kHashFieldNumber = 4,
    kErrorFieldNumber = 2,
  };
  // bytes signed_transaction = 1;
  void clear_signed_transaction();
  const std::string& signed_transaction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signed_transaction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signed_transaction();
  PROTOBUF_NODISCARD std::string* release_signed_transaction();
  void set_allocated_signed_transaction(std::string* signed_transaction);
  private:
  const std::string& _internal_signed_transaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signed_transaction(const std::string& value);
  std::string* _internal_mutable_signed_transaction();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bytes hash = 4;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEAR.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_transaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEAR_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicKey

// uint32 key_type = 1;
inline void PublicKey::clear_key_type() {
  key_type_ = 0u;
}
inline uint32_t PublicKey::_internal_key_type() const {
  return key_type_;
}
inline uint32_t PublicKey::key_type() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.PublicKey.key_type)
  return _internal_key_type();
}
inline void PublicKey::_internal_set_key_type(uint32_t value) {
  
  key_type_ = value;
}
inline void PublicKey::set_key_type(uint32_t value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.PublicKey.key_type)
}

// bytes data = 2;
inline void PublicKey::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PublicKey::data() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.PublicKey.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicKey::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.PublicKey.data)
}
inline std::string* PublicKey::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.PublicKey.data)
  return _s;
}
inline const std::string& PublicKey::_internal_data() const {
  return data_.Get();
}
inline void PublicKey::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublicKey::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublicKey::release_data() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.PublicKey.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublicKey::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.PublicKey.data)
}

// -------------------------------------------------------------------

// FunctionCallPermission

// bytes allowance = 1;
inline void FunctionCallPermission::clear_allowance() {
  allowance_.ClearToEmpty();
}
inline const std::string& FunctionCallPermission::allowance() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.FunctionCallPermission.allowance)
  return _internal_allowance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCallPermission::set_allowance(ArgT0&& arg0, ArgT... args) {
 
 allowance_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCallPermission.allowance)
}
inline std::string* FunctionCallPermission::mutable_allowance() {
  std::string* _s = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.FunctionCallPermission.allowance)
  return _s;
}
inline const std::string& FunctionCallPermission::_internal_allowance() const {
  return allowance_.Get();
}
inline void FunctionCallPermission::_internal_set_allowance(const std::string& value) {
  
  allowance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCallPermission::_internal_mutable_allowance() {
  
  return allowance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCallPermission::release_allowance() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.FunctionCallPermission.allowance)
  return allowance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FunctionCallPermission::set_allocated_allowance(std::string* allowance) {
  if (allowance != nullptr) {
    
  } else {
    
  }
  allowance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allowance,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (allowance_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    allowance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.FunctionCallPermission.allowance)
}

// string receiver_id = 2;
inline void FunctionCallPermission::clear_receiver_id() {
  receiver_id_.ClearToEmpty();
}
inline const std::string& FunctionCallPermission::receiver_id() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.FunctionCallPermission.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCallPermission::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCallPermission.receiver_id)
}
inline std::string* FunctionCallPermission::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.FunctionCallPermission.receiver_id)
  return _s;
}
inline const std::string& FunctionCallPermission::_internal_receiver_id() const {
  return receiver_id_.Get();
}
inline void FunctionCallPermission::_internal_set_receiver_id(const std::string& value) {
  
  receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCallPermission::_internal_mutable_receiver_id() {
  
  return receiver_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCallPermission::release_receiver_id() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.FunctionCallPermission.receiver_id)
  return receiver_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FunctionCallPermission::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  receiver_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.FunctionCallPermission.receiver_id)
}

// repeated string method_names = 3;
inline int FunctionCallPermission::_internal_method_names_size() const {
  return method_names_.size();
}
inline int FunctionCallPermission::method_names_size() const {
  return _internal_method_names_size();
}
inline void FunctionCallPermission::clear_method_names() {
  method_names_.Clear();
}
inline std::string* FunctionCallPermission::add_method_names() {
  std::string* _s = _internal_add_method_names();
  // @@protoc_insertion_point(field_add_mutable:TW.NEAR.Proto.FunctionCallPermission.method_names)
  return _s;
}
inline const std::string& FunctionCallPermission::_internal_method_names(int index) const {
  return method_names_.Get(index);
}
inline const std::string& FunctionCallPermission::method_names(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.FunctionCallPermission.method_names)
  return _internal_method_names(index);
}
inline std::string* FunctionCallPermission::mutable_method_names(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.FunctionCallPermission.method_names)
  return method_names_.Mutable(index);
}
inline void FunctionCallPermission::set_method_names(int index, const std::string& value) {
  method_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline void FunctionCallPermission::set_method_names(int index, std::string&& value) {
  method_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline void FunctionCallPermission::set_method_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  method_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline void FunctionCallPermission::set_method_names(int index, const char* value, size_t size) {
  method_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline std::string* FunctionCallPermission::_internal_add_method_names() {
  return method_names_.Add();
}
inline void FunctionCallPermission::add_method_names(const std::string& value) {
  method_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline void FunctionCallPermission::add_method_names(std::string&& value) {
  method_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline void FunctionCallPermission::add_method_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  method_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline void FunctionCallPermission::add_method_names(const char* value, size_t size) {
  method_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.NEAR.Proto.FunctionCallPermission.method_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FunctionCallPermission::method_names() const {
  // @@protoc_insertion_point(field_list:TW.NEAR.Proto.FunctionCallPermission.method_names)
  return method_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FunctionCallPermission::mutable_method_names() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEAR.Proto.FunctionCallPermission.method_names)
  return &method_names_;
}

// -------------------------------------------------------------------

// FullAccessPermission

// -------------------------------------------------------------------

// AccessKey

// uint64 nonce = 1;
inline void AccessKey::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t AccessKey::_internal_nonce() const {
  return nonce_;
}
inline uint64_t AccessKey::nonce() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.AccessKey.nonce)
  return _internal_nonce();
}
inline void AccessKey::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void AccessKey::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.AccessKey.nonce)
}

// .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
inline bool AccessKey::_internal_has_function_call() const {
  return permission_case() == kFunctionCall;
}
inline bool AccessKey::has_function_call() const {
  return _internal_has_function_call();
}
inline void AccessKey::set_has_function_call() {
  _oneof_case_[0] = kFunctionCall;
}
inline void AccessKey::clear_function_call() {
  if (_internal_has_function_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete permission_.function_call_;
    }
    clear_has_permission();
  }
}
inline ::TW::NEAR::Proto::FunctionCallPermission* AccessKey::release_function_call() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.AccessKey.function_call)
  if (_internal_has_function_call()) {
    clear_has_permission();
      ::TW::NEAR::Proto::FunctionCallPermission* temp = permission_.function_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    permission_.function_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::FunctionCallPermission& AccessKey::_internal_function_call() const {
  return _internal_has_function_call()
      ? *permission_.function_call_
      : reinterpret_cast< ::TW::NEAR::Proto::FunctionCallPermission&>(::TW::NEAR::Proto::_FunctionCallPermission_default_instance_);
}
inline const ::TW::NEAR::Proto::FunctionCallPermission& AccessKey::function_call() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.AccessKey.function_call)
  return _internal_function_call();
}
inline ::TW::NEAR::Proto::FunctionCallPermission* AccessKey::unsafe_arena_release_function_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.AccessKey.function_call)
  if (_internal_has_function_call()) {
    clear_has_permission();
    ::TW::NEAR::Proto::FunctionCallPermission* temp = permission_.function_call_;
    permission_.function_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccessKey::unsafe_arena_set_allocated_function_call(::TW::NEAR::Proto::FunctionCallPermission* function_call) {
  clear_permission();
  if (function_call) {
    set_has_function_call();
    permission_.function_call_ = function_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.AccessKey.function_call)
}
inline ::TW::NEAR::Proto::FunctionCallPermission* AccessKey::_internal_mutable_function_call() {
  if (!_internal_has_function_call()) {
    clear_permission();
    set_has_function_call();
    permission_.function_call_ = CreateMaybeMessage< ::TW::NEAR::Proto::FunctionCallPermission >(GetArenaForAllocation());
  }
  return permission_.function_call_;
}
inline ::TW::NEAR::Proto::FunctionCallPermission* AccessKey::mutable_function_call() {
  ::TW::NEAR::Proto::FunctionCallPermission* _msg = _internal_mutable_function_call();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.AccessKey.function_call)
  return _msg;
}

// .TW.NEAR.Proto.FullAccessPermission full_access = 3;
inline bool AccessKey::_internal_has_full_access() const {
  return permission_case() == kFullAccess;
}
inline bool AccessKey::has_full_access() const {
  return _internal_has_full_access();
}
inline void AccessKey::set_has_full_access() {
  _oneof_case_[0] = kFullAccess;
}
inline void AccessKey::clear_full_access() {
  if (_internal_has_full_access()) {
    if (GetArenaForAllocation() == nullptr) {
      delete permission_.full_access_;
    }
    clear_has_permission();
  }
}
inline ::TW::NEAR::Proto::FullAccessPermission* AccessKey::release_full_access() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.AccessKey.full_access)
  if (_internal_has_full_access()) {
    clear_has_permission();
      ::TW::NEAR::Proto::FullAccessPermission* temp = permission_.full_access_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    permission_.full_access_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::FullAccessPermission& AccessKey::_internal_full_access() const {
  return _internal_has_full_access()
      ? *permission_.full_access_
      : reinterpret_cast< ::TW::NEAR::Proto::FullAccessPermission&>(::TW::NEAR::Proto::_FullAccessPermission_default_instance_);
}
inline const ::TW::NEAR::Proto::FullAccessPermission& AccessKey::full_access() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.AccessKey.full_access)
  return _internal_full_access();
}
inline ::TW::NEAR::Proto::FullAccessPermission* AccessKey::unsafe_arena_release_full_access() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.AccessKey.full_access)
  if (_internal_has_full_access()) {
    clear_has_permission();
    ::TW::NEAR::Proto::FullAccessPermission* temp = permission_.full_access_;
    permission_.full_access_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccessKey::unsafe_arena_set_allocated_full_access(::TW::NEAR::Proto::FullAccessPermission* full_access) {
  clear_permission();
  if (full_access) {
    set_has_full_access();
    permission_.full_access_ = full_access;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.AccessKey.full_access)
}
inline ::TW::NEAR::Proto::FullAccessPermission* AccessKey::_internal_mutable_full_access() {
  if (!_internal_has_full_access()) {
    clear_permission();
    set_has_full_access();
    permission_.full_access_ = CreateMaybeMessage< ::TW::NEAR::Proto::FullAccessPermission >(GetArenaForAllocation());
  }
  return permission_.full_access_;
}
inline ::TW::NEAR::Proto::FullAccessPermission* AccessKey::mutable_full_access() {
  ::TW::NEAR::Proto::FullAccessPermission* _msg = _internal_mutable_full_access();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.AccessKey.full_access)
  return _msg;
}

inline bool AccessKey::has_permission() const {
  return permission_case() != PERMISSION_NOT_SET;
}
inline void AccessKey::clear_has_permission() {
  _oneof_case_[0] = PERMISSION_NOT_SET;
}
inline AccessKey::PermissionCase AccessKey::permission_case() const {
  return AccessKey::PermissionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateAccount

// -------------------------------------------------------------------

// DeployContract

// bytes code = 1;
inline void DeployContract::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& DeployContract::code() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.DeployContract.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeployContract::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.DeployContract.code)
}
inline std::string* DeployContract::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.DeployContract.code)
  return _s;
}
inline const std::string& DeployContract::_internal_code() const {
  return code_.Get();
}
inline void DeployContract::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeployContract::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeployContract::release_code() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.DeployContract.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeployContract::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.DeployContract.code)
}

// -------------------------------------------------------------------

// FunctionCall

// string method_name = 1;
inline void FunctionCall::clear_method_name() {
  method_name_.ClearToEmpty();
}
inline const std::string& FunctionCall::method_name() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.FunctionCall.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall::set_method_name(ArgT0&& arg0, ArgT... args) {
 
 method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCall.method_name)
}
inline std::string* FunctionCall::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.FunctionCall.method_name)
  return _s;
}
inline const std::string& FunctionCall::_internal_method_name() const {
  return method_name_.Get();
}
inline void FunctionCall::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall::_internal_mutable_method_name() {
  
  return method_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall::release_method_name() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.FunctionCall.method_name)
  return method_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FunctionCall::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.FunctionCall.method_name)
}

// bytes args = 2;
inline void FunctionCall::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& FunctionCall::args() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.FunctionCall.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCall.args)
}
inline std::string* FunctionCall::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.FunctionCall.args)
  return _s;
}
inline const std::string& FunctionCall::_internal_args() const {
  return args_.Get();
}
inline void FunctionCall::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall::release_args() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.FunctionCall.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FunctionCall::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.FunctionCall.args)
}

// uint64 gas = 3;
inline void FunctionCall::clear_gas() {
  gas_ = uint64_t{0u};
}
inline uint64_t FunctionCall::_internal_gas() const {
  return gas_;
}
inline uint64_t FunctionCall::gas() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.FunctionCall.gas)
  return _internal_gas();
}
inline void FunctionCall::_internal_set_gas(uint64_t value) {
  
  gas_ = value;
}
inline void FunctionCall::set_gas(uint64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCall.gas)
}

// bytes deposit = 4;
inline void FunctionCall::clear_deposit() {
  deposit_.ClearToEmpty();
}
inline const std::string& FunctionCall::deposit() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.FunctionCall.deposit)
  return _internal_deposit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall::set_deposit(ArgT0&& arg0, ArgT... args) {
 
 deposit_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.FunctionCall.deposit)
}
inline std::string* FunctionCall::mutable_deposit() {
  std::string* _s = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.FunctionCall.deposit)
  return _s;
}
inline const std::string& FunctionCall::_internal_deposit() const {
  return deposit_.Get();
}
inline void FunctionCall::_internal_set_deposit(const std::string& value) {
  
  deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall::_internal_mutable_deposit() {
  
  return deposit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall::release_deposit() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.FunctionCall.deposit)
  return deposit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FunctionCall::set_allocated_deposit(std::string* deposit) {
  if (deposit != nullptr) {
    
  } else {
    
  }
  deposit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deposit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deposit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.FunctionCall.deposit)
}

// -------------------------------------------------------------------

// Transfer

// bytes deposit = 1;
inline void Transfer::clear_deposit() {
  deposit_.ClearToEmpty();
}
inline const std::string& Transfer::deposit() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Transfer.deposit)
  return _internal_deposit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transfer::set_deposit(ArgT0&& arg0, ArgT... args) {
 
 deposit_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.Transfer.deposit)
}
inline std::string* Transfer::mutable_deposit() {
  std::string* _s = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Transfer.deposit)
  return _s;
}
inline const std::string& Transfer::_internal_deposit() const {
  return deposit_.Get();
}
inline void Transfer::_internal_set_deposit(const std::string& value) {
  
  deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transfer::_internal_mutable_deposit() {
  
  return deposit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transfer::release_deposit() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Transfer.deposit)
  return deposit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transfer::set_allocated_deposit(std::string* deposit) {
  if (deposit != nullptr) {
    
  } else {
    
  }
  deposit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deposit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deposit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Transfer.deposit)
}

// -------------------------------------------------------------------

// Stake

// bytes stake = 1;
inline void Stake::clear_stake() {
  stake_.ClearToEmpty();
}
inline const std::string& Stake::stake() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Stake.stake)
  return _internal_stake();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stake::set_stake(ArgT0&& arg0, ArgT... args) {
 
 stake_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.Stake.stake)
}
inline std::string* Stake::mutable_stake() {
  std::string* _s = _internal_mutable_stake();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Stake.stake)
  return _s;
}
inline const std::string& Stake::_internal_stake() const {
  return stake_.Get();
}
inline void Stake::_internal_set_stake(const std::string& value) {
  
  stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Stake::_internal_mutable_stake() {
  
  return stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Stake::release_stake() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Stake.stake)
  return stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Stake::set_allocated_stake(std::string* stake) {
  if (stake != nullptr) {
    
  } else {
    
  }
  stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stake_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Stake.stake)
}

// .TW.NEAR.Proto.PublicKey public_key = 2;
inline bool Stake::_internal_has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline bool Stake::has_public_key() const {
  return _internal_has_public_key();
}
inline void Stake::clear_public_key() {
  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
inline const ::TW::NEAR::Proto::PublicKey& Stake::_internal_public_key() const {
  const ::TW::NEAR::Proto::PublicKey* p = public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NEAR::Proto::PublicKey&>(
      ::TW::NEAR::Proto::_PublicKey_default_instance_);
}
inline const ::TW::NEAR::Proto::PublicKey& Stake::public_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Stake.public_key)
  return _internal_public_key();
}
inline void Stake::unsafe_arena_set_allocated_public_key(
    ::TW::NEAR::Proto::PublicKey* public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  public_key_ = public_key;
  if (public_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Stake.public_key)
}
inline ::TW::NEAR::Proto::PublicKey* Stake::release_public_key() {
  
  ::TW::NEAR::Proto::PublicKey* temp = public_key_;
  public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::NEAR::Proto::PublicKey* Stake::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Stake.public_key)
  
  ::TW::NEAR::Proto::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::TW::NEAR::Proto::PublicKey* Stake::_internal_mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NEAR::Proto::PublicKey>(GetArenaForAllocation());
    public_key_ = p;
  }
  return public_key_;
}
inline ::TW::NEAR::Proto::PublicKey* Stake::mutable_public_key() {
  ::TW::NEAR::Proto::PublicKey* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Stake.public_key)
  return _msg;
}
inline void Stake::set_allocated_public_key(::TW::NEAR::Proto::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::PublicKey>::GetOwningArena(public_key);
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Stake.public_key)
}

// -------------------------------------------------------------------

// AddKey

// .TW.NEAR.Proto.PublicKey public_key = 1;
inline bool AddKey::_internal_has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline bool AddKey::has_public_key() const {
  return _internal_has_public_key();
}
inline void AddKey::clear_public_key() {
  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
inline const ::TW::NEAR::Proto::PublicKey& AddKey::_internal_public_key() const {
  const ::TW::NEAR::Proto::PublicKey* p = public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NEAR::Proto::PublicKey&>(
      ::TW::NEAR::Proto::_PublicKey_default_instance_);
}
inline const ::TW::NEAR::Proto::PublicKey& AddKey::public_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.AddKey.public_key)
  return _internal_public_key();
}
inline void AddKey::unsafe_arena_set_allocated_public_key(
    ::TW::NEAR::Proto::PublicKey* public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  public_key_ = public_key;
  if (public_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.AddKey.public_key)
}
inline ::TW::NEAR::Proto::PublicKey* AddKey::release_public_key() {
  
  ::TW::NEAR::Proto::PublicKey* temp = public_key_;
  public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::NEAR::Proto::PublicKey* AddKey::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.AddKey.public_key)
  
  ::TW::NEAR::Proto::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::TW::NEAR::Proto::PublicKey* AddKey::_internal_mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NEAR::Proto::PublicKey>(GetArenaForAllocation());
    public_key_ = p;
  }
  return public_key_;
}
inline ::TW::NEAR::Proto::PublicKey* AddKey::mutable_public_key() {
  ::TW::NEAR::Proto::PublicKey* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.AddKey.public_key)
  return _msg;
}
inline void AddKey::set_allocated_public_key(::TW::NEAR::Proto::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::PublicKey>::GetOwningArena(public_key);
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.AddKey.public_key)
}

// .TW.NEAR.Proto.AccessKey access_key = 2;
inline bool AddKey::_internal_has_access_key() const {
  return this != internal_default_instance() && access_key_ != nullptr;
}
inline bool AddKey::has_access_key() const {
  return _internal_has_access_key();
}
inline void AddKey::clear_access_key() {
  if (GetArenaForAllocation() == nullptr && access_key_ != nullptr) {
    delete access_key_;
  }
  access_key_ = nullptr;
}
inline const ::TW::NEAR::Proto::AccessKey& AddKey::_internal_access_key() const {
  const ::TW::NEAR::Proto::AccessKey* p = access_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NEAR::Proto::AccessKey&>(
      ::TW::NEAR::Proto::_AccessKey_default_instance_);
}
inline const ::TW::NEAR::Proto::AccessKey& AddKey::access_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.AddKey.access_key)
  return _internal_access_key();
}
inline void AddKey::unsafe_arena_set_allocated_access_key(
    ::TW::NEAR::Proto::AccessKey* access_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_key_);
  }
  access_key_ = access_key;
  if (access_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.AddKey.access_key)
}
inline ::TW::NEAR::Proto::AccessKey* AddKey::release_access_key() {
  
  ::TW::NEAR::Proto::AccessKey* temp = access_key_;
  access_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::NEAR::Proto::AccessKey* AddKey::unsafe_arena_release_access_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.AddKey.access_key)
  
  ::TW::NEAR::Proto::AccessKey* temp = access_key_;
  access_key_ = nullptr;
  return temp;
}
inline ::TW::NEAR::Proto::AccessKey* AddKey::_internal_mutable_access_key() {
  
  if (access_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NEAR::Proto::AccessKey>(GetArenaForAllocation());
    access_key_ = p;
  }
  return access_key_;
}
inline ::TW::NEAR::Proto::AccessKey* AddKey::mutable_access_key() {
  ::TW::NEAR::Proto::AccessKey* _msg = _internal_mutable_access_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.AddKey.access_key)
  return _msg;
}
inline void AddKey::set_allocated_access_key(::TW::NEAR::Proto::AccessKey* access_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete access_key_;
  }
  if (access_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::AccessKey>::GetOwningArena(access_key);
    if (message_arena != submessage_arena) {
      access_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_key, submessage_arena);
    }
    
  } else {
    
  }
  access_key_ = access_key;
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.AddKey.access_key)
}

// -------------------------------------------------------------------

// DeleteKey

// .TW.NEAR.Proto.PublicKey public_key = 1;
inline bool DeleteKey::_internal_has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline bool DeleteKey::has_public_key() const {
  return _internal_has_public_key();
}
inline void DeleteKey::clear_public_key() {
  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
inline const ::TW::NEAR::Proto::PublicKey& DeleteKey::_internal_public_key() const {
  const ::TW::NEAR::Proto::PublicKey* p = public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NEAR::Proto::PublicKey&>(
      ::TW::NEAR::Proto::_PublicKey_default_instance_);
}
inline const ::TW::NEAR::Proto::PublicKey& DeleteKey::public_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.DeleteKey.public_key)
  return _internal_public_key();
}
inline void DeleteKey::unsafe_arena_set_allocated_public_key(
    ::TW::NEAR::Proto::PublicKey* public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  public_key_ = public_key;
  if (public_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.DeleteKey.public_key)
}
inline ::TW::NEAR::Proto::PublicKey* DeleteKey::release_public_key() {
  
  ::TW::NEAR::Proto::PublicKey* temp = public_key_;
  public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::NEAR::Proto::PublicKey* DeleteKey::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.DeleteKey.public_key)
  
  ::TW::NEAR::Proto::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::TW::NEAR::Proto::PublicKey* DeleteKey::_internal_mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NEAR::Proto::PublicKey>(GetArenaForAllocation());
    public_key_ = p;
  }
  return public_key_;
}
inline ::TW::NEAR::Proto::PublicKey* DeleteKey::mutable_public_key() {
  ::TW::NEAR::Proto::PublicKey* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.DeleteKey.public_key)
  return _msg;
}
inline void DeleteKey::set_allocated_public_key(::TW::NEAR::Proto::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::PublicKey>::GetOwningArena(public_key);
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.DeleteKey.public_key)
}

// -------------------------------------------------------------------

// DeleteAccount

// string beneficiary_id = 1;
inline void DeleteAccount::clear_beneficiary_id() {
  beneficiary_id_.ClearToEmpty();
}
inline const std::string& DeleteAccount::beneficiary_id() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.DeleteAccount.beneficiary_id)
  return _internal_beneficiary_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAccount::set_beneficiary_id(ArgT0&& arg0, ArgT... args) {
 
 beneficiary_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.DeleteAccount.beneficiary_id)
}
inline std::string* DeleteAccount::mutable_beneficiary_id() {
  std::string* _s = _internal_mutable_beneficiary_id();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.DeleteAccount.beneficiary_id)
  return _s;
}
inline const std::string& DeleteAccount::_internal_beneficiary_id() const {
  return beneficiary_id_.Get();
}
inline void DeleteAccount::_internal_set_beneficiary_id(const std::string& value) {
  
  beneficiary_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteAccount::_internal_mutable_beneficiary_id() {
  
  return beneficiary_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteAccount::release_beneficiary_id() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.DeleteAccount.beneficiary_id)
  return beneficiary_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteAccount::set_allocated_beneficiary_id(std::string* beneficiary_id) {
  if (beneficiary_id != nullptr) {
    
  } else {
    
  }
  beneficiary_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), beneficiary_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (beneficiary_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    beneficiary_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.DeleteAccount.beneficiary_id)
}

// -------------------------------------------------------------------

// TokenTransfer

// string token_amount = 1;
inline void TokenTransfer::clear_token_amount() {
  token_amount_.ClearToEmpty();
}
inline const std::string& TokenTransfer::token_amount() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.TokenTransfer.token_amount)
  return _internal_token_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenTransfer::set_token_amount(ArgT0&& arg0, ArgT... args) {
 
 token_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.TokenTransfer.token_amount)
}
inline std::string* TokenTransfer::mutable_token_amount() {
  std::string* _s = _internal_mutable_token_amount();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.TokenTransfer.token_amount)
  return _s;
}
inline const std::string& TokenTransfer::_internal_token_amount() const {
  return token_amount_.Get();
}
inline void TokenTransfer::_internal_set_token_amount(const std::string& value) {
  
  token_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenTransfer::_internal_mutable_token_amount() {
  
  return token_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenTransfer::release_token_amount() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.TokenTransfer.token_amount)
  return token_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenTransfer::set_allocated_token_amount(std::string* token_amount) {
  if (token_amount != nullptr) {
    
  } else {
    
  }
  token_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.TokenTransfer.token_amount)
}

// string receiver_id = 2;
inline void TokenTransfer::clear_receiver_id() {
  receiver_id_.ClearToEmpty();
}
inline const std::string& TokenTransfer::receiver_id() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.TokenTransfer.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenTransfer::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.TokenTransfer.receiver_id)
}
inline std::string* TokenTransfer::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.TokenTransfer.receiver_id)
  return _s;
}
inline const std::string& TokenTransfer::_internal_receiver_id() const {
  return receiver_id_.Get();
}
inline void TokenTransfer::_internal_set_receiver_id(const std::string& value) {
  
  receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenTransfer::_internal_mutable_receiver_id() {
  
  return receiver_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenTransfer::release_receiver_id() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.TokenTransfer.receiver_id)
  return receiver_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenTransfer::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  receiver_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.TokenTransfer.receiver_id)
}

// uint64 gas = 3;
inline void TokenTransfer::clear_gas() {
  gas_ = uint64_t{0u};
}
inline uint64_t TokenTransfer::_internal_gas() const {
  return gas_;
}
inline uint64_t TokenTransfer::gas() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.TokenTransfer.gas)
  return _internal_gas();
}
inline void TokenTransfer::_internal_set_gas(uint64_t value) {
  
  gas_ = value;
}
inline void TokenTransfer::set_gas(uint64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.TokenTransfer.gas)
}

// bytes deposit = 4;
inline void TokenTransfer::clear_deposit() {
  deposit_.ClearToEmpty();
}
inline const std::string& TokenTransfer::deposit() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.TokenTransfer.deposit)
  return _internal_deposit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenTransfer::set_deposit(ArgT0&& arg0, ArgT... args) {
 
 deposit_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.TokenTransfer.deposit)
}
inline std::string* TokenTransfer::mutable_deposit() {
  std::string* _s = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.TokenTransfer.deposit)
  return _s;
}
inline const std::string& TokenTransfer::_internal_deposit() const {
  return deposit_.Get();
}
inline void TokenTransfer::_internal_set_deposit(const std::string& value) {
  
  deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenTransfer::_internal_mutable_deposit() {
  
  return deposit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenTransfer::release_deposit() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.TokenTransfer.deposit)
  return deposit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenTransfer::set_allocated_deposit(std::string* deposit) {
  if (deposit != nullptr) {
    
  } else {
    
  }
  deposit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deposit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deposit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.TokenTransfer.deposit)
}

// -------------------------------------------------------------------

// Action

// .TW.NEAR.Proto.CreateAccount create_account = 1;
inline bool Action::_internal_has_create_account() const {
  return payload_case() == kCreateAccount;
}
inline bool Action::has_create_account() const {
  return _internal_has_create_account();
}
inline void Action::set_has_create_account() {
  _oneof_case_[0] = kCreateAccount;
}
inline void Action::clear_create_account() {
  if (_internal_has_create_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.create_account_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::CreateAccount* Action::release_create_account() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.create_account)
  if (_internal_has_create_account()) {
    clear_has_payload();
      ::TW::NEAR::Proto::CreateAccount* temp = payload_.create_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.create_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::CreateAccount& Action::_internal_create_account() const {
  return _internal_has_create_account()
      ? *payload_.create_account_
      : reinterpret_cast< ::TW::NEAR::Proto::CreateAccount&>(::TW::NEAR::Proto::_CreateAccount_default_instance_);
}
inline const ::TW::NEAR::Proto::CreateAccount& Action::create_account() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.create_account)
  return _internal_create_account();
}
inline ::TW::NEAR::Proto::CreateAccount* Action::unsafe_arena_release_create_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.create_account)
  if (_internal_has_create_account()) {
    clear_has_payload();
    ::TW::NEAR::Proto::CreateAccount* temp = payload_.create_account_;
    payload_.create_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_create_account(::TW::NEAR::Proto::CreateAccount* create_account) {
  clear_payload();
  if (create_account) {
    set_has_create_account();
    payload_.create_account_ = create_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.create_account)
}
inline ::TW::NEAR::Proto::CreateAccount* Action::_internal_mutable_create_account() {
  if (!_internal_has_create_account()) {
    clear_payload();
    set_has_create_account();
    payload_.create_account_ = CreateMaybeMessage< ::TW::NEAR::Proto::CreateAccount >(GetArenaForAllocation());
  }
  return payload_.create_account_;
}
inline ::TW::NEAR::Proto::CreateAccount* Action::mutable_create_account() {
  ::TW::NEAR::Proto::CreateAccount* _msg = _internal_mutable_create_account();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.create_account)
  return _msg;
}

// .TW.NEAR.Proto.DeployContract deploy_contract = 2;
inline bool Action::_internal_has_deploy_contract() const {
  return payload_case() == kDeployContract;
}
inline bool Action::has_deploy_contract() const {
  return _internal_has_deploy_contract();
}
inline void Action::set_has_deploy_contract() {
  _oneof_case_[0] = kDeployContract;
}
inline void Action::clear_deploy_contract() {
  if (_internal_has_deploy_contract()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.deploy_contract_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::DeployContract* Action::release_deploy_contract() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.deploy_contract)
  if (_internal_has_deploy_contract()) {
    clear_has_payload();
      ::TW::NEAR::Proto::DeployContract* temp = payload_.deploy_contract_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.deploy_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::DeployContract& Action::_internal_deploy_contract() const {
  return _internal_has_deploy_contract()
      ? *payload_.deploy_contract_
      : reinterpret_cast< ::TW::NEAR::Proto::DeployContract&>(::TW::NEAR::Proto::_DeployContract_default_instance_);
}
inline const ::TW::NEAR::Proto::DeployContract& Action::deploy_contract() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.deploy_contract)
  return _internal_deploy_contract();
}
inline ::TW::NEAR::Proto::DeployContract* Action::unsafe_arena_release_deploy_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.deploy_contract)
  if (_internal_has_deploy_contract()) {
    clear_has_payload();
    ::TW::NEAR::Proto::DeployContract* temp = payload_.deploy_contract_;
    payload_.deploy_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_deploy_contract(::TW::NEAR::Proto::DeployContract* deploy_contract) {
  clear_payload();
  if (deploy_contract) {
    set_has_deploy_contract();
    payload_.deploy_contract_ = deploy_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.deploy_contract)
}
inline ::TW::NEAR::Proto::DeployContract* Action::_internal_mutable_deploy_contract() {
  if (!_internal_has_deploy_contract()) {
    clear_payload();
    set_has_deploy_contract();
    payload_.deploy_contract_ = CreateMaybeMessage< ::TW::NEAR::Proto::DeployContract >(GetArenaForAllocation());
  }
  return payload_.deploy_contract_;
}
inline ::TW::NEAR::Proto::DeployContract* Action::mutable_deploy_contract() {
  ::TW::NEAR::Proto::DeployContract* _msg = _internal_mutable_deploy_contract();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.deploy_contract)
  return _msg;
}

// .TW.NEAR.Proto.FunctionCall function_call = 3;
inline bool Action::_internal_has_function_call() const {
  return payload_case() == kFunctionCall;
}
inline bool Action::has_function_call() const {
  return _internal_has_function_call();
}
inline void Action::set_has_function_call() {
  _oneof_case_[0] = kFunctionCall;
}
inline void Action::clear_function_call() {
  if (_internal_has_function_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.function_call_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::FunctionCall* Action::release_function_call() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.function_call)
  if (_internal_has_function_call()) {
    clear_has_payload();
      ::TW::NEAR::Proto::FunctionCall* temp = payload_.function_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.function_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::FunctionCall& Action::_internal_function_call() const {
  return _internal_has_function_call()
      ? *payload_.function_call_
      : reinterpret_cast< ::TW::NEAR::Proto::FunctionCall&>(::TW::NEAR::Proto::_FunctionCall_default_instance_);
}
inline const ::TW::NEAR::Proto::FunctionCall& Action::function_call() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.function_call)
  return _internal_function_call();
}
inline ::TW::NEAR::Proto::FunctionCall* Action::unsafe_arena_release_function_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.function_call)
  if (_internal_has_function_call()) {
    clear_has_payload();
    ::TW::NEAR::Proto::FunctionCall* temp = payload_.function_call_;
    payload_.function_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_function_call(::TW::NEAR::Proto::FunctionCall* function_call) {
  clear_payload();
  if (function_call) {
    set_has_function_call();
    payload_.function_call_ = function_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.function_call)
}
inline ::TW::NEAR::Proto::FunctionCall* Action::_internal_mutable_function_call() {
  if (!_internal_has_function_call()) {
    clear_payload();
    set_has_function_call();
    payload_.function_call_ = CreateMaybeMessage< ::TW::NEAR::Proto::FunctionCall >(GetArenaForAllocation());
  }
  return payload_.function_call_;
}
inline ::TW::NEAR::Proto::FunctionCall* Action::mutable_function_call() {
  ::TW::NEAR::Proto::FunctionCall* _msg = _internal_mutable_function_call();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.function_call)
  return _msg;
}

// .TW.NEAR.Proto.Transfer transfer = 4;
inline bool Action::_internal_has_transfer() const {
  return payload_case() == kTransfer;
}
inline bool Action::has_transfer() const {
  return _internal_has_transfer();
}
inline void Action::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void Action::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.transfer_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::Transfer* Action::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.transfer)
  if (_internal_has_transfer()) {
    clear_has_payload();
      ::TW::NEAR::Proto::Transfer* temp = payload_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::Transfer& Action::_internal_transfer() const {
  return _internal_has_transfer()
      ? *payload_.transfer_
      : reinterpret_cast< ::TW::NEAR::Proto::Transfer&>(::TW::NEAR::Proto::_Transfer_default_instance_);
}
inline const ::TW::NEAR::Proto::Transfer& Action::transfer() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.transfer)
  return _internal_transfer();
}
inline ::TW::NEAR::Proto::Transfer* Action::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.transfer)
  if (_internal_has_transfer()) {
    clear_has_payload();
    ::TW::NEAR::Proto::Transfer* temp = payload_.transfer_;
    payload_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_transfer(::TW::NEAR::Proto::Transfer* transfer) {
  clear_payload();
  if (transfer) {
    set_has_transfer();
    payload_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.transfer)
}
inline ::TW::NEAR::Proto::Transfer* Action::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_payload();
    set_has_transfer();
    payload_.transfer_ = CreateMaybeMessage< ::TW::NEAR::Proto::Transfer >(GetArenaForAllocation());
  }
  return payload_.transfer_;
}
inline ::TW::NEAR::Proto::Transfer* Action::mutable_transfer() {
  ::TW::NEAR::Proto::Transfer* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.transfer)
  return _msg;
}

// .TW.NEAR.Proto.Stake stake = 5;
inline bool Action::_internal_has_stake() const {
  return payload_case() == kStake;
}
inline bool Action::has_stake() const {
  return _internal_has_stake();
}
inline void Action::set_has_stake() {
  _oneof_case_[0] = kStake;
}
inline void Action::clear_stake() {
  if (_internal_has_stake()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.stake_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::Stake* Action::release_stake() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.stake)
  if (_internal_has_stake()) {
    clear_has_payload();
      ::TW::NEAR::Proto::Stake* temp = payload_.stake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::Stake& Action::_internal_stake() const {
  return _internal_has_stake()
      ? *payload_.stake_
      : reinterpret_cast< ::TW::NEAR::Proto::Stake&>(::TW::NEAR::Proto::_Stake_default_instance_);
}
inline const ::TW::NEAR::Proto::Stake& Action::stake() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.stake)
  return _internal_stake();
}
inline ::TW::NEAR::Proto::Stake* Action::unsafe_arena_release_stake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.stake)
  if (_internal_has_stake()) {
    clear_has_payload();
    ::TW::NEAR::Proto::Stake* temp = payload_.stake_;
    payload_.stake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_stake(::TW::NEAR::Proto::Stake* stake) {
  clear_payload();
  if (stake) {
    set_has_stake();
    payload_.stake_ = stake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.stake)
}
inline ::TW::NEAR::Proto::Stake* Action::_internal_mutable_stake() {
  if (!_internal_has_stake()) {
    clear_payload();
    set_has_stake();
    payload_.stake_ = CreateMaybeMessage< ::TW::NEAR::Proto::Stake >(GetArenaForAllocation());
  }
  return payload_.stake_;
}
inline ::TW::NEAR::Proto::Stake* Action::mutable_stake() {
  ::TW::NEAR::Proto::Stake* _msg = _internal_mutable_stake();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.stake)
  return _msg;
}

// .TW.NEAR.Proto.AddKey add_key = 6;
inline bool Action::_internal_has_add_key() const {
  return payload_case() == kAddKey;
}
inline bool Action::has_add_key() const {
  return _internal_has_add_key();
}
inline void Action::set_has_add_key() {
  _oneof_case_[0] = kAddKey;
}
inline void Action::clear_add_key() {
  if (_internal_has_add_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.add_key_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::AddKey* Action::release_add_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.add_key)
  if (_internal_has_add_key()) {
    clear_has_payload();
      ::TW::NEAR::Proto::AddKey* temp = payload_.add_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.add_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::AddKey& Action::_internal_add_key() const {
  return _internal_has_add_key()
      ? *payload_.add_key_
      : reinterpret_cast< ::TW::NEAR::Proto::AddKey&>(::TW::NEAR::Proto::_AddKey_default_instance_);
}
inline const ::TW::NEAR::Proto::AddKey& Action::add_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.add_key)
  return _internal_add_key();
}
inline ::TW::NEAR::Proto::AddKey* Action::unsafe_arena_release_add_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.add_key)
  if (_internal_has_add_key()) {
    clear_has_payload();
    ::TW::NEAR::Proto::AddKey* temp = payload_.add_key_;
    payload_.add_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_add_key(::TW::NEAR::Proto::AddKey* add_key) {
  clear_payload();
  if (add_key) {
    set_has_add_key();
    payload_.add_key_ = add_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.add_key)
}
inline ::TW::NEAR::Proto::AddKey* Action::_internal_mutable_add_key() {
  if (!_internal_has_add_key()) {
    clear_payload();
    set_has_add_key();
    payload_.add_key_ = CreateMaybeMessage< ::TW::NEAR::Proto::AddKey >(GetArenaForAllocation());
  }
  return payload_.add_key_;
}
inline ::TW::NEAR::Proto::AddKey* Action::mutable_add_key() {
  ::TW::NEAR::Proto::AddKey* _msg = _internal_mutable_add_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.add_key)
  return _msg;
}

// .TW.NEAR.Proto.DeleteKey delete_key = 7;
inline bool Action::_internal_has_delete_key() const {
  return payload_case() == kDeleteKey;
}
inline bool Action::has_delete_key() const {
  return _internal_has_delete_key();
}
inline void Action::set_has_delete_key() {
  _oneof_case_[0] = kDeleteKey;
}
inline void Action::clear_delete_key() {
  if (_internal_has_delete_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.delete_key_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::DeleteKey* Action::release_delete_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.delete_key)
  if (_internal_has_delete_key()) {
    clear_has_payload();
      ::TW::NEAR::Proto::DeleteKey* temp = payload_.delete_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.delete_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::DeleteKey& Action::_internal_delete_key() const {
  return _internal_has_delete_key()
      ? *payload_.delete_key_
      : reinterpret_cast< ::TW::NEAR::Proto::DeleteKey&>(::TW::NEAR::Proto::_DeleteKey_default_instance_);
}
inline const ::TW::NEAR::Proto::DeleteKey& Action::delete_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.delete_key)
  return _internal_delete_key();
}
inline ::TW::NEAR::Proto::DeleteKey* Action::unsafe_arena_release_delete_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.delete_key)
  if (_internal_has_delete_key()) {
    clear_has_payload();
    ::TW::NEAR::Proto::DeleteKey* temp = payload_.delete_key_;
    payload_.delete_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_delete_key(::TW::NEAR::Proto::DeleteKey* delete_key) {
  clear_payload();
  if (delete_key) {
    set_has_delete_key();
    payload_.delete_key_ = delete_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.delete_key)
}
inline ::TW::NEAR::Proto::DeleteKey* Action::_internal_mutable_delete_key() {
  if (!_internal_has_delete_key()) {
    clear_payload();
    set_has_delete_key();
    payload_.delete_key_ = CreateMaybeMessage< ::TW::NEAR::Proto::DeleteKey >(GetArenaForAllocation());
  }
  return payload_.delete_key_;
}
inline ::TW::NEAR::Proto::DeleteKey* Action::mutable_delete_key() {
  ::TW::NEAR::Proto::DeleteKey* _msg = _internal_mutable_delete_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.delete_key)
  return _msg;
}

// .TW.NEAR.Proto.DeleteAccount delete_account = 8;
inline bool Action::_internal_has_delete_account() const {
  return payload_case() == kDeleteAccount;
}
inline bool Action::has_delete_account() const {
  return _internal_has_delete_account();
}
inline void Action::set_has_delete_account() {
  _oneof_case_[0] = kDeleteAccount;
}
inline void Action::clear_delete_account() {
  if (_internal_has_delete_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.delete_account_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::DeleteAccount* Action::release_delete_account() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.delete_account)
  if (_internal_has_delete_account()) {
    clear_has_payload();
      ::TW::NEAR::Proto::DeleteAccount* temp = payload_.delete_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.delete_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::DeleteAccount& Action::_internal_delete_account() const {
  return _internal_has_delete_account()
      ? *payload_.delete_account_
      : reinterpret_cast< ::TW::NEAR::Proto::DeleteAccount&>(::TW::NEAR::Proto::_DeleteAccount_default_instance_);
}
inline const ::TW::NEAR::Proto::DeleteAccount& Action::delete_account() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.delete_account)
  return _internal_delete_account();
}
inline ::TW::NEAR::Proto::DeleteAccount* Action::unsafe_arena_release_delete_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.delete_account)
  if (_internal_has_delete_account()) {
    clear_has_payload();
    ::TW::NEAR::Proto::DeleteAccount* temp = payload_.delete_account_;
    payload_.delete_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_delete_account(::TW::NEAR::Proto::DeleteAccount* delete_account) {
  clear_payload();
  if (delete_account) {
    set_has_delete_account();
    payload_.delete_account_ = delete_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.delete_account)
}
inline ::TW::NEAR::Proto::DeleteAccount* Action::_internal_mutable_delete_account() {
  if (!_internal_has_delete_account()) {
    clear_payload();
    set_has_delete_account();
    payload_.delete_account_ = CreateMaybeMessage< ::TW::NEAR::Proto::DeleteAccount >(GetArenaForAllocation());
  }
  return payload_.delete_account_;
}
inline ::TW::NEAR::Proto::DeleteAccount* Action::mutable_delete_account() {
  ::TW::NEAR::Proto::DeleteAccount* _msg = _internal_mutable_delete_account();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.delete_account)
  return _msg;
}

// .TW.NEAR.Proto.TokenTransfer token_transfer = 13;
inline bool Action::_internal_has_token_transfer() const {
  return payload_case() == kTokenTransfer;
}
inline bool Action::has_token_transfer() const {
  return _internal_has_token_transfer();
}
inline void Action::set_has_token_transfer() {
  _oneof_case_[0] = kTokenTransfer;
}
inline void Action::clear_token_transfer() {
  if (_internal_has_token_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.token_transfer_;
    }
    clear_has_payload();
  }
}
inline ::TW::NEAR::Proto::TokenTransfer* Action::release_token_transfer() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.Action.token_transfer)
  if (_internal_has_token_transfer()) {
    clear_has_payload();
      ::TW::NEAR::Proto::TokenTransfer* temp = payload_.token_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.token_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEAR::Proto::TokenTransfer& Action::_internal_token_transfer() const {
  return _internal_has_token_transfer()
      ? *payload_.token_transfer_
      : reinterpret_cast< ::TW::NEAR::Proto::TokenTransfer&>(::TW::NEAR::Proto::_TokenTransfer_default_instance_);
}
inline const ::TW::NEAR::Proto::TokenTransfer& Action::token_transfer() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.Action.token_transfer)
  return _internal_token_transfer();
}
inline ::TW::NEAR::Proto::TokenTransfer* Action::unsafe_arena_release_token_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEAR.Proto.Action.token_transfer)
  if (_internal_has_token_transfer()) {
    clear_has_payload();
    ::TW::NEAR::Proto::TokenTransfer* temp = payload_.token_transfer_;
    payload_.token_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_token_transfer(::TW::NEAR::Proto::TokenTransfer* token_transfer) {
  clear_payload();
  if (token_transfer) {
    set_has_token_transfer();
    payload_.token_transfer_ = token_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEAR.Proto.Action.token_transfer)
}
inline ::TW::NEAR::Proto::TokenTransfer* Action::_internal_mutable_token_transfer() {
  if (!_internal_has_token_transfer()) {
    clear_payload();
    set_has_token_transfer();
    payload_.token_transfer_ = CreateMaybeMessage< ::TW::NEAR::Proto::TokenTransfer >(GetArenaForAllocation());
  }
  return payload_.token_transfer_;
}
inline ::TW::NEAR::Proto::TokenTransfer* Action::mutable_token_transfer() {
  ::TW::NEAR::Proto::TokenTransfer* _msg = _internal_mutable_token_transfer();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.Action.token_transfer)
  return _msg;
}

inline bool Action::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Action::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Action::PayloadCase Action::payload_case() const {
  return Action::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// string signer_id = 1;
inline void SigningInput::clear_signer_id() {
  signer_id_.ClearToEmpty();
}
inline const std::string& SigningInput::signer_id() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningInput.signer_id)
  return _internal_signer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_signer_id(ArgT0&& arg0, ArgT... args) {
 
 signer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningInput.signer_id)
}
inline std::string* SigningInput::mutable_signer_id() {
  std::string* _s = _internal_mutable_signer_id();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningInput.signer_id)
  return _s;
}
inline const std::string& SigningInput::_internal_signer_id() const {
  return signer_id_.Get();
}
inline void SigningInput::_internal_set_signer_id(const std::string& value) {
  
  signer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_signer_id() {
  
  return signer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_signer_id() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningInput.signer_id)
  return signer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_signer_id(std::string* signer_id) {
  if (signer_id != nullptr) {
    
  } else {
    
  }
  signer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signer_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningInput.signer_id)
}

// uint64 nonce = 2;
inline void SigningInput::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_nonce() const {
  return nonce_;
}
inline uint64_t SigningInput::nonce() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningInput.nonce)
  return _internal_nonce();
}
inline void SigningInput::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void SigningInput::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningInput.nonce)
}

// string receiver_id = 3;
inline void SigningInput::clear_receiver_id() {
  receiver_id_.ClearToEmpty();
}
inline const std::string& SigningInput::receiver_id() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningInput.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningInput.receiver_id)
}
inline std::string* SigningInput::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningInput.receiver_id)
  return _s;
}
inline const std::string& SigningInput::_internal_receiver_id() const {
  return receiver_id_.Get();
}
inline void SigningInput::_internal_set_receiver_id(const std::string& value) {
  
  receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_receiver_id() {
  
  return receiver_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_receiver_id() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningInput.receiver_id)
  return receiver_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  receiver_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningInput.receiver_id)
}

// bytes block_hash = 4;
inline void SigningInput::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& SigningInput::block_hash() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningInput.block_hash)
  return _internal_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_block_hash(ArgT0&& arg0, ArgT... args) {
 
 block_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningInput.block_hash)
}
inline std::string* SigningInput::mutable_block_hash() {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningInput.block_hash)
  return _s;
}
inline const std::string& SigningInput::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void SigningInput::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_block_hash() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningInput.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningInput.block_hash)
}

// repeated .TW.NEAR.Proto.Action actions = 5;
inline int SigningInput::_internal_actions_size() const {
  return actions_.size();
}
inline int SigningInput::actions_size() const {
  return _internal_actions_size();
}
inline void SigningInput::clear_actions() {
  actions_.Clear();
}
inline ::TW::NEAR::Proto::Action* SigningInput::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningInput.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEAR::Proto::Action >*
SigningInput::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEAR.Proto.SigningInput.actions)
  return &actions_;
}
inline const ::TW::NEAR::Proto::Action& SigningInput::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::TW::NEAR::Proto::Action& SigningInput::actions(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningInput.actions)
  return _internal_actions(index);
}
inline ::TW::NEAR::Proto::Action* SigningInput::_internal_add_actions() {
  return actions_.Add();
}
inline ::TW::NEAR::Proto::Action* SigningInput::add_actions() {
  ::TW::NEAR::Proto::Action* _add = _internal_add_actions();
  // @@protoc_insertion_point(field_add:TW.NEAR.Proto.SigningInput.actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEAR::Proto::Action >&
SigningInput::actions() const {
  // @@protoc_insertion_point(field_list:TW.NEAR.Proto.SigningInput.actions)
  return actions_;
}

// bytes private_key = 6;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningInput.private_key)
}

// bytes public_key = 7;
inline void SigningInput::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& SigningInput::public_key() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningInput.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningInput.public_key)
}
inline std::string* SigningInput::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningInput.public_key)
  return _s;
}
inline const std::string& SigningInput::_internal_public_key() const {
  return public_key_.Get();
}
inline void SigningInput::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_public_key() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningInput.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningInput.public_key)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes signed_transaction = 1;
inline void SigningOutput::clear_signed_transaction() {
  signed_transaction_.ClearToEmpty();
}
inline const std::string& SigningOutput::signed_transaction() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningOutput.signed_transaction)
  return _internal_signed_transaction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_signed_transaction(ArgT0&& arg0, ArgT... args) {
 
 signed_transaction_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningOutput.signed_transaction)
}
inline std::string* SigningOutput::mutable_signed_transaction() {
  std::string* _s = _internal_mutable_signed_transaction();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningOutput.signed_transaction)
  return _s;
}
inline const std::string& SigningOutput::_internal_signed_transaction() const {
  return signed_transaction_.Get();
}
inline void SigningOutput::_internal_set_signed_transaction(const std::string& value) {
  
  signed_transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_signed_transaction() {
  
  return signed_transaction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_signed_transaction() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningOutput.signed_transaction)
  return signed_transaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_signed_transaction(std::string* signed_transaction) {
  if (signed_transaction != nullptr) {
    
  } else {
    
  }
  signed_transaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_transaction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signed_transaction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signed_transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningOutput.signed_transaction)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningOutput.error)
}

// string error_message = 3;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningOutput.error_message)
}

// bytes hash = 4;
inline void SigningOutput::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& SigningOutput::hash() const {
  // @@protoc_insertion_point(field_get:TW.NEAR.Proto.SigningOutput.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEAR.Proto.SigningOutput.hash)
}
inline std::string* SigningOutput::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:TW.NEAR.Proto.SigningOutput.hash)
  return _s;
}
inline const std::string& SigningOutput::_internal_hash() const {
  return hash_.Get();
}
inline void SigningOutput::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_hash() {
  // @@protoc_insertion_point(field_release:TW.NEAR.Proto.SigningOutput.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.SigningOutput.hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace NEAR
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NEAR_2eproto
