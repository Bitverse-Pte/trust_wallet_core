// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cardano.proto

#include "Cardano.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Cardano {
namespace Proto {
constexpr OutPoint::OutPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_index_(uint64_t{0u}){}
struct OutPointDefaultTypeInternal {
  constexpr OutPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutPointDefaultTypeInternal() {}
  union {
    OutPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutPointDefaultTypeInternal _OutPoint_default_instance_;
constexpr TokenAmount::TokenAmount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_name_hex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TokenAmountDefaultTypeInternal {
  constexpr TokenAmountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenAmountDefaultTypeInternal() {}
  union {
    TokenAmount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenAmountDefaultTypeInternal _TokenAmount_default_instance_;
constexpr TxInput::TxInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_amount_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , out_point_(nullptr)
  , amount_(uint64_t{0u}){}
struct TxInputDefaultTypeInternal {
  constexpr TxInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxInputDefaultTypeInternal() {}
  union {
    TxInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxInputDefaultTypeInternal _TxInput_default_instance_;
constexpr TxOutput::TxOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_amount_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(uint64_t{0u}){}
struct TxOutputDefaultTypeInternal {
  constexpr TxOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxOutputDefaultTypeInternal() {}
  union {
    TxOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxOutputDefaultTypeInternal _TxOutput_default_instance_;
constexpr TokenBundle::TokenBundle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(){}
struct TokenBundleDefaultTypeInternal {
  constexpr TokenBundleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenBundleDefaultTypeInternal() {}
  union {
    TokenBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenBundleDefaultTypeInternal _TokenBundle_default_instance_;
constexpr Transfer::Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , change_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_amount_(nullptr)
  , amount_(uint64_t{0u})
  , force_fee_(uint64_t{0u})
  , use_max_amount_(false){}
struct TransferDefaultTypeInternal {
  constexpr TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferDefaultTypeInternal() {}
  union {
    Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferDefaultTypeInternal _Transfer_default_instance_;
constexpr RegisterStakingKey::RegisterStakingKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : staking_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deposit_amount_(uint64_t{0u}){}
struct RegisterStakingKeyDefaultTypeInternal {
  constexpr RegisterStakingKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterStakingKeyDefaultTypeInternal() {}
  union {
    RegisterStakingKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterStakingKeyDefaultTypeInternal _RegisterStakingKey_default_instance_;
constexpr DeregisterStakingKey::DeregisterStakingKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : staking_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , undeposit_amount_(uint64_t{0u}){}
struct DeregisterStakingKeyDefaultTypeInternal {
  constexpr DeregisterStakingKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeregisterStakingKeyDefaultTypeInternal() {}
  union {
    DeregisterStakingKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeregisterStakingKeyDefaultTypeInternal _DeregisterStakingKey_default_instance_;
constexpr Delegate::Delegate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : staking_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pool_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deposit_amount_(uint64_t{0u}){}
struct DelegateDefaultTypeInternal {
  constexpr DelegateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegateDefaultTypeInternal() {}
  union {
    Delegate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegateDefaultTypeInternal _Delegate_default_instance_;
constexpr Withdraw::Withdraw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : staking_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , withdraw_amount_(uint64_t{0u}){}
struct WithdrawDefaultTypeInternal {
  constexpr WithdrawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WithdrawDefaultTypeInternal() {}
  union {
    Withdraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WithdrawDefaultTypeInternal _Withdraw_default_instance_;
constexpr TransactionPlan::TransactionPlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : available_tokens_()
  , output_tokens_()
  , change_tokens_()
  , utxos_()
  , extra_outputs_()
  , available_amount_(uint64_t{0u})
  , amount_(uint64_t{0u})
  , fee_(uint64_t{0u})
  , change_(uint64_t{0u})
  , deposit_(uint64_t{0u})
  , undeposit_(uint64_t{0u})
  , error_(0)
{}
struct TransactionPlanDefaultTypeInternal {
  constexpr TransactionPlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionPlanDefaultTypeInternal() {}
  union {
    TransactionPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionPlanDefaultTypeInternal _TransactionPlan_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : utxos_()
  , private_key_()
  , extra_outputs_()
  , transfer_message_(nullptr)
  , plan_(nullptr)
  , register_staking_key_(nullptr)
  , delegate_(nullptr)
  , withdraw_(nullptr)
  , deregister_staking_key_(nullptr)
  , ttl_(uint64_t{0u}){}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tx_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Cardano
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Cardano_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Cardano_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Cardano_2eproto = nullptr;

const uint32_t TableStruct_Cardano_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::OutPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::OutPoint, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::OutPoint, output_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TokenAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TokenAmount, policy_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TokenAmount, asset_name_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TokenAmount, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TokenAmount, asset_name_hex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxInput, out_point_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxInput, address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxInput, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxInput, token_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxOutput, address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxOutput, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TxOutput, token_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TokenBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TokenBundle, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Transfer, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Transfer, change_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Transfer, token_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Transfer, use_max_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Transfer, force_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::RegisterStakingKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::RegisterStakingKey, staking_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::RegisterStakingKey, deposit_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::DeregisterStakingKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::DeregisterStakingKey, staking_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::DeregisterStakingKey, undeposit_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Delegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Delegate, staking_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Delegate, pool_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Delegate, deposit_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Withdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Withdraw, staking_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::Withdraw, withdraw_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, available_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, change_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, deposit_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, undeposit_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, available_tokens_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, output_tokens_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, change_tokens_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, utxos_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::TransactionPlan, extra_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, utxos_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, transfer_message_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, register_staking_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, delegate_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, withdraw_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, deregister_staking_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, ttl_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, plan_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningInput, extra_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningOutput, tx_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Cardano::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Cardano::Proto::OutPoint)},
  { 8, -1, -1, sizeof(::TW::Cardano::Proto::TokenAmount)},
  { 18, -1, -1, sizeof(::TW::Cardano::Proto::TxInput)},
  { 28, -1, -1, sizeof(::TW::Cardano::Proto::TxOutput)},
  { 37, -1, -1, sizeof(::TW::Cardano::Proto::TokenBundle)},
  { 44, -1, -1, sizeof(::TW::Cardano::Proto::Transfer)},
  { 56, -1, -1, sizeof(::TW::Cardano::Proto::RegisterStakingKey)},
  { 64, -1, -1, sizeof(::TW::Cardano::Proto::DeregisterStakingKey)},
  { 72, -1, -1, sizeof(::TW::Cardano::Proto::Delegate)},
  { 81, -1, -1, sizeof(::TW::Cardano::Proto::Withdraw)},
  { 89, -1, -1, sizeof(::TW::Cardano::Proto::TransactionPlan)},
  { 107, -1, -1, sizeof(::TW::Cardano::Proto::SigningInput)},
  { 123, -1, -1, sizeof(::TW::Cardano::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_OutPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_TokenAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_TxInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_TxOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_TokenBundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_RegisterStakingKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_DeregisterStakingKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_Delegate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_Withdraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_TransactionPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Cardano::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Cardano_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rCardano.proto\022\020TW.Cardano.Proto\032\014Commo"
  "n.proto\"1\n\010OutPoint\022\017\n\007tx_hash\030\001 \001(\014\022\024\n\014"
  "output_index\030\002 \001(\004\"\\\n\013TokenAmount\022\021\n\tpol"
  "icy_id\030\001 \001(\t\022\022\n\nasset_name\030\002 \001(\t\022\016\n\006amou"
  "nt\030\003 \001(\014\022\026\n\016asset_name_hex\030\004 \001(\t\"\216\001\n\007TxI"
  "nput\022-\n\tout_point\030\001 \001(\0132\032.TW.Cardano.Pro"
  "to.OutPoint\022\017\n\007address\030\002 \001(\t\022\016\n\006amount\030\003"
  " \001(\004\0223\n\014token_amount\030\004 \003(\0132\035.TW.Cardano."
  "Proto.TokenAmount\"`\n\010TxOutput\022\017\n\007address"
  "\030\001 \001(\t\022\016\n\006amount\030\002 \001(\004\0223\n\014token_amount\030\003"
  " \003(\0132\035.TW.Cardano.Proto.TokenAmount\";\n\013T"
  "okenBundle\022,\n\005token\030\001 \003(\0132\035.TW.Cardano.P"
  "roto.TokenAmount\"\246\001\n\010Transfer\022\022\n\nto_addr"
  "ess\030\001 \001(\t\022\026\n\016change_address\030\002 \001(\t\022\016\n\006amo"
  "unt\030\003 \001(\004\0223\n\014token_amount\030\004 \001(\0132\035.TW.Car"
  "dano.Proto.TokenBundle\022\026\n\016use_max_amount"
  "\030\005 \001(\010\022\021\n\tforce_fee\030\006 \001(\004\"E\n\022RegisterSta"
  "kingKey\022\027\n\017staking_address\030\001 \001(\t\022\026\n\016depo"
  "sit_amount\030\002 \001(\004\"I\n\024DeregisterStakingKey"
  "\022\027\n\017staking_address\030\001 \001(\t\022\030\n\020undeposit_a"
  "mount\030\002 \001(\004\"L\n\010Delegate\022\027\n\017staking_addre"
  "ss\030\001 \001(\t\022\017\n\007pool_id\030\002 \001(\014\022\026\n\016deposit_amo"
  "unt\030\003 \001(\004\"<\n\010Withdraw\022\027\n\017staking_address"
  "\030\001 \001(\t\022\027\n\017withdraw_amount\030\002 \001(\004\"\254\003\n\017Tran"
  "sactionPlan\022\030\n\020available_amount\030\001 \001(\004\022\016\n"
  "\006amount\030\002 \001(\004\022\013\n\003fee\030\003 \001(\004\022\016\n\006change\030\004 \001"
  "(\004\022\017\n\007deposit\030\n \001(\004\022\021\n\tundeposit\030\013 \001(\004\0227"
  "\n\020available_tokens\030\005 \003(\0132\035.TW.Cardano.Pr"
  "oto.TokenAmount\0224\n\routput_tokens\030\006 \003(\0132\035"
  ".TW.Cardano.Proto.TokenAmount\0224\n\rchange_"
  "tokens\030\007 \003(\0132\035.TW.Cardano.Proto.TokenAmo"
  "unt\022(\n\005utxos\030\010 \003(\0132\031.TW.Cardano.Proto.Tx"
  "Input\022,\n\005error\030\t \001(\0162\035.TW.Common.Proto.S"
  "igningError\0221\n\rextra_outputs\030\014 \003(\0132\032.TW."
  "Cardano.Proto.TxOutput\"\334\003\n\014SigningInput\022"
  "(\n\005utxos\030\001 \003(\0132\031.TW.Cardano.Proto.TxInpu"
  "t\022\023\n\013private_key\030\002 \003(\014\0224\n\020transfer_messa"
  "ge\030\003 \001(\0132\032.TW.Cardano.Proto.Transfer\022B\n\024"
  "register_staking_key\030\006 \001(\0132$.TW.Cardano."
  "Proto.RegisterStakingKey\022,\n\010delegate\030\007 \001"
  "(\0132\032.TW.Cardano.Proto.Delegate\022,\n\010withdr"
  "aw\030\010 \001(\0132\032.TW.Cardano.Proto.Withdraw\022F\n\026"
  "deregister_staking_key\030\t \001(\0132&.TW.Cardan"
  "o.Proto.DeregisterStakingKey\022\013\n\003ttl\030\004 \001("
  "\004\022/\n\004plan\030\005 \001(\0132!.TW.Cardano.Proto.Trans"
  "actionPlan\0221\n\rextra_outputs\030\n \003(\0132\032.TW.C"
  "ardano.Proto.TxOutput\"t\n\rSigningOutput\022\017"
  "\n\007encoded\030\001 \001(\014\022\r\n\005tx_id\030\002 \001(\014\022,\n\005error\030"
  "\003 \001(\0162\035.TW.Common.Proto.SigningError\022\025\n\r"
  "error_message\030\004 \001(\tB\027\n\025wallet.core.jni.p"
  "rotob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Cardano_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Cardano_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cardano_2eproto = {
  false, false, 2012, descriptor_table_protodef_Cardano_2eproto, "Cardano.proto", 
  &descriptor_table_Cardano_2eproto_once, descriptor_table_Cardano_2eproto_deps, 1, 13,
  schemas, file_default_instances, TableStruct_Cardano_2eproto::offsets,
  file_level_metadata_Cardano_2eproto, file_level_enum_descriptors_Cardano_2eproto, file_level_service_descriptors_Cardano_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Cardano_2eproto_getter() {
  return &descriptor_table_Cardano_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Cardano_2eproto(&descriptor_table_Cardano_2eproto);
namespace TW {
namespace Cardano {
namespace Proto {

// ===================================================================

class OutPoint::_Internal {
 public:
};

OutPoint::OutPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.OutPoint)
}
OutPoint::OutPoint(const OutPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_hash(), 
      GetArenaForAllocation());
  }
  output_index_ = from.output_index_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.OutPoint)
}

inline void OutPoint::SharedCtor() {
tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_index_ = uint64_t{0u};
}

OutPoint::~OutPoint() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.OutPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutPoint::ArenaDtor(void* object) {
  OutPoint* _this = reinterpret_cast< OutPoint* >(object);
  (void)_this;
}
void OutPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.OutPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_.ClearToEmpty();
  output_index_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 output_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          output_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.OutPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // uint64 output_index = 2;
  if (this->_internal_output_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_output_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.OutPoint)
  return target;
}

size_t OutPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.OutPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // uint64 output_index = 2;
  if (this->_internal_output_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_output_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutPoint::GetClassData() const { return &_class_data_; }

void OutPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutPoint *>(to)->MergeFrom(
      static_cast<const OutPoint &>(from));
}


void OutPoint::MergeFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.OutPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash().empty()) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from._internal_output_index() != 0) {
    _internal_set_output_index(from._internal_output_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutPoint::CopyFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.OutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutPoint::IsInitialized() const {
  return true;
}

void OutPoint::InternalSwap(OutPoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_hash_, lhs_arena,
      &other->tx_hash_, rhs_arena
  );
  swap(output_index_, other->output_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[0]);
}

// ===================================================================

class TokenAmount::_Internal {
 public:
};

TokenAmount::TokenAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.TokenAmount)
}
TokenAmount::TokenAmount(const TokenAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policy_id().empty()) {
    policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policy_id(), 
      GetArenaForAllocation());
  }
  asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    asset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_name().empty()) {
    asset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_name(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  asset_name_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    asset_name_hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_name_hex().empty()) {
    asset_name_hex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_name_hex(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.TokenAmount)
}

inline void TokenAmount::SharedCtor() {
policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  asset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
asset_name_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  asset_name_hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenAmount::~TokenAmount() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.TokenAmount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  policy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_name_hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenAmount::ArenaDtor(void* object) {
  TokenAmount* _this = reinterpret_cast< TokenAmount* >(object);
  (void)_this;
}
void TokenAmount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.TokenAmount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_id_.ClearToEmpty();
  asset_name_.ClearToEmpty();
  amount_.ClearToEmpty();
  asset_name_hex_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string policy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.TokenAmount.policy_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string asset_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_asset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.TokenAmount.asset_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string asset_name_hex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_asset_name_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.TokenAmount.asset_name_hex"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenAmount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.TokenAmount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy_id().data(), static_cast<int>(this->_internal_policy_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.TokenAmount.policy_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy_id(), target);
  }

  // string asset_name = 2;
  if (!this->_internal_asset_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_name().data(), static_cast<int>(this->_internal_asset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.TokenAmount.asset_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset_name(), target);
  }

  // bytes amount = 3;
  if (!this->_internal_amount().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // string asset_name_hex = 4;
  if (!this->_internal_asset_name_hex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_name_hex().data(), static_cast<int>(this->_internal_asset_name_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.TokenAmount.asset_name_hex");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset_name_hex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.TokenAmount)
  return target;
}

size_t TokenAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.TokenAmount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy_id());
  }

  // string asset_name = 2;
  if (!this->_internal_asset_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_name());
  }

  // bytes amount = 3;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // string asset_name_hex = 4;
  if (!this->_internal_asset_name_hex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_name_hex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenAmount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenAmount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenAmount::GetClassData() const { return &_class_data_; }

void TokenAmount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenAmount *>(to)->MergeFrom(
      static_cast<const TokenAmount &>(from));
}


void TokenAmount::MergeFrom(const TokenAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.TokenAmount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_policy_id().empty()) {
    _internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_asset_name().empty()) {
    _internal_set_asset_name(from._internal_asset_name());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_asset_name_hex().empty()) {
    _internal_set_asset_name_hex(from._internal_asset_name_hex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenAmount::CopyFrom(const TokenAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.TokenAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenAmount::IsInitialized() const {
  return true;
}

void TokenAmount::InternalSwap(TokenAmount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &policy_id_, lhs_arena,
      &other->policy_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_name_, lhs_arena,
      &other->asset_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_name_hex_, lhs_arena,
      &other->asset_name_hex_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenAmount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[1]);
}

// ===================================================================

class TxInput::_Internal {
 public:
  static const ::TW::Cardano::Proto::OutPoint& out_point(const TxInput* msg);
};

const ::TW::Cardano::Proto::OutPoint&
TxInput::_Internal::out_point(const TxInput* msg) {
  return *msg->out_point_;
}
TxInput::TxInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  token_amount_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.TxInput)
}
TxInput::TxInput(const TxInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      token_amount_(from.token_amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_out_point()) {
    out_point_ = new ::TW::Cardano::Proto::OutPoint(*from.out_point_);
  } else {
    out_point_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.TxInput)
}

inline void TxInput::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&out_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&out_point_)) + sizeof(amount_));
}

TxInput::~TxInput() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.TxInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_point_;
}

void TxInput::ArenaDtor(void* object) {
  TxInput* _this = reinterpret_cast< TxInput* >(object);
  (void)_this;
}
void TxInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.TxInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_amount_.Clear();
  address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && out_point_ != nullptr) {
    delete out_point_;
  }
  out_point_ = nullptr;
  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Cardano.Proto.OutPoint out_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.TxInput.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TokenAmount token_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_token_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.TxInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Cardano.Proto.OutPoint out_point = 1;
  if (this->_internal_has_out_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::out_point(this), target, stream);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.TxInput.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // uint64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // repeated .TW.Cardano.Proto.TokenAmount token_amount = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_token_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_token_amount(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.TxInput)
  return target;
}

size_t TxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.TxInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Cardano.Proto.TokenAmount token_amount = 4;
  total_size += 1UL * this->_internal_token_amount_size();
  for (const auto& msg : this->token_amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .TW.Cardano.Proto.OutPoint out_point = 1;
  if (this->_internal_has_out_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_point_);
  }

  // uint64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxInput::GetClassData() const { return &_class_data_; }

void TxInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxInput *>(to)->MergeFrom(
      static_cast<const TxInput &>(from));
}


void TxInput::MergeFrom(const TxInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.TxInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  token_amount_.MergeFrom(from.token_amount_);
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_has_out_point()) {
    _internal_mutable_out_point()->::TW::Cardano::Proto::OutPoint::MergeFrom(from._internal_out_point());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxInput::CopyFrom(const TxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.TxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxInput::IsInitialized() const {
  return true;
}

void TxInput::InternalSwap(TxInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  token_amount_.InternalSwap(&other->token_amount_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxInput, amount_)
      + sizeof(TxInput::amount_)
      - PROTOBUF_FIELD_OFFSET(TxInput, out_point_)>(
          reinterpret_cast<char*>(&out_point_),
          reinterpret_cast<char*>(&other->out_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[2]);
}

// ===================================================================

class TxOutput::_Internal {
 public:
};

TxOutput::TxOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  token_amount_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.TxOutput)
}
TxOutput::TxOutput(const TxOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      token_amount_(from.token_amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.TxOutput)
}

inline void TxOutput::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = uint64_t{0u};
}

TxOutput::~TxOutput() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.TxOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxOutput::ArenaDtor(void* object) {
  TxOutput* _this = reinterpret_cast< TxOutput* >(object);
  (void)_this;
}
void TxOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.TxOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_amount_.Clear();
  address_.ClearToEmpty();
  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.TxOutput.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TokenAmount token_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_token_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.TxOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.TxOutput.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // repeated .TW.Cardano.Proto.TokenAmount token_amount = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_token_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_token_amount(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.TxOutput)
  return target;
}

size_t TxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.TxOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Cardano.Proto.TokenAmount token_amount = 3;
  total_size += 1UL * this->_internal_token_amount_size();
  for (const auto& msg : this->token_amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxOutput::GetClassData() const { return &_class_data_; }

void TxOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxOutput *>(to)->MergeFrom(
      static_cast<const TxOutput &>(from));
}


void TxOutput::MergeFrom(const TxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.TxOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  token_amount_.MergeFrom(from.token_amount_);
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxOutput::CopyFrom(const TxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.TxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxOutput::IsInitialized() const {
  return true;
}

void TxOutput::InternalSwap(TxOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  token_amount_.InternalSwap(&other->token_amount_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[3]);
}

// ===================================================================

class TokenBundle::_Internal {
 public:
};

TokenBundle::TokenBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  token_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.TokenBundle)
}
TokenBundle::TokenBundle(const TokenBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      token_(from.token_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.TokenBundle)
}

inline void TokenBundle::SharedCtor() {
}

TokenBundle::~TokenBundle() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.TokenBundle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TokenBundle::ArenaDtor(void* object) {
  TokenBundle* _this = reinterpret_cast< TokenBundle* >(object);
  (void)_this;
}
void TokenBundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.TokenBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TW.Cardano.Proto.TokenAmount token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_token(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.TokenBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Cardano.Proto.TokenAmount token = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_token_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_token(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.TokenBundle)
  return target;
}

size_t TokenBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.TokenBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Cardano.Proto.TokenAmount token = 1;
  total_size += 1UL * this->_internal_token_size();
  for (const auto& msg : this->token_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenBundle::GetClassData() const { return &_class_data_; }

void TokenBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenBundle *>(to)->MergeFrom(
      static_cast<const TokenBundle &>(from));
}


void TokenBundle::MergeFrom(const TokenBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.TokenBundle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  token_.MergeFrom(from.token_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenBundle::CopyFrom(const TokenBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.TokenBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenBundle::IsInitialized() const {
  return true;
}

void TokenBundle::InternalSwap(TokenBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  token_.InternalSwap(&other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenBundle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[4]);
}

// ===================================================================

class Transfer::_Internal {
 public:
  static const ::TW::Cardano::Proto::TokenBundle& token_amount(const Transfer* msg);
};

const ::TW::Cardano::Proto::TokenBundle&
Transfer::_Internal::token_amount(const Transfer* msg) {
  return *msg->token_amount_;
}
Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_change_address().empty()) {
    change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_token_amount()) {
    token_amount_ = new ::TW::Cardano::Proto::TokenBundle(*from.token_amount_);
  } else {
    token_amount_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_max_amount_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(use_max_amount_));
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.Transfer)
}

inline void Transfer::SharedCtor() {
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
change_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_max_amount_) -
    reinterpret_cast<char*>(&token_amount_)) + sizeof(use_max_amount_));
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_amount_;
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  change_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && token_amount_ != nullptr) {
    delete token_amount_;
  }
  token_amount_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_max_amount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(use_max_amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.Transfer.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string change_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_change_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.Transfer.change_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cardano.Proto.TokenBundle token_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_max_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          use_max_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 force_fee = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          force_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_address = 1;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.Transfer.to_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_address(), target);
  }

  // string change_address = 2;
  if (!this->_internal_change_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_change_address().data(), static_cast<int>(this->_internal_change_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.Transfer.change_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_change_address(), target);
  }

  // uint64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // .TW.Cardano.Proto.TokenBundle token_amount = 4;
  if (this->_internal_has_token_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::token_amount(this), target, stream);
  }

  // bool use_max_amount = 5;
  if (this->_internal_use_max_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_max_amount(), target);
  }

  // uint64 force_fee = 6;
  if (this->_internal_force_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_force_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 1;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string change_address = 2;
  if (!this->_internal_change_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_address());
  }

  // .TW.Cardano.Proto.TokenBundle token_amount = 4;
  if (this->_internal_has_token_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_amount_);
  }

  // uint64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint64 force_fee = 6;
  if (this->_internal_force_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_force_fee());
  }

  // bool use_max_amount = 5;
  if (this->_internal_use_max_amount() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transfer::GetClassData() const { return &_class_data_; }

void Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transfer *>(to)->MergeFrom(
      static_cast<const Transfer &>(from));
}


void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (!from._internal_change_address().empty()) {
    _internal_set_change_address(from._internal_change_address());
  }
  if (from._internal_has_token_amount()) {
    _internal_mutable_token_amount()->::TW::Cardano::Proto::TokenBundle::MergeFrom(from._internal_token_amount());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_force_fee() != 0) {
    _internal_set_force_fee(from._internal_force_fee());
  }
  if (from._internal_use_max_amount() != 0) {
    _internal_set_use_max_amount(from._internal_use_max_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &change_address_, lhs_arena,
      &other->change_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transfer, use_max_amount_)
      + sizeof(Transfer::use_max_amount_)
      - PROTOBUF_FIELD_OFFSET(Transfer, token_amount_)>(
          reinterpret_cast<char*>(&token_amount_),
          reinterpret_cast<char*>(&other->token_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[5]);
}

// ===================================================================

class RegisterStakingKey::_Internal {
 public:
};

RegisterStakingKey::RegisterStakingKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.RegisterStakingKey)
}
RegisterStakingKey::RegisterStakingKey(const RegisterStakingKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_staking_address().empty()) {
    staking_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staking_address(), 
      GetArenaForAllocation());
  }
  deposit_amount_ = from.deposit_amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.RegisterStakingKey)
}

inline void RegisterStakingKey::SharedCtor() {
staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deposit_amount_ = uint64_t{0u};
}

RegisterStakingKey::~RegisterStakingKey() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.RegisterStakingKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterStakingKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  staking_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterStakingKey::ArenaDtor(void* object) {
  RegisterStakingKey* _this = reinterpret_cast< RegisterStakingKey* >(object);
  (void)_this;
}
void RegisterStakingKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterStakingKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterStakingKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.RegisterStakingKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staking_address_.ClearToEmpty();
  deposit_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterStakingKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string staking_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_staking_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.RegisterStakingKey.staking_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 deposit_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          deposit_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterStakingKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.RegisterStakingKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staking_address().data(), static_cast<int>(this->_internal_staking_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.RegisterStakingKey.staking_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_staking_address(), target);
  }

  // uint64 deposit_amount = 2;
  if (this->_internal_deposit_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_deposit_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.RegisterStakingKey)
  return target;
}

size_t RegisterStakingKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.RegisterStakingKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staking_address());
  }

  // uint64 deposit_amount = 2;
  if (this->_internal_deposit_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_deposit_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterStakingKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterStakingKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterStakingKey::GetClassData() const { return &_class_data_; }

void RegisterStakingKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterStakingKey *>(to)->MergeFrom(
      static_cast<const RegisterStakingKey &>(from));
}


void RegisterStakingKey::MergeFrom(const RegisterStakingKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.RegisterStakingKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_staking_address().empty()) {
    _internal_set_staking_address(from._internal_staking_address());
  }
  if (from._internal_deposit_amount() != 0) {
    _internal_set_deposit_amount(from._internal_deposit_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterStakingKey::CopyFrom(const RegisterStakingKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.RegisterStakingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterStakingKey::IsInitialized() const {
  return true;
}

void RegisterStakingKey::InternalSwap(RegisterStakingKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &staking_address_, lhs_arena,
      &other->staking_address_, rhs_arena
  );
  swap(deposit_amount_, other->deposit_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterStakingKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[6]);
}

// ===================================================================

class DeregisterStakingKey::_Internal {
 public:
};

DeregisterStakingKey::DeregisterStakingKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.DeregisterStakingKey)
}
DeregisterStakingKey::DeregisterStakingKey(const DeregisterStakingKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_staking_address().empty()) {
    staking_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staking_address(), 
      GetArenaForAllocation());
  }
  undeposit_amount_ = from.undeposit_amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.DeregisterStakingKey)
}

inline void DeregisterStakingKey::SharedCtor() {
staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
undeposit_amount_ = uint64_t{0u};
}

DeregisterStakingKey::~DeregisterStakingKey() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.DeregisterStakingKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeregisterStakingKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  staking_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeregisterStakingKey::ArenaDtor(void* object) {
  DeregisterStakingKey* _this = reinterpret_cast< DeregisterStakingKey* >(object);
  (void)_this;
}
void DeregisterStakingKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeregisterStakingKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeregisterStakingKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.DeregisterStakingKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staking_address_.ClearToEmpty();
  undeposit_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeregisterStakingKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string staking_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_staking_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.DeregisterStakingKey.staking_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 undeposit_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          undeposit_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeregisterStakingKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.DeregisterStakingKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staking_address().data(), static_cast<int>(this->_internal_staking_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.DeregisterStakingKey.staking_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_staking_address(), target);
  }

  // uint64 undeposit_amount = 2;
  if (this->_internal_undeposit_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_undeposit_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.DeregisterStakingKey)
  return target;
}

size_t DeregisterStakingKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.DeregisterStakingKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staking_address());
  }

  // uint64 undeposit_amount = 2;
  if (this->_internal_undeposit_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_undeposit_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeregisterStakingKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeregisterStakingKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeregisterStakingKey::GetClassData() const { return &_class_data_; }

void DeregisterStakingKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeregisterStakingKey *>(to)->MergeFrom(
      static_cast<const DeregisterStakingKey &>(from));
}


void DeregisterStakingKey::MergeFrom(const DeregisterStakingKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.DeregisterStakingKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_staking_address().empty()) {
    _internal_set_staking_address(from._internal_staking_address());
  }
  if (from._internal_undeposit_amount() != 0) {
    _internal_set_undeposit_amount(from._internal_undeposit_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeregisterStakingKey::CopyFrom(const DeregisterStakingKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.DeregisterStakingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterStakingKey::IsInitialized() const {
  return true;
}

void DeregisterStakingKey::InternalSwap(DeregisterStakingKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &staking_address_, lhs_arena,
      &other->staking_address_, rhs_arena
  );
  swap(undeposit_amount_, other->undeposit_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeregisterStakingKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[7]);
}

// ===================================================================

class Delegate::_Internal {
 public:
};

Delegate::Delegate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.Delegate)
}
Delegate::Delegate(const Delegate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_staking_address().empty()) {
    staking_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staking_address(), 
      GetArenaForAllocation());
  }
  pool_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pool_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pool_id().empty()) {
    pool_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool_id(), 
      GetArenaForAllocation());
  }
  deposit_amount_ = from.deposit_amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.Delegate)
}

inline void Delegate::SharedCtor() {
staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pool_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pool_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deposit_amount_ = uint64_t{0u};
}

Delegate::~Delegate() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.Delegate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Delegate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  staking_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Delegate::ArenaDtor(void* object) {
  Delegate* _this = reinterpret_cast< Delegate* >(object);
  (void)_this;
}
void Delegate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Delegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Delegate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.Delegate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staking_address_.ClearToEmpty();
  pool_id_.ClearToEmpty();
  deposit_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Delegate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string staking_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_staking_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.Delegate.staking_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pool_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pool_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 deposit_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          deposit_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Delegate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.Delegate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staking_address().data(), static_cast<int>(this->_internal_staking_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.Delegate.staking_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_staking_address(), target);
  }

  // bytes pool_id = 2;
  if (!this->_internal_pool_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pool_id(), target);
  }

  // uint64 deposit_amount = 3;
  if (this->_internal_deposit_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_deposit_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.Delegate)
  return target;
}

size_t Delegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.Delegate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staking_address());
  }

  // bytes pool_id = 2;
  if (!this->_internal_pool_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pool_id());
  }

  // uint64 deposit_amount = 3;
  if (this->_internal_deposit_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_deposit_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Delegate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Delegate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Delegate::GetClassData() const { return &_class_data_; }

void Delegate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Delegate *>(to)->MergeFrom(
      static_cast<const Delegate &>(from));
}


void Delegate::MergeFrom(const Delegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.Delegate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_staking_address().empty()) {
    _internal_set_staking_address(from._internal_staking_address());
  }
  if (!from._internal_pool_id().empty()) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from._internal_deposit_amount() != 0) {
    _internal_set_deposit_amount(from._internal_deposit_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Delegate::CopyFrom(const Delegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.Delegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delegate::IsInitialized() const {
  return true;
}

void Delegate::InternalSwap(Delegate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &staking_address_, lhs_arena,
      &other->staking_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pool_id_, lhs_arena,
      &other->pool_id_, rhs_arena
  );
  swap(deposit_amount_, other->deposit_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Delegate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[8]);
}

// ===================================================================

class Withdraw::_Internal {
 public:
};

Withdraw::Withdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.Withdraw)
}
Withdraw::Withdraw(const Withdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_staking_address().empty()) {
    staking_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staking_address(), 
      GetArenaForAllocation());
  }
  withdraw_amount_ = from.withdraw_amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.Withdraw)
}

inline void Withdraw::SharedCtor() {
staking_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  staking_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
withdraw_amount_ = uint64_t{0u};
}

Withdraw::~Withdraw() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.Withdraw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Withdraw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  staking_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Withdraw::ArenaDtor(void* object) {
  Withdraw* _this = reinterpret_cast< Withdraw* >(object);
  (void)_this;
}
void Withdraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Withdraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Withdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.Withdraw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staking_address_.ClearToEmpty();
  withdraw_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Withdraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string staking_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_staking_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.Withdraw.staking_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 withdraw_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          withdraw_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Withdraw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.Withdraw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staking_address().data(), static_cast<int>(this->_internal_staking_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.Withdraw.staking_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_staking_address(), target);
  }

  // uint64 withdraw_amount = 2;
  if (this->_internal_withdraw_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_withdraw_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.Withdraw)
  return target;
}

size_t Withdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.Withdraw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string staking_address = 1;
  if (!this->_internal_staking_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staking_address());
  }

  // uint64 withdraw_amount = 2;
  if (this->_internal_withdraw_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_withdraw_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Withdraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Withdraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Withdraw::GetClassData() const { return &_class_data_; }

void Withdraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Withdraw *>(to)->MergeFrom(
      static_cast<const Withdraw &>(from));
}


void Withdraw::MergeFrom(const Withdraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.Withdraw)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_staking_address().empty()) {
    _internal_set_staking_address(from._internal_staking_address());
  }
  if (from._internal_withdraw_amount() != 0) {
    _internal_set_withdraw_amount(from._internal_withdraw_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Withdraw::CopyFrom(const Withdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.Withdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdraw::IsInitialized() const {
  return true;
}

void Withdraw::InternalSwap(Withdraw* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &staking_address_, lhs_arena,
      &other->staking_address_, rhs_arena
  );
  swap(withdraw_amount_, other->withdraw_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Withdraw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[9]);
}

// ===================================================================

class TransactionPlan::_Internal {
 public:
};

TransactionPlan::TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  available_tokens_(arena),
  output_tokens_(arena),
  change_tokens_(arena),
  utxos_(arena),
  extra_outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.TransactionPlan)
}
TransactionPlan::TransactionPlan(const TransactionPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      available_tokens_(from.available_tokens_),
      output_tokens_(from.output_tokens_),
      change_tokens_(from.change_tokens_),
      utxos_(from.utxos_),
      extra_outputs_(from.extra_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&available_amount_, &from.available_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&available_amount_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.TransactionPlan)
}

inline void TransactionPlan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&available_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&available_amount_)) + sizeof(error_));
}

TransactionPlan::~TransactionPlan() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.TransactionPlan)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionPlan::ArenaDtor(void* object) {
  TransactionPlan* _this = reinterpret_cast< TransactionPlan* >(object);
  (void)_this;
}
void TransactionPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.TransactionPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_tokens_.Clear();
  output_tokens_.Clear();
  change_tokens_.Clear();
  utxos_.Clear();
  extra_outputs_.Clear();
  ::memset(&available_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&available_amount_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 available_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          available_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TokenAmount available_tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TokenAmount output_tokens = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TokenAmount change_tokens = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TxInput utxos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_utxos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 deposit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          deposit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 undeposit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          undeposit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TxOutput extra_outputs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.TransactionPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 available_amount = 1;
  if (this->_internal_available_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_available_amount(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fee(), target);
  }

  // uint64 change = 4;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_change(), target);
  }

  // repeated .TW.Cardano.Proto.TokenAmount available_tokens = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_available_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_available_tokens(i), target, stream);
  }

  // repeated .TW.Cardano.Proto.TokenAmount output_tokens = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_output_tokens(i), target, stream);
  }

  // repeated .TW.Cardano.Proto.TokenAmount change_tokens = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_change_tokens(i), target, stream);
  }

  // repeated .TW.Cardano.Proto.TxInput utxos = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_utxos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_utxos(i), target, stream);
  }

  // .TW.Common.Proto.SigningError error = 9;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_error(), target);
  }

  // uint64 deposit = 10;
  if (this->_internal_deposit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_deposit(), target);
  }

  // uint64 undeposit = 11;
  if (this->_internal_undeposit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_undeposit(), target);
  }

  // repeated .TW.Cardano.Proto.TxOutput extra_outputs = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_extra_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.TransactionPlan)
  return target;
}

size_t TransactionPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.TransactionPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Cardano.Proto.TokenAmount available_tokens = 5;
  total_size += 1UL * this->_internal_available_tokens_size();
  for (const auto& msg : this->available_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Cardano.Proto.TokenAmount output_tokens = 6;
  total_size += 1UL * this->_internal_output_tokens_size();
  for (const auto& msg : this->output_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Cardano.Proto.TokenAmount change_tokens = 7;
  total_size += 1UL * this->_internal_change_tokens_size();
  for (const auto& msg : this->change_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Cardano.Proto.TxInput utxos = 8;
  total_size += 1UL * this->_internal_utxos_size();
  for (const auto& msg : this->utxos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TW.Cardano.Proto.TxOutput extra_outputs = 12;
  total_size += 1UL * this->_internal_extra_outputs_size();
  for (const auto& msg : this->extra_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 available_amount = 1;
  if (this->_internal_available_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_available_amount());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fee());
  }

  // uint64 change = 4;
  if (this->_internal_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_change());
  }

  // uint64 deposit = 10;
  if (this->_internal_deposit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_deposit());
  }

  // uint64 undeposit = 11;
  if (this->_internal_undeposit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_undeposit());
  }

  // .TW.Common.Proto.SigningError error = 9;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionPlan::GetClassData() const { return &_class_data_; }

void TransactionPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionPlan *>(to)->MergeFrom(
      static_cast<const TransactionPlan &>(from));
}


void TransactionPlan::MergeFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.TransactionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  available_tokens_.MergeFrom(from.available_tokens_);
  output_tokens_.MergeFrom(from.output_tokens_);
  change_tokens_.MergeFrom(from.change_tokens_);
  utxos_.MergeFrom(from.utxos_);
  extra_outputs_.MergeFrom(from.extra_outputs_);
  if (from._internal_available_amount() != 0) {
    _internal_set_available_amount(from._internal_available_amount());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_change() != 0) {
    _internal_set_change(from._internal_change());
  }
  if (from._internal_deposit() != 0) {
    _internal_set_deposit(from._internal_deposit());
  }
  if (from._internal_undeposit() != 0) {
    _internal_set_undeposit(from._internal_undeposit());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionPlan::CopyFrom(const TransactionPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.TransactionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPlan::IsInitialized() const {
  return true;
}

void TransactionPlan::InternalSwap(TransactionPlan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  available_tokens_.InternalSwap(&other->available_tokens_);
  output_tokens_.InternalSwap(&other->output_tokens_);
  change_tokens_.InternalSwap(&other->change_tokens_);
  utxos_.InternalSwap(&other->utxos_);
  extra_outputs_.InternalSwap(&other->extra_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionPlan, error_)
      + sizeof(TransactionPlan::error_)
      - PROTOBUF_FIELD_OFFSET(TransactionPlan, available_amount_)>(
          reinterpret_cast<char*>(&available_amount_),
          reinterpret_cast<char*>(&other->available_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionPlan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[10]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Cardano::Proto::Transfer& transfer_message(const SigningInput* msg);
  static const ::TW::Cardano::Proto::RegisterStakingKey& register_staking_key(const SigningInput* msg);
  static const ::TW::Cardano::Proto::Delegate& delegate(const SigningInput* msg);
  static const ::TW::Cardano::Proto::Withdraw& withdraw(const SigningInput* msg);
  static const ::TW::Cardano::Proto::DeregisterStakingKey& deregister_staking_key(const SigningInput* msg);
  static const ::TW::Cardano::Proto::TransactionPlan& plan(const SigningInput* msg);
};

const ::TW::Cardano::Proto::Transfer&
SigningInput::_Internal::transfer_message(const SigningInput* msg) {
  return *msg->transfer_message_;
}
const ::TW::Cardano::Proto::RegisterStakingKey&
SigningInput::_Internal::register_staking_key(const SigningInput* msg) {
  return *msg->register_staking_key_;
}
const ::TW::Cardano::Proto::Delegate&
SigningInput::_Internal::delegate(const SigningInput* msg) {
  return *msg->delegate_;
}
const ::TW::Cardano::Proto::Withdraw&
SigningInput::_Internal::withdraw(const SigningInput* msg) {
  return *msg->withdraw_;
}
const ::TW::Cardano::Proto::DeregisterStakingKey&
SigningInput::_Internal::deregister_staking_key(const SigningInput* msg) {
  return *msg->deregister_staking_key_;
}
const ::TW::Cardano::Proto::TransactionPlan&
SigningInput::_Internal::plan(const SigningInput* msg) {
  return *msg->plan_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  utxos_(arena),
  private_key_(arena),
  extra_outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utxos_(from.utxos_),
      private_key_(from.private_key_),
      extra_outputs_(from.extra_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transfer_message()) {
    transfer_message_ = new ::TW::Cardano::Proto::Transfer(*from.transfer_message_);
  } else {
    transfer_message_ = nullptr;
  }
  if (from._internal_has_plan()) {
    plan_ = new ::TW::Cardano::Proto::TransactionPlan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  if (from._internal_has_register_staking_key()) {
    register_staking_key_ = new ::TW::Cardano::Proto::RegisterStakingKey(*from.register_staking_key_);
  } else {
    register_staking_key_ = nullptr;
  }
  if (from._internal_has_delegate()) {
    delegate_ = new ::TW::Cardano::Proto::Delegate(*from.delegate_);
  } else {
    delegate_ = nullptr;
  }
  if (from._internal_has_withdraw()) {
    withdraw_ = new ::TW::Cardano::Proto::Withdraw(*from.withdraw_);
  } else {
    withdraw_ = nullptr;
  }
  if (from._internal_has_deregister_staking_key()) {
    deregister_staking_key_ = new ::TW::Cardano::Proto::DeregisterStakingKey(*from.deregister_staking_key_);
  } else {
    deregister_staking_key_ = nullptr;
  }
  ttl_ = from.ttl_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transfer_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&transfer_message_)) + sizeof(ttl_));
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transfer_message_;
  if (this != internal_default_instance()) delete plan_;
  if (this != internal_default_instance()) delete register_staking_key_;
  if (this != internal_default_instance()) delete delegate_;
  if (this != internal_default_instance()) delete withdraw_;
  if (this != internal_default_instance()) delete deregister_staking_key_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utxos_.Clear();
  private_key_.Clear();
  extra_outputs_.Clear();
  if (GetArenaForAllocation() == nullptr && transfer_message_ != nullptr) {
    delete transfer_message_;
  }
  transfer_message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  if (GetArenaForAllocation() == nullptr && register_staking_key_ != nullptr) {
    delete register_staking_key_;
  }
  register_staking_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && delegate_ != nullptr) {
    delete delegate_;
  }
  delegate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && withdraw_ != nullptr) {
    delete withdraw_;
  }
  withdraw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && deregister_staking_key_ != nullptr) {
    delete deregister_staking_key_;
  }
  deregister_staking_key_ = nullptr;
  ttl_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TW.Cardano.Proto.TxInput utxos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_utxos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes private_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_private_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .TW.Cardano.Proto.Transfer transfer_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ttl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cardano.Proto.TransactionPlan plan = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cardano.Proto.RegisterStakingKey register_staking_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_staking_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cardano.Proto.Delegate delegate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cardano.Proto.Withdraw withdraw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cardano.Proto.DeregisterStakingKey deregister_staking_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deregister_staking_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Cardano.Proto.TxOutput extra_outputs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Cardano.Proto.TxInput utxos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_utxos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_utxos(i), target, stream);
  }

  // repeated bytes private_key = 2;
  for (int i = 0, n = this->_internal_private_key_size(); i < n; i++) {
    const auto& s = this->_internal_private_key(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .TW.Cardano.Proto.Transfer transfer_message = 3;
  if (this->_internal_has_transfer_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transfer_message(this), target, stream);
  }

  // uint64 ttl = 4;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ttl(), target);
  }

  // .TW.Cardano.Proto.TransactionPlan plan = 5;
  if (this->_internal_has_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::plan(this), target, stream);
  }

  // .TW.Cardano.Proto.RegisterStakingKey register_staking_key = 6;
  if (this->_internal_has_register_staking_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::register_staking_key(this), target, stream);
  }

  // .TW.Cardano.Proto.Delegate delegate = 7;
  if (this->_internal_has_delegate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::delegate(this), target, stream);
  }

  // .TW.Cardano.Proto.Withdraw withdraw = 8;
  if (this->_internal_has_withdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::withdraw(this), target, stream);
  }

  // .TW.Cardano.Proto.DeregisterStakingKey deregister_staking_key = 9;
  if (this->_internal_has_deregister_staking_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::deregister_staking_key(this), target, stream);
  }

  // repeated .TW.Cardano.Proto.TxOutput extra_outputs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_extra_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Cardano.Proto.TxInput utxos = 1;
  total_size += 1UL * this->_internal_utxos_size();
  for (const auto& msg : this->utxos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes private_key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(private_key_.size());
  for (int i = 0, n = private_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      private_key_.Get(i));
  }

  // repeated .TW.Cardano.Proto.TxOutput extra_outputs = 10;
  total_size += 1UL * this->_internal_extra_outputs_size();
  for (const auto& msg : this->extra_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TW.Cardano.Proto.Transfer transfer_message = 3;
  if (this->_internal_has_transfer_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_message_);
  }

  // .TW.Cardano.Proto.TransactionPlan plan = 5;
  if (this->_internal_has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  // .TW.Cardano.Proto.RegisterStakingKey register_staking_key = 6;
  if (this->_internal_has_register_staking_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *register_staking_key_);
  }

  // .TW.Cardano.Proto.Delegate delegate = 7;
  if (this->_internal_has_delegate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delegate_);
  }

  // .TW.Cardano.Proto.Withdraw withdraw = 8;
  if (this->_internal_has_withdraw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *withdraw_);
  }

  // .TW.Cardano.Proto.DeregisterStakingKey deregister_staking_key = 9;
  if (this->_internal_has_deregister_staking_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deregister_staking_key_);
  }

  // uint64 ttl = 4;
  if (this->_internal_ttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  utxos_.MergeFrom(from.utxos_);
  private_key_.MergeFrom(from.private_key_);
  extra_outputs_.MergeFrom(from.extra_outputs_);
  if (from._internal_has_transfer_message()) {
    _internal_mutable_transfer_message()->::TW::Cardano::Proto::Transfer::MergeFrom(from._internal_transfer_message());
  }
  if (from._internal_has_plan()) {
    _internal_mutable_plan()->::TW::Cardano::Proto::TransactionPlan::MergeFrom(from._internal_plan());
  }
  if (from._internal_has_register_staking_key()) {
    _internal_mutable_register_staking_key()->::TW::Cardano::Proto::RegisterStakingKey::MergeFrom(from._internal_register_staking_key());
  }
  if (from._internal_has_delegate()) {
    _internal_mutable_delegate()->::TW::Cardano::Proto::Delegate::MergeFrom(from._internal_delegate());
  }
  if (from._internal_has_withdraw()) {
    _internal_mutable_withdraw()->::TW::Cardano::Proto::Withdraw::MergeFrom(from._internal_withdraw());
  }
  if (from._internal_has_deregister_staking_key()) {
    _internal_mutable_deregister_staking_key()->::TW::Cardano::Proto::DeregisterStakingKey::MergeFrom(from._internal_deregister_staking_key());
  }
  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  utxos_.InternalSwap(&other->utxos_);
  private_key_.InternalSwap(&other->private_key_);
  extra_outputs_.InternalSwap(&other->extra_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, ttl_)
      + sizeof(SigningInput::ttl_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, transfer_message_)>(
          reinterpret_cast<char*>(&transfer_message_),
          reinterpret_cast<char*>(&other->transfer_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[11]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Cardano.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tx_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_id().empty()) {
    tx_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_id(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Cardano.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tx_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Cardano.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Cardano.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  tx_id_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Cardano.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Cardano.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // bytes tx_id = 2;
  if (!this->_internal_tx_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_id(), target);
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Cardano.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Cardano.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Cardano.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // bytes tx_id = 2;
  if (!this->_internal_tx_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_id());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Cardano.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_tx_id().empty()) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Cardano.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_id_, lhs_arena,
      &other->tx_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cardano_2eproto_getter, &descriptor_table_Cardano_2eproto_once,
      file_level_metadata_Cardano_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Cardano
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::OutPoint* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::OutPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::OutPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::TokenAmount* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::TokenAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::TokenAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::TxInput* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::TxInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::TxInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::TxOutput* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::TxOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::TxOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::TokenBundle* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::TokenBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::TokenBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::Transfer* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::RegisterStakingKey* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::RegisterStakingKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::RegisterStakingKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::DeregisterStakingKey* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::DeregisterStakingKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::DeregisterStakingKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::Delegate* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::Delegate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::Delegate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::Withdraw* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::Withdraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::Withdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::TransactionPlan* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::TransactionPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::TransactionPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Cardano::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Cardano::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Cardano::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
