// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Harmony.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Harmony_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Harmony_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Harmony_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Harmony_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Harmony_2eproto;
namespace TW {
namespace Harmony {
namespace Proto {
class CommissionRate;
struct CommissionRateDefaultTypeInternal;
extern CommissionRateDefaultTypeInternal _CommissionRate_default_instance_;
class Decimal;
struct DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class Description;
struct DescriptionDefaultTypeInternal;
extern DescriptionDefaultTypeInternal _Description_default_instance_;
class DirectiveCollectRewards;
struct DirectiveCollectRewardsDefaultTypeInternal;
extern DirectiveCollectRewardsDefaultTypeInternal _DirectiveCollectRewards_default_instance_;
class DirectiveCreateValidator;
struct DirectiveCreateValidatorDefaultTypeInternal;
extern DirectiveCreateValidatorDefaultTypeInternal _DirectiveCreateValidator_default_instance_;
class DirectiveDelegate;
struct DirectiveDelegateDefaultTypeInternal;
extern DirectiveDelegateDefaultTypeInternal _DirectiveDelegate_default_instance_;
class DirectiveEditValidator;
struct DirectiveEditValidatorDefaultTypeInternal;
extern DirectiveEditValidatorDefaultTypeInternal _DirectiveEditValidator_default_instance_;
class DirectiveUndelegate;
struct DirectiveUndelegateDefaultTypeInternal;
extern DirectiveUndelegateDefaultTypeInternal _DirectiveUndelegate_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class StakingMessage;
struct StakingMessageDefaultTypeInternal;
extern StakingMessageDefaultTypeInternal _StakingMessage_default_instance_;
class TransactionMessage;
struct TransactionMessageDefaultTypeInternal;
extern TransactionMessageDefaultTypeInternal _TransactionMessage_default_instance_;
}  // namespace Proto
}  // namespace Harmony
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Harmony::Proto::CommissionRate* Arena::CreateMaybeMessage<::TW::Harmony::Proto::CommissionRate>(Arena*);
template<> ::TW::Harmony::Proto::Decimal* Arena::CreateMaybeMessage<::TW::Harmony::Proto::Decimal>(Arena*);
template<> ::TW::Harmony::Proto::Description* Arena::CreateMaybeMessage<::TW::Harmony::Proto::Description>(Arena*);
template<> ::TW::Harmony::Proto::DirectiveCollectRewards* Arena::CreateMaybeMessage<::TW::Harmony::Proto::DirectiveCollectRewards>(Arena*);
template<> ::TW::Harmony::Proto::DirectiveCreateValidator* Arena::CreateMaybeMessage<::TW::Harmony::Proto::DirectiveCreateValidator>(Arena*);
template<> ::TW::Harmony::Proto::DirectiveDelegate* Arena::CreateMaybeMessage<::TW::Harmony::Proto::DirectiveDelegate>(Arena*);
template<> ::TW::Harmony::Proto::DirectiveEditValidator* Arena::CreateMaybeMessage<::TW::Harmony::Proto::DirectiveEditValidator>(Arena*);
template<> ::TW::Harmony::Proto::DirectiveUndelegate* Arena::CreateMaybeMessage<::TW::Harmony::Proto::DirectiveUndelegate>(Arena*);
template<> ::TW::Harmony::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Harmony::Proto::SigningInput>(Arena*);
template<> ::TW::Harmony::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Harmony::Proto::SigningOutput>(Arena*);
template<> ::TW::Harmony::Proto::StakingMessage* Arena::CreateMaybeMessage<::TW::Harmony::Proto::StakingMessage>(Arena*);
template<> ::TW::Harmony::Proto::TransactionMessage* Arena::CreateMaybeMessage<::TW::Harmony::Proto::TransactionMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Harmony {
namespace Proto {

// ===================================================================

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kTransactionMessage = 3,
    kStakingMessage = 4,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
    kPrivateKeyFieldNumber = 2,
    kTransactionMessageFieldNumber = 3,
    kStakingMessageFieldNumber = 4,
  };
  // bytes chain_id = 1;
  void clear_chain_id();
  const std::string& chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // bytes private_key = 2;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Harmony.Proto.TransactionMessage transaction_message = 3;
  bool has_transaction_message() const;
  private:
  bool _internal_has_transaction_message() const;
  public:
  void clear_transaction_message();
  const ::TW::Harmony::Proto::TransactionMessage& transaction_message() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::TransactionMessage* release_transaction_message();
  ::TW::Harmony::Proto::TransactionMessage* mutable_transaction_message();
  void set_allocated_transaction_message(::TW::Harmony::Proto::TransactionMessage* transaction_message);
  private:
  const ::TW::Harmony::Proto::TransactionMessage& _internal_transaction_message() const;
  ::TW::Harmony::Proto::TransactionMessage* _internal_mutable_transaction_message();
  public:
  void unsafe_arena_set_allocated_transaction_message(
      ::TW::Harmony::Proto::TransactionMessage* transaction_message);
  ::TW::Harmony::Proto::TransactionMessage* unsafe_arena_release_transaction_message();

  // .TW.Harmony.Proto.StakingMessage staking_message = 4;
  bool has_staking_message() const;
  private:
  bool _internal_has_staking_message() const;
  public:
  void clear_staking_message();
  const ::TW::Harmony::Proto::StakingMessage& staking_message() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::StakingMessage* release_staking_message();
  ::TW::Harmony::Proto::StakingMessage* mutable_staking_message();
  void set_allocated_staking_message(::TW::Harmony::Proto::StakingMessage* staking_message);
  private:
  const ::TW::Harmony::Proto::StakingMessage& _internal_staking_message() const;
  ::TW::Harmony::Proto::StakingMessage* _internal_mutable_staking_message();
  public:
  void unsafe_arena_set_allocated_staking_message(
      ::TW::Harmony::Proto::StakingMessage* staking_message);
  ::TW::Harmony::Proto::StakingMessage* unsafe_arena_release_staking_message();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transaction_message();
  void set_has_staking_message();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Harmony::Proto::TransactionMessage* transaction_message_;
    ::TW::Harmony::Proto::StakingMessage* staking_message_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kVFieldNumber = 2,
    kRFieldNumber = 3,
    kSFieldNumber = 4,
    kErrorMessageFieldNumber = 6,
    kErrorFieldNumber = 5,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // bytes v = 2;
  void clear_v();
  const std::string& v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v();
  PROTOBUF_NODISCARD std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // bytes r = 3;
  void clear_r();
  const std::string& r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_r();
  PROTOBUF_NODISCARD std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes s = 4;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // string error_message = 6;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 5;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class TransactionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.TransactionMessage) */ {
 public:
  inline TransactionMessage() : TransactionMessage(nullptr) {}
  ~TransactionMessage() override;
  explicit constexpr TransactionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionMessage(const TransactionMessage& from);
  TransactionMessage(TransactionMessage&& from) noexcept
    : TransactionMessage() {
    *this = ::std::move(from);
  }

  inline TransactionMessage& operator=(const TransactionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionMessage& operator=(TransactionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionMessage* internal_default_instance() {
    return reinterpret_cast<const TransactionMessage*>(
               &_TransactionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionMessage& a, TransactionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.TransactionMessage";
  }
  protected:
  explicit TransactionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
    kGasPriceFieldNumber = 2,
    kGasLimitFieldNumber = 3,
    kToAddressFieldNumber = 4,
    kAmountFieldNumber = 5,
    kPayloadFieldNumber = 6,
    kFromShardIdFieldNumber = 7,
    kToShardIdFieldNumber = 8,
  };
  // bytes nonce = 1;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes gas_price = 2;
  void clear_gas_price();
  const std::string& gas_price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_price();
  PROTOBUF_NODISCARD std::string* release_gas_price();
  void set_allocated_gas_price(std::string* gas_price);
  private:
  const std::string& _internal_gas_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_price(const std::string& value);
  std::string* _internal_mutable_gas_price();
  public:

  // bytes gas_limit = 3;
  void clear_gas_limit();
  const std::string& gas_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_limit();
  PROTOBUF_NODISCARD std::string* release_gas_limit();
  void set_allocated_gas_limit(std::string* gas_limit);
  private:
  const std::string& _internal_gas_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_limit(const std::string& value);
  std::string* _internal_mutable_gas_limit();
  public:

  // string to_address = 4;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes amount = 5;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes payload = 6;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // bytes from_shard_id = 7;
  void clear_from_shard_id();
  const std::string& from_shard_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_shard_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_shard_id();
  PROTOBUF_NODISCARD std::string* release_from_shard_id();
  void set_allocated_from_shard_id(std::string* from_shard_id);
  private:
  const std::string& _internal_from_shard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_shard_id(const std::string& value);
  std::string* _internal_mutable_from_shard_id();
  public:

  // bytes to_shard_id = 8;
  void clear_to_shard_id();
  const std::string& to_shard_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_shard_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_shard_id();
  PROTOBUF_NODISCARD std::string* release_to_shard_id();
  void set_allocated_to_shard_id(std::string* to_shard_id);
  private:
  const std::string& _internal_to_shard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_shard_id(const std::string& value);
  std::string* _internal_mutable_to_shard_id();
  public:

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.TransactionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_shard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class StakingMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.StakingMessage) */ {
 public:
  inline StakingMessage() : StakingMessage(nullptr) {}
  ~StakingMessage() override;
  explicit constexpr StakingMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StakingMessage(const StakingMessage& from);
  StakingMessage(StakingMessage&& from) noexcept
    : StakingMessage() {
    *this = ::std::move(from);
  }

  inline StakingMessage& operator=(const StakingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakingMessage& operator=(StakingMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StakingMessage& default_instance() {
    return *internal_default_instance();
  }
  enum StakeMsgCase {
    kCreateValidatorMessage = 1,
    kEditValidatorMessage = 2,
    kDelegateMessage = 3,
    kUndelegateMessage = 4,
    kCollectRewards = 5,
    STAKE_MSG_NOT_SET = 0,
  };

  static inline const StakingMessage* internal_default_instance() {
    return reinterpret_cast<const StakingMessage*>(
               &_StakingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StakingMessage& a, StakingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StakingMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StakingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StakingMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StakingMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StakingMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakingMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.StakingMessage";
  }
  protected:
  explicit StakingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 6,
    kGasPriceFieldNumber = 7,
    kGasLimitFieldNumber = 8,
    kCreateValidatorMessageFieldNumber = 1,
    kEditValidatorMessageFieldNumber = 2,
    kDelegateMessageFieldNumber = 3,
    kUndelegateMessageFieldNumber = 4,
    kCollectRewardsFieldNumber = 5,
  };
  // bytes nonce = 6;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes gas_price = 7;
  void clear_gas_price();
  const std::string& gas_price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_price();
  PROTOBUF_NODISCARD std::string* release_gas_price();
  void set_allocated_gas_price(std::string* gas_price);
  private:
  const std::string& _internal_gas_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_price(const std::string& value);
  std::string* _internal_mutable_gas_price();
  public:

  // bytes gas_limit = 8;
  void clear_gas_limit();
  const std::string& gas_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_limit();
  PROTOBUF_NODISCARD std::string* release_gas_limit();
  void set_allocated_gas_limit(std::string* gas_limit);
  private:
  const std::string& _internal_gas_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_limit(const std::string& value);
  std::string* _internal_mutable_gas_limit();
  public:

  // .TW.Harmony.Proto.DirectiveCreateValidator create_validator_message = 1;
  bool has_create_validator_message() const;
  private:
  bool _internal_has_create_validator_message() const;
  public:
  void clear_create_validator_message();
  const ::TW::Harmony::Proto::DirectiveCreateValidator& create_validator_message() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::DirectiveCreateValidator* release_create_validator_message();
  ::TW::Harmony::Proto::DirectiveCreateValidator* mutable_create_validator_message();
  void set_allocated_create_validator_message(::TW::Harmony::Proto::DirectiveCreateValidator* create_validator_message);
  private:
  const ::TW::Harmony::Proto::DirectiveCreateValidator& _internal_create_validator_message() const;
  ::TW::Harmony::Proto::DirectiveCreateValidator* _internal_mutable_create_validator_message();
  public:
  void unsafe_arena_set_allocated_create_validator_message(
      ::TW::Harmony::Proto::DirectiveCreateValidator* create_validator_message);
  ::TW::Harmony::Proto::DirectiveCreateValidator* unsafe_arena_release_create_validator_message();

  // .TW.Harmony.Proto.DirectiveEditValidator edit_validator_message = 2;
  bool has_edit_validator_message() const;
  private:
  bool _internal_has_edit_validator_message() const;
  public:
  void clear_edit_validator_message();
  const ::TW::Harmony::Proto::DirectiveEditValidator& edit_validator_message() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::DirectiveEditValidator* release_edit_validator_message();
  ::TW::Harmony::Proto::DirectiveEditValidator* mutable_edit_validator_message();
  void set_allocated_edit_validator_message(::TW::Harmony::Proto::DirectiveEditValidator* edit_validator_message);
  private:
  const ::TW::Harmony::Proto::DirectiveEditValidator& _internal_edit_validator_message() const;
  ::TW::Harmony::Proto::DirectiveEditValidator* _internal_mutable_edit_validator_message();
  public:
  void unsafe_arena_set_allocated_edit_validator_message(
      ::TW::Harmony::Proto::DirectiveEditValidator* edit_validator_message);
  ::TW::Harmony::Proto::DirectiveEditValidator* unsafe_arena_release_edit_validator_message();

  // .TW.Harmony.Proto.DirectiveDelegate delegate_message = 3;
  bool has_delegate_message() const;
  private:
  bool _internal_has_delegate_message() const;
  public:
  void clear_delegate_message();
  const ::TW::Harmony::Proto::DirectiveDelegate& delegate_message() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::DirectiveDelegate* release_delegate_message();
  ::TW::Harmony::Proto::DirectiveDelegate* mutable_delegate_message();
  void set_allocated_delegate_message(::TW::Harmony::Proto::DirectiveDelegate* delegate_message);
  private:
  const ::TW::Harmony::Proto::DirectiveDelegate& _internal_delegate_message() const;
  ::TW::Harmony::Proto::DirectiveDelegate* _internal_mutable_delegate_message();
  public:
  void unsafe_arena_set_allocated_delegate_message(
      ::TW::Harmony::Proto::DirectiveDelegate* delegate_message);
  ::TW::Harmony::Proto::DirectiveDelegate* unsafe_arena_release_delegate_message();

  // .TW.Harmony.Proto.DirectiveUndelegate undelegate_message = 4;
  bool has_undelegate_message() const;
  private:
  bool _internal_has_undelegate_message() const;
  public:
  void clear_undelegate_message();
  const ::TW::Harmony::Proto::DirectiveUndelegate& undelegate_message() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::DirectiveUndelegate* release_undelegate_message();
  ::TW::Harmony::Proto::DirectiveUndelegate* mutable_undelegate_message();
  void set_allocated_undelegate_message(::TW::Harmony::Proto::DirectiveUndelegate* undelegate_message);
  private:
  const ::TW::Harmony::Proto::DirectiveUndelegate& _internal_undelegate_message() const;
  ::TW::Harmony::Proto::DirectiveUndelegate* _internal_mutable_undelegate_message();
  public:
  void unsafe_arena_set_allocated_undelegate_message(
      ::TW::Harmony::Proto::DirectiveUndelegate* undelegate_message);
  ::TW::Harmony::Proto::DirectiveUndelegate* unsafe_arena_release_undelegate_message();

  // .TW.Harmony.Proto.DirectiveCollectRewards collect_rewards = 5;
  bool has_collect_rewards() const;
  private:
  bool _internal_has_collect_rewards() const;
  public:
  void clear_collect_rewards();
  const ::TW::Harmony::Proto::DirectiveCollectRewards& collect_rewards() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::DirectiveCollectRewards* release_collect_rewards();
  ::TW::Harmony::Proto::DirectiveCollectRewards* mutable_collect_rewards();
  void set_allocated_collect_rewards(::TW::Harmony::Proto::DirectiveCollectRewards* collect_rewards);
  private:
  const ::TW::Harmony::Proto::DirectiveCollectRewards& _internal_collect_rewards() const;
  ::TW::Harmony::Proto::DirectiveCollectRewards* _internal_mutable_collect_rewards();
  public:
  void unsafe_arena_set_allocated_collect_rewards(
      ::TW::Harmony::Proto::DirectiveCollectRewards* collect_rewards);
  ::TW::Harmony::Proto::DirectiveCollectRewards* unsafe_arena_release_collect_rewards();

  void clear_stake_msg();
  StakeMsgCase stake_msg_case() const;
  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.StakingMessage)
 private:
  class _Internal;
  void set_has_create_validator_message();
  void set_has_edit_validator_message();
  void set_has_delegate_message();
  void set_has_undelegate_message();
  void set_has_collect_rewards();

  inline bool has_stake_msg() const;
  inline void clear_has_stake_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_limit_;
  union StakeMsgUnion {
    constexpr StakeMsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Harmony::Proto::DirectiveCreateValidator* create_validator_message_;
    ::TW::Harmony::Proto::DirectiveEditValidator* edit_validator_message_;
    ::TW::Harmony::Proto::DirectiveDelegate* delegate_message_;
    ::TW::Harmony::Proto::DirectiveUndelegate* undelegate_message_;
    ::TW::Harmony::Proto::DirectiveCollectRewards* collect_rewards_;
  } stake_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class Description final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.Description) */ {
 public:
  inline Description() : Description(nullptr) {}
  ~Description() override;
  explicit constexpr Description(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Description(const Description& from);
  Description(Description&& from) noexcept
    : Description() {
    *this = ::std::move(from);
  }

  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }
  inline Description& operator=(Description&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Description& default_instance() {
    return *internal_default_instance();
  }
  static inline const Description* internal_default_instance() {
    return reinterpret_cast<const Description*>(
               &_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Description& a, Description& b) {
    a.Swap(&b);
  }
  inline void Swap(Description* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Description* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Description* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Description>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Description& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Description& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Description* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.Description";
  }
  protected:
  explicit Description(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdentityFieldNumber = 2,
    kWebsiteFieldNumber = 3,
    kSecurityContactFieldNumber = 4,
    kDetailsFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string identity = 2;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string website = 3;
  void clear_website();
  const std::string& website() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_website(ArgT0&& arg0, ArgT... args);
  std::string* mutable_website();
  PROTOBUF_NODISCARD std::string* release_website();
  void set_allocated_website(std::string* website);
  private:
  const std::string& _internal_website() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_website(const std::string& value);
  std::string* _internal_mutable_website();
  public:

  // string security_contact = 4;
  void clear_security_contact();
  const std::string& security_contact() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_security_contact(ArgT0&& arg0, ArgT... args);
  std::string* mutable_security_contact();
  PROTOBUF_NODISCARD std::string* release_security_contact();
  void set_allocated_security_contact(std::string* security_contact);
  private:
  const std::string& _internal_security_contact() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_contact(const std::string& value);
  std::string* _internal_mutable_security_contact();
  public:

  // string details = 5;
  void clear_details();
  const std::string& details() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_details(ArgT0&& arg0, ArgT... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* details);
  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.Description)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr website_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_contact_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class Decimal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.Decimal) */ {
 public:
  inline Decimal() : Decimal(nullptr) {}
  ~Decimal() override;
  explicit constexpr Decimal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Decimal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Decimal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Decimal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.Decimal";
  }
  protected:
  explicit Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kPrecisionFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes precision = 2;
  void clear_precision();
  const std::string& precision() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_precision(ArgT0&& arg0, ArgT... args);
  std::string* mutable_precision();
  PROTOBUF_NODISCARD std::string* release_precision();
  void set_allocated_precision(std::string* precision);
  private:
  const std::string& _internal_precision() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_precision(const std::string& value);
  std::string* _internal_mutable_precision();
  public:

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class CommissionRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.CommissionRate) */ {
 public:
  inline CommissionRate() : CommissionRate(nullptr) {}
  ~CommissionRate() override;
  explicit constexpr CommissionRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommissionRate(const CommissionRate& from);
  CommissionRate(CommissionRate&& from) noexcept
    : CommissionRate() {
    *this = ::std::move(from);
  }

  inline CommissionRate& operator=(const CommissionRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommissionRate& operator=(CommissionRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommissionRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommissionRate* internal_default_instance() {
    return reinterpret_cast<const CommissionRate*>(
               &_CommissionRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommissionRate& a, CommissionRate& b) {
    a.Swap(&b);
  }
  inline void Swap(CommissionRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommissionRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommissionRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommissionRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommissionRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommissionRate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommissionRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.CommissionRate";
  }
  protected:
  explicit CommissionRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateFieldNumber = 1,
    kMaxRateFieldNumber = 2,
    kMaxChangeRateFieldNumber = 3,
  };
  // .TW.Harmony.Proto.Decimal rate = 1;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  const ::TW::Harmony::Proto::Decimal& rate() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::Decimal* release_rate();
  ::TW::Harmony::Proto::Decimal* mutable_rate();
  void set_allocated_rate(::TW::Harmony::Proto::Decimal* rate);
  private:
  const ::TW::Harmony::Proto::Decimal& _internal_rate() const;
  ::TW::Harmony::Proto::Decimal* _internal_mutable_rate();
  public:
  void unsafe_arena_set_allocated_rate(
      ::TW::Harmony::Proto::Decimal* rate);
  ::TW::Harmony::Proto::Decimal* unsafe_arena_release_rate();

  // .TW.Harmony.Proto.Decimal max_rate = 2;
  bool has_max_rate() const;
  private:
  bool _internal_has_max_rate() const;
  public:
  void clear_max_rate();
  const ::TW::Harmony::Proto::Decimal& max_rate() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::Decimal* release_max_rate();
  ::TW::Harmony::Proto::Decimal* mutable_max_rate();
  void set_allocated_max_rate(::TW::Harmony::Proto::Decimal* max_rate);
  private:
  const ::TW::Harmony::Proto::Decimal& _internal_max_rate() const;
  ::TW::Harmony::Proto::Decimal* _internal_mutable_max_rate();
  public:
  void unsafe_arena_set_allocated_max_rate(
      ::TW::Harmony::Proto::Decimal* max_rate);
  ::TW::Harmony::Proto::Decimal* unsafe_arena_release_max_rate();

  // .TW.Harmony.Proto.Decimal max_change_rate = 3;
  bool has_max_change_rate() const;
  private:
  bool _internal_has_max_change_rate() const;
  public:
  void clear_max_change_rate();
  const ::TW::Harmony::Proto::Decimal& max_change_rate() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::Decimal* release_max_change_rate();
  ::TW::Harmony::Proto::Decimal* mutable_max_change_rate();
  void set_allocated_max_change_rate(::TW::Harmony::Proto::Decimal* max_change_rate);
  private:
  const ::TW::Harmony::Proto::Decimal& _internal_max_change_rate() const;
  ::TW::Harmony::Proto::Decimal* _internal_mutable_max_change_rate();
  public:
  void unsafe_arena_set_allocated_max_change_rate(
      ::TW::Harmony::Proto::Decimal* max_change_rate);
  ::TW::Harmony::Proto::Decimal* unsafe_arena_release_max_change_rate();

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.CommissionRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::Harmony::Proto::Decimal* rate_;
  ::TW::Harmony::Proto::Decimal* max_rate_;
  ::TW::Harmony::Proto::Decimal* max_change_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class DirectiveCreateValidator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.DirectiveCreateValidator) */ {
 public:
  inline DirectiveCreateValidator() : DirectiveCreateValidator(nullptr) {}
  ~DirectiveCreateValidator() override;
  explicit constexpr DirectiveCreateValidator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectiveCreateValidator(const DirectiveCreateValidator& from);
  DirectiveCreateValidator(DirectiveCreateValidator&& from) noexcept
    : DirectiveCreateValidator() {
    *this = ::std::move(from);
  }

  inline DirectiveCreateValidator& operator=(const DirectiveCreateValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectiveCreateValidator& operator=(DirectiveCreateValidator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectiveCreateValidator& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectiveCreateValidator* internal_default_instance() {
    return reinterpret_cast<const DirectiveCreateValidator*>(
               &_DirectiveCreateValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DirectiveCreateValidator& a, DirectiveCreateValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectiveCreateValidator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectiveCreateValidator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectiveCreateValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectiveCreateValidator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectiveCreateValidator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectiveCreateValidator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectiveCreateValidator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.DirectiveCreateValidator";
  }
  protected:
  explicit DirectiveCreateValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotPubKeysFieldNumber = 6,
    kSlotKeySigsFieldNumber = 7,
    kValidatorAddressFieldNumber = 1,
    kMinSelfDelegationFieldNumber = 4,
    kMaxTotalDelegationFieldNumber = 5,
    kAmountFieldNumber = 8,
    kDescriptionFieldNumber = 2,
    kCommissionRatesFieldNumber = 3,
  };
  // repeated bytes slot_pub_keys = 6;
  int slot_pub_keys_size() const;
  private:
  int _internal_slot_pub_keys_size() const;
  public:
  void clear_slot_pub_keys();
  const std::string& slot_pub_keys(int index) const;
  std::string* mutable_slot_pub_keys(int index);
  void set_slot_pub_keys(int index, const std::string& value);
  void set_slot_pub_keys(int index, std::string&& value);
  void set_slot_pub_keys(int index, const char* value);
  void set_slot_pub_keys(int index, const void* value, size_t size);
  std::string* add_slot_pub_keys();
  void add_slot_pub_keys(const std::string& value);
  void add_slot_pub_keys(std::string&& value);
  void add_slot_pub_keys(const char* value);
  void add_slot_pub_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& slot_pub_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_slot_pub_keys();
  private:
  const std::string& _internal_slot_pub_keys(int index) const;
  std::string* _internal_add_slot_pub_keys();
  public:

  // repeated bytes slot_key_sigs = 7;
  int slot_key_sigs_size() const;
  private:
  int _internal_slot_key_sigs_size() const;
  public:
  void clear_slot_key_sigs();
  const std::string& slot_key_sigs(int index) const;
  std::string* mutable_slot_key_sigs(int index);
  void set_slot_key_sigs(int index, const std::string& value);
  void set_slot_key_sigs(int index, std::string&& value);
  void set_slot_key_sigs(int index, const char* value);
  void set_slot_key_sigs(int index, const void* value, size_t size);
  std::string* add_slot_key_sigs();
  void add_slot_key_sigs(const std::string& value);
  void add_slot_key_sigs(std::string&& value);
  void add_slot_key_sigs(const char* value);
  void add_slot_key_sigs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& slot_key_sigs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_slot_key_sigs();
  private:
  const std::string& _internal_slot_key_sigs(int index) const;
  std::string* _internal_add_slot_key_sigs();
  public:

  // string validator_address = 1;
  void clear_validator_address();
  const std::string& validator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // bytes min_self_delegation = 4;
  void clear_min_self_delegation();
  const std::string& min_self_delegation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min_self_delegation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min_self_delegation();
  PROTOBUF_NODISCARD std::string* release_min_self_delegation();
  void set_allocated_min_self_delegation(std::string* min_self_delegation);
  private:
  const std::string& _internal_min_self_delegation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_self_delegation(const std::string& value);
  std::string* _internal_mutable_min_self_delegation();
  public:

  // bytes max_total_delegation = 5;
  void clear_max_total_delegation();
  const std::string& max_total_delegation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_total_delegation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_total_delegation();
  PROTOBUF_NODISCARD std::string* release_max_total_delegation();
  void set_allocated_max_total_delegation(std::string* max_total_delegation);
  private:
  const std::string& _internal_max_total_delegation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_total_delegation(const std::string& value);
  std::string* _internal_mutable_max_total_delegation();
  public:

  // bytes amount = 8;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // .TW.Harmony.Proto.Description description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::TW::Harmony::Proto::Description& description() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::Description* release_description();
  ::TW::Harmony::Proto::Description* mutable_description();
  void set_allocated_description(::TW::Harmony::Proto::Description* description);
  private:
  const ::TW::Harmony::Proto::Description& _internal_description() const;
  ::TW::Harmony::Proto::Description* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::TW::Harmony::Proto::Description* description);
  ::TW::Harmony::Proto::Description* unsafe_arena_release_description();

  // .TW.Harmony.Proto.CommissionRate commission_rates = 3;
  bool has_commission_rates() const;
  private:
  bool _internal_has_commission_rates() const;
  public:
  void clear_commission_rates();
  const ::TW::Harmony::Proto::CommissionRate& commission_rates() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::CommissionRate* release_commission_rates();
  ::TW::Harmony::Proto::CommissionRate* mutable_commission_rates();
  void set_allocated_commission_rates(::TW::Harmony::Proto::CommissionRate* commission_rates);
  private:
  const ::TW::Harmony::Proto::CommissionRate& _internal_commission_rates() const;
  ::TW::Harmony::Proto::CommissionRate* _internal_mutable_commission_rates();
  public:
  void unsafe_arena_set_allocated_commission_rates(
      ::TW::Harmony::Proto::CommissionRate* commission_rates);
  ::TW::Harmony::Proto::CommissionRate* unsafe_arena_release_commission_rates();

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.DirectiveCreateValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> slot_pub_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> slot_key_sigs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_self_delegation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_total_delegation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::TW::Harmony::Proto::Description* description_;
  ::TW::Harmony::Proto::CommissionRate* commission_rates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class DirectiveEditValidator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.DirectiveEditValidator) */ {
 public:
  inline DirectiveEditValidator() : DirectiveEditValidator(nullptr) {}
  ~DirectiveEditValidator() override;
  explicit constexpr DirectiveEditValidator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectiveEditValidator(const DirectiveEditValidator& from);
  DirectiveEditValidator(DirectiveEditValidator&& from) noexcept
    : DirectiveEditValidator() {
    *this = ::std::move(from);
  }

  inline DirectiveEditValidator& operator=(const DirectiveEditValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectiveEditValidator& operator=(DirectiveEditValidator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectiveEditValidator& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectiveEditValidator* internal_default_instance() {
    return reinterpret_cast<const DirectiveEditValidator*>(
               &_DirectiveEditValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DirectiveEditValidator& a, DirectiveEditValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectiveEditValidator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectiveEditValidator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectiveEditValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectiveEditValidator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectiveEditValidator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectiveEditValidator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectiveEditValidator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.DirectiveEditValidator";
  }
  protected:
  explicit DirectiveEditValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorAddressFieldNumber = 1,
    kMinSelfDelegationFieldNumber = 4,
    kMaxTotalDelegationFieldNumber = 5,
    kSlotKeyToRemoveFieldNumber = 6,
    kSlotKeyToAddFieldNumber = 7,
    kSlotKeyToAddSigFieldNumber = 8,
    kActiveFieldNumber = 9,
    kDescriptionFieldNumber = 2,
    kCommissionRateFieldNumber = 3,
  };
  // string validator_address = 1;
  void clear_validator_address();
  const std::string& validator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // bytes min_self_delegation = 4;
  void clear_min_self_delegation();
  const std::string& min_self_delegation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min_self_delegation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min_self_delegation();
  PROTOBUF_NODISCARD std::string* release_min_self_delegation();
  void set_allocated_min_self_delegation(std::string* min_self_delegation);
  private:
  const std::string& _internal_min_self_delegation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_self_delegation(const std::string& value);
  std::string* _internal_mutable_min_self_delegation();
  public:

  // bytes max_total_delegation = 5;
  void clear_max_total_delegation();
  const std::string& max_total_delegation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_total_delegation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_total_delegation();
  PROTOBUF_NODISCARD std::string* release_max_total_delegation();
  void set_allocated_max_total_delegation(std::string* max_total_delegation);
  private:
  const std::string& _internal_max_total_delegation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_total_delegation(const std::string& value);
  std::string* _internal_mutable_max_total_delegation();
  public:

  // bytes slot_key_to_remove = 6;
  void clear_slot_key_to_remove();
  const std::string& slot_key_to_remove() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot_key_to_remove(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot_key_to_remove();
  PROTOBUF_NODISCARD std::string* release_slot_key_to_remove();
  void set_allocated_slot_key_to_remove(std::string* slot_key_to_remove);
  private:
  const std::string& _internal_slot_key_to_remove() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot_key_to_remove(const std::string& value);
  std::string* _internal_mutable_slot_key_to_remove();
  public:

  // bytes slot_key_to_add = 7;
  void clear_slot_key_to_add();
  const std::string& slot_key_to_add() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot_key_to_add(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot_key_to_add();
  PROTOBUF_NODISCARD std::string* release_slot_key_to_add();
  void set_allocated_slot_key_to_add(std::string* slot_key_to_add);
  private:
  const std::string& _internal_slot_key_to_add() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot_key_to_add(const std::string& value);
  std::string* _internal_mutable_slot_key_to_add();
  public:

  // bytes slot_key_to_add_sig = 8;
  void clear_slot_key_to_add_sig();
  const std::string& slot_key_to_add_sig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot_key_to_add_sig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot_key_to_add_sig();
  PROTOBUF_NODISCARD std::string* release_slot_key_to_add_sig();
  void set_allocated_slot_key_to_add_sig(std::string* slot_key_to_add_sig);
  private:
  const std::string& _internal_slot_key_to_add_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot_key_to_add_sig(const std::string& value);
  std::string* _internal_mutable_slot_key_to_add_sig();
  public:

  // bytes active = 9;
  void clear_active();
  const std::string& active() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active();
  PROTOBUF_NODISCARD std::string* release_active();
  void set_allocated_active(std::string* active);
  private:
  const std::string& _internal_active() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active(const std::string& value);
  std::string* _internal_mutable_active();
  public:

  // .TW.Harmony.Proto.Description description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::TW::Harmony::Proto::Description& description() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::Description* release_description();
  ::TW::Harmony::Proto::Description* mutable_description();
  void set_allocated_description(::TW::Harmony::Proto::Description* description);
  private:
  const ::TW::Harmony::Proto::Description& _internal_description() const;
  ::TW::Harmony::Proto::Description* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::TW::Harmony::Proto::Description* description);
  ::TW::Harmony::Proto::Description* unsafe_arena_release_description();

  // .TW.Harmony.Proto.Decimal commission_rate = 3;
  bool has_commission_rate() const;
  private:
  bool _internal_has_commission_rate() const;
  public:
  void clear_commission_rate();
  const ::TW::Harmony::Proto::Decimal& commission_rate() const;
  PROTOBUF_NODISCARD ::TW::Harmony::Proto::Decimal* release_commission_rate();
  ::TW::Harmony::Proto::Decimal* mutable_commission_rate();
  void set_allocated_commission_rate(::TW::Harmony::Proto::Decimal* commission_rate);
  private:
  const ::TW::Harmony::Proto::Decimal& _internal_commission_rate() const;
  ::TW::Harmony::Proto::Decimal* _internal_mutable_commission_rate();
  public:
  void unsafe_arena_set_allocated_commission_rate(
      ::TW::Harmony::Proto::Decimal* commission_rate);
  ::TW::Harmony::Proto::Decimal* unsafe_arena_release_commission_rate();

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.DirectiveEditValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_self_delegation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_total_delegation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_key_to_remove_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_key_to_add_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_key_to_add_sig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_;
  ::TW::Harmony::Proto::Description* description_;
  ::TW::Harmony::Proto::Decimal* commission_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class DirectiveDelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.DirectiveDelegate) */ {
 public:
  inline DirectiveDelegate() : DirectiveDelegate(nullptr) {}
  ~DirectiveDelegate() override;
  explicit constexpr DirectiveDelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectiveDelegate(const DirectiveDelegate& from);
  DirectiveDelegate(DirectiveDelegate&& from) noexcept
    : DirectiveDelegate() {
    *this = ::std::move(from);
  }

  inline DirectiveDelegate& operator=(const DirectiveDelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectiveDelegate& operator=(DirectiveDelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectiveDelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectiveDelegate* internal_default_instance() {
    return reinterpret_cast<const DirectiveDelegate*>(
               &_DirectiveDelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DirectiveDelegate& a, DirectiveDelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectiveDelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectiveDelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectiveDelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectiveDelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectiveDelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectiveDelegate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectiveDelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.DirectiveDelegate";
  }
  protected:
  explicit DirectiveDelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // bytes amount = 3;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.DirectiveDelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class DirectiveUndelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.DirectiveUndelegate) */ {
 public:
  inline DirectiveUndelegate() : DirectiveUndelegate(nullptr) {}
  ~DirectiveUndelegate() override;
  explicit constexpr DirectiveUndelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectiveUndelegate(const DirectiveUndelegate& from);
  DirectiveUndelegate(DirectiveUndelegate&& from) noexcept
    : DirectiveUndelegate() {
    *this = ::std::move(from);
  }

  inline DirectiveUndelegate& operator=(const DirectiveUndelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectiveUndelegate& operator=(DirectiveUndelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectiveUndelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectiveUndelegate* internal_default_instance() {
    return reinterpret_cast<const DirectiveUndelegate*>(
               &_DirectiveUndelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DirectiveUndelegate& a, DirectiveUndelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectiveUndelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectiveUndelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectiveUndelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectiveUndelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectiveUndelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectiveUndelegate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectiveUndelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.DirectiveUndelegate";
  }
  protected:
  explicit DirectiveUndelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // bytes amount = 3;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.DirectiveUndelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// -------------------------------------------------------------------

class DirectiveCollectRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Harmony.Proto.DirectiveCollectRewards) */ {
 public:
  inline DirectiveCollectRewards() : DirectiveCollectRewards(nullptr) {}
  ~DirectiveCollectRewards() override;
  explicit constexpr DirectiveCollectRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectiveCollectRewards(const DirectiveCollectRewards& from);
  DirectiveCollectRewards(DirectiveCollectRewards&& from) noexcept
    : DirectiveCollectRewards() {
    *this = ::std::move(from);
  }

  inline DirectiveCollectRewards& operator=(const DirectiveCollectRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectiveCollectRewards& operator=(DirectiveCollectRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectiveCollectRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectiveCollectRewards* internal_default_instance() {
    return reinterpret_cast<const DirectiveCollectRewards*>(
               &_DirectiveCollectRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DirectiveCollectRewards& a, DirectiveCollectRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectiveCollectRewards* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectiveCollectRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectiveCollectRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectiveCollectRewards>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectiveCollectRewards& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectiveCollectRewards& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectiveCollectRewards* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Harmony.Proto.DirectiveCollectRewards";
  }
  protected:
  explicit DirectiveCollectRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Harmony.Proto.DirectiveCollectRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Harmony_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SigningInput

// bytes chain_id = 1;
inline void SigningInput::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_chain_id(ArgT0&& arg0, ArgT... args) {
 
 chain_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningInput.chain_id)
  return _s;
}
inline const std::string& SigningInput::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SigningInput::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningInput.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chain_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningInput.chain_id)
}

// bytes private_key = 2;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningInput.private_key)
}

// .TW.Harmony.Proto.TransactionMessage transaction_message = 3;
inline bool SigningInput::_internal_has_transaction_message() const {
  return message_oneof_case() == kTransactionMessage;
}
inline bool SigningInput::has_transaction_message() const {
  return _internal_has_transaction_message();
}
inline void SigningInput::set_has_transaction_message() {
  _oneof_case_[0] = kTransactionMessage;
}
inline void SigningInput::clear_transaction_message() {
  if (_internal_has_transaction_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.transaction_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Harmony::Proto::TransactionMessage* SigningInput::release_transaction_message() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningInput.transaction_message)
  if (_internal_has_transaction_message()) {
    clear_has_message_oneof();
      ::TW::Harmony::Proto::TransactionMessage* temp = message_oneof_.transaction_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.transaction_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Harmony::Proto::TransactionMessage& SigningInput::_internal_transaction_message() const {
  return _internal_has_transaction_message()
      ? *message_oneof_.transaction_message_
      : reinterpret_cast< ::TW::Harmony::Proto::TransactionMessage&>(::TW::Harmony::Proto::_TransactionMessage_default_instance_);
}
inline const ::TW::Harmony::Proto::TransactionMessage& SigningInput::transaction_message() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningInput.transaction_message)
  return _internal_transaction_message();
}
inline ::TW::Harmony::Proto::TransactionMessage* SigningInput::unsafe_arena_release_transaction_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Harmony.Proto.SigningInput.transaction_message)
  if (_internal_has_transaction_message()) {
    clear_has_message_oneof();
    ::TW::Harmony::Proto::TransactionMessage* temp = message_oneof_.transaction_message_;
    message_oneof_.transaction_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transaction_message(::TW::Harmony::Proto::TransactionMessage* transaction_message) {
  clear_message_oneof();
  if (transaction_message) {
    set_has_transaction_message();
    message_oneof_.transaction_message_ = transaction_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.SigningInput.transaction_message)
}
inline ::TW::Harmony::Proto::TransactionMessage* SigningInput::_internal_mutable_transaction_message() {
  if (!_internal_has_transaction_message()) {
    clear_message_oneof();
    set_has_transaction_message();
    message_oneof_.transaction_message_ = CreateMaybeMessage< ::TW::Harmony::Proto::TransactionMessage >(GetArenaForAllocation());
  }
  return message_oneof_.transaction_message_;
}
inline ::TW::Harmony::Proto::TransactionMessage* SigningInput::mutable_transaction_message() {
  ::TW::Harmony::Proto::TransactionMessage* _msg = _internal_mutable_transaction_message();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningInput.transaction_message)
  return _msg;
}

// .TW.Harmony.Proto.StakingMessage staking_message = 4;
inline bool SigningInput::_internal_has_staking_message() const {
  return message_oneof_case() == kStakingMessage;
}
inline bool SigningInput::has_staking_message() const {
  return _internal_has_staking_message();
}
inline void SigningInput::set_has_staking_message() {
  _oneof_case_[0] = kStakingMessage;
}
inline void SigningInput::clear_staking_message() {
  if (_internal_has_staking_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.staking_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Harmony::Proto::StakingMessage* SigningInput::release_staking_message() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningInput.staking_message)
  if (_internal_has_staking_message()) {
    clear_has_message_oneof();
      ::TW::Harmony::Proto::StakingMessage* temp = message_oneof_.staking_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.staking_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Harmony::Proto::StakingMessage& SigningInput::_internal_staking_message() const {
  return _internal_has_staking_message()
      ? *message_oneof_.staking_message_
      : reinterpret_cast< ::TW::Harmony::Proto::StakingMessage&>(::TW::Harmony::Proto::_StakingMessage_default_instance_);
}
inline const ::TW::Harmony::Proto::StakingMessage& SigningInput::staking_message() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningInput.staking_message)
  return _internal_staking_message();
}
inline ::TW::Harmony::Proto::StakingMessage* SigningInput::unsafe_arena_release_staking_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Harmony.Proto.SigningInput.staking_message)
  if (_internal_has_staking_message()) {
    clear_has_message_oneof();
    ::TW::Harmony::Proto::StakingMessage* temp = message_oneof_.staking_message_;
    message_oneof_.staking_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_staking_message(::TW::Harmony::Proto::StakingMessage* staking_message) {
  clear_message_oneof();
  if (staking_message) {
    set_has_staking_message();
    message_oneof_.staking_message_ = staking_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.SigningInput.staking_message)
}
inline ::TW::Harmony::Proto::StakingMessage* SigningInput::_internal_mutable_staking_message() {
  if (!_internal_has_staking_message()) {
    clear_message_oneof();
    set_has_staking_message();
    message_oneof_.staking_message_ = CreateMaybeMessage< ::TW::Harmony::Proto::StakingMessage >(GetArenaForAllocation());
  }
  return message_oneof_.staking_message_;
}
inline ::TW::Harmony::Proto::StakingMessage* SigningInput::mutable_staking_message() {
  ::TW::Harmony::Proto::StakingMessage* _msg = _internal_mutable_staking_message();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningInput.staking_message)
  return _msg;
}

inline bool SigningInput::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline SigningInput::MessageOneofCase SigningInput::message_oneof_case() const {
  return SigningInput::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningOutput.encoded)
}

// bytes v = 2;
inline void SigningOutput::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& SigningOutput::v() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningOutput.v)
  return _internal_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_v(ArgT0&& arg0, ArgT... args) {
 
 v_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningOutput.v)
}
inline std::string* SigningOutput::mutable_v() {
  std::string* _s = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningOutput.v)
  return _s;
}
inline const std::string& SigningOutput::_internal_v() const {
  return v_.Get();
}
inline void SigningOutput::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_v() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningOutput.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (v_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningOutput.v)
}

// bytes r = 3;
inline void SigningOutput::clear_r() {
  r_.ClearToEmpty();
}
inline const std::string& SigningOutput::r() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningOutput.r)
  return _internal_r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_r(ArgT0&& arg0, ArgT... args) {
 
 r_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningOutput.r)
}
inline std::string* SigningOutput::mutable_r() {
  std::string* _s = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningOutput.r)
  return _s;
}
inline const std::string& SigningOutput::_internal_r() const {
  return r_.Get();
}
inline void SigningOutput::_internal_set_r(const std::string& value) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_r() {
  
  return r_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_r() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningOutput.r)
  return r_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (r_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    r_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningOutput.r)
}

// bytes s = 4;
inline void SigningOutput::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& SigningOutput::s() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningOutput.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningOutput.s)
}
inline std::string* SigningOutput::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningOutput.s)
  return _s;
}
inline const std::string& SigningOutput::_internal_s() const {
  return s_.Get();
}
inline void SigningOutput::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_s() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningOutput.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningOutput.s)
}

// .TW.Common.Proto.SigningError error = 5;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningOutput.error)
}

// string error_message = 6;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.SigningOutput.error_message)
}

// -------------------------------------------------------------------

// TransactionMessage

// bytes nonce = 1;
inline void TransactionMessage::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& TransactionMessage::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 nonce_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.nonce)
}
inline std::string* TransactionMessage::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.nonce)
  return _s;
}
inline const std::string& TransactionMessage::_internal_nonce() const {
  return nonce_.Get();
}
inline void TransactionMessage::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_nonce() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.nonce)
}

// bytes gas_price = 2;
inline void TransactionMessage::clear_gas_price() {
  gas_price_.ClearToEmpty();
}
inline const std::string& TransactionMessage::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.gas_price)
  return _internal_gas_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_gas_price(ArgT0&& arg0, ArgT... args) {
 
 gas_price_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.gas_price)
}
inline std::string* TransactionMessage::mutable_gas_price() {
  std::string* _s = _internal_mutable_gas_price();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.gas_price)
  return _s;
}
inline const std::string& TransactionMessage::_internal_gas_price() const {
  return gas_price_.Get();
}
inline void TransactionMessage::_internal_set_gas_price(const std::string& value) {
  
  gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_gas_price() {
  
  return gas_price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_gas_price() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.gas_price)
  return gas_price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_gas_price(std::string* gas_price) {
  if (gas_price != nullptr) {
    
  } else {
    
  }
  gas_price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_price,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_price_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.gas_price)
}

// bytes gas_limit = 3;
inline void TransactionMessage::clear_gas_limit() {
  gas_limit_.ClearToEmpty();
}
inline const std::string& TransactionMessage::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.gas_limit)
  return _internal_gas_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_gas_limit(ArgT0&& arg0, ArgT... args) {
 
 gas_limit_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.gas_limit)
}
inline std::string* TransactionMessage::mutable_gas_limit() {
  std::string* _s = _internal_mutable_gas_limit();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.gas_limit)
  return _s;
}
inline const std::string& TransactionMessage::_internal_gas_limit() const {
  return gas_limit_.Get();
}
inline void TransactionMessage::_internal_set_gas_limit(const std::string& value) {
  
  gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_gas_limit() {
  
  return gas_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_gas_limit() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.gas_limit)
  return gas_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_gas_limit(std::string* gas_limit) {
  if (gas_limit != nullptr) {
    
  } else {
    
  }
  gas_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.gas_limit)
}

// string to_address = 4;
inline void TransactionMessage::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransactionMessage::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.to_address)
}
inline std::string* TransactionMessage::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.to_address)
  return _s;
}
inline const std::string& TransactionMessage::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransactionMessage::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.to_address)
}

// bytes amount = 5;
inline void TransactionMessage::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& TransactionMessage::amount() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.amount)
}
inline std::string* TransactionMessage::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.amount)
  return _s;
}
inline const std::string& TransactionMessage::_internal_amount() const {
  return amount_.Get();
}
inline void TransactionMessage::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.amount)
}

// bytes payload = 6;
inline void TransactionMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& TransactionMessage::payload() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.payload)
}
inline std::string* TransactionMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.payload)
  return _s;
}
inline const std::string& TransactionMessage::_internal_payload() const {
  return payload_.Get();
}
inline void TransactionMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_payload() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.payload)
}

// bytes from_shard_id = 7;
inline void TransactionMessage::clear_from_shard_id() {
  from_shard_id_.ClearToEmpty();
}
inline const std::string& TransactionMessage::from_shard_id() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.from_shard_id)
  return _internal_from_shard_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_from_shard_id(ArgT0&& arg0, ArgT... args) {
 
 from_shard_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.from_shard_id)
}
inline std::string* TransactionMessage::mutable_from_shard_id() {
  std::string* _s = _internal_mutable_from_shard_id();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.from_shard_id)
  return _s;
}
inline const std::string& TransactionMessage::_internal_from_shard_id() const {
  return from_shard_id_.Get();
}
inline void TransactionMessage::_internal_set_from_shard_id(const std::string& value) {
  
  from_shard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_from_shard_id() {
  
  return from_shard_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_from_shard_id() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.from_shard_id)
  return from_shard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_from_shard_id(std::string* from_shard_id) {
  if (from_shard_id != nullptr) {
    
  } else {
    
  }
  from_shard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_shard_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_shard_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_shard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.from_shard_id)
}

// bytes to_shard_id = 8;
inline void TransactionMessage::clear_to_shard_id() {
  to_shard_id_.ClearToEmpty();
}
inline const std::string& TransactionMessage::to_shard_id() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.TransactionMessage.to_shard_id)
  return _internal_to_shard_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_to_shard_id(ArgT0&& arg0, ArgT... args) {
 
 to_shard_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.TransactionMessage.to_shard_id)
}
inline std::string* TransactionMessage::mutable_to_shard_id() {
  std::string* _s = _internal_mutable_to_shard_id();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.TransactionMessage.to_shard_id)
  return _s;
}
inline const std::string& TransactionMessage::_internal_to_shard_id() const {
  return to_shard_id_.Get();
}
inline void TransactionMessage::_internal_set_to_shard_id(const std::string& value) {
  
  to_shard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_to_shard_id() {
  
  return to_shard_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_to_shard_id() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.TransactionMessage.to_shard_id)
  return to_shard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_to_shard_id(std::string* to_shard_id) {
  if (to_shard_id != nullptr) {
    
  } else {
    
  }
  to_shard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_shard_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_shard_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_shard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.TransactionMessage.to_shard_id)
}

// -------------------------------------------------------------------

// StakingMessage

// .TW.Harmony.Proto.DirectiveCreateValidator create_validator_message = 1;
inline bool StakingMessage::_internal_has_create_validator_message() const {
  return stake_msg_case() == kCreateValidatorMessage;
}
inline bool StakingMessage::has_create_validator_message() const {
  return _internal_has_create_validator_message();
}
inline void StakingMessage::set_has_create_validator_message() {
  _oneof_case_[0] = kCreateValidatorMessage;
}
inline void StakingMessage::clear_create_validator_message() {
  if (_internal_has_create_validator_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stake_msg_.create_validator_message_;
    }
    clear_has_stake_msg();
  }
}
inline ::TW::Harmony::Proto::DirectiveCreateValidator* StakingMessage::release_create_validator_message() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.create_validator_message)
  if (_internal_has_create_validator_message()) {
    clear_has_stake_msg();
      ::TW::Harmony::Proto::DirectiveCreateValidator* temp = stake_msg_.create_validator_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stake_msg_.create_validator_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Harmony::Proto::DirectiveCreateValidator& StakingMessage::_internal_create_validator_message() const {
  return _internal_has_create_validator_message()
      ? *stake_msg_.create_validator_message_
      : reinterpret_cast< ::TW::Harmony::Proto::DirectiveCreateValidator&>(::TW::Harmony::Proto::_DirectiveCreateValidator_default_instance_);
}
inline const ::TW::Harmony::Proto::DirectiveCreateValidator& StakingMessage::create_validator_message() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.create_validator_message)
  return _internal_create_validator_message();
}
inline ::TW::Harmony::Proto::DirectiveCreateValidator* StakingMessage::unsafe_arena_release_create_validator_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Harmony.Proto.StakingMessage.create_validator_message)
  if (_internal_has_create_validator_message()) {
    clear_has_stake_msg();
    ::TW::Harmony::Proto::DirectiveCreateValidator* temp = stake_msg_.create_validator_message_;
    stake_msg_.create_validator_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakingMessage::unsafe_arena_set_allocated_create_validator_message(::TW::Harmony::Proto::DirectiveCreateValidator* create_validator_message) {
  clear_stake_msg();
  if (create_validator_message) {
    set_has_create_validator_message();
    stake_msg_.create_validator_message_ = create_validator_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.StakingMessage.create_validator_message)
}
inline ::TW::Harmony::Proto::DirectiveCreateValidator* StakingMessage::_internal_mutable_create_validator_message() {
  if (!_internal_has_create_validator_message()) {
    clear_stake_msg();
    set_has_create_validator_message();
    stake_msg_.create_validator_message_ = CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveCreateValidator >(GetArenaForAllocation());
  }
  return stake_msg_.create_validator_message_;
}
inline ::TW::Harmony::Proto::DirectiveCreateValidator* StakingMessage::mutable_create_validator_message() {
  ::TW::Harmony::Proto::DirectiveCreateValidator* _msg = _internal_mutable_create_validator_message();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.create_validator_message)
  return _msg;
}

// .TW.Harmony.Proto.DirectiveEditValidator edit_validator_message = 2;
inline bool StakingMessage::_internal_has_edit_validator_message() const {
  return stake_msg_case() == kEditValidatorMessage;
}
inline bool StakingMessage::has_edit_validator_message() const {
  return _internal_has_edit_validator_message();
}
inline void StakingMessage::set_has_edit_validator_message() {
  _oneof_case_[0] = kEditValidatorMessage;
}
inline void StakingMessage::clear_edit_validator_message() {
  if (_internal_has_edit_validator_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stake_msg_.edit_validator_message_;
    }
    clear_has_stake_msg();
  }
}
inline ::TW::Harmony::Proto::DirectiveEditValidator* StakingMessage::release_edit_validator_message() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.edit_validator_message)
  if (_internal_has_edit_validator_message()) {
    clear_has_stake_msg();
      ::TW::Harmony::Proto::DirectiveEditValidator* temp = stake_msg_.edit_validator_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stake_msg_.edit_validator_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Harmony::Proto::DirectiveEditValidator& StakingMessage::_internal_edit_validator_message() const {
  return _internal_has_edit_validator_message()
      ? *stake_msg_.edit_validator_message_
      : reinterpret_cast< ::TW::Harmony::Proto::DirectiveEditValidator&>(::TW::Harmony::Proto::_DirectiveEditValidator_default_instance_);
}
inline const ::TW::Harmony::Proto::DirectiveEditValidator& StakingMessage::edit_validator_message() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.edit_validator_message)
  return _internal_edit_validator_message();
}
inline ::TW::Harmony::Proto::DirectiveEditValidator* StakingMessage::unsafe_arena_release_edit_validator_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Harmony.Proto.StakingMessage.edit_validator_message)
  if (_internal_has_edit_validator_message()) {
    clear_has_stake_msg();
    ::TW::Harmony::Proto::DirectiveEditValidator* temp = stake_msg_.edit_validator_message_;
    stake_msg_.edit_validator_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakingMessage::unsafe_arena_set_allocated_edit_validator_message(::TW::Harmony::Proto::DirectiveEditValidator* edit_validator_message) {
  clear_stake_msg();
  if (edit_validator_message) {
    set_has_edit_validator_message();
    stake_msg_.edit_validator_message_ = edit_validator_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.StakingMessage.edit_validator_message)
}
inline ::TW::Harmony::Proto::DirectiveEditValidator* StakingMessage::_internal_mutable_edit_validator_message() {
  if (!_internal_has_edit_validator_message()) {
    clear_stake_msg();
    set_has_edit_validator_message();
    stake_msg_.edit_validator_message_ = CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveEditValidator >(GetArenaForAllocation());
  }
  return stake_msg_.edit_validator_message_;
}
inline ::TW::Harmony::Proto::DirectiveEditValidator* StakingMessage::mutable_edit_validator_message() {
  ::TW::Harmony::Proto::DirectiveEditValidator* _msg = _internal_mutable_edit_validator_message();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.edit_validator_message)
  return _msg;
}

// .TW.Harmony.Proto.DirectiveDelegate delegate_message = 3;
inline bool StakingMessage::_internal_has_delegate_message() const {
  return stake_msg_case() == kDelegateMessage;
}
inline bool StakingMessage::has_delegate_message() const {
  return _internal_has_delegate_message();
}
inline void StakingMessage::set_has_delegate_message() {
  _oneof_case_[0] = kDelegateMessage;
}
inline void StakingMessage::clear_delegate_message() {
  if (_internal_has_delegate_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stake_msg_.delegate_message_;
    }
    clear_has_stake_msg();
  }
}
inline ::TW::Harmony::Proto::DirectiveDelegate* StakingMessage::release_delegate_message() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.delegate_message)
  if (_internal_has_delegate_message()) {
    clear_has_stake_msg();
      ::TW::Harmony::Proto::DirectiveDelegate* temp = stake_msg_.delegate_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stake_msg_.delegate_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Harmony::Proto::DirectiveDelegate& StakingMessage::_internal_delegate_message() const {
  return _internal_has_delegate_message()
      ? *stake_msg_.delegate_message_
      : reinterpret_cast< ::TW::Harmony::Proto::DirectiveDelegate&>(::TW::Harmony::Proto::_DirectiveDelegate_default_instance_);
}
inline const ::TW::Harmony::Proto::DirectiveDelegate& StakingMessage::delegate_message() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.delegate_message)
  return _internal_delegate_message();
}
inline ::TW::Harmony::Proto::DirectiveDelegate* StakingMessage::unsafe_arena_release_delegate_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Harmony.Proto.StakingMessage.delegate_message)
  if (_internal_has_delegate_message()) {
    clear_has_stake_msg();
    ::TW::Harmony::Proto::DirectiveDelegate* temp = stake_msg_.delegate_message_;
    stake_msg_.delegate_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakingMessage::unsafe_arena_set_allocated_delegate_message(::TW::Harmony::Proto::DirectiveDelegate* delegate_message) {
  clear_stake_msg();
  if (delegate_message) {
    set_has_delegate_message();
    stake_msg_.delegate_message_ = delegate_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.StakingMessage.delegate_message)
}
inline ::TW::Harmony::Proto::DirectiveDelegate* StakingMessage::_internal_mutable_delegate_message() {
  if (!_internal_has_delegate_message()) {
    clear_stake_msg();
    set_has_delegate_message();
    stake_msg_.delegate_message_ = CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveDelegate >(GetArenaForAllocation());
  }
  return stake_msg_.delegate_message_;
}
inline ::TW::Harmony::Proto::DirectiveDelegate* StakingMessage::mutable_delegate_message() {
  ::TW::Harmony::Proto::DirectiveDelegate* _msg = _internal_mutable_delegate_message();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.delegate_message)
  return _msg;
}

// .TW.Harmony.Proto.DirectiveUndelegate undelegate_message = 4;
inline bool StakingMessage::_internal_has_undelegate_message() const {
  return stake_msg_case() == kUndelegateMessage;
}
inline bool StakingMessage::has_undelegate_message() const {
  return _internal_has_undelegate_message();
}
inline void StakingMessage::set_has_undelegate_message() {
  _oneof_case_[0] = kUndelegateMessage;
}
inline void StakingMessage::clear_undelegate_message() {
  if (_internal_has_undelegate_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stake_msg_.undelegate_message_;
    }
    clear_has_stake_msg();
  }
}
inline ::TW::Harmony::Proto::DirectiveUndelegate* StakingMessage::release_undelegate_message() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.undelegate_message)
  if (_internal_has_undelegate_message()) {
    clear_has_stake_msg();
      ::TW::Harmony::Proto::DirectiveUndelegate* temp = stake_msg_.undelegate_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stake_msg_.undelegate_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Harmony::Proto::DirectiveUndelegate& StakingMessage::_internal_undelegate_message() const {
  return _internal_has_undelegate_message()
      ? *stake_msg_.undelegate_message_
      : reinterpret_cast< ::TW::Harmony::Proto::DirectiveUndelegate&>(::TW::Harmony::Proto::_DirectiveUndelegate_default_instance_);
}
inline const ::TW::Harmony::Proto::DirectiveUndelegate& StakingMessage::undelegate_message() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.undelegate_message)
  return _internal_undelegate_message();
}
inline ::TW::Harmony::Proto::DirectiveUndelegate* StakingMessage::unsafe_arena_release_undelegate_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Harmony.Proto.StakingMessage.undelegate_message)
  if (_internal_has_undelegate_message()) {
    clear_has_stake_msg();
    ::TW::Harmony::Proto::DirectiveUndelegate* temp = stake_msg_.undelegate_message_;
    stake_msg_.undelegate_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakingMessage::unsafe_arena_set_allocated_undelegate_message(::TW::Harmony::Proto::DirectiveUndelegate* undelegate_message) {
  clear_stake_msg();
  if (undelegate_message) {
    set_has_undelegate_message();
    stake_msg_.undelegate_message_ = undelegate_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.StakingMessage.undelegate_message)
}
inline ::TW::Harmony::Proto::DirectiveUndelegate* StakingMessage::_internal_mutable_undelegate_message() {
  if (!_internal_has_undelegate_message()) {
    clear_stake_msg();
    set_has_undelegate_message();
    stake_msg_.undelegate_message_ = CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveUndelegate >(GetArenaForAllocation());
  }
  return stake_msg_.undelegate_message_;
}
inline ::TW::Harmony::Proto::DirectiveUndelegate* StakingMessage::mutable_undelegate_message() {
  ::TW::Harmony::Proto::DirectiveUndelegate* _msg = _internal_mutable_undelegate_message();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.undelegate_message)
  return _msg;
}

// .TW.Harmony.Proto.DirectiveCollectRewards collect_rewards = 5;
inline bool StakingMessage::_internal_has_collect_rewards() const {
  return stake_msg_case() == kCollectRewards;
}
inline bool StakingMessage::has_collect_rewards() const {
  return _internal_has_collect_rewards();
}
inline void StakingMessage::set_has_collect_rewards() {
  _oneof_case_[0] = kCollectRewards;
}
inline void StakingMessage::clear_collect_rewards() {
  if (_internal_has_collect_rewards()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stake_msg_.collect_rewards_;
    }
    clear_has_stake_msg();
  }
}
inline ::TW::Harmony::Proto::DirectiveCollectRewards* StakingMessage::release_collect_rewards() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.collect_rewards)
  if (_internal_has_collect_rewards()) {
    clear_has_stake_msg();
      ::TW::Harmony::Proto::DirectiveCollectRewards* temp = stake_msg_.collect_rewards_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stake_msg_.collect_rewards_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Harmony::Proto::DirectiveCollectRewards& StakingMessage::_internal_collect_rewards() const {
  return _internal_has_collect_rewards()
      ? *stake_msg_.collect_rewards_
      : reinterpret_cast< ::TW::Harmony::Proto::DirectiveCollectRewards&>(::TW::Harmony::Proto::_DirectiveCollectRewards_default_instance_);
}
inline const ::TW::Harmony::Proto::DirectiveCollectRewards& StakingMessage::collect_rewards() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.collect_rewards)
  return _internal_collect_rewards();
}
inline ::TW::Harmony::Proto::DirectiveCollectRewards* StakingMessage::unsafe_arena_release_collect_rewards() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Harmony.Proto.StakingMessage.collect_rewards)
  if (_internal_has_collect_rewards()) {
    clear_has_stake_msg();
    ::TW::Harmony::Proto::DirectiveCollectRewards* temp = stake_msg_.collect_rewards_;
    stake_msg_.collect_rewards_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakingMessage::unsafe_arena_set_allocated_collect_rewards(::TW::Harmony::Proto::DirectiveCollectRewards* collect_rewards) {
  clear_stake_msg();
  if (collect_rewards) {
    set_has_collect_rewards();
    stake_msg_.collect_rewards_ = collect_rewards;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.StakingMessage.collect_rewards)
}
inline ::TW::Harmony::Proto::DirectiveCollectRewards* StakingMessage::_internal_mutable_collect_rewards() {
  if (!_internal_has_collect_rewards()) {
    clear_stake_msg();
    set_has_collect_rewards();
    stake_msg_.collect_rewards_ = CreateMaybeMessage< ::TW::Harmony::Proto::DirectiveCollectRewards >(GetArenaForAllocation());
  }
  return stake_msg_.collect_rewards_;
}
inline ::TW::Harmony::Proto::DirectiveCollectRewards* StakingMessage::mutable_collect_rewards() {
  ::TW::Harmony::Proto::DirectiveCollectRewards* _msg = _internal_mutable_collect_rewards();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.collect_rewards)
  return _msg;
}

// bytes nonce = 6;
inline void StakingMessage::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& StakingMessage::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StakingMessage::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 nonce_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.StakingMessage.nonce)
}
inline std::string* StakingMessage::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.nonce)
  return _s;
}
inline const std::string& StakingMessage::_internal_nonce() const {
  return nonce_.Get();
}
inline void StakingMessage::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StakingMessage::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StakingMessage::release_nonce() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StakingMessage::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.nonce)
}

// bytes gas_price = 7;
inline void StakingMessage::clear_gas_price() {
  gas_price_.ClearToEmpty();
}
inline const std::string& StakingMessage::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.gas_price)
  return _internal_gas_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StakingMessage::set_gas_price(ArgT0&& arg0, ArgT... args) {
 
 gas_price_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.StakingMessage.gas_price)
}
inline std::string* StakingMessage::mutable_gas_price() {
  std::string* _s = _internal_mutable_gas_price();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.gas_price)
  return _s;
}
inline const std::string& StakingMessage::_internal_gas_price() const {
  return gas_price_.Get();
}
inline void StakingMessage::_internal_set_gas_price(const std::string& value) {
  
  gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StakingMessage::_internal_mutable_gas_price() {
  
  return gas_price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StakingMessage::release_gas_price() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.gas_price)
  return gas_price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StakingMessage::set_allocated_gas_price(std::string* gas_price) {
  if (gas_price != nullptr) {
    
  } else {
    
  }
  gas_price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_price,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_price_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.gas_price)
}

// bytes gas_limit = 8;
inline void StakingMessage::clear_gas_limit() {
  gas_limit_.ClearToEmpty();
}
inline const std::string& StakingMessage::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.StakingMessage.gas_limit)
  return _internal_gas_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StakingMessage::set_gas_limit(ArgT0&& arg0, ArgT... args) {
 
 gas_limit_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.StakingMessage.gas_limit)
}
inline std::string* StakingMessage::mutable_gas_limit() {
  std::string* _s = _internal_mutable_gas_limit();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.StakingMessage.gas_limit)
  return _s;
}
inline const std::string& StakingMessage::_internal_gas_limit() const {
  return gas_limit_.Get();
}
inline void StakingMessage::_internal_set_gas_limit(const std::string& value) {
  
  gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StakingMessage::_internal_mutable_gas_limit() {
  
  return gas_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StakingMessage::release_gas_limit() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.StakingMessage.gas_limit)
  return gas_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StakingMessage::set_allocated_gas_limit(std::string* gas_limit) {
  if (gas_limit != nullptr) {
    
  } else {
    
  }
  gas_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.StakingMessage.gas_limit)
}

inline bool StakingMessage::has_stake_msg() const {
  return stake_msg_case() != STAKE_MSG_NOT_SET;
}
inline void StakingMessage::clear_has_stake_msg() {
  _oneof_case_[0] = STAKE_MSG_NOT_SET;
}
inline StakingMessage::StakeMsgCase StakingMessage::stake_msg_case() const {
  return StakingMessage::StakeMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Description

// string name = 1;
inline void Description::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Description::name() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.Description.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Description::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.Description.name)
}
inline std::string* Description::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.Description.name)
  return _s;
}
inline const std::string& Description::_internal_name() const {
  return name_.Get();
}
inline void Description::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Description::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Description::release_name() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.Description.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Description::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.Description.name)
}

// string identity = 2;
inline void Description::clear_identity() {
  identity_.ClearToEmpty();
}
inline const std::string& Description::identity() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.Description.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Description::set_identity(ArgT0&& arg0, ArgT... args) {
 
 identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.Description.identity)
}
inline std::string* Description::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.Description.identity)
  return _s;
}
inline const std::string& Description::_internal_identity() const {
  return identity_.Get();
}
inline void Description::_internal_set_identity(const std::string& value) {
  
  identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Description::_internal_mutable_identity() {
  
  return identity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Description::release_identity() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.Description.identity)
  return identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Description::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identity_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.Description.identity)
}

// string website = 3;
inline void Description::clear_website() {
  website_.ClearToEmpty();
}
inline const std::string& Description::website() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.Description.website)
  return _internal_website();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Description::set_website(ArgT0&& arg0, ArgT... args) {
 
 website_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.Description.website)
}
inline std::string* Description::mutable_website() {
  std::string* _s = _internal_mutable_website();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.Description.website)
  return _s;
}
inline const std::string& Description::_internal_website() const {
  return website_.Get();
}
inline void Description::_internal_set_website(const std::string& value) {
  
  website_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Description::_internal_mutable_website() {
  
  return website_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Description::release_website() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.Description.website)
  return website_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Description::set_allocated_website(std::string* website) {
  if (website != nullptr) {
    
  } else {
    
  }
  website_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), website,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (website_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    website_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.Description.website)
}

// string security_contact = 4;
inline void Description::clear_security_contact() {
  security_contact_.ClearToEmpty();
}
inline const std::string& Description::security_contact() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.Description.security_contact)
  return _internal_security_contact();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Description::set_security_contact(ArgT0&& arg0, ArgT... args) {
 
 security_contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.Description.security_contact)
}
inline std::string* Description::mutable_security_contact() {
  std::string* _s = _internal_mutable_security_contact();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.Description.security_contact)
  return _s;
}
inline const std::string& Description::_internal_security_contact() const {
  return security_contact_.Get();
}
inline void Description::_internal_set_security_contact(const std::string& value) {
  
  security_contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Description::_internal_mutable_security_contact() {
  
  return security_contact_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Description::release_security_contact() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.Description.security_contact)
  return security_contact_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Description::set_allocated_security_contact(std::string* security_contact) {
  if (security_contact != nullptr) {
    
  } else {
    
  }
  security_contact_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_contact,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (security_contact_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    security_contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.Description.security_contact)
}

// string details = 5;
inline void Description::clear_details() {
  details_.ClearToEmpty();
}
inline const std::string& Description::details() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.Description.details)
  return _internal_details();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Description::set_details(ArgT0&& arg0, ArgT... args) {
 
 details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.Description.details)
}
inline std::string* Description::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.Description.details)
  return _s;
}
inline const std::string& Description::_internal_details() const {
  return details_.Get();
}
inline void Description::_internal_set_details(const std::string& value) {
  
  details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Description::_internal_mutable_details() {
  
  return details_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Description::release_details() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.Description.details)
  return details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Description::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (details_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.Description.details)
}

// -------------------------------------------------------------------

// Decimal

// bytes value = 1;
inline void Decimal::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Decimal::value() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.Decimal.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Decimal::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.Decimal.value)
}
inline std::string* Decimal::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.Decimal.value)
  return _s;
}
inline const std::string& Decimal::_internal_value() const {
  return value_.Get();
}
inline void Decimal::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Decimal::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Decimal::release_value() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.Decimal.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Decimal::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.Decimal.value)
}

// bytes precision = 2;
inline void Decimal::clear_precision() {
  precision_.ClearToEmpty();
}
inline const std::string& Decimal::precision() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.Decimal.precision)
  return _internal_precision();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Decimal::set_precision(ArgT0&& arg0, ArgT... args) {
 
 precision_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.Decimal.precision)
}
inline std::string* Decimal::mutable_precision() {
  std::string* _s = _internal_mutable_precision();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.Decimal.precision)
  return _s;
}
inline const std::string& Decimal::_internal_precision() const {
  return precision_.Get();
}
inline void Decimal::_internal_set_precision(const std::string& value) {
  
  precision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Decimal::_internal_mutable_precision() {
  
  return precision_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Decimal::release_precision() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.Decimal.precision)
  return precision_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Decimal::set_allocated_precision(std::string* precision) {
  if (precision != nullptr) {
    
  } else {
    
  }
  precision_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), precision,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (precision_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    precision_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.Decimal.precision)
}

// -------------------------------------------------------------------

// CommissionRate

// .TW.Harmony.Proto.Decimal rate = 1;
inline bool CommissionRate::_internal_has_rate() const {
  return this != internal_default_instance() && rate_ != nullptr;
}
inline bool CommissionRate::has_rate() const {
  return _internal_has_rate();
}
inline void CommissionRate::clear_rate() {
  if (GetArenaForAllocation() == nullptr && rate_ != nullptr) {
    delete rate_;
  }
  rate_ = nullptr;
}
inline const ::TW::Harmony::Proto::Decimal& CommissionRate::_internal_rate() const {
  const ::TW::Harmony::Proto::Decimal* p = rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Harmony::Proto::Decimal&>(
      ::TW::Harmony::Proto::_Decimal_default_instance_);
}
inline const ::TW::Harmony::Proto::Decimal& CommissionRate::rate() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.CommissionRate.rate)
  return _internal_rate();
}
inline void CommissionRate::unsafe_arena_set_allocated_rate(
    ::TW::Harmony::Proto::Decimal* rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate_);
  }
  rate_ = rate;
  if (rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.CommissionRate.rate)
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::release_rate() {
  
  ::TW::Harmony::Proto::Decimal* temp = rate_;
  rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::unsafe_arena_release_rate() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.CommissionRate.rate)
  
  ::TW::Harmony::Proto::Decimal* temp = rate_;
  rate_ = nullptr;
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::_internal_mutable_rate() {
  
  if (rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Harmony::Proto::Decimal>(GetArenaForAllocation());
    rate_ = p;
  }
  return rate_;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::mutable_rate() {
  ::TW::Harmony::Proto::Decimal* _msg = _internal_mutable_rate();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.CommissionRate.rate)
  return _msg;
}
inline void CommissionRate::set_allocated_rate(::TW::Harmony::Proto::Decimal* rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rate_;
  }
  if (rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Harmony::Proto::Decimal>::GetOwningArena(rate);
    if (message_arena != submessage_arena) {
      rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    
  } else {
    
  }
  rate_ = rate;
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.CommissionRate.rate)
}

// .TW.Harmony.Proto.Decimal max_rate = 2;
inline bool CommissionRate::_internal_has_max_rate() const {
  return this != internal_default_instance() && max_rate_ != nullptr;
}
inline bool CommissionRate::has_max_rate() const {
  return _internal_has_max_rate();
}
inline void CommissionRate::clear_max_rate() {
  if (GetArenaForAllocation() == nullptr && max_rate_ != nullptr) {
    delete max_rate_;
  }
  max_rate_ = nullptr;
}
inline const ::TW::Harmony::Proto::Decimal& CommissionRate::_internal_max_rate() const {
  const ::TW::Harmony::Proto::Decimal* p = max_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Harmony::Proto::Decimal&>(
      ::TW::Harmony::Proto::_Decimal_default_instance_);
}
inline const ::TW::Harmony::Proto::Decimal& CommissionRate::max_rate() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.CommissionRate.max_rate)
  return _internal_max_rate();
}
inline void CommissionRate::unsafe_arena_set_allocated_max_rate(
    ::TW::Harmony::Proto::Decimal* max_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rate_);
  }
  max_rate_ = max_rate;
  if (max_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.CommissionRate.max_rate)
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::release_max_rate() {
  
  ::TW::Harmony::Proto::Decimal* temp = max_rate_;
  max_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::unsafe_arena_release_max_rate() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.CommissionRate.max_rate)
  
  ::TW::Harmony::Proto::Decimal* temp = max_rate_;
  max_rate_ = nullptr;
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::_internal_mutable_max_rate() {
  
  if (max_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Harmony::Proto::Decimal>(GetArenaForAllocation());
    max_rate_ = p;
  }
  return max_rate_;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::mutable_max_rate() {
  ::TW::Harmony::Proto::Decimal* _msg = _internal_mutable_max_rate();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.CommissionRate.max_rate)
  return _msg;
}
inline void CommissionRate::set_allocated_max_rate(::TW::Harmony::Proto::Decimal* max_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete max_rate_;
  }
  if (max_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Harmony::Proto::Decimal>::GetOwningArena(max_rate);
    if (message_arena != submessage_arena) {
      max_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_rate, submessage_arena);
    }
    
  } else {
    
  }
  max_rate_ = max_rate;
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.CommissionRate.max_rate)
}

// .TW.Harmony.Proto.Decimal max_change_rate = 3;
inline bool CommissionRate::_internal_has_max_change_rate() const {
  return this != internal_default_instance() && max_change_rate_ != nullptr;
}
inline bool CommissionRate::has_max_change_rate() const {
  return _internal_has_max_change_rate();
}
inline void CommissionRate::clear_max_change_rate() {
  if (GetArenaForAllocation() == nullptr && max_change_rate_ != nullptr) {
    delete max_change_rate_;
  }
  max_change_rate_ = nullptr;
}
inline const ::TW::Harmony::Proto::Decimal& CommissionRate::_internal_max_change_rate() const {
  const ::TW::Harmony::Proto::Decimal* p = max_change_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Harmony::Proto::Decimal&>(
      ::TW::Harmony::Proto::_Decimal_default_instance_);
}
inline const ::TW::Harmony::Proto::Decimal& CommissionRate::max_change_rate() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.CommissionRate.max_change_rate)
  return _internal_max_change_rate();
}
inline void CommissionRate::unsafe_arena_set_allocated_max_change_rate(
    ::TW::Harmony::Proto::Decimal* max_change_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_change_rate_);
  }
  max_change_rate_ = max_change_rate;
  if (max_change_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.CommissionRate.max_change_rate)
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::release_max_change_rate() {
  
  ::TW::Harmony::Proto::Decimal* temp = max_change_rate_;
  max_change_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::unsafe_arena_release_max_change_rate() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.CommissionRate.max_change_rate)
  
  ::TW::Harmony::Proto::Decimal* temp = max_change_rate_;
  max_change_rate_ = nullptr;
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::_internal_mutable_max_change_rate() {
  
  if (max_change_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Harmony::Proto::Decimal>(GetArenaForAllocation());
    max_change_rate_ = p;
  }
  return max_change_rate_;
}
inline ::TW::Harmony::Proto::Decimal* CommissionRate::mutable_max_change_rate() {
  ::TW::Harmony::Proto::Decimal* _msg = _internal_mutable_max_change_rate();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.CommissionRate.max_change_rate)
  return _msg;
}
inline void CommissionRate::set_allocated_max_change_rate(::TW::Harmony::Proto::Decimal* max_change_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete max_change_rate_;
  }
  if (max_change_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Harmony::Proto::Decimal>::GetOwningArena(max_change_rate);
    if (message_arena != submessage_arena) {
      max_change_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_change_rate, submessage_arena);
    }
    
  } else {
    
  }
  max_change_rate_ = max_change_rate;
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.CommissionRate.max_change_rate)
}

// -------------------------------------------------------------------

// DirectiveCreateValidator

// string validator_address = 1;
inline void DirectiveCreateValidator::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& DirectiveCreateValidator::validator_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.validator_address)
  return _internal_validator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveCreateValidator::set_validator_address(ArgT0&& arg0, ArgT... args) {
 
 validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.validator_address)
}
inline std::string* DirectiveCreateValidator::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.validator_address)
  return _s;
}
inline const std::string& DirectiveCreateValidator::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void DirectiveCreateValidator::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::release_validator_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveCreateValidator.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveCreateValidator::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.validator_address)
}

// .TW.Harmony.Proto.Description description = 2;
inline bool DirectiveCreateValidator::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool DirectiveCreateValidator::has_description() const {
  return _internal_has_description();
}
inline void DirectiveCreateValidator::clear_description() {
  if (GetArenaForAllocation() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
inline const ::TW::Harmony::Proto::Description& DirectiveCreateValidator::_internal_description() const {
  const ::TW::Harmony::Proto::Description* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Harmony::Proto::Description&>(
      ::TW::Harmony::Proto::_Description_default_instance_);
}
inline const ::TW::Harmony::Proto::Description& DirectiveCreateValidator::description() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.description)
  return _internal_description();
}
inline void DirectiveCreateValidator::unsafe_arena_set_allocated_description(
    ::TW::Harmony::Proto::Description* description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.description)
}
inline ::TW::Harmony::Proto::Description* DirectiveCreateValidator::release_description() {
  
  ::TW::Harmony::Proto::Description* temp = description_;
  description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Harmony::Proto::Description* DirectiveCreateValidator::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveCreateValidator.description)
  
  ::TW::Harmony::Proto::Description* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::TW::Harmony::Proto::Description* DirectiveCreateValidator::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Harmony::Proto::Description>(GetArenaForAllocation());
    description_ = p;
  }
  return description_;
}
inline ::TW::Harmony::Proto::Description* DirectiveCreateValidator::mutable_description() {
  ::TW::Harmony::Proto::Description* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.description)
  return _msg;
}
inline void DirectiveCreateValidator::set_allocated_description(::TW::Harmony::Proto::Description* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Harmony::Proto::Description>::GetOwningArena(description);
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.description)
}

// .TW.Harmony.Proto.CommissionRate commission_rates = 3;
inline bool DirectiveCreateValidator::_internal_has_commission_rates() const {
  return this != internal_default_instance() && commission_rates_ != nullptr;
}
inline bool DirectiveCreateValidator::has_commission_rates() const {
  return _internal_has_commission_rates();
}
inline void DirectiveCreateValidator::clear_commission_rates() {
  if (GetArenaForAllocation() == nullptr && commission_rates_ != nullptr) {
    delete commission_rates_;
  }
  commission_rates_ = nullptr;
}
inline const ::TW::Harmony::Proto::CommissionRate& DirectiveCreateValidator::_internal_commission_rates() const {
  const ::TW::Harmony::Proto::CommissionRate* p = commission_rates_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Harmony::Proto::CommissionRate&>(
      ::TW::Harmony::Proto::_CommissionRate_default_instance_);
}
inline const ::TW::Harmony::Proto::CommissionRate& DirectiveCreateValidator::commission_rates() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.commission_rates)
  return _internal_commission_rates();
}
inline void DirectiveCreateValidator::unsafe_arena_set_allocated_commission_rates(
    ::TW::Harmony::Proto::CommissionRate* commission_rates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commission_rates_);
  }
  commission_rates_ = commission_rates;
  if (commission_rates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.commission_rates)
}
inline ::TW::Harmony::Proto::CommissionRate* DirectiveCreateValidator::release_commission_rates() {
  
  ::TW::Harmony::Proto::CommissionRate* temp = commission_rates_;
  commission_rates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Harmony::Proto::CommissionRate* DirectiveCreateValidator::unsafe_arena_release_commission_rates() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveCreateValidator.commission_rates)
  
  ::TW::Harmony::Proto::CommissionRate* temp = commission_rates_;
  commission_rates_ = nullptr;
  return temp;
}
inline ::TW::Harmony::Proto::CommissionRate* DirectiveCreateValidator::_internal_mutable_commission_rates() {
  
  if (commission_rates_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Harmony::Proto::CommissionRate>(GetArenaForAllocation());
    commission_rates_ = p;
  }
  return commission_rates_;
}
inline ::TW::Harmony::Proto::CommissionRate* DirectiveCreateValidator::mutable_commission_rates() {
  ::TW::Harmony::Proto::CommissionRate* _msg = _internal_mutable_commission_rates();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.commission_rates)
  return _msg;
}
inline void DirectiveCreateValidator::set_allocated_commission_rates(::TW::Harmony::Proto::CommissionRate* commission_rates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commission_rates_;
  }
  if (commission_rates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Harmony::Proto::CommissionRate>::GetOwningArena(commission_rates);
    if (message_arena != submessage_arena) {
      commission_rates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commission_rates, submessage_arena);
    }
    
  } else {
    
  }
  commission_rates_ = commission_rates;
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.commission_rates)
}

// bytes min_self_delegation = 4;
inline void DirectiveCreateValidator::clear_min_self_delegation() {
  min_self_delegation_.ClearToEmpty();
}
inline const std::string& DirectiveCreateValidator::min_self_delegation() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.min_self_delegation)
  return _internal_min_self_delegation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveCreateValidator::set_min_self_delegation(ArgT0&& arg0, ArgT... args) {
 
 min_self_delegation_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.min_self_delegation)
}
inline std::string* DirectiveCreateValidator::mutable_min_self_delegation() {
  std::string* _s = _internal_mutable_min_self_delegation();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.min_self_delegation)
  return _s;
}
inline const std::string& DirectiveCreateValidator::_internal_min_self_delegation() const {
  return min_self_delegation_.Get();
}
inline void DirectiveCreateValidator::_internal_set_min_self_delegation(const std::string& value) {
  
  min_self_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::_internal_mutable_min_self_delegation() {
  
  return min_self_delegation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::release_min_self_delegation() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveCreateValidator.min_self_delegation)
  return min_self_delegation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveCreateValidator::set_allocated_min_self_delegation(std::string* min_self_delegation) {
  if (min_self_delegation != nullptr) {
    
  } else {
    
  }
  min_self_delegation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_self_delegation,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (min_self_delegation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    min_self_delegation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.min_self_delegation)
}

// bytes max_total_delegation = 5;
inline void DirectiveCreateValidator::clear_max_total_delegation() {
  max_total_delegation_.ClearToEmpty();
}
inline const std::string& DirectiveCreateValidator::max_total_delegation() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.max_total_delegation)
  return _internal_max_total_delegation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveCreateValidator::set_max_total_delegation(ArgT0&& arg0, ArgT... args) {
 
 max_total_delegation_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.max_total_delegation)
}
inline std::string* DirectiveCreateValidator::mutable_max_total_delegation() {
  std::string* _s = _internal_mutable_max_total_delegation();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.max_total_delegation)
  return _s;
}
inline const std::string& DirectiveCreateValidator::_internal_max_total_delegation() const {
  return max_total_delegation_.Get();
}
inline void DirectiveCreateValidator::_internal_set_max_total_delegation(const std::string& value) {
  
  max_total_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::_internal_mutable_max_total_delegation() {
  
  return max_total_delegation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::release_max_total_delegation() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveCreateValidator.max_total_delegation)
  return max_total_delegation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveCreateValidator::set_allocated_max_total_delegation(std::string* max_total_delegation) {
  if (max_total_delegation != nullptr) {
    
  } else {
    
  }
  max_total_delegation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_total_delegation,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_total_delegation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_total_delegation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.max_total_delegation)
}

// repeated bytes slot_pub_keys = 6;
inline int DirectiveCreateValidator::_internal_slot_pub_keys_size() const {
  return slot_pub_keys_.size();
}
inline int DirectiveCreateValidator::slot_pub_keys_size() const {
  return _internal_slot_pub_keys_size();
}
inline void DirectiveCreateValidator::clear_slot_pub_keys() {
  slot_pub_keys_.Clear();
}
inline std::string* DirectiveCreateValidator::add_slot_pub_keys() {
  std::string* _s = _internal_add_slot_pub_keys();
  // @@protoc_insertion_point(field_add_mutable:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
  return _s;
}
inline const std::string& DirectiveCreateValidator::_internal_slot_pub_keys(int index) const {
  return slot_pub_keys_.Get(index);
}
inline const std::string& DirectiveCreateValidator::slot_pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
  return _internal_slot_pub_keys(index);
}
inline std::string* DirectiveCreateValidator::mutable_slot_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
  return slot_pub_keys_.Mutable(index);
}
inline void DirectiveCreateValidator::set_slot_pub_keys(int index, const std::string& value) {
  slot_pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline void DirectiveCreateValidator::set_slot_pub_keys(int index, std::string&& value) {
  slot_pub_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline void DirectiveCreateValidator::set_slot_pub_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slot_pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline void DirectiveCreateValidator::set_slot_pub_keys(int index, const void* value, size_t size) {
  slot_pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline std::string* DirectiveCreateValidator::_internal_add_slot_pub_keys() {
  return slot_pub_keys_.Add();
}
inline void DirectiveCreateValidator::add_slot_pub_keys(const std::string& value) {
  slot_pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline void DirectiveCreateValidator::add_slot_pub_keys(std::string&& value) {
  slot_pub_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline void DirectiveCreateValidator::add_slot_pub_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slot_pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline void DirectiveCreateValidator::add_slot_pub_keys(const void* value, size_t size) {
  slot_pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DirectiveCreateValidator::slot_pub_keys() const {
  // @@protoc_insertion_point(field_list:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
  return slot_pub_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DirectiveCreateValidator::mutable_slot_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:TW.Harmony.Proto.DirectiveCreateValidator.slot_pub_keys)
  return &slot_pub_keys_;
}

// repeated bytes slot_key_sigs = 7;
inline int DirectiveCreateValidator::_internal_slot_key_sigs_size() const {
  return slot_key_sigs_.size();
}
inline int DirectiveCreateValidator::slot_key_sigs_size() const {
  return _internal_slot_key_sigs_size();
}
inline void DirectiveCreateValidator::clear_slot_key_sigs() {
  slot_key_sigs_.Clear();
}
inline std::string* DirectiveCreateValidator::add_slot_key_sigs() {
  std::string* _s = _internal_add_slot_key_sigs();
  // @@protoc_insertion_point(field_add_mutable:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
  return _s;
}
inline const std::string& DirectiveCreateValidator::_internal_slot_key_sigs(int index) const {
  return slot_key_sigs_.Get(index);
}
inline const std::string& DirectiveCreateValidator::slot_key_sigs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
  return _internal_slot_key_sigs(index);
}
inline std::string* DirectiveCreateValidator::mutable_slot_key_sigs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
  return slot_key_sigs_.Mutable(index);
}
inline void DirectiveCreateValidator::set_slot_key_sigs(int index, const std::string& value) {
  slot_key_sigs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline void DirectiveCreateValidator::set_slot_key_sigs(int index, std::string&& value) {
  slot_key_sigs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline void DirectiveCreateValidator::set_slot_key_sigs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slot_key_sigs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline void DirectiveCreateValidator::set_slot_key_sigs(int index, const void* value, size_t size) {
  slot_key_sigs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline std::string* DirectiveCreateValidator::_internal_add_slot_key_sigs() {
  return slot_key_sigs_.Add();
}
inline void DirectiveCreateValidator::add_slot_key_sigs(const std::string& value) {
  slot_key_sigs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline void DirectiveCreateValidator::add_slot_key_sigs(std::string&& value) {
  slot_key_sigs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline void DirectiveCreateValidator::add_slot_key_sigs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slot_key_sigs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline void DirectiveCreateValidator::add_slot_key_sigs(const void* value, size_t size) {
  slot_key_sigs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DirectiveCreateValidator::slot_key_sigs() const {
  // @@protoc_insertion_point(field_list:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
  return slot_key_sigs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DirectiveCreateValidator::mutable_slot_key_sigs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Harmony.Proto.DirectiveCreateValidator.slot_key_sigs)
  return &slot_key_sigs_;
}

// bytes amount = 8;
inline void DirectiveCreateValidator::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& DirectiveCreateValidator::amount() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCreateValidator.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveCreateValidator::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCreateValidator.amount)
}
inline std::string* DirectiveCreateValidator::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCreateValidator.amount)
  return _s;
}
inline const std::string& DirectiveCreateValidator::_internal_amount() const {
  return amount_.Get();
}
inline void DirectiveCreateValidator::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveCreateValidator::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveCreateValidator.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveCreateValidator::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveCreateValidator.amount)
}

// -------------------------------------------------------------------

// DirectiveEditValidator

// string validator_address = 1;
inline void DirectiveEditValidator::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& DirectiveEditValidator::validator_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.validator_address)
  return _internal_validator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveEditValidator::set_validator_address(ArgT0&& arg0, ArgT... args) {
 
 validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveEditValidator.validator_address)
}
inline std::string* DirectiveEditValidator::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.validator_address)
  return _s;
}
inline const std::string& DirectiveEditValidator::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void DirectiveEditValidator::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::release_validator_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveEditValidator::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.validator_address)
}

// .TW.Harmony.Proto.Description description = 2;
inline bool DirectiveEditValidator::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool DirectiveEditValidator::has_description() const {
  return _internal_has_description();
}
inline void DirectiveEditValidator::clear_description() {
  if (GetArenaForAllocation() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
inline const ::TW::Harmony::Proto::Description& DirectiveEditValidator::_internal_description() const {
  const ::TW::Harmony::Proto::Description* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Harmony::Proto::Description&>(
      ::TW::Harmony::Proto::_Description_default_instance_);
}
inline const ::TW::Harmony::Proto::Description& DirectiveEditValidator::description() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.description)
  return _internal_description();
}
inline void DirectiveEditValidator::unsafe_arena_set_allocated_description(
    ::TW::Harmony::Proto::Description* description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.description)
}
inline ::TW::Harmony::Proto::Description* DirectiveEditValidator::release_description() {
  
  ::TW::Harmony::Proto::Description* temp = description_;
  description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Harmony::Proto::Description* DirectiveEditValidator::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.description)
  
  ::TW::Harmony::Proto::Description* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::TW::Harmony::Proto::Description* DirectiveEditValidator::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Harmony::Proto::Description>(GetArenaForAllocation());
    description_ = p;
  }
  return description_;
}
inline ::TW::Harmony::Proto::Description* DirectiveEditValidator::mutable_description() {
  ::TW::Harmony::Proto::Description* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.description)
  return _msg;
}
inline void DirectiveEditValidator::set_allocated_description(::TW::Harmony::Proto::Description* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Harmony::Proto::Description>::GetOwningArena(description);
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.description)
}

// .TW.Harmony.Proto.Decimal commission_rate = 3;
inline bool DirectiveEditValidator::_internal_has_commission_rate() const {
  return this != internal_default_instance() && commission_rate_ != nullptr;
}
inline bool DirectiveEditValidator::has_commission_rate() const {
  return _internal_has_commission_rate();
}
inline void DirectiveEditValidator::clear_commission_rate() {
  if (GetArenaForAllocation() == nullptr && commission_rate_ != nullptr) {
    delete commission_rate_;
  }
  commission_rate_ = nullptr;
}
inline const ::TW::Harmony::Proto::Decimal& DirectiveEditValidator::_internal_commission_rate() const {
  const ::TW::Harmony::Proto::Decimal* p = commission_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Harmony::Proto::Decimal&>(
      ::TW::Harmony::Proto::_Decimal_default_instance_);
}
inline const ::TW::Harmony::Proto::Decimal& DirectiveEditValidator::commission_rate() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.commission_rate)
  return _internal_commission_rate();
}
inline void DirectiveEditValidator::unsafe_arena_set_allocated_commission_rate(
    ::TW::Harmony::Proto::Decimal* commission_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commission_rate_);
  }
  commission_rate_ = commission_rate;
  if (commission_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.commission_rate)
}
inline ::TW::Harmony::Proto::Decimal* DirectiveEditValidator::release_commission_rate() {
  
  ::TW::Harmony::Proto::Decimal* temp = commission_rate_;
  commission_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* DirectiveEditValidator::unsafe_arena_release_commission_rate() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.commission_rate)
  
  ::TW::Harmony::Proto::Decimal* temp = commission_rate_;
  commission_rate_ = nullptr;
  return temp;
}
inline ::TW::Harmony::Proto::Decimal* DirectiveEditValidator::_internal_mutable_commission_rate() {
  
  if (commission_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Harmony::Proto::Decimal>(GetArenaForAllocation());
    commission_rate_ = p;
  }
  return commission_rate_;
}
inline ::TW::Harmony::Proto::Decimal* DirectiveEditValidator::mutable_commission_rate() {
  ::TW::Harmony::Proto::Decimal* _msg = _internal_mutable_commission_rate();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.commission_rate)
  return _msg;
}
inline void DirectiveEditValidator::set_allocated_commission_rate(::TW::Harmony::Proto::Decimal* commission_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commission_rate_;
  }
  if (commission_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Harmony::Proto::Decimal>::GetOwningArena(commission_rate);
    if (message_arena != submessage_arena) {
      commission_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commission_rate, submessage_arena);
    }
    
  } else {
    
  }
  commission_rate_ = commission_rate;
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.commission_rate)
}

// bytes min_self_delegation = 4;
inline void DirectiveEditValidator::clear_min_self_delegation() {
  min_self_delegation_.ClearToEmpty();
}
inline const std::string& DirectiveEditValidator::min_self_delegation() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.min_self_delegation)
  return _internal_min_self_delegation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveEditValidator::set_min_self_delegation(ArgT0&& arg0, ArgT... args) {
 
 min_self_delegation_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveEditValidator.min_self_delegation)
}
inline std::string* DirectiveEditValidator::mutable_min_self_delegation() {
  std::string* _s = _internal_mutable_min_self_delegation();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.min_self_delegation)
  return _s;
}
inline const std::string& DirectiveEditValidator::_internal_min_self_delegation() const {
  return min_self_delegation_.Get();
}
inline void DirectiveEditValidator::_internal_set_min_self_delegation(const std::string& value) {
  
  min_self_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::_internal_mutable_min_self_delegation() {
  
  return min_self_delegation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::release_min_self_delegation() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.min_self_delegation)
  return min_self_delegation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveEditValidator::set_allocated_min_self_delegation(std::string* min_self_delegation) {
  if (min_self_delegation != nullptr) {
    
  } else {
    
  }
  min_self_delegation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_self_delegation,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (min_self_delegation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    min_self_delegation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.min_self_delegation)
}

// bytes max_total_delegation = 5;
inline void DirectiveEditValidator::clear_max_total_delegation() {
  max_total_delegation_.ClearToEmpty();
}
inline const std::string& DirectiveEditValidator::max_total_delegation() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.max_total_delegation)
  return _internal_max_total_delegation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveEditValidator::set_max_total_delegation(ArgT0&& arg0, ArgT... args) {
 
 max_total_delegation_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveEditValidator.max_total_delegation)
}
inline std::string* DirectiveEditValidator::mutable_max_total_delegation() {
  std::string* _s = _internal_mutable_max_total_delegation();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.max_total_delegation)
  return _s;
}
inline const std::string& DirectiveEditValidator::_internal_max_total_delegation() const {
  return max_total_delegation_.Get();
}
inline void DirectiveEditValidator::_internal_set_max_total_delegation(const std::string& value) {
  
  max_total_delegation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::_internal_mutable_max_total_delegation() {
  
  return max_total_delegation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::release_max_total_delegation() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.max_total_delegation)
  return max_total_delegation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveEditValidator::set_allocated_max_total_delegation(std::string* max_total_delegation) {
  if (max_total_delegation != nullptr) {
    
  } else {
    
  }
  max_total_delegation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_total_delegation,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_total_delegation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_total_delegation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.max_total_delegation)
}

// bytes slot_key_to_remove = 6;
inline void DirectiveEditValidator::clear_slot_key_to_remove() {
  slot_key_to_remove_.ClearToEmpty();
}
inline const std::string& DirectiveEditValidator::slot_key_to_remove() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_remove)
  return _internal_slot_key_to_remove();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveEditValidator::set_slot_key_to_remove(ArgT0&& arg0, ArgT... args) {
 
 slot_key_to_remove_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_remove)
}
inline std::string* DirectiveEditValidator::mutable_slot_key_to_remove() {
  std::string* _s = _internal_mutable_slot_key_to_remove();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_remove)
  return _s;
}
inline const std::string& DirectiveEditValidator::_internal_slot_key_to_remove() const {
  return slot_key_to_remove_.Get();
}
inline void DirectiveEditValidator::_internal_set_slot_key_to_remove(const std::string& value) {
  
  slot_key_to_remove_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::_internal_mutable_slot_key_to_remove() {
  
  return slot_key_to_remove_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::release_slot_key_to_remove() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_remove)
  return slot_key_to_remove_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveEditValidator::set_allocated_slot_key_to_remove(std::string* slot_key_to_remove) {
  if (slot_key_to_remove != nullptr) {
    
  } else {
    
  }
  slot_key_to_remove_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_key_to_remove,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slot_key_to_remove_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    slot_key_to_remove_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_remove)
}

// bytes slot_key_to_add = 7;
inline void DirectiveEditValidator::clear_slot_key_to_add() {
  slot_key_to_add_.ClearToEmpty();
}
inline const std::string& DirectiveEditValidator::slot_key_to_add() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add)
  return _internal_slot_key_to_add();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveEditValidator::set_slot_key_to_add(ArgT0&& arg0, ArgT... args) {
 
 slot_key_to_add_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add)
}
inline std::string* DirectiveEditValidator::mutable_slot_key_to_add() {
  std::string* _s = _internal_mutable_slot_key_to_add();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add)
  return _s;
}
inline const std::string& DirectiveEditValidator::_internal_slot_key_to_add() const {
  return slot_key_to_add_.Get();
}
inline void DirectiveEditValidator::_internal_set_slot_key_to_add(const std::string& value) {
  
  slot_key_to_add_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::_internal_mutable_slot_key_to_add() {
  
  return slot_key_to_add_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::release_slot_key_to_add() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add)
  return slot_key_to_add_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveEditValidator::set_allocated_slot_key_to_add(std::string* slot_key_to_add) {
  if (slot_key_to_add != nullptr) {
    
  } else {
    
  }
  slot_key_to_add_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_key_to_add,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slot_key_to_add_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    slot_key_to_add_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add)
}

// bytes slot_key_to_add_sig = 8;
inline void DirectiveEditValidator::clear_slot_key_to_add_sig() {
  slot_key_to_add_sig_.ClearToEmpty();
}
inline const std::string& DirectiveEditValidator::slot_key_to_add_sig() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add_sig)
  return _internal_slot_key_to_add_sig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveEditValidator::set_slot_key_to_add_sig(ArgT0&& arg0, ArgT... args) {
 
 slot_key_to_add_sig_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add_sig)
}
inline std::string* DirectiveEditValidator::mutable_slot_key_to_add_sig() {
  std::string* _s = _internal_mutable_slot_key_to_add_sig();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add_sig)
  return _s;
}
inline const std::string& DirectiveEditValidator::_internal_slot_key_to_add_sig() const {
  return slot_key_to_add_sig_.Get();
}
inline void DirectiveEditValidator::_internal_set_slot_key_to_add_sig(const std::string& value) {
  
  slot_key_to_add_sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::_internal_mutable_slot_key_to_add_sig() {
  
  return slot_key_to_add_sig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::release_slot_key_to_add_sig() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add_sig)
  return slot_key_to_add_sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveEditValidator::set_allocated_slot_key_to_add_sig(std::string* slot_key_to_add_sig) {
  if (slot_key_to_add_sig != nullptr) {
    
  } else {
    
  }
  slot_key_to_add_sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_key_to_add_sig,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slot_key_to_add_sig_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    slot_key_to_add_sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.slot_key_to_add_sig)
}

// bytes active = 9;
inline void DirectiveEditValidator::clear_active() {
  active_.ClearToEmpty();
}
inline const std::string& DirectiveEditValidator::active() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveEditValidator.active)
  return _internal_active();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveEditValidator::set_active(ArgT0&& arg0, ArgT... args) {
 
 active_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveEditValidator.active)
}
inline std::string* DirectiveEditValidator::mutable_active() {
  std::string* _s = _internal_mutable_active();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveEditValidator.active)
  return _s;
}
inline const std::string& DirectiveEditValidator::_internal_active() const {
  return active_.Get();
}
inline void DirectiveEditValidator::_internal_set_active(const std::string& value) {
  
  active_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::_internal_mutable_active() {
  
  return active_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveEditValidator::release_active() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveEditValidator.active)
  return active_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveEditValidator::set_allocated_active(std::string* active) {
  if (active != nullptr) {
    
  } else {
    
  }
  active_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveEditValidator.active)
}

// -------------------------------------------------------------------

// DirectiveDelegate

// string delegator_address = 1;
inline void DirectiveDelegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& DirectiveDelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveDelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveDelegate::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveDelegate.delegator_address)
}
inline std::string* DirectiveDelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveDelegate.delegator_address)
  return _s;
}
inline const std::string& DirectiveDelegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void DirectiveDelegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveDelegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveDelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveDelegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveDelegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveDelegate.delegator_address)
}

// string validator_address = 2;
inline void DirectiveDelegate::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& DirectiveDelegate::validator_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveDelegate.validator_address)
  return _internal_validator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveDelegate::set_validator_address(ArgT0&& arg0, ArgT... args) {
 
 validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveDelegate.validator_address)
}
inline std::string* DirectiveDelegate::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveDelegate.validator_address)
  return _s;
}
inline const std::string& DirectiveDelegate::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void DirectiveDelegate::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveDelegate::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveDelegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveDelegate.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveDelegate::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveDelegate.validator_address)
}

// bytes amount = 3;
inline void DirectiveDelegate::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& DirectiveDelegate::amount() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveDelegate.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveDelegate::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveDelegate.amount)
}
inline std::string* DirectiveDelegate::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveDelegate.amount)
  return _s;
}
inline const std::string& DirectiveDelegate::_internal_amount() const {
  return amount_.Get();
}
inline void DirectiveDelegate::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveDelegate::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveDelegate::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveDelegate.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveDelegate::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveDelegate.amount)
}

// -------------------------------------------------------------------

// DirectiveUndelegate

// string delegator_address = 1;
inline void DirectiveUndelegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& DirectiveUndelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveUndelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveUndelegate::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveUndelegate.delegator_address)
}
inline std::string* DirectiveUndelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveUndelegate.delegator_address)
  return _s;
}
inline const std::string& DirectiveUndelegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void DirectiveUndelegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveUndelegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveUndelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveUndelegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveUndelegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveUndelegate.delegator_address)
}

// string validator_address = 2;
inline void DirectiveUndelegate::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& DirectiveUndelegate::validator_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveUndelegate.validator_address)
  return _internal_validator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveUndelegate::set_validator_address(ArgT0&& arg0, ArgT... args) {
 
 validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveUndelegate.validator_address)
}
inline std::string* DirectiveUndelegate::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveUndelegate.validator_address)
  return _s;
}
inline const std::string& DirectiveUndelegate::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void DirectiveUndelegate::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveUndelegate::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveUndelegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveUndelegate.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveUndelegate::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveUndelegate.validator_address)
}

// bytes amount = 3;
inline void DirectiveUndelegate::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& DirectiveUndelegate::amount() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveUndelegate.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveUndelegate::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveUndelegate.amount)
}
inline std::string* DirectiveUndelegate::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveUndelegate.amount)
  return _s;
}
inline const std::string& DirectiveUndelegate::_internal_amount() const {
  return amount_.Get();
}
inline void DirectiveUndelegate::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveUndelegate::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveUndelegate::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveUndelegate.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveUndelegate::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveUndelegate.amount)
}

// -------------------------------------------------------------------

// DirectiveCollectRewards

// string delegator_address = 1;
inline void DirectiveCollectRewards::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& DirectiveCollectRewards::delegator_address() const {
  // @@protoc_insertion_point(field_get:TW.Harmony.Proto.DirectiveCollectRewards.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectiveCollectRewards::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Harmony.Proto.DirectiveCollectRewards.delegator_address)
}
inline std::string* DirectiveCollectRewards::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:TW.Harmony.Proto.DirectiveCollectRewards.delegator_address)
  return _s;
}
inline const std::string& DirectiveCollectRewards::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void DirectiveCollectRewards::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DirectiveCollectRewards::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DirectiveCollectRewards::release_delegator_address() {
  // @@protoc_insertion_point(field_release:TW.Harmony.Proto.DirectiveCollectRewards.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DirectiveCollectRewards::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Harmony.Proto.DirectiveCollectRewards.delegator_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Harmony
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Harmony_2eproto
