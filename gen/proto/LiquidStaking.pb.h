// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LiquidStaking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LiquidStaking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LiquidStaking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Ethereum.pb.h"
#include "Cosmos.pb.h"
#include "Aptos.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LiquidStaking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LiquidStaking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LiquidStaking_2eproto;
namespace TW {
namespace LiquidStaking {
namespace Proto {
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Output;
struct OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Stake;
struct StakeDefaultTypeInternal;
extern StakeDefaultTypeInternal _Stake_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Unstake;
struct UnstakeDefaultTypeInternal;
extern UnstakeDefaultTypeInternal _Unstake_default_instance_;
class Withdraw;
struct WithdrawDefaultTypeInternal;
extern WithdrawDefaultTypeInternal _Withdraw_default_instance_;
}  // namespace Proto
}  // namespace LiquidStaking
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::LiquidStaking::Proto::Asset* Arena::CreateMaybeMessage<::TW::LiquidStaking::Proto::Asset>(Arena*);
template<> ::TW::LiquidStaking::Proto::Input* Arena::CreateMaybeMessage<::TW::LiquidStaking::Proto::Input>(Arena*);
template<> ::TW::LiquidStaking::Proto::Output* Arena::CreateMaybeMessage<::TW::LiquidStaking::Proto::Output>(Arena*);
template<> ::TW::LiquidStaking::Proto::Stake* Arena::CreateMaybeMessage<::TW::LiquidStaking::Proto::Stake>(Arena*);
template<> ::TW::LiquidStaking::Proto::Status* Arena::CreateMaybeMessage<::TW::LiquidStaking::Proto::Status>(Arena*);
template<> ::TW::LiquidStaking::Proto::Unstake* Arena::CreateMaybeMessage<::TW::LiquidStaking::Proto::Unstake>(Arena*);
template<> ::TW::LiquidStaking::Proto::Withdraw* Arena::CreateMaybeMessage<::TW::LiquidStaking::Proto::Withdraw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace LiquidStaking {
namespace Proto {

enum Coin : int {
  MATIC = 0,
  ATOM = 1,
  BNB = 2,
  APT = 3,
  ETH = 4,
  Coin_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Coin_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Coin_IsValid(int value);
constexpr Coin Coin_MIN = MATIC;
constexpr Coin Coin_MAX = ETH;
constexpr int Coin_ARRAYSIZE = Coin_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Coin_descriptor();
template<typename T>
inline const std::string& Coin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Coin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Coin_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Coin_descriptor(), enum_t_value);
}
inline bool Coin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Coin* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Coin>(
    Coin_descriptor(), name, value);
}
enum Blockchain : int {
  ETHEREUM = 0,
  POLYGON = 1,
  STRIDE = 2,
  BNB_BSC = 3,
  APTOS = 4,
  Blockchain_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Blockchain_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Blockchain_IsValid(int value);
constexpr Blockchain Blockchain_MIN = ETHEREUM;
constexpr Blockchain Blockchain_MAX = APTOS;
constexpr int Blockchain_ARRAYSIZE = Blockchain_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Blockchain_descriptor();
template<typename T>
inline const std::string& Blockchain_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Blockchain>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Blockchain_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Blockchain_descriptor(), enum_t_value);
}
inline bool Blockchain_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Blockchain* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Blockchain>(
    Blockchain_descriptor(), name, value);
}
enum Protocol : int {
  Strader = 0,
  Stride = 1,
  Tortuga = 2,
  Lido = 3,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = Strader;
constexpr Protocol Protocol_MAX = Lido;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
enum StatusCode : int {
  OK = 0,
  ERROR_ACTION_NOT_SET = 1,
  ERROR_TARGETED_BLOCKCHAIN_NOT_SUPPORTED_BY_PROTOCOL = 2,
  ERROR_SMART_CONTRACT_ADDRESS_NOT_SET = 3,
  ERROR_INPUT_PROTO_DESERIALIZATION = 4,
  ERROR_OPERATION_NOT_SUPPORTED_BY_PROTOCOL = 5,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatusCode_IsValid(int value);
constexpr StatusCode StatusCode_MIN = OK;
constexpr StatusCode StatusCode_MAX = ERROR_OPERATION_NOT_SUPPORTED_BY_PROTOCOL;
constexpr int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor();
template<typename T>
inline const std::string& StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusCode_descriptor(), enum_t_value);
}
inline bool StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.LiquidStaking.Proto.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.LiquidStaking.Proto.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .TW.LiquidStaking.Proto.StatusCode code = 1;
  void clear_code();
  ::TW::LiquidStaking::Proto::StatusCode code() const;
  void set_code(::TW::LiquidStaking::Proto::StatusCode value);
  private:
  ::TW::LiquidStaking::Proto::StatusCode _internal_code() const;
  void _internal_set_code(::TW::LiquidStaking::Proto::StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:TW.LiquidStaking.Proto.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LiquidStaking_2eproto;
};
// -------------------------------------------------------------------

class Asset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.LiquidStaking.Proto.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  ~Asset() override;
  explicit constexpr Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Asset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Asset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.LiquidStaking.Proto.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiquidTokenFieldNumber = 2,
    kDenomFieldNumber = 3,
    kFromAddressFieldNumber = 4,
    kStakingTokenFieldNumber = 1,
  };
  // string liquid_token = 2;
  void clear_liquid_token();
  const std::string& liquid_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_liquid_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_liquid_token();
  PROTOBUF_NODISCARD std::string* release_liquid_token();
  void set_allocated_liquid_token(std::string* liquid_token);
  private:
  const std::string& _internal_liquid_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_liquid_token(const std::string& value);
  std::string* _internal_mutable_liquid_token();
  public:

  // string denom = 3;
  void clear_denom();
  const std::string& denom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_denom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* denom);
  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(const std::string& value);
  std::string* _internal_mutable_denom();
  public:

  // string from_address = 4;
  void clear_from_address();
  const std::string& from_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_address();
  PROTOBUF_NODISCARD std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // .TW.LiquidStaking.Proto.Coin staking_token = 1;
  void clear_staking_token();
  ::TW::LiquidStaking::Proto::Coin staking_token() const;
  void set_staking_token(::TW::LiquidStaking::Proto::Coin value);
  private:
  ::TW::LiquidStaking::Proto::Coin _internal_staking_token() const;
  void _internal_set_staking_token(::TW::LiquidStaking::Proto::Coin value);
  public:

  // @@protoc_insertion_point(class_scope:TW.LiquidStaking.Proto.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liquid_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  int staking_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LiquidStaking_2eproto;
};
// -------------------------------------------------------------------

class Stake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.LiquidStaking.Proto.Stake) */ {
 public:
  inline Stake() : Stake(nullptr) {}
  ~Stake() override;
  explicit constexpr Stake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stake(const Stake& from);
  Stake(Stake&& from) noexcept
    : Stake() {
    *this = ::std::move(from);
  }

  inline Stake& operator=(const Stake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stake& operator=(Stake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stake& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stake* internal_default_instance() {
    return reinterpret_cast<const Stake*>(
               &_Stake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Stake& a, Stake& b) {
    a.Swap(&b);
  }
  inline void Swap(Stake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.LiquidStaking.Proto.Stake";
  }
  protected:
  explicit Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kAssetFieldNumber = 1,
  };
  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::TW::LiquidStaking::Proto::Asset& asset() const;
  PROTOBUF_NODISCARD ::TW::LiquidStaking::Proto::Asset* release_asset();
  ::TW::LiquidStaking::Proto::Asset* mutable_asset();
  void set_allocated_asset(::TW::LiquidStaking::Proto::Asset* asset);
  private:
  const ::TW::LiquidStaking::Proto::Asset& _internal_asset() const;
  ::TW::LiquidStaking::Proto::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::TW::LiquidStaking::Proto::Asset* asset);
  ::TW::LiquidStaking::Proto::Asset* unsafe_arena_release_asset();

  // @@protoc_insertion_point(class_scope:TW.LiquidStaking.Proto.Stake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::TW::LiquidStaking::Proto::Asset* asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LiquidStaking_2eproto;
};
// -------------------------------------------------------------------

class Unstake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.LiquidStaking.Proto.Unstake) */ {
 public:
  inline Unstake() : Unstake(nullptr) {}
  ~Unstake() override;
  explicit constexpr Unstake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Unstake(const Unstake& from);
  Unstake(Unstake&& from) noexcept
    : Unstake() {
    *this = ::std::move(from);
  }

  inline Unstake& operator=(const Unstake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unstake& operator=(Unstake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unstake& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unstake* internal_default_instance() {
    return reinterpret_cast<const Unstake*>(
               &_Unstake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Unstake& a, Unstake& b) {
    a.Swap(&b);
  }
  inline void Swap(Unstake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unstake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unstake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Unstake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Unstake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Unstake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unstake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.LiquidStaking.Proto.Unstake";
  }
  protected:
  explicit Unstake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kReceiverAddressFieldNumber = 3,
    kReceiverChainIdFieldNumber = 4,
    kAssetFieldNumber = 1,
  };
  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string receiver_address = 3;
  void clear_receiver_address();
  const std::string& receiver_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_address();
  PROTOBUF_NODISCARD std::string* release_receiver_address();
  void set_allocated_receiver_address(std::string* receiver_address);
  private:
  const std::string& _internal_receiver_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_address(const std::string& value);
  std::string* _internal_mutable_receiver_address();
  public:

  // string receiver_chain_id = 4;
  void clear_receiver_chain_id();
  const std::string& receiver_chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_chain_id();
  PROTOBUF_NODISCARD std::string* release_receiver_chain_id();
  void set_allocated_receiver_chain_id(std::string* receiver_chain_id);
  private:
  const std::string& _internal_receiver_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_chain_id(const std::string& value);
  std::string* _internal_mutable_receiver_chain_id();
  public:

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::TW::LiquidStaking::Proto::Asset& asset() const;
  PROTOBUF_NODISCARD ::TW::LiquidStaking::Proto::Asset* release_asset();
  ::TW::LiquidStaking::Proto::Asset* mutable_asset();
  void set_allocated_asset(::TW::LiquidStaking::Proto::Asset* asset);
  private:
  const ::TW::LiquidStaking::Proto::Asset& _internal_asset() const;
  ::TW::LiquidStaking::Proto::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::TW::LiquidStaking::Proto::Asset* asset);
  ::TW::LiquidStaking::Proto::Asset* unsafe_arena_release_asset();

  // @@protoc_insertion_point(class_scope:TW.LiquidStaking.Proto.Unstake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_chain_id_;
  ::TW::LiquidStaking::Proto::Asset* asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LiquidStaking_2eproto;
};
// -------------------------------------------------------------------

class Withdraw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.LiquidStaking.Proto.Withdraw) */ {
 public:
  inline Withdraw() : Withdraw(nullptr) {}
  ~Withdraw() override;
  explicit constexpr Withdraw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Withdraw(const Withdraw& from);
  Withdraw(Withdraw&& from) noexcept
    : Withdraw() {
    *this = ::std::move(from);
  }

  inline Withdraw& operator=(const Withdraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline Withdraw& operator=(Withdraw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Withdraw& default_instance() {
    return *internal_default_instance();
  }
  static inline const Withdraw* internal_default_instance() {
    return reinterpret_cast<const Withdraw*>(
               &_Withdraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Withdraw& a, Withdraw& b) {
    a.Swap(&b);
  }
  inline void Swap(Withdraw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Withdraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Withdraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Withdraw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Withdraw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Withdraw& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdraw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.LiquidStaking.Proto.Withdraw";
  }
  protected:
  explicit Withdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kIdxFieldNumber = 3,
    kAssetFieldNumber = 1,
  };
  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string idx = 3;
  void clear_idx();
  const std::string& idx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idx();
  PROTOBUF_NODISCARD std::string* release_idx();
  void set_allocated_idx(std::string* idx);
  private:
  const std::string& _internal_idx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idx(const std::string& value);
  std::string* _internal_mutable_idx();
  public:

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::TW::LiquidStaking::Proto::Asset& asset() const;
  PROTOBUF_NODISCARD ::TW::LiquidStaking::Proto::Asset* release_asset();
  ::TW::LiquidStaking::Proto::Asset* mutable_asset();
  void set_allocated_asset(::TW::LiquidStaking::Proto::Asset* asset);
  private:
  const ::TW::LiquidStaking::Proto::Asset& _internal_asset() const;
  ::TW::LiquidStaking::Proto::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::TW::LiquidStaking::Proto::Asset* asset);
  ::TW::LiquidStaking::Proto::Asset* unsafe_arena_release_asset();

  // @@protoc_insertion_point(class_scope:TW.LiquidStaking.Proto.Withdraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idx_;
  ::TW::LiquidStaking::Proto::Asset* asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LiquidStaking_2eproto;
};
// -------------------------------------------------------------------

class Input final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.LiquidStaking.Proto.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  explicit constexpr Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  enum ActionCase {
    kStake = 1,
    kUnstake = 2,
    kWithdraw = 3,
    ACTION_NOT_SET = 0,
  };

  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Input& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.LiquidStaking.Proto.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmartContractAddressFieldNumber = 4,
    kProtocolFieldNumber = 5,
    kBlockchainFieldNumber = 6,
    kStakeFieldNumber = 1,
    kUnstakeFieldNumber = 2,
    kWithdrawFieldNumber = 3,
  };
  // string smart_contract_address = 4;
  void clear_smart_contract_address();
  const std::string& smart_contract_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_smart_contract_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_smart_contract_address();
  PROTOBUF_NODISCARD std::string* release_smart_contract_address();
  void set_allocated_smart_contract_address(std::string* smart_contract_address);
  private:
  const std::string& _internal_smart_contract_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smart_contract_address(const std::string& value);
  std::string* _internal_mutable_smart_contract_address();
  public:

  // .TW.LiquidStaking.Proto.Protocol protocol = 5;
  void clear_protocol();
  ::TW::LiquidStaking::Proto::Protocol protocol() const;
  void set_protocol(::TW::LiquidStaking::Proto::Protocol value);
  private:
  ::TW::LiquidStaking::Proto::Protocol _internal_protocol() const;
  void _internal_set_protocol(::TW::LiquidStaking::Proto::Protocol value);
  public:

  // .TW.LiquidStaking.Proto.Blockchain blockchain = 6;
  void clear_blockchain();
  ::TW::LiquidStaking::Proto::Blockchain blockchain() const;
  void set_blockchain(::TW::LiquidStaking::Proto::Blockchain value);
  private:
  ::TW::LiquidStaking::Proto::Blockchain _internal_blockchain() const;
  void _internal_set_blockchain(::TW::LiquidStaking::Proto::Blockchain value);
  public:

  // .TW.LiquidStaking.Proto.Stake stake = 1;
  bool has_stake() const;
  private:
  bool _internal_has_stake() const;
  public:
  void clear_stake();
  const ::TW::LiquidStaking::Proto::Stake& stake() const;
  PROTOBUF_NODISCARD ::TW::LiquidStaking::Proto::Stake* release_stake();
  ::TW::LiquidStaking::Proto::Stake* mutable_stake();
  void set_allocated_stake(::TW::LiquidStaking::Proto::Stake* stake);
  private:
  const ::TW::LiquidStaking::Proto::Stake& _internal_stake() const;
  ::TW::LiquidStaking::Proto::Stake* _internal_mutable_stake();
  public:
  void unsafe_arena_set_allocated_stake(
      ::TW::LiquidStaking::Proto::Stake* stake);
  ::TW::LiquidStaking::Proto::Stake* unsafe_arena_release_stake();

  // .TW.LiquidStaking.Proto.Unstake unstake = 2;
  bool has_unstake() const;
  private:
  bool _internal_has_unstake() const;
  public:
  void clear_unstake();
  const ::TW::LiquidStaking::Proto::Unstake& unstake() const;
  PROTOBUF_NODISCARD ::TW::LiquidStaking::Proto::Unstake* release_unstake();
  ::TW::LiquidStaking::Proto::Unstake* mutable_unstake();
  void set_allocated_unstake(::TW::LiquidStaking::Proto::Unstake* unstake);
  private:
  const ::TW::LiquidStaking::Proto::Unstake& _internal_unstake() const;
  ::TW::LiquidStaking::Proto::Unstake* _internal_mutable_unstake();
  public:
  void unsafe_arena_set_allocated_unstake(
      ::TW::LiquidStaking::Proto::Unstake* unstake);
  ::TW::LiquidStaking::Proto::Unstake* unsafe_arena_release_unstake();

  // .TW.LiquidStaking.Proto.Withdraw withdraw = 3;
  bool has_withdraw() const;
  private:
  bool _internal_has_withdraw() const;
  public:
  void clear_withdraw();
  const ::TW::LiquidStaking::Proto::Withdraw& withdraw() const;
  PROTOBUF_NODISCARD ::TW::LiquidStaking::Proto::Withdraw* release_withdraw();
  ::TW::LiquidStaking::Proto::Withdraw* mutable_withdraw();
  void set_allocated_withdraw(::TW::LiquidStaking::Proto::Withdraw* withdraw);
  private:
  const ::TW::LiquidStaking::Proto::Withdraw& _internal_withdraw() const;
  ::TW::LiquidStaking::Proto::Withdraw* _internal_mutable_withdraw();
  public:
  void unsafe_arena_set_allocated_withdraw(
      ::TW::LiquidStaking::Proto::Withdraw* withdraw);
  ::TW::LiquidStaking::Proto::Withdraw* unsafe_arena_release_withdraw();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:TW.LiquidStaking.Proto.Input)
 private:
  class _Internal;
  void set_has_stake();
  void set_has_unstake();
  void set_has_withdraw();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smart_contract_address_;
  int protocol_;
  int blockchain_;
  union ActionUnion {
    constexpr ActionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::LiquidStaking::Proto::Stake* stake_;
    ::TW::LiquidStaking::Proto::Unstake* unstake_;
    ::TW::LiquidStaking::Proto::Withdraw* withdraw_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_LiquidStaking_2eproto;
};
// -------------------------------------------------------------------

class Output final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.LiquidStaking.Proto.Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  ~Output() override;
  explicit constexpr Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Output& default_instance() {
    return *internal_default_instance();
  }
  enum SigningInputOneofCase {
    kEthereum = 2,
    kCosmos = 3,
    kAptos = 4,
    SIGNING_INPUT_ONEOF_NOT_SET = 0,
  };

  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Output& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Output& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.LiquidStaking.Proto.Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kEthereumFieldNumber = 2,
    kCosmosFieldNumber = 3,
    kAptosFieldNumber = 4,
  };
  // .TW.LiquidStaking.Proto.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::TW::LiquidStaking::Proto::Status& status() const;
  PROTOBUF_NODISCARD ::TW::LiquidStaking::Proto::Status* release_status();
  ::TW::LiquidStaking::Proto::Status* mutable_status();
  void set_allocated_status(::TW::LiquidStaking::Proto::Status* status);
  private:
  const ::TW::LiquidStaking::Proto::Status& _internal_status() const;
  ::TW::LiquidStaking::Proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::TW::LiquidStaking::Proto::Status* status);
  ::TW::LiquidStaking::Proto::Status* unsafe_arena_release_status();

  // .TW.Ethereum.Proto.SigningInput ethereum = 2;
  bool has_ethereum() const;
  private:
  bool _internal_has_ethereum() const;
  public:
  void clear_ethereum();
  const ::TW::Ethereum::Proto::SigningInput& ethereum() const;
  PROTOBUF_NODISCARD ::TW::Ethereum::Proto::SigningInput* release_ethereum();
  ::TW::Ethereum::Proto::SigningInput* mutable_ethereum();
  void set_allocated_ethereum(::TW::Ethereum::Proto::SigningInput* ethereum);
  private:
  const ::TW::Ethereum::Proto::SigningInput& _internal_ethereum() const;
  ::TW::Ethereum::Proto::SigningInput* _internal_mutable_ethereum();
  public:
  void unsafe_arena_set_allocated_ethereum(
      ::TW::Ethereum::Proto::SigningInput* ethereum);
  ::TW::Ethereum::Proto::SigningInput* unsafe_arena_release_ethereum();

  // .TW.Cosmos.Proto.SigningInput cosmos = 3;
  bool has_cosmos() const;
  private:
  bool _internal_has_cosmos() const;
  public:
  void clear_cosmos();
  const ::TW::Cosmos::Proto::SigningInput& cosmos() const;
  PROTOBUF_NODISCARD ::TW::Cosmos::Proto::SigningInput* release_cosmos();
  ::TW::Cosmos::Proto::SigningInput* mutable_cosmos();
  void set_allocated_cosmos(::TW::Cosmos::Proto::SigningInput* cosmos);
  private:
  const ::TW::Cosmos::Proto::SigningInput& _internal_cosmos() const;
  ::TW::Cosmos::Proto::SigningInput* _internal_mutable_cosmos();
  public:
  void unsafe_arena_set_allocated_cosmos(
      ::TW::Cosmos::Proto::SigningInput* cosmos);
  ::TW::Cosmos::Proto::SigningInput* unsafe_arena_release_cosmos();

  // .TW.Aptos.Proto.SigningInput aptos = 4;
  bool has_aptos() const;
  private:
  bool _internal_has_aptos() const;
  public:
  void clear_aptos();
  const ::TW::Aptos::Proto::SigningInput& aptos() const;
  PROTOBUF_NODISCARD ::TW::Aptos::Proto::SigningInput* release_aptos();
  ::TW::Aptos::Proto::SigningInput* mutable_aptos();
  void set_allocated_aptos(::TW::Aptos::Proto::SigningInput* aptos);
  private:
  const ::TW::Aptos::Proto::SigningInput& _internal_aptos() const;
  ::TW::Aptos::Proto::SigningInput* _internal_mutable_aptos();
  public:
  void unsafe_arena_set_allocated_aptos(
      ::TW::Aptos::Proto::SigningInput* aptos);
  ::TW::Aptos::Proto::SigningInput* unsafe_arena_release_aptos();

  void clear_signing_input_oneof();
  SigningInputOneofCase signing_input_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.LiquidStaking.Proto.Output)
 private:
  class _Internal;
  void set_has_ethereum();
  void set_has_cosmos();
  void set_has_aptos();

  inline bool has_signing_input_oneof() const;
  inline void clear_has_signing_input_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TW::LiquidStaking::Proto::Status* status_;
  union SigningInputOneofUnion {
    constexpr SigningInputOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Ethereum::Proto::SigningInput* ethereum_;
    ::TW::Cosmos::Proto::SigningInput* cosmos_;
    ::TW::Aptos::Proto::SigningInput* aptos_;
  } signing_input_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_LiquidStaking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// .TW.LiquidStaking.Proto.StatusCode code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::TW::LiquidStaking::Proto::StatusCode Status::_internal_code() const {
  return static_cast< ::TW::LiquidStaking::Proto::StatusCode >(code_);
}
inline ::TW::LiquidStaking::Proto::StatusCode Status::code() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::TW::LiquidStaking::Proto::StatusCode value) {
  
  code_ = value;
}
inline void Status::set_code(::TW::LiquidStaking::Proto::StatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Status.code)
}

// string message = 2;
inline void Status::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Status.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Status.message)
}
inline std::string* Status::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Status.message)
  return _s;
}
inline const std::string& Status::_internal_message() const {
  return message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Status.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Status.message)
}

// -------------------------------------------------------------------

// Asset

// .TW.LiquidStaking.Proto.Coin staking_token = 1;
inline void Asset::clear_staking_token() {
  staking_token_ = 0;
}
inline ::TW::LiquidStaking::Proto::Coin Asset::_internal_staking_token() const {
  return static_cast< ::TW::LiquidStaking::Proto::Coin >(staking_token_);
}
inline ::TW::LiquidStaking::Proto::Coin Asset::staking_token() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Asset.staking_token)
  return _internal_staking_token();
}
inline void Asset::_internal_set_staking_token(::TW::LiquidStaking::Proto::Coin value) {
  
  staking_token_ = value;
}
inline void Asset::set_staking_token(::TW::LiquidStaking::Proto::Coin value) {
  _internal_set_staking_token(value);
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Asset.staking_token)
}

// string liquid_token = 2;
inline void Asset::clear_liquid_token() {
  liquid_token_.ClearToEmpty();
}
inline const std::string& Asset::liquid_token() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Asset.liquid_token)
  return _internal_liquid_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_liquid_token(ArgT0&& arg0, ArgT... args) {
 
 liquid_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Asset.liquid_token)
}
inline std::string* Asset::mutable_liquid_token() {
  std::string* _s = _internal_mutable_liquid_token();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Asset.liquid_token)
  return _s;
}
inline const std::string& Asset::_internal_liquid_token() const {
  return liquid_token_.Get();
}
inline void Asset::_internal_set_liquid_token(const std::string& value) {
  
  liquid_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_liquid_token() {
  
  return liquid_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_liquid_token() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Asset.liquid_token)
  return liquid_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_liquid_token(std::string* liquid_token) {
  if (liquid_token != nullptr) {
    
  } else {
    
  }
  liquid_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), liquid_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (liquid_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    liquid_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Asset.liquid_token)
}

// string denom = 3;
inline void Asset::clear_denom() {
  denom_.ClearToEmpty();
}
inline const std::string& Asset::denom() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Asset.denom)
  return _internal_denom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_denom(ArgT0&& arg0, ArgT... args) {
 
 denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Asset.denom)
}
inline std::string* Asset::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Asset.denom)
  return _s;
}
inline const std::string& Asset::_internal_denom() const {
  return denom_.Get();
}
inline void Asset::_internal_set_denom(const std::string& value) {
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_denom() {
  
  return denom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_denom() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Asset.denom)
  return denom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_denom(std::string* denom) {
  if (denom != nullptr) {
    
  } else {
    
  }
  denom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denom,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (denom_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    denom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Asset.denom)
}

// string from_address = 4;
inline void Asset::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& Asset::from_address() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Asset.from_address)
  return _internal_from_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_from_address(ArgT0&& arg0, ArgT... args) {
 
 from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Asset.from_address)
}
inline std::string* Asset::mutable_from_address() {
  std::string* _s = _internal_mutable_from_address();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Asset.from_address)
  return _s;
}
inline const std::string& Asset::_internal_from_address() const {
  return from_address_.Get();
}
inline void Asset::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Asset.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Asset.from_address)
}

// -------------------------------------------------------------------

// Stake

// .TW.LiquidStaking.Proto.Asset asset = 1;
inline bool Stake::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool Stake::has_asset() const {
  return _internal_has_asset();
}
inline void Stake::clear_asset() {
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::TW::LiquidStaking::Proto::Asset& Stake::_internal_asset() const {
  const ::TW::LiquidStaking::Proto::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::LiquidStaking::Proto::Asset&>(
      ::TW::LiquidStaking::Proto::_Asset_default_instance_);
}
inline const ::TW::LiquidStaking::Proto::Asset& Stake::asset() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Stake.asset)
  return _internal_asset();
}
inline void Stake::unsafe_arena_set_allocated_asset(
    ::TW::LiquidStaking::Proto::Asset* asset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Stake.asset)
}
inline ::TW::LiquidStaking::Proto::Asset* Stake::release_asset() {
  
  ::TW::LiquidStaking::Proto::Asset* temp = asset_;
  asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::LiquidStaking::Proto::Asset* Stake::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Stake.asset)
  
  ::TW::LiquidStaking::Proto::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::TW::LiquidStaking::Proto::Asset* Stake::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::LiquidStaking::Proto::Asset>(GetArenaForAllocation());
    asset_ = p;
  }
  return asset_;
}
inline ::TW::LiquidStaking::Proto::Asset* Stake::mutable_asset() {
  ::TW::LiquidStaking::Proto::Asset* _msg = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Stake.asset)
  return _msg;
}
inline void Stake::set_allocated_asset(::TW::LiquidStaking::Proto::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::LiquidStaking::Proto::Asset>::GetOwningArena(asset);
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Stake.asset)
}

// string amount = 2;
inline void Stake::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Stake::amount() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Stake.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stake::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Stake.amount)
}
inline std::string* Stake::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Stake.amount)
  return _s;
}
inline const std::string& Stake::_internal_amount() const {
  return amount_.Get();
}
inline void Stake::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Stake::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Stake::release_amount() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Stake.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Stake::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Stake.amount)
}

// -------------------------------------------------------------------

// Unstake

// .TW.LiquidStaking.Proto.Asset asset = 1;
inline bool Unstake::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool Unstake::has_asset() const {
  return _internal_has_asset();
}
inline void Unstake::clear_asset() {
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::TW::LiquidStaking::Proto::Asset& Unstake::_internal_asset() const {
  const ::TW::LiquidStaking::Proto::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::LiquidStaking::Proto::Asset&>(
      ::TW::LiquidStaking::Proto::_Asset_default_instance_);
}
inline const ::TW::LiquidStaking::Proto::Asset& Unstake::asset() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Unstake.asset)
  return _internal_asset();
}
inline void Unstake::unsafe_arena_set_allocated_asset(
    ::TW::LiquidStaking::Proto::Asset* asset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Unstake.asset)
}
inline ::TW::LiquidStaking::Proto::Asset* Unstake::release_asset() {
  
  ::TW::LiquidStaking::Proto::Asset* temp = asset_;
  asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::LiquidStaking::Proto::Asset* Unstake::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Unstake.asset)
  
  ::TW::LiquidStaking::Proto::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::TW::LiquidStaking::Proto::Asset* Unstake::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::LiquidStaking::Proto::Asset>(GetArenaForAllocation());
    asset_ = p;
  }
  return asset_;
}
inline ::TW::LiquidStaking::Proto::Asset* Unstake::mutable_asset() {
  ::TW::LiquidStaking::Proto::Asset* _msg = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Unstake.asset)
  return _msg;
}
inline void Unstake::set_allocated_asset(::TW::LiquidStaking::Proto::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::LiquidStaking::Proto::Asset>::GetOwningArena(asset);
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Unstake.asset)
}

// string amount = 2;
inline void Unstake::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Unstake::amount() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Unstake.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unstake::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Unstake.amount)
}
inline std::string* Unstake::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Unstake.amount)
  return _s;
}
inline const std::string& Unstake::_internal_amount() const {
  return amount_.Get();
}
inline void Unstake::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Unstake::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Unstake::release_amount() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Unstake.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Unstake::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Unstake.amount)
}

// string receiver_address = 3;
inline void Unstake::clear_receiver_address() {
  receiver_address_.ClearToEmpty();
}
inline const std::string& Unstake::receiver_address() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Unstake.receiver_address)
  return _internal_receiver_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unstake::set_receiver_address(ArgT0&& arg0, ArgT... args) {
 
 receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Unstake.receiver_address)
}
inline std::string* Unstake::mutable_receiver_address() {
  std::string* _s = _internal_mutable_receiver_address();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Unstake.receiver_address)
  return _s;
}
inline const std::string& Unstake::_internal_receiver_address() const {
  return receiver_address_.Get();
}
inline void Unstake::_internal_set_receiver_address(const std::string& value) {
  
  receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Unstake::_internal_mutable_receiver_address() {
  
  return receiver_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Unstake::release_receiver_address() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Unstake.receiver_address)
  return receiver_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Unstake::set_allocated_receiver_address(std::string* receiver_address) {
  if (receiver_address != nullptr) {
    
  } else {
    
  }
  receiver_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Unstake.receiver_address)
}

// string receiver_chain_id = 4;
inline void Unstake::clear_receiver_chain_id() {
  receiver_chain_id_.ClearToEmpty();
}
inline const std::string& Unstake::receiver_chain_id() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Unstake.receiver_chain_id)
  return _internal_receiver_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unstake::set_receiver_chain_id(ArgT0&& arg0, ArgT... args) {
 
 receiver_chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Unstake.receiver_chain_id)
}
inline std::string* Unstake::mutable_receiver_chain_id() {
  std::string* _s = _internal_mutable_receiver_chain_id();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Unstake.receiver_chain_id)
  return _s;
}
inline const std::string& Unstake::_internal_receiver_chain_id() const {
  return receiver_chain_id_.Get();
}
inline void Unstake::_internal_set_receiver_chain_id(const std::string& value) {
  
  receiver_chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Unstake::_internal_mutable_receiver_chain_id() {
  
  return receiver_chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Unstake::release_receiver_chain_id() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Unstake.receiver_chain_id)
  return receiver_chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Unstake::set_allocated_receiver_chain_id(std::string* receiver_chain_id) {
  if (receiver_chain_id != nullptr) {
    
  } else {
    
  }
  receiver_chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_chain_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_chain_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Unstake.receiver_chain_id)
}

// -------------------------------------------------------------------

// Withdraw

// .TW.LiquidStaking.Proto.Asset asset = 1;
inline bool Withdraw::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool Withdraw::has_asset() const {
  return _internal_has_asset();
}
inline void Withdraw::clear_asset() {
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::TW::LiquidStaking::Proto::Asset& Withdraw::_internal_asset() const {
  const ::TW::LiquidStaking::Proto::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::LiquidStaking::Proto::Asset&>(
      ::TW::LiquidStaking::Proto::_Asset_default_instance_);
}
inline const ::TW::LiquidStaking::Proto::Asset& Withdraw::asset() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Withdraw.asset)
  return _internal_asset();
}
inline void Withdraw::unsafe_arena_set_allocated_asset(
    ::TW::LiquidStaking::Proto::Asset* asset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Withdraw.asset)
}
inline ::TW::LiquidStaking::Proto::Asset* Withdraw::release_asset() {
  
  ::TW::LiquidStaking::Proto::Asset* temp = asset_;
  asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::LiquidStaking::Proto::Asset* Withdraw::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Withdraw.asset)
  
  ::TW::LiquidStaking::Proto::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::TW::LiquidStaking::Proto::Asset* Withdraw::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::LiquidStaking::Proto::Asset>(GetArenaForAllocation());
    asset_ = p;
  }
  return asset_;
}
inline ::TW::LiquidStaking::Proto::Asset* Withdraw::mutable_asset() {
  ::TW::LiquidStaking::Proto::Asset* _msg = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Withdraw.asset)
  return _msg;
}
inline void Withdraw::set_allocated_asset(::TW::LiquidStaking::Proto::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::LiquidStaking::Proto::Asset>::GetOwningArena(asset);
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Withdraw.asset)
}

// string amount = 2;
inline void Withdraw::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Withdraw::amount() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Withdraw.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Withdraw::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Withdraw.amount)
}
inline std::string* Withdraw::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Withdraw.amount)
  return _s;
}
inline const std::string& Withdraw::_internal_amount() const {
  return amount_.Get();
}
inline void Withdraw::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Withdraw::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Withdraw::release_amount() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Withdraw.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Withdraw::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Withdraw.amount)
}

// string idx = 3;
inline void Withdraw::clear_idx() {
  idx_.ClearToEmpty();
}
inline const std::string& Withdraw::idx() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Withdraw.idx)
  return _internal_idx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Withdraw::set_idx(ArgT0&& arg0, ArgT... args) {
 
 idx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Withdraw.idx)
}
inline std::string* Withdraw::mutable_idx() {
  std::string* _s = _internal_mutable_idx();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Withdraw.idx)
  return _s;
}
inline const std::string& Withdraw::_internal_idx() const {
  return idx_.Get();
}
inline void Withdraw::_internal_set_idx(const std::string& value) {
  
  idx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Withdraw::_internal_mutable_idx() {
  
  return idx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Withdraw::release_idx() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Withdraw.idx)
  return idx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Withdraw::set_allocated_idx(std::string* idx) {
  if (idx != nullptr) {
    
  } else {
    
  }
  idx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idx,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (idx_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    idx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Withdraw.idx)
}

// -------------------------------------------------------------------

// Input

// .TW.LiquidStaking.Proto.Stake stake = 1;
inline bool Input::_internal_has_stake() const {
  return action_case() == kStake;
}
inline bool Input::has_stake() const {
  return _internal_has_stake();
}
inline void Input::set_has_stake() {
  _oneof_case_[0] = kStake;
}
inline void Input::clear_stake() {
  if (_internal_has_stake()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.stake_;
    }
    clear_has_action();
  }
}
inline ::TW::LiquidStaking::Proto::Stake* Input::release_stake() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Input.stake)
  if (_internal_has_stake()) {
    clear_has_action();
      ::TW::LiquidStaking::Proto::Stake* temp = action_.stake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.stake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::LiquidStaking::Proto::Stake& Input::_internal_stake() const {
  return _internal_has_stake()
      ? *action_.stake_
      : reinterpret_cast< ::TW::LiquidStaking::Proto::Stake&>(::TW::LiquidStaking::Proto::_Stake_default_instance_);
}
inline const ::TW::LiquidStaking::Proto::Stake& Input::stake() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Input.stake)
  return _internal_stake();
}
inline ::TW::LiquidStaking::Proto::Stake* Input::unsafe_arena_release_stake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.LiquidStaking.Proto.Input.stake)
  if (_internal_has_stake()) {
    clear_has_action();
    ::TW::LiquidStaking::Proto::Stake* temp = action_.stake_;
    action_.stake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Input::unsafe_arena_set_allocated_stake(::TW::LiquidStaking::Proto::Stake* stake) {
  clear_action();
  if (stake) {
    set_has_stake();
    action_.stake_ = stake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Input.stake)
}
inline ::TW::LiquidStaking::Proto::Stake* Input::_internal_mutable_stake() {
  if (!_internal_has_stake()) {
    clear_action();
    set_has_stake();
    action_.stake_ = CreateMaybeMessage< ::TW::LiquidStaking::Proto::Stake >(GetArenaForAllocation());
  }
  return action_.stake_;
}
inline ::TW::LiquidStaking::Proto::Stake* Input::mutable_stake() {
  ::TW::LiquidStaking::Proto::Stake* _msg = _internal_mutable_stake();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Input.stake)
  return _msg;
}

// .TW.LiquidStaking.Proto.Unstake unstake = 2;
inline bool Input::_internal_has_unstake() const {
  return action_case() == kUnstake;
}
inline bool Input::has_unstake() const {
  return _internal_has_unstake();
}
inline void Input::set_has_unstake() {
  _oneof_case_[0] = kUnstake;
}
inline void Input::clear_unstake() {
  if (_internal_has_unstake()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.unstake_;
    }
    clear_has_action();
  }
}
inline ::TW::LiquidStaking::Proto::Unstake* Input::release_unstake() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Input.unstake)
  if (_internal_has_unstake()) {
    clear_has_action();
      ::TW::LiquidStaking::Proto::Unstake* temp = action_.unstake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.unstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::LiquidStaking::Proto::Unstake& Input::_internal_unstake() const {
  return _internal_has_unstake()
      ? *action_.unstake_
      : reinterpret_cast< ::TW::LiquidStaking::Proto::Unstake&>(::TW::LiquidStaking::Proto::_Unstake_default_instance_);
}
inline const ::TW::LiquidStaking::Proto::Unstake& Input::unstake() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Input.unstake)
  return _internal_unstake();
}
inline ::TW::LiquidStaking::Proto::Unstake* Input::unsafe_arena_release_unstake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.LiquidStaking.Proto.Input.unstake)
  if (_internal_has_unstake()) {
    clear_has_action();
    ::TW::LiquidStaking::Proto::Unstake* temp = action_.unstake_;
    action_.unstake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Input::unsafe_arena_set_allocated_unstake(::TW::LiquidStaking::Proto::Unstake* unstake) {
  clear_action();
  if (unstake) {
    set_has_unstake();
    action_.unstake_ = unstake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Input.unstake)
}
inline ::TW::LiquidStaking::Proto::Unstake* Input::_internal_mutable_unstake() {
  if (!_internal_has_unstake()) {
    clear_action();
    set_has_unstake();
    action_.unstake_ = CreateMaybeMessage< ::TW::LiquidStaking::Proto::Unstake >(GetArenaForAllocation());
  }
  return action_.unstake_;
}
inline ::TW::LiquidStaking::Proto::Unstake* Input::mutable_unstake() {
  ::TW::LiquidStaking::Proto::Unstake* _msg = _internal_mutable_unstake();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Input.unstake)
  return _msg;
}

// .TW.LiquidStaking.Proto.Withdraw withdraw = 3;
inline bool Input::_internal_has_withdraw() const {
  return action_case() == kWithdraw;
}
inline bool Input::has_withdraw() const {
  return _internal_has_withdraw();
}
inline void Input::set_has_withdraw() {
  _oneof_case_[0] = kWithdraw;
}
inline void Input::clear_withdraw() {
  if (_internal_has_withdraw()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.withdraw_;
    }
    clear_has_action();
  }
}
inline ::TW::LiquidStaking::Proto::Withdraw* Input::release_withdraw() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Input.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_action();
      ::TW::LiquidStaking::Proto::Withdraw* temp = action_.withdraw_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::LiquidStaking::Proto::Withdraw& Input::_internal_withdraw() const {
  return _internal_has_withdraw()
      ? *action_.withdraw_
      : reinterpret_cast< ::TW::LiquidStaking::Proto::Withdraw&>(::TW::LiquidStaking::Proto::_Withdraw_default_instance_);
}
inline const ::TW::LiquidStaking::Proto::Withdraw& Input::withdraw() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Input.withdraw)
  return _internal_withdraw();
}
inline ::TW::LiquidStaking::Proto::Withdraw* Input::unsafe_arena_release_withdraw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.LiquidStaking.Proto.Input.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_action();
    ::TW::LiquidStaking::Proto::Withdraw* temp = action_.withdraw_;
    action_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Input::unsafe_arena_set_allocated_withdraw(::TW::LiquidStaking::Proto::Withdraw* withdraw) {
  clear_action();
  if (withdraw) {
    set_has_withdraw();
    action_.withdraw_ = withdraw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Input.withdraw)
}
inline ::TW::LiquidStaking::Proto::Withdraw* Input::_internal_mutable_withdraw() {
  if (!_internal_has_withdraw()) {
    clear_action();
    set_has_withdraw();
    action_.withdraw_ = CreateMaybeMessage< ::TW::LiquidStaking::Proto::Withdraw >(GetArenaForAllocation());
  }
  return action_.withdraw_;
}
inline ::TW::LiquidStaking::Proto::Withdraw* Input::mutable_withdraw() {
  ::TW::LiquidStaking::Proto::Withdraw* _msg = _internal_mutable_withdraw();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Input.withdraw)
  return _msg;
}

// string smart_contract_address = 4;
inline void Input::clear_smart_contract_address() {
  smart_contract_address_.ClearToEmpty();
}
inline const std::string& Input::smart_contract_address() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Input.smart_contract_address)
  return _internal_smart_contract_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Input::set_smart_contract_address(ArgT0&& arg0, ArgT... args) {
 
 smart_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Input.smart_contract_address)
}
inline std::string* Input::mutable_smart_contract_address() {
  std::string* _s = _internal_mutable_smart_contract_address();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Input.smart_contract_address)
  return _s;
}
inline const std::string& Input::_internal_smart_contract_address() const {
  return smart_contract_address_.Get();
}
inline void Input::_internal_set_smart_contract_address(const std::string& value) {
  
  smart_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Input::_internal_mutable_smart_contract_address() {
  
  return smart_contract_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Input::release_smart_contract_address() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Input.smart_contract_address)
  return smart_contract_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Input::set_allocated_smart_contract_address(std::string* smart_contract_address) {
  if (smart_contract_address != nullptr) {
    
  } else {
    
  }
  smart_contract_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smart_contract_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (smart_contract_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    smart_contract_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Input.smart_contract_address)
}

// .TW.LiquidStaking.Proto.Protocol protocol = 5;
inline void Input::clear_protocol() {
  protocol_ = 0;
}
inline ::TW::LiquidStaking::Proto::Protocol Input::_internal_protocol() const {
  return static_cast< ::TW::LiquidStaking::Proto::Protocol >(protocol_);
}
inline ::TW::LiquidStaking::Proto::Protocol Input::protocol() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Input.protocol)
  return _internal_protocol();
}
inline void Input::_internal_set_protocol(::TW::LiquidStaking::Proto::Protocol value) {
  
  protocol_ = value;
}
inline void Input::set_protocol(::TW::LiquidStaking::Proto::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Input.protocol)
}

// .TW.LiquidStaking.Proto.Blockchain blockchain = 6;
inline void Input::clear_blockchain() {
  blockchain_ = 0;
}
inline ::TW::LiquidStaking::Proto::Blockchain Input::_internal_blockchain() const {
  return static_cast< ::TW::LiquidStaking::Proto::Blockchain >(blockchain_);
}
inline ::TW::LiquidStaking::Proto::Blockchain Input::blockchain() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Input.blockchain)
  return _internal_blockchain();
}
inline void Input::_internal_set_blockchain(::TW::LiquidStaking::Proto::Blockchain value) {
  
  blockchain_ = value;
}
inline void Input::set_blockchain(::TW::LiquidStaking::Proto::Blockchain value) {
  _internal_set_blockchain(value);
  // @@protoc_insertion_point(field_set:TW.LiquidStaking.Proto.Input.blockchain)
}

inline bool Input::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void Input::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline Input::ActionCase Input::action_case() const {
  return Input::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Output

// .TW.LiquidStaking.Proto.Status status = 1;
inline bool Output::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Output::has_status() const {
  return _internal_has_status();
}
inline void Output::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::TW::LiquidStaking::Proto::Status& Output::_internal_status() const {
  const ::TW::LiquidStaking::Proto::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::LiquidStaking::Proto::Status&>(
      ::TW::LiquidStaking::Proto::_Status_default_instance_);
}
inline const ::TW::LiquidStaking::Proto::Status& Output::status() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Output.status)
  return _internal_status();
}
inline void Output::unsafe_arena_set_allocated_status(
    ::TW::LiquidStaking::Proto::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Output.status)
}
inline ::TW::LiquidStaking::Proto::Status* Output::release_status() {
  
  ::TW::LiquidStaking::Proto::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::LiquidStaking::Proto::Status* Output::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Output.status)
  
  ::TW::LiquidStaking::Proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::TW::LiquidStaking::Proto::Status* Output::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::LiquidStaking::Proto::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::TW::LiquidStaking::Proto::Status* Output::mutable_status() {
  ::TW::LiquidStaking::Proto::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Output.status)
  return _msg;
}
inline void Output::set_allocated_status(::TW::LiquidStaking::Proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::LiquidStaking::Proto::Status>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Output.status)
}

// .TW.Ethereum.Proto.SigningInput ethereum = 2;
inline bool Output::_internal_has_ethereum() const {
  return signing_input_oneof_case() == kEthereum;
}
inline bool Output::has_ethereum() const {
  return _internal_has_ethereum();
}
inline void Output::set_has_ethereum() {
  _oneof_case_[0] = kEthereum;
}
inline ::TW::Ethereum::Proto::SigningInput* Output::release_ethereum() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Output.ethereum)
  if (_internal_has_ethereum()) {
    clear_has_signing_input_oneof();
      ::TW::Ethereum::Proto::SigningInput* temp = signing_input_oneof_.ethereum_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    signing_input_oneof_.ethereum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Ethereum::Proto::SigningInput& Output::_internal_ethereum() const {
  return _internal_has_ethereum()
      ? *signing_input_oneof_.ethereum_
      : reinterpret_cast< ::TW::Ethereum::Proto::SigningInput&>(::TW::Ethereum::Proto::_SigningInput_default_instance_);
}
inline const ::TW::Ethereum::Proto::SigningInput& Output::ethereum() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Output.ethereum)
  return _internal_ethereum();
}
inline ::TW::Ethereum::Proto::SigningInput* Output::unsafe_arena_release_ethereum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.LiquidStaking.Proto.Output.ethereum)
  if (_internal_has_ethereum()) {
    clear_has_signing_input_oneof();
    ::TW::Ethereum::Proto::SigningInput* temp = signing_input_oneof_.ethereum_;
    signing_input_oneof_.ethereum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Output::unsafe_arena_set_allocated_ethereum(::TW::Ethereum::Proto::SigningInput* ethereum) {
  clear_signing_input_oneof();
  if (ethereum) {
    set_has_ethereum();
    signing_input_oneof_.ethereum_ = ethereum;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Output.ethereum)
}
inline ::TW::Ethereum::Proto::SigningInput* Output::_internal_mutable_ethereum() {
  if (!_internal_has_ethereum()) {
    clear_signing_input_oneof();
    set_has_ethereum();
    signing_input_oneof_.ethereum_ = CreateMaybeMessage< ::TW::Ethereum::Proto::SigningInput >(GetArenaForAllocation());
  }
  return signing_input_oneof_.ethereum_;
}
inline ::TW::Ethereum::Proto::SigningInput* Output::mutable_ethereum() {
  ::TW::Ethereum::Proto::SigningInput* _msg = _internal_mutable_ethereum();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Output.ethereum)
  return _msg;
}

// .TW.Cosmos.Proto.SigningInput cosmos = 3;
inline bool Output::_internal_has_cosmos() const {
  return signing_input_oneof_case() == kCosmos;
}
inline bool Output::has_cosmos() const {
  return _internal_has_cosmos();
}
inline void Output::set_has_cosmos() {
  _oneof_case_[0] = kCosmos;
}
inline ::TW::Cosmos::Proto::SigningInput* Output::release_cosmos() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Output.cosmos)
  if (_internal_has_cosmos()) {
    clear_has_signing_input_oneof();
      ::TW::Cosmos::Proto::SigningInput* temp = signing_input_oneof_.cosmos_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    signing_input_oneof_.cosmos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Cosmos::Proto::SigningInput& Output::_internal_cosmos() const {
  return _internal_has_cosmos()
      ? *signing_input_oneof_.cosmos_
      : reinterpret_cast< ::TW::Cosmos::Proto::SigningInput&>(::TW::Cosmos::Proto::_SigningInput_default_instance_);
}
inline const ::TW::Cosmos::Proto::SigningInput& Output::cosmos() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Output.cosmos)
  return _internal_cosmos();
}
inline ::TW::Cosmos::Proto::SigningInput* Output::unsafe_arena_release_cosmos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.LiquidStaking.Proto.Output.cosmos)
  if (_internal_has_cosmos()) {
    clear_has_signing_input_oneof();
    ::TW::Cosmos::Proto::SigningInput* temp = signing_input_oneof_.cosmos_;
    signing_input_oneof_.cosmos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Output::unsafe_arena_set_allocated_cosmos(::TW::Cosmos::Proto::SigningInput* cosmos) {
  clear_signing_input_oneof();
  if (cosmos) {
    set_has_cosmos();
    signing_input_oneof_.cosmos_ = cosmos;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Output.cosmos)
}
inline ::TW::Cosmos::Proto::SigningInput* Output::_internal_mutable_cosmos() {
  if (!_internal_has_cosmos()) {
    clear_signing_input_oneof();
    set_has_cosmos();
    signing_input_oneof_.cosmos_ = CreateMaybeMessage< ::TW::Cosmos::Proto::SigningInput >(GetArenaForAllocation());
  }
  return signing_input_oneof_.cosmos_;
}
inline ::TW::Cosmos::Proto::SigningInput* Output::mutable_cosmos() {
  ::TW::Cosmos::Proto::SigningInput* _msg = _internal_mutable_cosmos();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Output.cosmos)
  return _msg;
}

// .TW.Aptos.Proto.SigningInput aptos = 4;
inline bool Output::_internal_has_aptos() const {
  return signing_input_oneof_case() == kAptos;
}
inline bool Output::has_aptos() const {
  return _internal_has_aptos();
}
inline void Output::set_has_aptos() {
  _oneof_case_[0] = kAptos;
}
inline ::TW::Aptos::Proto::SigningInput* Output::release_aptos() {
  // @@protoc_insertion_point(field_release:TW.LiquidStaking.Proto.Output.aptos)
  if (_internal_has_aptos()) {
    clear_has_signing_input_oneof();
      ::TW::Aptos::Proto::SigningInput* temp = signing_input_oneof_.aptos_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    signing_input_oneof_.aptos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Aptos::Proto::SigningInput& Output::_internal_aptos() const {
  return _internal_has_aptos()
      ? *signing_input_oneof_.aptos_
      : reinterpret_cast< ::TW::Aptos::Proto::SigningInput&>(::TW::Aptos::Proto::_SigningInput_default_instance_);
}
inline const ::TW::Aptos::Proto::SigningInput& Output::aptos() const {
  // @@protoc_insertion_point(field_get:TW.LiquidStaking.Proto.Output.aptos)
  return _internal_aptos();
}
inline ::TW::Aptos::Proto::SigningInput* Output::unsafe_arena_release_aptos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.LiquidStaking.Proto.Output.aptos)
  if (_internal_has_aptos()) {
    clear_has_signing_input_oneof();
    ::TW::Aptos::Proto::SigningInput* temp = signing_input_oneof_.aptos_;
    signing_input_oneof_.aptos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Output::unsafe_arena_set_allocated_aptos(::TW::Aptos::Proto::SigningInput* aptos) {
  clear_signing_input_oneof();
  if (aptos) {
    set_has_aptos();
    signing_input_oneof_.aptos_ = aptos;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.LiquidStaking.Proto.Output.aptos)
}
inline ::TW::Aptos::Proto::SigningInput* Output::_internal_mutable_aptos() {
  if (!_internal_has_aptos()) {
    clear_signing_input_oneof();
    set_has_aptos();
    signing_input_oneof_.aptos_ = CreateMaybeMessage< ::TW::Aptos::Proto::SigningInput >(GetArenaForAllocation());
  }
  return signing_input_oneof_.aptos_;
}
inline ::TW::Aptos::Proto::SigningInput* Output::mutable_aptos() {
  ::TW::Aptos::Proto::SigningInput* _msg = _internal_mutable_aptos();
  // @@protoc_insertion_point(field_mutable:TW.LiquidStaking.Proto.Output.aptos)
  return _msg;
}

inline bool Output::has_signing_input_oneof() const {
  return signing_input_oneof_case() != SIGNING_INPUT_ONEOF_NOT_SET;
}
inline void Output::clear_has_signing_input_oneof() {
  _oneof_case_[0] = SIGNING_INPUT_ONEOF_NOT_SET;
}
inline Output::SigningInputOneofCase Output::signing_input_oneof_case() const {
  return Output::SigningInputOneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace LiquidStaking
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::LiquidStaking::Proto::Coin> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::LiquidStaking::Proto::Coin>() {
  return ::TW::LiquidStaking::Proto::Coin_descriptor();
}
template <> struct is_proto_enum< ::TW::LiquidStaking::Proto::Blockchain> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::LiquidStaking::Proto::Blockchain>() {
  return ::TW::LiquidStaking::Proto::Blockchain_descriptor();
}
template <> struct is_proto_enum< ::TW::LiquidStaking::Proto::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::LiquidStaking::Proto::Protocol>() {
  return ::TW::LiquidStaking::Proto::Protocol_descriptor();
}
template <> struct is_proto_enum< ::TW::LiquidStaking::Proto::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::LiquidStaking::Proto::StatusCode>() {
  return ::TW::LiquidStaking::Proto::StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LiquidStaking_2eproto
