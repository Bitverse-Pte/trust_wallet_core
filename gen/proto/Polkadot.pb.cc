// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Polkadot.proto

#include "Polkadot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Polkadot {
namespace Proto {
constexpr Era::Era(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_number_(uint64_t{0u})
  , period_(uint64_t{0u}){}
struct EraDefaultTypeInternal {
  constexpr EraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EraDefaultTypeInternal() {}
  union {
    Era _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EraDefaultTypeInternal _Era_default_instance_;
constexpr CustomCallIndices::CustomCallIndices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_index_(0)
  , method_index_(0){}
struct CustomCallIndicesDefaultTypeInternal {
  constexpr CustomCallIndicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomCallIndicesDefaultTypeInternal() {}
  union {
    CustomCallIndices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomCallIndicesDefaultTypeInternal _CustomCallIndices_default_instance_;
constexpr CallIndices::CallIndices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CallIndicesDefaultTypeInternal {
  constexpr CallIndicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallIndicesDefaultTypeInternal() {}
  union {
    CallIndices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallIndicesDefaultTypeInternal _CallIndices_default_instance_;
constexpr Balance_Transfer::Balance_Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr){}
struct Balance_TransferDefaultTypeInternal {
  constexpr Balance_TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Balance_TransferDefaultTypeInternal() {}
  union {
    Balance_Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Balance_TransferDefaultTypeInternal _Balance_Transfer_default_instance_;
constexpr Balance_BatchTransfer::Balance_BatchTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transfers_()
  , call_indices_(nullptr){}
struct Balance_BatchTransferDefaultTypeInternal {
  constexpr Balance_BatchTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Balance_BatchTransferDefaultTypeInternal() {}
  union {
    Balance_BatchTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Balance_BatchTransferDefaultTypeInternal _Balance_BatchTransfer_default_instance_;
constexpr Balance_AssetTransfer::Balance_AssetTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr)
  , asset_id_(0u)
  , fee_asset_id_(0u){}
struct Balance_AssetTransferDefaultTypeInternal {
  constexpr Balance_AssetTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Balance_AssetTransferDefaultTypeInternal() {}
  union {
    Balance_AssetTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Balance_AssetTransferDefaultTypeInternal _Balance_AssetTransfer_default_instance_;
constexpr Balance_BatchAssetTransfer::Balance_BatchAssetTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transfers_()
  , call_indices_(nullptr)
  , fee_asset_id_(0u){}
struct Balance_BatchAssetTransferDefaultTypeInternal {
  constexpr Balance_BatchAssetTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Balance_BatchAssetTransferDefaultTypeInternal() {}
  union {
    Balance_BatchAssetTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Balance_BatchAssetTransferDefaultTypeInternal _Balance_BatchAssetTransfer_default_instance_;
constexpr Balance::Balance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BalanceDefaultTypeInternal {
  constexpr BalanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BalanceDefaultTypeInternal() {}
  union {
    Balance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BalanceDefaultTypeInternal _Balance_default_instance_;
constexpr Staking_Bond::Staking_Bond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr)
  , reward_destination_(0)
{}
struct Staking_BondDefaultTypeInternal {
  constexpr Staking_BondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_BondDefaultTypeInternal() {}
  union {
    Staking_Bond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_BondDefaultTypeInternal _Staking_Bond_default_instance_;
constexpr Staking_BondAndNominate::Staking_BondAndNominate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nominators_()
  , controller_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr)
  , reward_destination_(0)
{}
struct Staking_BondAndNominateDefaultTypeInternal {
  constexpr Staking_BondAndNominateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_BondAndNominateDefaultTypeInternal() {}
  union {
    Staking_BondAndNominate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_BondAndNominateDefaultTypeInternal _Staking_BondAndNominate_default_instance_;
constexpr Staking_BondExtra::Staking_BondExtra(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr){}
struct Staking_BondExtraDefaultTypeInternal {
  constexpr Staking_BondExtraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_BondExtraDefaultTypeInternal() {}
  union {
    Staking_BondExtra _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_BondExtraDefaultTypeInternal _Staking_BondExtra_default_instance_;
constexpr Staking_Unbond::Staking_Unbond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr){}
struct Staking_UnbondDefaultTypeInternal {
  constexpr Staking_UnbondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_UnbondDefaultTypeInternal() {}
  union {
    Staking_Unbond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_UnbondDefaultTypeInternal _Staking_Unbond_default_instance_;
constexpr Staking_Rebond::Staking_Rebond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr){}
struct Staking_RebondDefaultTypeInternal {
  constexpr Staking_RebondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_RebondDefaultTypeInternal() {}
  union {
    Staking_Rebond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_RebondDefaultTypeInternal _Staking_Rebond_default_instance_;
constexpr Staking_WithdrawUnbonded::Staking_WithdrawUnbonded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : call_indices_(nullptr)
  , slashing_spans_(0){}
struct Staking_WithdrawUnbondedDefaultTypeInternal {
  constexpr Staking_WithdrawUnbondedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_WithdrawUnbondedDefaultTypeInternal() {}
  union {
    Staking_WithdrawUnbonded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_WithdrawUnbondedDefaultTypeInternal _Staking_WithdrawUnbonded_default_instance_;
constexpr Staking_Nominate::Staking_Nominate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nominators_()
  , call_indices_(nullptr){}
struct Staking_NominateDefaultTypeInternal {
  constexpr Staking_NominateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_NominateDefaultTypeInternal() {}
  union {
    Staking_Nominate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_NominateDefaultTypeInternal _Staking_Nominate_default_instance_;
constexpr Staking_ChillAndUnbond::Staking_ChillAndUnbond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr){}
struct Staking_ChillAndUnbondDefaultTypeInternal {
  constexpr Staking_ChillAndUnbondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_ChillAndUnbondDefaultTypeInternal() {}
  union {
    Staking_ChillAndUnbond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_ChillAndUnbondDefaultTypeInternal _Staking_ChillAndUnbond_default_instance_;
constexpr Staking_Chill::Staking_Chill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : call_indices_(nullptr){}
struct Staking_ChillDefaultTypeInternal {
  constexpr Staking_ChillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Staking_ChillDefaultTypeInternal() {}
  union {
    Staking_Chill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Staking_ChillDefaultTypeInternal _Staking_Chill_default_instance_;
constexpr Staking::Staking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StakingDefaultTypeInternal {
  constexpr StakingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StakingDefaultTypeInternal() {}
  union {
    Staking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StakingDefaultTypeInternal _Staking_default_instance_;
constexpr Identity_JoinIdentityAsKey::Identity_JoinIdentityAsKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : call_indices_(nullptr)
  , auth_id_(uint64_t{0u}){}
struct Identity_JoinIdentityAsKeyDefaultTypeInternal {
  constexpr Identity_JoinIdentityAsKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Identity_JoinIdentityAsKeyDefaultTypeInternal() {}
  union {
    Identity_JoinIdentityAsKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Identity_JoinIdentityAsKeyDefaultTypeInternal _Identity_JoinIdentityAsKey_default_instance_;
constexpr Identity_AddAuthorization_Data::Identity_AddAuthorization_Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Identity_AddAuthorization_DataDefaultTypeInternal {
  constexpr Identity_AddAuthorization_DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Identity_AddAuthorization_DataDefaultTypeInternal() {}
  union {
    Identity_AddAuthorization_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Identity_AddAuthorization_DataDefaultTypeInternal _Identity_AddAuthorization_Data_default_instance_;
constexpr Identity_AddAuthorization_AuthData::Identity_AddAuthorization_AuthData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_(nullptr)
  , extrinsic_(nullptr)
  , portfolio_(nullptr){}
struct Identity_AddAuthorization_AuthDataDefaultTypeInternal {
  constexpr Identity_AddAuthorization_AuthDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Identity_AddAuthorization_AuthDataDefaultTypeInternal() {}
  union {
    Identity_AddAuthorization_AuthData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Identity_AddAuthorization_AuthDataDefaultTypeInternal _Identity_AddAuthorization_AuthData_default_instance_;
constexpr Identity_AddAuthorization::Identity_AddAuthorization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_indices_(nullptr)
  , data_(nullptr)
  , expiry_(uint64_t{0u}){}
struct Identity_AddAuthorizationDefaultTypeInternal {
  constexpr Identity_AddAuthorizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Identity_AddAuthorizationDefaultTypeInternal() {}
  union {
    Identity_AddAuthorization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Identity_AddAuthorizationDefaultTypeInternal _Identity_AddAuthorization_default_instance_;
constexpr Identity::Identity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct IdentityDefaultTypeInternal {
  constexpr IdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentityDefaultTypeInternal() {}
  union {
    Identity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentityDefaultTypeInternal _Identity_default_instance_;
constexpr PolymeshCall::PolymeshCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PolymeshCallDefaultTypeInternal {
  constexpr PolymeshCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolymeshCallDefaultTypeInternal() {}
  union {
    PolymeshCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolymeshCallDefaultTypeInternal _PolymeshCall_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , genesis_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , era_(nullptr)
  , nonce_(uint64_t{0u})
  , spec_version_(0u)
  , transaction_version_(0u)
  , network_(0u)
  , multi_address_(false)
  , _oneof_case_{}{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Polkadot_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Polkadot_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Polkadot_2eproto = nullptr;

const uint32_t TableStruct_Polkadot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Era, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Era, block_number_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Era, period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::CustomCallIndices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::CustomCallIndices, module_index_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::CustomCallIndices, method_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::CallIndices, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::CallIndices, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::CallIndices, variant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_Transfer, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_BatchTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_BatchTransfer, call_indices_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_BatchTransfer, transfers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_AssetTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_AssetTransfer, call_indices_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_AssetTransfer, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_AssetTransfer, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_AssetTransfer, asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_AssetTransfer, fee_asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_BatchAssetTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_BatchAssetTransfer, call_indices_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_BatchAssetTransfer, fee_asset_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance_BatchAssetTransfer, transfers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Balance, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, controller_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, reward_destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Bond, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, controller_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, reward_destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, nominators_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondAndNominate, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondExtra, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_BondExtra, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Unbond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Unbond, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Unbond, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Rebond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Rebond, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Rebond, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_WithdrawUnbonded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_WithdrawUnbonded, slashing_spans_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_WithdrawUnbonded, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Nominate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Nominate, nominators_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Nominate, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_ChillAndUnbond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_ChillAndUnbond, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_ChillAndUnbond, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Chill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking_Chill, call_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Staking, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_JoinIdentityAsKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_JoinIdentityAsKey, call_indices_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_JoinIdentityAsKey, auth_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization_Data, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData, extrinsic_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData, portfolio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization, call_indices_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization, target_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization, data_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity_AddAuthorization, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::Identity, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::PolymeshCall, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::PolymeshCall, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::PolymeshCall, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, block_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, genesis_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, spec_version_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, transaction_version_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, tip_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, era_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, network_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, multi_address_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningInput, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Polkadot::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Polkadot::Proto::Era)},
  { 8, -1, -1, sizeof(::TW::Polkadot::Proto::CustomCallIndices)},
  { 16, -1, -1, sizeof(::TW::Polkadot::Proto::CallIndices)},
  { 24, -1, -1, sizeof(::TW::Polkadot::Proto::Balance_Transfer)},
  { 34, -1, -1, sizeof(::TW::Polkadot::Proto::Balance_BatchTransfer)},
  { 42, -1, -1, sizeof(::TW::Polkadot::Proto::Balance_AssetTransfer)},
  { 53, -1, -1, sizeof(::TW::Polkadot::Proto::Balance_BatchAssetTransfer)},
  { 62, -1, -1, sizeof(::TW::Polkadot::Proto::Balance)},
  { 73, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_Bond)},
  { 83, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_BondAndNominate)},
  { 94, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_BondExtra)},
  { 102, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_Unbond)},
  { 110, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_Rebond)},
  { 118, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_WithdrawUnbonded)},
  { 126, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_Nominate)},
  { 134, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_ChillAndUnbond)},
  { 142, -1, -1, sizeof(::TW::Polkadot::Proto::Staking_Chill)},
  { 149, -1, -1, sizeof(::TW::Polkadot::Proto::Staking)},
  { 165, -1, -1, sizeof(::TW::Polkadot::Proto::Identity_JoinIdentityAsKey)},
  { 173, -1, -1, sizeof(::TW::Polkadot::Proto::Identity_AddAuthorization_Data)},
  { 180, -1, -1, sizeof(::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData)},
  { 189, -1, -1, sizeof(::TW::Polkadot::Proto::Identity_AddAuthorization)},
  { 199, -1, -1, sizeof(::TW::Polkadot::Proto::Identity)},
  { 208, -1, -1, sizeof(::TW::Polkadot::Proto::PolymeshCall)},
  { 216, -1, -1, sizeof(::TW::Polkadot::Proto::SigningInput)},
  { 236, -1, -1, sizeof(::TW::Polkadot::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Era_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_CustomCallIndices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_CallIndices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Balance_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Balance_BatchTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Balance_AssetTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Balance_BatchAssetTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Balance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Bond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_BondAndNominate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_BondExtra_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Unbond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Rebond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_WithdrawUnbonded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Nominate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_ChillAndUnbond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_Chill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Staking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Identity_JoinIdentityAsKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Identity_AddAuthorization_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Identity_AddAuthorization_AuthData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Identity_AddAuthorization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_Identity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_PolymeshCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Polkadot::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Polkadot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Polkadot.proto\022\021TW.Polkadot.Proto\032\014Com"
  "mon.proto\"+\n\003Era\022\024\n\014block_number\030\001 \001(\004\022\016"
  "\n\006period\030\002 \001(\004\"\?\n\021CustomCallIndices\022\024\n\014m"
  "odule_index\030\004 \001(\005\022\024\n\014method_index\030\005 \001(\005\""
  "P\n\013CallIndices\0226\n\006custom\030\001 \001(\0132$.TW.Polk"
  "adot.Proto.CustomCallIndicesH\000B\t\n\007varian"
  "t\"\316\006\n\007Balance\0227\n\010transfer\030\001 \001(\0132#.TW.Pol"
  "kadot.Proto.Balance.TransferH\000\022A\n\rbatchT"
  "ransfer\030\002 \001(\0132(.TW.Polkadot.Proto.Balanc"
  "e.BatchTransferH\000\022B\n\016asset_transfer\030\003 \001("
  "\0132(.TW.Polkadot.Proto.Balance.AssetTrans"
  "ferH\000\022M\n\024batch_asset_transfer\030\004 \001(\0132-.TW"
  ".Polkadot.Proto.Balance.BatchAssetTransf"
  "erH\000\032q\n\010Transfer\022\022\n\nto_address\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\014\022\014\n\004memo\030\003 \001(\t\0224\n\014call_indice"
  "s\030\004 \001(\0132\036.TW.Polkadot.Proto.CallIndices\032"
  "}\n\rBatchTransfer\0224\n\014call_indices\030\001 \001(\0132\036"
  ".TW.Polkadot.Proto.CallIndices\0226\n\ttransf"
  "ers\030\002 \003(\0132#.TW.Polkadot.Proto.Balance.Tr"
  "ansfer\032\220\001\n\rAssetTransfer\0224\n\014call_indices"
  "\030\001 \001(\0132\036.TW.Polkadot.Proto.CallIndices\022\022"
  "\n\nto_address\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\022\020\n\010ass"
  "et_id\030\004 \001(\r\022\024\n\014fee_asset_id\030\005 \001(\r\032\235\001\n\022Ba"
  "tchAssetTransfer\0224\n\014call_indices\030\001 \001(\0132\036"
  ".TW.Polkadot.Proto.CallIndices\022\024\n\014fee_as"
  "set_id\030\002 \001(\r\022;\n\ttransfers\030\003 \003(\0132(.TW.Pol"
  "kadot.Proto.Balance.AssetTransferB\017\n\rmes"
  "sage_oneof\"\334\013\n\007Staking\022/\n\004bond\030\001 \001(\0132\037.T"
  "W.Polkadot.Proto.Staking.BondH\000\022G\n\021bond_"
  "and_nominate\030\002 \001(\0132*.TW.Polkadot.Proto.S"
  "taking.BondAndNominateH\000\022:\n\nbond_extra\030\003"
  " \001(\0132$.TW.Polkadot.Proto.Staking.BondExt"
  "raH\000\0223\n\006unbond\030\004 \001(\0132!.TW.Polkadot.Proto"
  ".Staking.UnbondH\000\022H\n\021withdraw_unbonded\030\005"
  " \001(\0132+.TW.Polkadot.Proto.Staking.Withdra"
  "wUnbondedH\000\0227\n\010nominate\030\006 \001(\0132#.TW.Polka"
  "dot.Proto.Staking.NominateH\000\0221\n\005chill\030\007 "
  "\001(\0132 .TW.Polkadot.Proto.Staking.ChillH\000\022"
  "E\n\020chill_and_unbond\030\010 \001(\0132).TW.Polkadot."
  "Proto.Staking.ChillAndUnbondH\000\0223\n\006rebond"
  "\030\t \001(\0132!.TW.Polkadot.Proto.Staking.Rebon"
  "dH\000\032\241\001\n\004Bond\022\022\n\ncontroller\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\014\022@\n\022reward_destination\030\003 \001(\0162$.TW"
  ".Polkadot.Proto.RewardDestination\0224\n\014cal"
  "l_indices\030\004 \001(\0132\036.TW.Polkadot.Proto.Call"
  "Indices\032\300\001\n\017BondAndNominate\022\022\n\ncontrolle"
  "r\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\022@\n\022reward_destina"
  "tion\030\003 \001(\0162$.TW.Polkadot.Proto.RewardDes"
  "tination\022\022\n\nnominators\030\004 \003(\t\0224\n\014call_ind"
  "ices\030\005 \001(\0132\036.TW.Polkadot.Proto.CallIndic"
  "es\032P\n\tBondExtra\022\r\n\005value\030\001 \001(\014\0224\n\014call_i"
  "ndices\030\002 \001(\0132\036.TW.Polkadot.Proto.CallInd"
  "ices\032M\n\006Unbond\022\r\n\005value\030\001 \001(\014\0224\n\014call_in"
  "dices\030\002 \001(\0132\036.TW.Polkadot.Proto.CallIndi"
  "ces\032M\n\006Rebond\022\r\n\005value\030\001 \001(\014\0224\n\014call_ind"
  "ices\030\002 \001(\0132\036.TW.Polkadot.Proto.CallIndic"
  "es\032`\n\020WithdrawUnbonded\022\026\n\016slashing_spans"
  "\030\001 \001(\005\0224\n\014call_indices\030\002 \001(\0132\036.TW.Polkad"
  "ot.Proto.CallIndices\032T\n\010Nominate\022\022\n\nnomi"
  "nators\030\001 \003(\t\0224\n\014call_indices\030\002 \001(\0132\036.TW."
  "Polkadot.Proto.CallIndices\032U\n\016ChillAndUn"
  "bond\022\r\n\005value\030\001 \001(\014\0224\n\014call_indices\030\002 \001("
  "\0132\036.TW.Polkadot.Proto.CallIndices\032=\n\005Chi"
  "ll\0224\n\014call_indices\030\001 \001(\0132\036.TW.Polkadot.P"
  "roto.CallIndicesB\017\n\rmessage_oneof\"\262\005\n\010Id"
  "entity\022M\n\024join_identity_as_key\030\001 \001(\0132-.T"
  "W.Polkadot.Proto.Identity.JoinIdentityAs"
  "KeyH\000\022I\n\021add_authorization\030\002 \001(\0132,.TW.Po"
  "lkadot.Proto.Identity.AddAuthorizationH\000"
  "\032Z\n\021JoinIdentityAsKey\0224\n\014call_indices\030\001 "
  "\001(\0132\036.TW.Polkadot.Proto.CallIndices\022\017\n\007a"
  "uth_id\030\002 \001(\004\032\236\003\n\020AddAuthorization\0224\n\014cal"
  "l_indices\030\001 \001(\0132\036.TW.Polkadot.Proto.Call"
  "Indices\022\016\n\006target\030\002 \001(\t\022C\n\004data\030\003 \001(\01325."
  "TW.Polkadot.Proto.Identity.AddAuthorizat"
  "ion.AuthData\022\016\n\006expiry\030\004 \001(\004\032\024\n\004Data\022\014\n\004"
  "data\030\001 \001(\014\032\330\001\n\010AuthData\022@\n\005asset\030\001 \001(\01321"
  ".TW.Polkadot.Proto.Identity.AddAuthoriza"
  "tion.Data\022D\n\textrinsic\030\002 \001(\01321.TW.Polkad"
  "ot.Proto.Identity.AddAuthorization.Data\022"
  "D\n\tportfolio\030\003 \001(\01321.TW.Polkadot.Proto.I"
  "dentity.AddAuthorization.DataB\017\n\rmessage"
  "_oneof\"U\n\014PolymeshCall\0224\n\ridentity_call\030"
  "\002 \001(\0132\033.TW.Polkadot.Proto.IdentityH\000B\017\n\r"
  "message_oneof\"\234\003\n\014SigningInput\022\022\n\nblock_"
  "hash\030\001 \001(\014\022\024\n\014genesis_hash\030\002 \001(\014\022\r\n\005nonc"
  "e\030\003 \001(\004\022\024\n\014spec_version\030\004 \001(\r\022\033\n\023transac"
  "tion_version\030\005 \001(\r\022\013\n\003tip\030\006 \001(\014\022#\n\003era\030\007"
  " \001(\0132\026.TW.Polkadot.Proto.Era\022\023\n\013private_"
  "key\030\010 \001(\014\022\017\n\007network\030\t \001(\r\022\025\n\rmulti_addr"
  "ess\030\n \001(\010\0222\n\014balance_call\030\013 \001(\0132\032.TW.Pol"
  "kadot.Proto.BalanceH\000\0222\n\014staking_call\030\014 "
  "\001(\0132\032.TW.Polkadot.Proto.StakingH\000\0228\n\rpol"
  "ymesh_call\030\r \001(\0132\037.TW.Polkadot.Proto.Pol"
  "ymeshCallH\000B\017\n\rmessage_oneof\"e\n\rSigningO"
  "utput\022\017\n\007encoded\030\001 \001(\014\022,\n\005error\030\002 \001(\0162\035."
  "TW.Common.Proto.SigningError\022\025\n\rerror_me"
  "ssage\030\003 \001(\t*:\n\021RewardDestination\022\n\n\006STAK"
  "ED\020\000\022\t\n\005STASH\020\001\022\016\n\nCONTROLLER\020\002B\027\n\025walle"
  "t.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Polkadot_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Polkadot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Polkadot_2eproto = {
  false, false, 3984, descriptor_table_protodef_Polkadot_2eproto, "Polkadot.proto", 
  &descriptor_table_Polkadot_2eproto_once, descriptor_table_Polkadot_2eproto_deps, 1, 26,
  schemas, file_default_instances, TableStruct_Polkadot_2eproto::offsets,
  file_level_metadata_Polkadot_2eproto, file_level_enum_descriptors_Polkadot_2eproto, file_level_service_descriptors_Polkadot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Polkadot_2eproto_getter() {
  return &descriptor_table_Polkadot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Polkadot_2eproto(&descriptor_table_Polkadot_2eproto);
namespace TW {
namespace Polkadot {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardDestination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Polkadot_2eproto);
  return file_level_enum_descriptors_Polkadot_2eproto[0];
}
bool RewardDestination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Era::_Internal {
 public:
};

Era::Era(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Era)
}
Era::Era(const Era& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_number_, &from.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&block_number_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Era)
}

inline void Era::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&block_number_)) + sizeof(period_));
}

Era::~Era() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Era)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Era::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Era::ArenaDtor(void* object) {
  Era* _this = reinterpret_cast< Era* >(object);
  (void)_this;
}
void Era::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Era::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Era::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Era)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Era::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Era::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Era)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_number = 1;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_number(), target);
  }

  // uint64 period = 2;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Era)
  return target;
}

size_t Era::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Era)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_number = 1;
  if (this->_internal_block_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // uint64 period = 2;
  if (this->_internal_period() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Era::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Era::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Era::GetClassData() const { return &_class_data_; }

void Era::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Era *>(to)->MergeFrom(
      static_cast<const Era &>(from));
}


void Era::MergeFrom(const Era& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Era)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_period() != 0) {
    _internal_set_period(from._internal_period());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Era::CopyFrom(const Era& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Era)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Era::IsInitialized() const {
  return true;
}

void Era::InternalSwap(Era* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Era, period_)
      + sizeof(Era::period_)
      - PROTOBUF_FIELD_OFFSET(Era, block_number_)>(
          reinterpret_cast<char*>(&block_number_),
          reinterpret_cast<char*>(&other->block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Era::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[0]);
}

// ===================================================================

class CustomCallIndices::_Internal {
 public:
};

CustomCallIndices::CustomCallIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.CustomCallIndices)
}
CustomCallIndices::CustomCallIndices(const CustomCallIndices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&module_index_, &from.module_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_index_) -
    reinterpret_cast<char*>(&module_index_)) + sizeof(method_index_));
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.CustomCallIndices)
}

inline void CustomCallIndices::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&module_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&method_index_) -
    reinterpret_cast<char*>(&module_index_)) + sizeof(method_index_));
}

CustomCallIndices::~CustomCallIndices() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.CustomCallIndices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CustomCallIndices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CustomCallIndices::ArenaDtor(void* object) {
  CustomCallIndices* _this = reinterpret_cast< CustomCallIndices* >(object);
  (void)_this;
}
void CustomCallIndices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomCallIndices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomCallIndices::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.CustomCallIndices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&module_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_index_) -
      reinterpret_cast<char*>(&module_index_)) + sizeof(method_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomCallIndices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 module_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          module_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 method_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          method_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomCallIndices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.CustomCallIndices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 module_index = 4;
  if (this->_internal_module_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_module_index(), target);
  }

  // int32 method_index = 5;
  if (this->_internal_method_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_method_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.CustomCallIndices)
  return target;
}

size_t CustomCallIndices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.CustomCallIndices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 module_index = 4;
  if (this->_internal_module_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_module_index());
  }

  // int32 method_index = 5;
  if (this->_internal_method_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_method_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomCallIndices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CustomCallIndices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomCallIndices::GetClassData() const { return &_class_data_; }

void CustomCallIndices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CustomCallIndices *>(to)->MergeFrom(
      static_cast<const CustomCallIndices &>(from));
}


void CustomCallIndices::MergeFrom(const CustomCallIndices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.CustomCallIndices)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_module_index() != 0) {
    _internal_set_module_index(from._internal_module_index());
  }
  if (from._internal_method_index() != 0) {
    _internal_set_method_index(from._internal_method_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomCallIndices::CopyFrom(const CustomCallIndices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.CustomCallIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomCallIndices::IsInitialized() const {
  return true;
}

void CustomCallIndices::InternalSwap(CustomCallIndices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomCallIndices, method_index_)
      + sizeof(CustomCallIndices::method_index_)
      - PROTOBUF_FIELD_OFFSET(CustomCallIndices, module_index_)>(
          reinterpret_cast<char*>(&module_index_),
          reinterpret_cast<char*>(&other->module_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomCallIndices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[1]);
}

// ===================================================================

class CallIndices::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CustomCallIndices& custom(const CallIndices* msg);
};

const ::TW::Polkadot::Proto::CustomCallIndices&
CallIndices::_Internal::custom(const CallIndices* msg) {
  return *msg->variant_.custom_;
}
void CallIndices::set_allocated_custom(::TW::Polkadot::Proto::CustomCallIndices* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_variant();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::CustomCallIndices>::GetOwningArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    variant_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.CallIndices.custom)
}
CallIndices::CallIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.CallIndices)
}
CallIndices::CallIndices(const CallIndices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_variant();
  switch (from.variant_case()) {
    case kCustom: {
      _internal_mutable_custom()->::TW::Polkadot::Proto::CustomCallIndices::MergeFrom(from._internal_custom());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.CallIndices)
}

inline void CallIndices::SharedCtor() {
clear_has_variant();
}

CallIndices::~CallIndices() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.CallIndices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CallIndices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_variant()) {
    clear_variant();
  }
}

void CallIndices::ArenaDtor(void* object) {
  CallIndices* _this = reinterpret_cast< CallIndices* >(object);
  (void)_this;
}
void CallIndices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallIndices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallIndices::clear_variant() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.CallIndices)
  switch (variant_case()) {
    case kCustom: {
      if (GetArenaForAllocation() == nullptr) {
        delete variant_.custom_;
      }
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VARIANT_NOT_SET;
}


void CallIndices::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.CallIndices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_variant();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallIndices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.CustomCallIndices custom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallIndices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.CallIndices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CustomCallIndices custom = 1;
  if (_internal_has_custom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::custom(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.CallIndices)
  return target;
}

size_t CallIndices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.CallIndices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (variant_case()) {
    // .TW.Polkadot.Proto.CustomCallIndices custom = 1;
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variant_.custom_);
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallIndices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CallIndices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallIndices::GetClassData() const { return &_class_data_; }

void CallIndices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CallIndices *>(to)->MergeFrom(
      static_cast<const CallIndices &>(from));
}


void CallIndices::MergeFrom(const CallIndices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.CallIndices)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.variant_case()) {
    case kCustom: {
      _internal_mutable_custom()->::TW::Polkadot::Proto::CustomCallIndices::MergeFrom(from._internal_custom());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallIndices::CopyFrom(const CallIndices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.CallIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallIndices::IsInitialized() const {
  return true;
}

void CallIndices::InternalSwap(CallIndices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(variant_, other->variant_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallIndices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[2]);
}

// ===================================================================

class Balance_Transfer::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Balance_Transfer* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Balance_Transfer::_Internal::call_indices(const Balance_Transfer* msg) {
  return *msg->call_indices_;
}
Balance_Transfer::Balance_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Balance.Transfer)
}
Balance_Transfer::Balance_Transfer(const Balance_Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Balance.Transfer)
}

inline void Balance_Transfer::SharedCtor() {
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
call_indices_ = nullptr;
}

Balance_Transfer::~Balance_Transfer() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Balance.Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Balance_Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Balance_Transfer::ArenaDtor(void* object) {
  Balance_Transfer* _this = reinterpret_cast< Balance_Transfer* >(object);
  (void)_this;
}
void Balance_Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance_Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balance_Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Balance.Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  value_.ClearToEmpty();
  memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance_Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Balance.Transfer.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Balance.Transfer.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Balance_Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Balance.Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_address = 1;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Balance.Transfer.to_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_address(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Balance.Transfer.memo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memo(), target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 4;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Balance.Transfer)
  return target;
}

size_t Balance_Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Balance.Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 1;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 4;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balance_Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balance_Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balance_Transfer::GetClassData() const { return &_class_data_; }

void Balance_Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Balance_Transfer *>(to)->MergeFrom(
      static_cast<const Balance_Transfer &>(from));
}


void Balance_Transfer::MergeFrom(const Balance_Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Balance.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balance_Transfer::CopyFrom(const Balance_Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Balance.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance_Transfer::IsInitialized() const {
  return true;
}

void Balance_Transfer::InternalSwap(Balance_Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance_Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[3]);
}

// ===================================================================

class Balance_BatchTransfer::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Balance_BatchTransfer* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Balance_BatchTransfer::_Internal::call_indices(const Balance_BatchTransfer* msg) {
  return *msg->call_indices_;
}
Balance_BatchTransfer::Balance_BatchTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transfers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Balance.BatchTransfer)
}
Balance_BatchTransfer::Balance_BatchTransfer(const Balance_BatchTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transfers_(from.transfers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Balance.BatchTransfer)
}

inline void Balance_BatchTransfer::SharedCtor() {
call_indices_ = nullptr;
}

Balance_BatchTransfer::~Balance_BatchTransfer() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Balance.BatchTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Balance_BatchTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete call_indices_;
}

void Balance_BatchTransfer::ArenaDtor(void* object) {
  Balance_BatchTransfer* _this = reinterpret_cast< Balance_BatchTransfer* >(object);
  (void)_this;
}
void Balance_BatchTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance_BatchTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balance_BatchTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Balance.BatchTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfers_.Clear();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance_BatchTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.CallIndices call_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Polkadot.Proto.Balance.Transfer transfers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Balance_BatchTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Balance.BatchTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call_indices(this), target, stream);
  }

  // repeated .TW.Polkadot.Proto.Balance.Transfer transfers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transfers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Balance.BatchTransfer)
  return target;
}

size_t Balance_BatchTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Balance.BatchTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Polkadot.Proto.Balance.Transfer transfers = 2;
  total_size += 1UL * this->_internal_transfers_size();
  for (const auto& msg : this->transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balance_BatchTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balance_BatchTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balance_BatchTransfer::GetClassData() const { return &_class_data_; }

void Balance_BatchTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Balance_BatchTransfer *>(to)->MergeFrom(
      static_cast<const Balance_BatchTransfer &>(from));
}


void Balance_BatchTransfer::MergeFrom(const Balance_BatchTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Balance.BatchTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transfers_.MergeFrom(from.transfers_);
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balance_BatchTransfer::CopyFrom(const Balance_BatchTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Balance.BatchTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance_BatchTransfer::IsInitialized() const {
  return true;
}

void Balance_BatchTransfer::InternalSwap(Balance_BatchTransfer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transfers_.InternalSwap(&other->transfers_);
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance_BatchTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[4]);
}

// ===================================================================

class Balance_AssetTransfer::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Balance_AssetTransfer* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Balance_AssetTransfer::_Internal::call_indices(const Balance_AssetTransfer* msg) {
  return *msg->call_indices_;
}
Balance_AssetTransfer::Balance_AssetTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Balance.AssetTransfer)
}
Balance_AssetTransfer::Balance_AssetTransfer(const Balance_AssetTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  ::memcpy(&asset_id_, &from.asset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_asset_id_) -
    reinterpret_cast<char*>(&asset_id_)) + sizeof(fee_asset_id_));
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Balance.AssetTransfer)
}

inline void Balance_AssetTransfer::SharedCtor() {
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_indices_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fee_asset_id_) -
    reinterpret_cast<char*>(&call_indices_)) + sizeof(fee_asset_id_));
}

Balance_AssetTransfer::~Balance_AssetTransfer() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Balance.AssetTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Balance_AssetTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Balance_AssetTransfer::ArenaDtor(void* object) {
  Balance_AssetTransfer* _this = reinterpret_cast< Balance_AssetTransfer* >(object);
  (void)_this;
}
void Balance_AssetTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance_AssetTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balance_AssetTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Balance.AssetTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_address_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  ::memset(&asset_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_asset_id_) -
      reinterpret_cast<char*>(&asset_id_)) + sizeof(fee_asset_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance_AssetTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.CallIndices call_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Balance.AssetTransfer.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 asset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fee_asset_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          fee_asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Balance_AssetTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Balance.AssetTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call_indices(this), target, stream);
  }

  // string to_address = 2;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Balance.AssetTransfer.to_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_address(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // uint32 asset_id = 4;
  if (this->_internal_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_asset_id(), target);
  }

  // uint32 fee_asset_id = 5;
  if (this->_internal_fee_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_fee_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Balance.AssetTransfer)
  return target;
}

size_t Balance_AssetTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Balance.AssetTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_address = 2;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  // uint32 asset_id = 4;
  if (this->_internal_asset_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_asset_id());
  }

  // uint32 fee_asset_id = 5;
  if (this->_internal_fee_asset_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fee_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balance_AssetTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balance_AssetTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balance_AssetTransfer::GetClassData() const { return &_class_data_; }

void Balance_AssetTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Balance_AssetTransfer *>(to)->MergeFrom(
      static_cast<const Balance_AssetTransfer &>(from));
}


void Balance_AssetTransfer::MergeFrom(const Balance_AssetTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Balance.AssetTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  if (from._internal_asset_id() != 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from._internal_fee_asset_id() != 0) {
    _internal_set_fee_asset_id(from._internal_fee_asset_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balance_AssetTransfer::CopyFrom(const Balance_AssetTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Balance.AssetTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance_AssetTransfer::IsInitialized() const {
  return true;
}

void Balance_AssetTransfer::InternalSwap(Balance_AssetTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Balance_AssetTransfer, fee_asset_id_)
      + sizeof(Balance_AssetTransfer::fee_asset_id_)
      - PROTOBUF_FIELD_OFFSET(Balance_AssetTransfer, call_indices_)>(
          reinterpret_cast<char*>(&call_indices_),
          reinterpret_cast<char*>(&other->call_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance_AssetTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[5]);
}

// ===================================================================

class Balance_BatchAssetTransfer::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Balance_BatchAssetTransfer* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Balance_BatchAssetTransfer::_Internal::call_indices(const Balance_BatchAssetTransfer* msg) {
  return *msg->call_indices_;
}
Balance_BatchAssetTransfer::Balance_BatchAssetTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transfers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
}
Balance_BatchAssetTransfer::Balance_BatchAssetTransfer(const Balance_BatchAssetTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transfers_(from.transfers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  fee_asset_id_ = from.fee_asset_id_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
}

inline void Balance_BatchAssetTransfer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_indices_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fee_asset_id_) -
    reinterpret_cast<char*>(&call_indices_)) + sizeof(fee_asset_id_));
}

Balance_BatchAssetTransfer::~Balance_BatchAssetTransfer() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Balance_BatchAssetTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete call_indices_;
}

void Balance_BatchAssetTransfer::ArenaDtor(void* object) {
  Balance_BatchAssetTransfer* _this = reinterpret_cast< Balance_BatchAssetTransfer* >(object);
  (void)_this;
}
void Balance_BatchAssetTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance_BatchAssetTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balance_BatchAssetTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfers_.Clear();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  fee_asset_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance_BatchAssetTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.CallIndices call_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fee_asset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fee_asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Polkadot.Proto.Balance.AssetTransfer transfers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Balance_BatchAssetTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call_indices(this), target, stream);
  }

  // uint32 fee_asset_id = 2;
  if (this->_internal_fee_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fee_asset_id(), target);
  }

  // repeated .TW.Polkadot.Proto.Balance.AssetTransfer transfers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_transfers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
  return target;
}

size_t Balance_BatchAssetTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Polkadot.Proto.Balance.AssetTransfer transfers = 3;
  total_size += 1UL * this->_internal_transfers_size();
  for (const auto& msg : this->transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  // uint32 fee_asset_id = 2;
  if (this->_internal_fee_asset_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fee_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balance_BatchAssetTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balance_BatchAssetTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balance_BatchAssetTransfer::GetClassData() const { return &_class_data_; }

void Balance_BatchAssetTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Balance_BatchAssetTransfer *>(to)->MergeFrom(
      static_cast<const Balance_BatchAssetTransfer &>(from));
}


void Balance_BatchAssetTransfer::MergeFrom(const Balance_BatchAssetTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transfers_.MergeFrom(from.transfers_);
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  if (from._internal_fee_asset_id() != 0) {
    _internal_set_fee_asset_id(from._internal_fee_asset_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balance_BatchAssetTransfer::CopyFrom(const Balance_BatchAssetTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Balance.BatchAssetTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance_BatchAssetTransfer::IsInitialized() const {
  return true;
}

void Balance_BatchAssetTransfer::InternalSwap(Balance_BatchAssetTransfer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transfers_.InternalSwap(&other->transfers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Balance_BatchAssetTransfer, fee_asset_id_)
      + sizeof(Balance_BatchAssetTransfer::fee_asset_id_)
      - PROTOBUF_FIELD_OFFSET(Balance_BatchAssetTransfer, call_indices_)>(
          reinterpret_cast<char*>(&call_indices_),
          reinterpret_cast<char*>(&other->call_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance_BatchAssetTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[6]);
}

// ===================================================================

class Balance::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Balance_Transfer& transfer(const Balance* msg);
  static const ::TW::Polkadot::Proto::Balance_BatchTransfer& batchtransfer(const Balance* msg);
  static const ::TW::Polkadot::Proto::Balance_AssetTransfer& asset_transfer(const Balance* msg);
  static const ::TW::Polkadot::Proto::Balance_BatchAssetTransfer& batch_asset_transfer(const Balance* msg);
};

const ::TW::Polkadot::Proto::Balance_Transfer&
Balance::_Internal::transfer(const Balance* msg) {
  return *msg->message_oneof_.transfer_;
}
const ::TW::Polkadot::Proto::Balance_BatchTransfer&
Balance::_Internal::batchtransfer(const Balance* msg) {
  return *msg->message_oneof_.batchtransfer_;
}
const ::TW::Polkadot::Proto::Balance_AssetTransfer&
Balance::_Internal::asset_transfer(const Balance* msg) {
  return *msg->message_oneof_.asset_transfer_;
}
const ::TW::Polkadot::Proto::Balance_BatchAssetTransfer&
Balance::_Internal::batch_asset_transfer(const Balance* msg) {
  return *msg->message_oneof_.batch_asset_transfer_;
}
void Balance::set_allocated_transfer(::TW::Polkadot::Proto::Balance_Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Balance_Transfer>::GetOwningArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    message_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.transfer)
}
void Balance::set_allocated_batchtransfer(::TW::Polkadot::Proto::Balance_BatchTransfer* batchtransfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (batchtransfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Balance_BatchTransfer>::GetOwningArena(batchtransfer);
    if (message_arena != submessage_arena) {
      batchtransfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batchtransfer, submessage_arena);
    }
    set_has_batchtransfer();
    message_oneof_.batchtransfer_ = batchtransfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.batchTransfer)
}
void Balance::set_allocated_asset_transfer(::TW::Polkadot::Proto::Balance_AssetTransfer* asset_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (asset_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Balance_AssetTransfer>::GetOwningArena(asset_transfer);
    if (message_arena != submessage_arena) {
      asset_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset_transfer, submessage_arena);
    }
    set_has_asset_transfer();
    message_oneof_.asset_transfer_ = asset_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.asset_transfer)
}
void Balance::set_allocated_batch_asset_transfer(::TW::Polkadot::Proto::Balance_BatchAssetTransfer* batch_asset_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (batch_asset_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Balance_BatchAssetTransfer>::GetOwningArena(batch_asset_transfer);
    if (message_arena != submessage_arena) {
      batch_asset_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_asset_transfer, submessage_arena);
    }
    set_has_batch_asset_transfer();
    message_oneof_.batch_asset_transfer_ = batch_asset_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Balance.batch_asset_transfer)
}
Balance::Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Balance)
}
Balance::Balance(const Balance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Polkadot::Proto::Balance_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kBatchTransfer: {
      _internal_mutable_batchtransfer()->::TW::Polkadot::Proto::Balance_BatchTransfer::MergeFrom(from._internal_batchtransfer());
      break;
    }
    case kAssetTransfer: {
      _internal_mutable_asset_transfer()->::TW::Polkadot::Proto::Balance_AssetTransfer::MergeFrom(from._internal_asset_transfer());
      break;
    }
    case kBatchAssetTransfer: {
      _internal_mutable_batch_asset_transfer()->::TW::Polkadot::Proto::Balance_BatchAssetTransfer::MergeFrom(from._internal_batch_asset_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Balance)
}

inline void Balance::SharedCtor() {
clear_has_message_oneof();
}

Balance::~Balance() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Balance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Balance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void Balance::ArenaDtor(void* object) {
  Balance* _this = reinterpret_cast< Balance* >(object);
  (void)_this;
}
void Balance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balance::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.Balance)
  switch (message_oneof_case()) {
    case kTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.transfer_;
      }
      break;
    }
    case kBatchTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.batchtransfer_;
      }
      break;
    }
    case kAssetTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.asset_transfer_;
      }
      break;
    }
    case kBatchAssetTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.batch_asset_transfer_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Balance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Balance.BatchTransfer batchTransfer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_batchtransfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Balance.AssetTransfer asset_transfer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Balance.BatchAssetTransfer batch_asset_transfer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_asset_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Balance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Balance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transfer(this), target, stream);
  }

  // .TW.Polkadot.Proto.Balance.BatchTransfer batchTransfer = 2;
  if (_internal_has_batchtransfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::batchtransfer(this), target, stream);
  }

  // .TW.Polkadot.Proto.Balance.AssetTransfer asset_transfer = 3;
  if (_internal_has_asset_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::asset_transfer(this), target, stream);
  }

  // .TW.Polkadot.Proto.Balance.BatchAssetTransfer batch_asset_transfer = 4;
  if (_internal_has_batch_asset_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::batch_asset_transfer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Balance)
  return target;
}

size_t Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Balance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Balance.Transfer transfer = 1;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.transfer_);
      break;
    }
    // .TW.Polkadot.Proto.Balance.BatchTransfer batchTransfer = 2;
    case kBatchTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.batchtransfer_);
      break;
    }
    // .TW.Polkadot.Proto.Balance.AssetTransfer asset_transfer = 3;
    case kAssetTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.asset_transfer_);
      break;
    }
    // .TW.Polkadot.Proto.Balance.BatchAssetTransfer batch_asset_transfer = 4;
    case kBatchAssetTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.batch_asset_transfer_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balance::GetClassData() const { return &_class_data_; }

void Balance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Balance *>(to)->MergeFrom(
      static_cast<const Balance &>(from));
}


void Balance::MergeFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Polkadot::Proto::Balance_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kBatchTransfer: {
      _internal_mutable_batchtransfer()->::TW::Polkadot::Proto::Balance_BatchTransfer::MergeFrom(from._internal_batchtransfer());
      break;
    }
    case kAssetTransfer: {
      _internal_mutable_asset_transfer()->::TW::Polkadot::Proto::Balance_AssetTransfer::MergeFrom(from._internal_asset_transfer());
      break;
    }
    case kBatchAssetTransfer: {
      _internal_mutable_batch_asset_transfer()->::TW::Polkadot::Proto::Balance_BatchAssetTransfer::MergeFrom(from._internal_batch_asset_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balance::CopyFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance::IsInitialized() const {
  return true;
}

void Balance::InternalSwap(Balance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[7]);
}

// ===================================================================

class Staking_Bond::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_Bond* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_Bond::_Internal::call_indices(const Staking_Bond* msg) {
  return *msg->call_indices_;
}
Staking_Bond::Staking_Bond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Bond)
}
Staking_Bond::Staking_Bond(const Staking_Bond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    controller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller().empty()) {
    controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  reward_destination_ = from.reward_destination_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Bond)
}

inline void Staking_Bond::SharedCtor() {
controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  controller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_indices_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_destination_) -
    reinterpret_cast<char*>(&call_indices_)) + sizeof(reward_destination_));
}

Staking_Bond::~Staking_Bond() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Bond)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_Bond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  controller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_Bond::ArenaDtor(void* object) {
  Staking_Bond* _this = reinterpret_cast< Staking_Bond* >(object);
  (void)_this;
}
void Staking_Bond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Bond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_Bond::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Bond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  reward_destination_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Bond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_controller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.Bond.controller"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reward_destination(static_cast<::TW::Polkadot::Proto::RewardDestination>(val));
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_Bond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Bond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string controller = 1;
  if (!this->_internal_controller().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controller().data(), static_cast<int>(this->_internal_controller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.Bond.controller");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_controller(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->_internal_reward_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reward_destination(), target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 4;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Bond)
  return target;
}

size_t Staking_Bond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Bond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string controller = 1;
  if (!this->_internal_controller().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controller());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 4;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->_internal_reward_destination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_destination());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_Bond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_Bond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_Bond::GetClassData() const { return &_class_data_; }

void Staking_Bond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_Bond *>(to)->MergeFrom(
      static_cast<const Staking_Bond &>(from));
}


void Staking_Bond::MergeFrom(const Staking_Bond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Bond)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_controller().empty()) {
    _internal_set_controller(from._internal_controller());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  if (from._internal_reward_destination() != 0) {
    _internal_set_reward_destination(from._internal_reward_destination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_Bond::CopyFrom(const Staking_Bond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Bond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Bond::IsInitialized() const {
  return true;
}

void Staking_Bond::InternalSwap(Staking_Bond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &controller_, lhs_arena,
      &other->controller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Staking_Bond, reward_destination_)
      + sizeof(Staking_Bond::reward_destination_)
      - PROTOBUF_FIELD_OFFSET(Staking_Bond, call_indices_)>(
          reinterpret_cast<char*>(&call_indices_),
          reinterpret_cast<char*>(&other->call_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Bond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[8]);
}

// ===================================================================

class Staking_BondAndNominate::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_BondAndNominate* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_BondAndNominate::_Internal::call_indices(const Staking_BondAndNominate* msg) {
  return *msg->call_indices_;
}
Staking_BondAndNominate::Staking_BondAndNominate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nominators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.BondAndNominate)
}
Staking_BondAndNominate::Staking_BondAndNominate(const Staking_BondAndNominate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nominators_(from.nominators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    controller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller().empty()) {
    controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  reward_destination_ = from.reward_destination_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.BondAndNominate)
}

inline void Staking_BondAndNominate::SharedCtor() {
controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  controller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_indices_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_destination_) -
    reinterpret_cast<char*>(&call_indices_)) + sizeof(reward_destination_));
}

Staking_BondAndNominate::~Staking_BondAndNominate() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.BondAndNominate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_BondAndNominate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  controller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_BondAndNominate::ArenaDtor(void* object) {
  Staking_BondAndNominate* _this = reinterpret_cast< Staking_BondAndNominate* >(object);
  (void)_this;
}
void Staking_BondAndNominate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_BondAndNominate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_BondAndNominate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nominators_.Clear();
  controller_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  reward_destination_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_BondAndNominate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_controller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.BondAndNominate.controller"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reward_destination(static_cast<::TW::Polkadot::Proto::RewardDestination>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string nominators = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nominators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.BondAndNominate.nominators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_BondAndNominate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string controller = 1;
  if (!this->_internal_controller().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controller().data(), static_cast<int>(this->_internal_controller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.BondAndNominate.controller");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_controller(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->_internal_reward_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reward_destination(), target);
  }

  // repeated string nominators = 4;
  for (int i = 0, n = this->_internal_nominators_size(); i < n; i++) {
    const auto& s = this->_internal_nominators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.BondAndNominate.nominators");
    target = stream->WriteString(4, s, target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 5;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.BondAndNominate)
  return target;
}

size_t Staking_BondAndNominate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nominators = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nominators_.size());
  for (int i = 0, n = nominators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nominators_.Get(i));
  }

  // string controller = 1;
  if (!this->_internal_controller().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controller());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 5;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  // .TW.Polkadot.Proto.RewardDestination reward_destination = 3;
  if (this->_internal_reward_destination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_destination());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_BondAndNominate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_BondAndNominate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_BondAndNominate::GetClassData() const { return &_class_data_; }

void Staking_BondAndNominate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_BondAndNominate *>(to)->MergeFrom(
      static_cast<const Staking_BondAndNominate &>(from));
}


void Staking_BondAndNominate::MergeFrom(const Staking_BondAndNominate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nominators_.MergeFrom(from.nominators_);
  if (!from._internal_controller().empty()) {
    _internal_set_controller(from._internal_controller());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  if (from._internal_reward_destination() != 0) {
    _internal_set_reward_destination(from._internal_reward_destination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_BondAndNominate::CopyFrom(const Staking_BondAndNominate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.BondAndNominate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_BondAndNominate::IsInitialized() const {
  return true;
}

void Staking_BondAndNominate::InternalSwap(Staking_BondAndNominate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nominators_.InternalSwap(&other->nominators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &controller_, lhs_arena,
      &other->controller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Staking_BondAndNominate, reward_destination_)
      + sizeof(Staking_BondAndNominate::reward_destination_)
      - PROTOBUF_FIELD_OFFSET(Staking_BondAndNominate, call_indices_)>(
          reinterpret_cast<char*>(&call_indices_),
          reinterpret_cast<char*>(&other->call_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_BondAndNominate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[9]);
}

// ===================================================================

class Staking_BondExtra::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_BondExtra* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_BondExtra::_Internal::call_indices(const Staking_BondExtra* msg) {
  return *msg->call_indices_;
}
Staking_BondExtra::Staking_BondExtra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.BondExtra)
}
Staking_BondExtra::Staking_BondExtra(const Staking_BondExtra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.BondExtra)
}

inline void Staking_BondExtra::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
call_indices_ = nullptr;
}

Staking_BondExtra::~Staking_BondExtra() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.BondExtra)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_BondExtra::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_BondExtra::ArenaDtor(void* object) {
  Staking_BondExtra* _this = reinterpret_cast< Staking_BondExtra* >(object);
  (void)_this;
}
void Staking_BondExtra::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_BondExtra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_BondExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.BondExtra)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_BondExtra::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_BondExtra::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.BondExtra)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.BondExtra)
  return target;
}

size_t Staking_BondExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.BondExtra)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_BondExtra::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_BondExtra::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_BondExtra::GetClassData() const { return &_class_data_; }

void Staking_BondExtra::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_BondExtra *>(to)->MergeFrom(
      static_cast<const Staking_BondExtra &>(from));
}


void Staking_BondExtra::MergeFrom(const Staking_BondExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.BondExtra)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_BondExtra::CopyFrom(const Staking_BondExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.BondExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_BondExtra::IsInitialized() const {
  return true;
}

void Staking_BondExtra::InternalSwap(Staking_BondExtra* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_BondExtra::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[10]);
}

// ===================================================================

class Staking_Unbond::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_Unbond* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_Unbond::_Internal::call_indices(const Staking_Unbond* msg) {
  return *msg->call_indices_;
}
Staking_Unbond::Staking_Unbond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Unbond)
}
Staking_Unbond::Staking_Unbond(const Staking_Unbond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Unbond)
}

inline void Staking_Unbond::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
call_indices_ = nullptr;
}

Staking_Unbond::~Staking_Unbond() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Unbond)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_Unbond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_Unbond::ArenaDtor(void* object) {
  Staking_Unbond* _this = reinterpret_cast< Staking_Unbond* >(object);
  (void)_this;
}
void Staking_Unbond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Unbond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_Unbond::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Unbond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Unbond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_Unbond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Unbond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Unbond)
  return target;
}

size_t Staking_Unbond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Unbond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_Unbond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_Unbond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_Unbond::GetClassData() const { return &_class_data_; }

void Staking_Unbond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_Unbond *>(to)->MergeFrom(
      static_cast<const Staking_Unbond &>(from));
}


void Staking_Unbond::MergeFrom(const Staking_Unbond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Unbond)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_Unbond::CopyFrom(const Staking_Unbond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Unbond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Unbond::IsInitialized() const {
  return true;
}

void Staking_Unbond::InternalSwap(Staking_Unbond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Unbond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[11]);
}

// ===================================================================

class Staking_Rebond::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_Rebond* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_Rebond::_Internal::call_indices(const Staking_Rebond* msg) {
  return *msg->call_indices_;
}
Staking_Rebond::Staking_Rebond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Rebond)
}
Staking_Rebond::Staking_Rebond(const Staking_Rebond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Rebond)
}

inline void Staking_Rebond::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
call_indices_ = nullptr;
}

Staking_Rebond::~Staking_Rebond() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Rebond)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_Rebond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_Rebond::ArenaDtor(void* object) {
  Staking_Rebond* _this = reinterpret_cast< Staking_Rebond* >(object);
  (void)_this;
}
void Staking_Rebond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Rebond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_Rebond::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Rebond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Rebond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_Rebond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Rebond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Rebond)
  return target;
}

size_t Staking_Rebond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Rebond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_Rebond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_Rebond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_Rebond::GetClassData() const { return &_class_data_; }

void Staking_Rebond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_Rebond *>(to)->MergeFrom(
      static_cast<const Staking_Rebond &>(from));
}


void Staking_Rebond::MergeFrom(const Staking_Rebond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Rebond)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_Rebond::CopyFrom(const Staking_Rebond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Rebond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Rebond::IsInitialized() const {
  return true;
}

void Staking_Rebond::InternalSwap(Staking_Rebond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Rebond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[12]);
}

// ===================================================================

class Staking_WithdrawUnbonded::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_WithdrawUnbonded* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_WithdrawUnbonded::_Internal::call_indices(const Staking_WithdrawUnbonded* msg) {
  return *msg->call_indices_;
}
Staking_WithdrawUnbonded::Staking_WithdrawUnbonded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
}
Staking_WithdrawUnbonded::Staking_WithdrawUnbonded(const Staking_WithdrawUnbonded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  slashing_spans_ = from.slashing_spans_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
}

inline void Staking_WithdrawUnbonded::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_indices_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slashing_spans_) -
    reinterpret_cast<char*>(&call_indices_)) + sizeof(slashing_spans_));
}

Staking_WithdrawUnbonded::~Staking_WithdrawUnbonded() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_WithdrawUnbonded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_WithdrawUnbonded::ArenaDtor(void* object) {
  Staking_WithdrawUnbonded* _this = reinterpret_cast< Staking_WithdrawUnbonded* >(object);
  (void)_this;
}
void Staking_WithdrawUnbonded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_WithdrawUnbonded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_WithdrawUnbonded::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  slashing_spans_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_WithdrawUnbonded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 slashing_spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          slashing_spans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_WithdrawUnbonded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slashing_spans = 1;
  if (this->_internal_slashing_spans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slashing_spans(), target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  return target;
}

size_t Staking_WithdrawUnbonded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  // int32 slashing_spans = 1;
  if (this->_internal_slashing_spans() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slashing_spans());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_WithdrawUnbonded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_WithdrawUnbonded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_WithdrawUnbonded::GetClassData() const { return &_class_data_; }

void Staking_WithdrawUnbonded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_WithdrawUnbonded *>(to)->MergeFrom(
      static_cast<const Staking_WithdrawUnbonded &>(from));
}


void Staking_WithdrawUnbonded::MergeFrom(const Staking_WithdrawUnbonded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  if (from._internal_slashing_spans() != 0) {
    _internal_set_slashing_spans(from._internal_slashing_spans());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_WithdrawUnbonded::CopyFrom(const Staking_WithdrawUnbonded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.WithdrawUnbonded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_WithdrawUnbonded::IsInitialized() const {
  return true;
}

void Staking_WithdrawUnbonded::InternalSwap(Staking_WithdrawUnbonded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Staking_WithdrawUnbonded, slashing_spans_)
      + sizeof(Staking_WithdrawUnbonded::slashing_spans_)
      - PROTOBUF_FIELD_OFFSET(Staking_WithdrawUnbonded, call_indices_)>(
          reinterpret_cast<char*>(&call_indices_),
          reinterpret_cast<char*>(&other->call_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_WithdrawUnbonded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[13]);
}

// ===================================================================

class Staking_Nominate::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_Nominate* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_Nominate::_Internal::call_indices(const Staking_Nominate* msg) {
  return *msg->call_indices_;
}
Staking_Nominate::Staking_Nominate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nominators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Nominate)
}
Staking_Nominate::Staking_Nominate(const Staking_Nominate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nominators_(from.nominators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Nominate)
}

inline void Staking_Nominate::SharedCtor() {
call_indices_ = nullptr;
}

Staking_Nominate::~Staking_Nominate() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Nominate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_Nominate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_Nominate::ArenaDtor(void* object) {
  Staking_Nominate* _this = reinterpret_cast< Staking_Nominate* >(object);
  (void)_this;
}
void Staking_Nominate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Nominate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_Nominate::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Nominate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nominators_.Clear();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Nominate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string nominators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nominators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Staking.Nominate.nominators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_Nominate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Nominate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string nominators = 1;
  for (int i = 0, n = this->_internal_nominators_size(); i < n; i++) {
    const auto& s = this->_internal_nominators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Staking.Nominate.nominators");
    target = stream->WriteString(1, s, target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Nominate)
  return target;
}

size_t Staking_Nominate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Nominate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nominators = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nominators_.size());
  for (int i = 0, n = nominators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nominators_.Get(i));
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_Nominate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_Nominate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_Nominate::GetClassData() const { return &_class_data_; }

void Staking_Nominate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_Nominate *>(to)->MergeFrom(
      static_cast<const Staking_Nominate &>(from));
}


void Staking_Nominate::MergeFrom(const Staking_Nominate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Nominate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nominators_.MergeFrom(from.nominators_);
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_Nominate::CopyFrom(const Staking_Nominate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Nominate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Nominate::IsInitialized() const {
  return true;
}

void Staking_Nominate::InternalSwap(Staking_Nominate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nominators_.InternalSwap(&other->nominators_);
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Nominate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[14]);
}

// ===================================================================

class Staking_ChillAndUnbond::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_ChillAndUnbond* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_ChillAndUnbond::_Internal::call_indices(const Staking_ChillAndUnbond* msg) {
  return *msg->call_indices_;
}
Staking_ChillAndUnbond::Staking_ChillAndUnbond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.ChillAndUnbond)
}
Staking_ChillAndUnbond::Staking_ChillAndUnbond(const Staking_ChillAndUnbond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.ChillAndUnbond)
}

inline void Staking_ChillAndUnbond::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
call_indices_ = nullptr;
}

Staking_ChillAndUnbond::~Staking_ChillAndUnbond() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.ChillAndUnbond)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_ChillAndUnbond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_ChillAndUnbond::ArenaDtor(void* object) {
  Staking_ChillAndUnbond* _this = reinterpret_cast< Staking_ChillAndUnbond* >(object);
  (void)_this;
}
void Staking_ChillAndUnbond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_ChillAndUnbond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_ChillAndUnbond::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.ChillAndUnbond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_ChillAndUnbond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.CallIndices call_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_ChillAndUnbond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.ChillAndUnbond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.ChillAndUnbond)
  return target;
}

size_t Staking_ChillAndUnbond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.ChillAndUnbond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 2;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_ChillAndUnbond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_ChillAndUnbond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_ChillAndUnbond::GetClassData() const { return &_class_data_; }

void Staking_ChillAndUnbond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_ChillAndUnbond *>(to)->MergeFrom(
      static_cast<const Staking_ChillAndUnbond &>(from));
}


void Staking_ChillAndUnbond::MergeFrom(const Staking_ChillAndUnbond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.ChillAndUnbond)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_ChillAndUnbond::CopyFrom(const Staking_ChillAndUnbond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.ChillAndUnbond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_ChillAndUnbond::IsInitialized() const {
  return true;
}

void Staking_ChillAndUnbond::InternalSwap(Staking_ChillAndUnbond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_ChillAndUnbond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[15]);
}

// ===================================================================

class Staking_Chill::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Staking_Chill* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Staking_Chill::_Internal::call_indices(const Staking_Chill* msg) {
  return *msg->call_indices_;
}
Staking_Chill::Staking_Chill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking.Chill)
}
Staking_Chill::Staking_Chill(const Staking_Chill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking.Chill)
}

inline void Staking_Chill::SharedCtor() {
call_indices_ = nullptr;
}

Staking_Chill::~Staking_Chill() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking.Chill)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking_Chill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete call_indices_;
}

void Staking_Chill::ArenaDtor(void* object) {
  Staking_Chill* _this = reinterpret_cast< Staking_Chill* >(object);
  (void)_this;
}
void Staking_Chill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking_Chill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking_Chill::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking.Chill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking_Chill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.CallIndices call_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking_Chill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking.Chill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call_indices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking.Chill)
  return target;
}

size_t Staking_Chill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking.Chill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking_Chill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking_Chill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking_Chill::GetClassData() const { return &_class_data_; }

void Staking_Chill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking_Chill *>(to)->MergeFrom(
      static_cast<const Staking_Chill &>(from));
}


void Staking_Chill::MergeFrom(const Staking_Chill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking.Chill)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking_Chill::CopyFrom(const Staking_Chill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking.Chill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking_Chill::IsInitialized() const {
  return true;
}

void Staking_Chill::InternalSwap(Staking_Chill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(call_indices_, other->call_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking_Chill::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[16]);
}

// ===================================================================

class Staking::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Staking_Bond& bond(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_BondAndNominate& bond_and_nominate(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_BondExtra& bond_extra(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_Unbond& unbond(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded& withdraw_unbonded(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_Nominate& nominate(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_Chill& chill(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_ChillAndUnbond& chill_and_unbond(const Staking* msg);
  static const ::TW::Polkadot::Proto::Staking_Rebond& rebond(const Staking* msg);
};

const ::TW::Polkadot::Proto::Staking_Bond&
Staking::_Internal::bond(const Staking* msg) {
  return *msg->message_oneof_.bond_;
}
const ::TW::Polkadot::Proto::Staking_BondAndNominate&
Staking::_Internal::bond_and_nominate(const Staking* msg) {
  return *msg->message_oneof_.bond_and_nominate_;
}
const ::TW::Polkadot::Proto::Staking_BondExtra&
Staking::_Internal::bond_extra(const Staking* msg) {
  return *msg->message_oneof_.bond_extra_;
}
const ::TW::Polkadot::Proto::Staking_Unbond&
Staking::_Internal::unbond(const Staking* msg) {
  return *msg->message_oneof_.unbond_;
}
const ::TW::Polkadot::Proto::Staking_WithdrawUnbonded&
Staking::_Internal::withdraw_unbonded(const Staking* msg) {
  return *msg->message_oneof_.withdraw_unbonded_;
}
const ::TW::Polkadot::Proto::Staking_Nominate&
Staking::_Internal::nominate(const Staking* msg) {
  return *msg->message_oneof_.nominate_;
}
const ::TW::Polkadot::Proto::Staking_Chill&
Staking::_Internal::chill(const Staking* msg) {
  return *msg->message_oneof_.chill_;
}
const ::TW::Polkadot::Proto::Staking_ChillAndUnbond&
Staking::_Internal::chill_and_unbond(const Staking* msg) {
  return *msg->message_oneof_.chill_and_unbond_;
}
const ::TW::Polkadot::Proto::Staking_Rebond&
Staking::_Internal::rebond(const Staking* msg) {
  return *msg->message_oneof_.rebond_;
}
void Staking::set_allocated_bond(::TW::Polkadot::Proto::Staking_Bond* bond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (bond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_Bond>::GetOwningArena(bond);
    if (message_arena != submessage_arena) {
      bond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bond, submessage_arena);
    }
    set_has_bond();
    message_oneof_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.bond)
}
void Staking::set_allocated_bond_and_nominate(::TW::Polkadot::Proto::Staking_BondAndNominate* bond_and_nominate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (bond_and_nominate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_BondAndNominate>::GetOwningArena(bond_and_nominate);
    if (message_arena != submessage_arena) {
      bond_and_nominate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bond_and_nominate, submessage_arena);
    }
    set_has_bond_and_nominate();
    message_oneof_.bond_and_nominate_ = bond_and_nominate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.bond_and_nominate)
}
void Staking::set_allocated_bond_extra(::TW::Polkadot::Proto::Staking_BondExtra* bond_extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (bond_extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_BondExtra>::GetOwningArena(bond_extra);
    if (message_arena != submessage_arena) {
      bond_extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bond_extra, submessage_arena);
    }
    set_has_bond_extra();
    message_oneof_.bond_extra_ = bond_extra;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.bond_extra)
}
void Staking::set_allocated_unbond(::TW::Polkadot::Proto::Staking_Unbond* unbond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (unbond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_Unbond>::GetOwningArena(unbond);
    if (message_arena != submessage_arena) {
      unbond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbond, submessage_arena);
    }
    set_has_unbond();
    message_oneof_.unbond_ = unbond;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.unbond)
}
void Staking::set_allocated_withdraw_unbonded(::TW::Polkadot::Proto::Staking_WithdrawUnbonded* withdraw_unbonded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (withdraw_unbonded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_WithdrawUnbonded>::GetOwningArena(withdraw_unbonded);
    if (message_arena != submessage_arena) {
      withdraw_unbonded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_unbonded, submessage_arena);
    }
    set_has_withdraw_unbonded();
    message_oneof_.withdraw_unbonded_ = withdraw_unbonded;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.withdraw_unbonded)
}
void Staking::set_allocated_nominate(::TW::Polkadot::Proto::Staking_Nominate* nominate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (nominate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_Nominate>::GetOwningArena(nominate);
    if (message_arena != submessage_arena) {
      nominate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nominate, submessage_arena);
    }
    set_has_nominate();
    message_oneof_.nominate_ = nominate;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.nominate)
}
void Staking::set_allocated_chill(::TW::Polkadot::Proto::Staking_Chill* chill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (chill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_Chill>::GetOwningArena(chill);
    if (message_arena != submessage_arena) {
      chill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chill, submessage_arena);
    }
    set_has_chill();
    message_oneof_.chill_ = chill;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.chill)
}
void Staking::set_allocated_chill_and_unbond(::TW::Polkadot::Proto::Staking_ChillAndUnbond* chill_and_unbond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (chill_and_unbond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_ChillAndUnbond>::GetOwningArena(chill_and_unbond);
    if (message_arena != submessage_arena) {
      chill_and_unbond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chill_and_unbond, submessage_arena);
    }
    set_has_chill_and_unbond();
    message_oneof_.chill_and_unbond_ = chill_and_unbond;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.chill_and_unbond)
}
void Staking::set_allocated_rebond(::TW::Polkadot::Proto::Staking_Rebond* rebond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (rebond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking_Rebond>::GetOwningArena(rebond);
    if (message_arena != submessage_arena) {
      rebond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rebond, submessage_arena);
    }
    set_has_rebond();
    message_oneof_.rebond_ = rebond;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Staking.rebond)
}
Staking::Staking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Staking)
}
Staking::Staking(const Staking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kBond: {
      _internal_mutable_bond()->::TW::Polkadot::Proto::Staking_Bond::MergeFrom(from._internal_bond());
      break;
    }
    case kBondAndNominate: {
      _internal_mutable_bond_and_nominate()->::TW::Polkadot::Proto::Staking_BondAndNominate::MergeFrom(from._internal_bond_and_nominate());
      break;
    }
    case kBondExtra: {
      _internal_mutable_bond_extra()->::TW::Polkadot::Proto::Staking_BondExtra::MergeFrom(from._internal_bond_extra());
      break;
    }
    case kUnbond: {
      _internal_mutable_unbond()->::TW::Polkadot::Proto::Staking_Unbond::MergeFrom(from._internal_unbond());
      break;
    }
    case kWithdrawUnbonded: {
      _internal_mutable_withdraw_unbonded()->::TW::Polkadot::Proto::Staking_WithdrawUnbonded::MergeFrom(from._internal_withdraw_unbonded());
      break;
    }
    case kNominate: {
      _internal_mutable_nominate()->::TW::Polkadot::Proto::Staking_Nominate::MergeFrom(from._internal_nominate());
      break;
    }
    case kChill: {
      _internal_mutable_chill()->::TW::Polkadot::Proto::Staking_Chill::MergeFrom(from._internal_chill());
      break;
    }
    case kChillAndUnbond: {
      _internal_mutable_chill_and_unbond()->::TW::Polkadot::Proto::Staking_ChillAndUnbond::MergeFrom(from._internal_chill_and_unbond());
      break;
    }
    case kRebond: {
      _internal_mutable_rebond()->::TW::Polkadot::Proto::Staking_Rebond::MergeFrom(from._internal_rebond());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Staking)
}

inline void Staking::SharedCtor() {
clear_has_message_oneof();
}

Staking::~Staking() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Staking)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Staking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void Staking::ArenaDtor(void* object) {
  Staking* _this = reinterpret_cast< Staking* >(object);
  (void)_this;
}
void Staking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Staking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Staking::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.Staking)
  switch (message_oneof_case()) {
    case kBond: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.bond_;
      }
      break;
    }
    case kBondAndNominate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.bond_and_nominate_;
      }
      break;
    }
    case kBondExtra: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.bond_extra_;
      }
      break;
    }
    case kUnbond: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.unbond_;
      }
      break;
    }
    case kWithdrawUnbonded: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.withdraw_unbonded_;
      }
      break;
    }
    case kNominate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.nominate_;
      }
      break;
    }
    case kChill: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.chill_;
      }
      break;
    }
    case kChillAndUnbond: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.chill_and_unbond_;
      }
      break;
    }
    case kRebond: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.rebond_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void Staking::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Staking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Staking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.Staking.Bond bond = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bond_and_nominate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bond_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_unbonded(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nominate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.Chill chill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.ChillAndUnbond chill_and_unbond = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chill_and_unbond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking.Rebond rebond = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rebond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Staking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Staking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Staking.Bond bond = 1;
  if (_internal_has_bond()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bond(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
  if (_internal_has_bond_and_nominate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bond_and_nominate(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
  if (_internal_has_bond_extra()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bond_extra(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
  if (_internal_has_unbond()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::unbond(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
  if (_internal_has_withdraw_unbonded()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::withdraw_unbonded(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
  if (_internal_has_nominate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::nominate(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.Chill chill = 7;
  if (_internal_has_chill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::chill(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.ChillAndUnbond chill_and_unbond = 8;
  if (_internal_has_chill_and_unbond()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::chill_and_unbond(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking.Rebond rebond = 9;
  if (_internal_has_rebond()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::rebond(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Staking)
  return target;
}

size_t Staking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Staking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Staking.Bond bond = 1;
    case kBond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.bond_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.BondAndNominate bond_and_nominate = 2;
    case kBondAndNominate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.bond_and_nominate_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.BondExtra bond_extra = 3;
    case kBondExtra: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.bond_extra_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.Unbond unbond = 4;
    case kUnbond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.unbond_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.WithdrawUnbonded withdraw_unbonded = 5;
    case kWithdrawUnbonded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.withdraw_unbonded_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.Nominate nominate = 6;
    case kNominate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.nominate_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.Chill chill = 7;
    case kChill: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.chill_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.ChillAndUnbond chill_and_unbond = 8;
    case kChillAndUnbond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.chill_and_unbond_);
      break;
    }
    // .TW.Polkadot.Proto.Staking.Rebond rebond = 9;
    case kRebond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.rebond_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Staking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Staking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Staking::GetClassData() const { return &_class_data_; }

void Staking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Staking *>(to)->MergeFrom(
      static_cast<const Staking &>(from));
}


void Staking::MergeFrom(const Staking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Staking)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_oneof_case()) {
    case kBond: {
      _internal_mutable_bond()->::TW::Polkadot::Proto::Staking_Bond::MergeFrom(from._internal_bond());
      break;
    }
    case kBondAndNominate: {
      _internal_mutable_bond_and_nominate()->::TW::Polkadot::Proto::Staking_BondAndNominate::MergeFrom(from._internal_bond_and_nominate());
      break;
    }
    case kBondExtra: {
      _internal_mutable_bond_extra()->::TW::Polkadot::Proto::Staking_BondExtra::MergeFrom(from._internal_bond_extra());
      break;
    }
    case kUnbond: {
      _internal_mutable_unbond()->::TW::Polkadot::Proto::Staking_Unbond::MergeFrom(from._internal_unbond());
      break;
    }
    case kWithdrawUnbonded: {
      _internal_mutable_withdraw_unbonded()->::TW::Polkadot::Proto::Staking_WithdrawUnbonded::MergeFrom(from._internal_withdraw_unbonded());
      break;
    }
    case kNominate: {
      _internal_mutable_nominate()->::TW::Polkadot::Proto::Staking_Nominate::MergeFrom(from._internal_nominate());
      break;
    }
    case kChill: {
      _internal_mutable_chill()->::TW::Polkadot::Proto::Staking_Chill::MergeFrom(from._internal_chill());
      break;
    }
    case kChillAndUnbond: {
      _internal_mutable_chill_and_unbond()->::TW::Polkadot::Proto::Staking_ChillAndUnbond::MergeFrom(from._internal_chill_and_unbond());
      break;
    }
    case kRebond: {
      _internal_mutable_rebond()->::TW::Polkadot::Proto::Staking_Rebond::MergeFrom(from._internal_rebond());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Staking::CopyFrom(const Staking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Staking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staking::IsInitialized() const {
  return true;
}

void Staking::InternalSwap(Staking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Staking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[17]);
}

// ===================================================================

class Identity_JoinIdentityAsKey::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Identity_JoinIdentityAsKey* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Identity_JoinIdentityAsKey::_Internal::call_indices(const Identity_JoinIdentityAsKey* msg) {
  return *msg->call_indices_;
}
Identity_JoinIdentityAsKey::Identity_JoinIdentityAsKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
}
Identity_JoinIdentityAsKey::Identity_JoinIdentityAsKey(const Identity_JoinIdentityAsKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  auth_id_ = from.auth_id_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
}

inline void Identity_JoinIdentityAsKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_indices_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_id_) -
    reinterpret_cast<char*>(&call_indices_)) + sizeof(auth_id_));
}

Identity_JoinIdentityAsKey::~Identity_JoinIdentityAsKey() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identity_JoinIdentityAsKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete call_indices_;
}

void Identity_JoinIdentityAsKey::ArenaDtor(void* object) {
  Identity_JoinIdentityAsKey* _this = reinterpret_cast< Identity_JoinIdentityAsKey* >(object);
  (void)_this;
}
void Identity_JoinIdentityAsKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identity_JoinIdentityAsKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identity_JoinIdentityAsKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  auth_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identity_JoinIdentityAsKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.CallIndices call_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 auth_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          auth_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Identity_JoinIdentityAsKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call_indices(this), target, stream);
  }

  // uint64 auth_id = 2;
  if (this->_internal_auth_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_auth_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
  return target;
}

size_t Identity_JoinIdentityAsKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  // uint64 auth_id = 2;
  if (this->_internal_auth_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_auth_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Identity_JoinIdentityAsKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Identity_JoinIdentityAsKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Identity_JoinIdentityAsKey::GetClassData() const { return &_class_data_; }

void Identity_JoinIdentityAsKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Identity_JoinIdentityAsKey *>(to)->MergeFrom(
      static_cast<const Identity_JoinIdentityAsKey &>(from));
}


void Identity_JoinIdentityAsKey::MergeFrom(const Identity_JoinIdentityAsKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  if (from._internal_auth_id() != 0) {
    _internal_set_auth_id(from._internal_auth_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Identity_JoinIdentityAsKey::CopyFrom(const Identity_JoinIdentityAsKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Identity.JoinIdentityAsKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity_JoinIdentityAsKey::IsInitialized() const {
  return true;
}

void Identity_JoinIdentityAsKey::InternalSwap(Identity_JoinIdentityAsKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Identity_JoinIdentityAsKey, auth_id_)
      + sizeof(Identity_JoinIdentityAsKey::auth_id_)
      - PROTOBUF_FIELD_OFFSET(Identity_JoinIdentityAsKey, call_indices_)>(
          reinterpret_cast<char*>(&call_indices_),
          reinterpret_cast<char*>(&other->call_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity_JoinIdentityAsKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[18]);
}

// ===================================================================

class Identity_AddAuthorization_Data::_Internal {
 public:
};

Identity_AddAuthorization_Data::Identity_AddAuthorization_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
}
Identity_AddAuthorization_Data::Identity_AddAuthorization_Data(const Identity_AddAuthorization_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
}

inline void Identity_AddAuthorization_Data::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Identity_AddAuthorization_Data::~Identity_AddAuthorization_Data() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identity_AddAuthorization_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Identity_AddAuthorization_Data::ArenaDtor(void* object) {
  Identity_AddAuthorization_Data* _this = reinterpret_cast< Identity_AddAuthorization_Data* >(object);
  (void)_this;
}
void Identity_AddAuthorization_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identity_AddAuthorization_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identity_AddAuthorization_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identity_AddAuthorization_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Identity_AddAuthorization_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
  return target;
}

size_t Identity_AddAuthorization_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Identity_AddAuthorization_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Identity_AddAuthorization_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Identity_AddAuthorization_Data::GetClassData() const { return &_class_data_; }

void Identity_AddAuthorization_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Identity_AddAuthorization_Data *>(to)->MergeFrom(
      static_cast<const Identity_AddAuthorization_Data &>(from));
}


void Identity_AddAuthorization_Data::MergeFrom(const Identity_AddAuthorization_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Identity_AddAuthorization_Data::CopyFrom(const Identity_AddAuthorization_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Identity.AddAuthorization.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity_AddAuthorization_Data::IsInitialized() const {
  return true;
}

void Identity_AddAuthorization_Data::InternalSwap(Identity_AddAuthorization_Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity_AddAuthorization_Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[19]);
}

// ===================================================================

class Identity_AddAuthorization_AuthData::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& asset(const Identity_AddAuthorization_AuthData* msg);
  static const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& extrinsic(const Identity_AddAuthorization_AuthData* msg);
  static const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data& portfolio(const Identity_AddAuthorization_AuthData* msg);
};

const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data&
Identity_AddAuthorization_AuthData::_Internal::asset(const Identity_AddAuthorization_AuthData* msg) {
  return *msg->asset_;
}
const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data&
Identity_AddAuthorization_AuthData::_Internal::extrinsic(const Identity_AddAuthorization_AuthData* msg) {
  return *msg->extrinsic_;
}
const ::TW::Polkadot::Proto::Identity_AddAuthorization_Data&
Identity_AddAuthorization_AuthData::_Internal::portfolio(const Identity_AddAuthorization_AuthData* msg) {
  return *msg->portfolio_;
}
Identity_AddAuthorization_AuthData::Identity_AddAuthorization_AuthData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
}
Identity_AddAuthorization_AuthData::Identity_AddAuthorization_AuthData(const Identity_AddAuthorization_AuthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::TW::Polkadot::Proto::Identity_AddAuthorization_Data(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  if (from._internal_has_extrinsic()) {
    extrinsic_ = new ::TW::Polkadot::Proto::Identity_AddAuthorization_Data(*from.extrinsic_);
  } else {
    extrinsic_ = nullptr;
  }
  if (from._internal_has_portfolio()) {
    portfolio_ = new ::TW::Polkadot::Proto::Identity_AddAuthorization_Data(*from.portfolio_);
  } else {
    portfolio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
}

inline void Identity_AddAuthorization_AuthData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&portfolio_) -
    reinterpret_cast<char*>(&asset_)) + sizeof(portfolio_));
}

Identity_AddAuthorization_AuthData::~Identity_AddAuthorization_AuthData() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identity_AddAuthorization_AuthData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete asset_;
  if (this != internal_default_instance()) delete extrinsic_;
  if (this != internal_default_instance()) delete portfolio_;
}

void Identity_AddAuthorization_AuthData::ArenaDtor(void* object) {
  Identity_AddAuthorization_AuthData* _this = reinterpret_cast< Identity_AddAuthorization_AuthData* >(object);
  (void)_this;
}
void Identity_AddAuthorization_AuthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identity_AddAuthorization_AuthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identity_AddAuthorization_AuthData::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extrinsic_ != nullptr) {
    delete extrinsic_;
  }
  extrinsic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && portfolio_ != nullptr) {
    delete portfolio_;
  }
  portfolio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identity_AddAuthorization_AuthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.Identity.AddAuthorization.Data asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Identity.AddAuthorization.Data extrinsic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extrinsic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Identity.AddAuthorization.Data portfolio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_portfolio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Identity_AddAuthorization_AuthData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data asset = 1;
  if (this->_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data extrinsic = 2;
  if (this->_internal_has_extrinsic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::extrinsic(this), target, stream);
  }

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data portfolio = 3;
  if (this->_internal_has_portfolio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::portfolio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
  return target;
}

size_t Identity_AddAuthorization_AuthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data asset = 1;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data extrinsic = 2;
  if (this->_internal_has_extrinsic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extrinsic_);
  }

  // .TW.Polkadot.Proto.Identity.AddAuthorization.Data portfolio = 3;
  if (this->_internal_has_portfolio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *portfolio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Identity_AddAuthorization_AuthData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Identity_AddAuthorization_AuthData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Identity_AddAuthorization_AuthData::GetClassData() const { return &_class_data_; }

void Identity_AddAuthorization_AuthData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Identity_AddAuthorization_AuthData *>(to)->MergeFrom(
      static_cast<const Identity_AddAuthorization_AuthData &>(from));
}


void Identity_AddAuthorization_AuthData::MergeFrom(const Identity_AddAuthorization_AuthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_asset()) {
    _internal_mutable_asset()->::TW::Polkadot::Proto::Identity_AddAuthorization_Data::MergeFrom(from._internal_asset());
  }
  if (from._internal_has_extrinsic()) {
    _internal_mutable_extrinsic()->::TW::Polkadot::Proto::Identity_AddAuthorization_Data::MergeFrom(from._internal_extrinsic());
  }
  if (from._internal_has_portfolio()) {
    _internal_mutable_portfolio()->::TW::Polkadot::Proto::Identity_AddAuthorization_Data::MergeFrom(from._internal_portfolio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Identity_AddAuthorization_AuthData::CopyFrom(const Identity_AddAuthorization_AuthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Identity.AddAuthorization.AuthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity_AddAuthorization_AuthData::IsInitialized() const {
  return true;
}

void Identity_AddAuthorization_AuthData::InternalSwap(Identity_AddAuthorization_AuthData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Identity_AddAuthorization_AuthData, portfolio_)
      + sizeof(Identity_AddAuthorization_AuthData::portfolio_)
      - PROTOBUF_FIELD_OFFSET(Identity_AddAuthorization_AuthData, asset_)>(
          reinterpret_cast<char*>(&asset_),
          reinterpret_cast<char*>(&other->asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity_AddAuthorization_AuthData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[20]);
}

// ===================================================================

class Identity_AddAuthorization::_Internal {
 public:
  static const ::TW::Polkadot::Proto::CallIndices& call_indices(const Identity_AddAuthorization* msg);
  static const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData& data(const Identity_AddAuthorization* msg);
};

const ::TW::Polkadot::Proto::CallIndices&
Identity_AddAuthorization::_Internal::call_indices(const Identity_AddAuthorization* msg) {
  return *msg->call_indices_;
}
const ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData&
Identity_AddAuthorization::_Internal::data(const Identity_AddAuthorization* msg) {
  return *msg->data_;
}
Identity_AddAuthorization::Identity_AddAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Identity.AddAuthorization)
}
Identity_AddAuthorization::Identity_AddAuthorization(const Identity_AddAuthorization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_call_indices()) {
    call_indices_ = new ::TW::Polkadot::Proto::CallIndices(*from.call_indices_);
  } else {
    call_indices_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData(*from.data_);
  } else {
    data_ = nullptr;
  }
  expiry_ = from.expiry_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Identity.AddAuthorization)
}

inline void Identity_AddAuthorization::SharedCtor() {
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_indices_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
    reinterpret_cast<char*>(&call_indices_)) + sizeof(expiry_));
}

Identity_AddAuthorization::~Identity_AddAuthorization() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Identity.AddAuthorization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identity_AddAuthorization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_indices_;
  if (this != internal_default_instance()) delete data_;
}

void Identity_AddAuthorization::ArenaDtor(void* object) {
  Identity_AddAuthorization* _this = reinterpret_cast< Identity_AddAuthorization* >(object);
  (void)_this;
}
void Identity_AddAuthorization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identity_AddAuthorization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identity_AddAuthorization::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Identity.AddAuthorization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && call_indices_ != nullptr) {
    delete call_indices_;
  }
  call_indices_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  expiry_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identity_AddAuthorization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.CallIndices call_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.Identity.AddAuthorization.target"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Identity.AddAuthorization.AuthData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 expiry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Identity_AddAuthorization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Identity.AddAuthorization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call_indices(this), target, stream);
  }

  // string target = 2;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.Identity.AddAuthorization.target");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target(), target);
  }

  // .TW.Polkadot.Proto.Identity.AddAuthorization.AuthData data = 3;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // uint64 expiry = 4;
  if (this->_internal_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Identity.AddAuthorization)
  return target;
}

size_t Identity_AddAuthorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Identity.AddAuthorization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 2;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // .TW.Polkadot.Proto.CallIndices call_indices = 1;
  if (this->_internal_has_call_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_indices_);
  }

  // .TW.Polkadot.Proto.Identity.AddAuthorization.AuthData data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 expiry = 4;
  if (this->_internal_expiry() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_expiry());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Identity_AddAuthorization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Identity_AddAuthorization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Identity_AddAuthorization::GetClassData() const { return &_class_data_; }

void Identity_AddAuthorization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Identity_AddAuthorization *>(to)->MergeFrom(
      static_cast<const Identity_AddAuthorization &>(from));
}


void Identity_AddAuthorization::MergeFrom(const Identity_AddAuthorization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Identity.AddAuthorization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_has_call_indices()) {
    _internal_mutable_call_indices()->::TW::Polkadot::Proto::CallIndices::MergeFrom(from._internal_call_indices());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData::MergeFrom(from._internal_data());
  }
  if (from._internal_expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Identity_AddAuthorization::CopyFrom(const Identity_AddAuthorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Identity.AddAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity_AddAuthorization::IsInitialized() const {
  return true;
}

void Identity_AddAuthorization::InternalSwap(Identity_AddAuthorization* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_, lhs_arena,
      &other->target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Identity_AddAuthorization, expiry_)
      + sizeof(Identity_AddAuthorization::expiry_)
      - PROTOBUF_FIELD_OFFSET(Identity_AddAuthorization, call_indices_)>(
          reinterpret_cast<char*>(&call_indices_),
          reinterpret_cast<char*>(&other->call_indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity_AddAuthorization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[21]);
}

// ===================================================================

class Identity::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey& join_identity_as_key(const Identity* msg);
  static const ::TW::Polkadot::Proto::Identity_AddAuthorization& add_authorization(const Identity* msg);
};

const ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey&
Identity::_Internal::join_identity_as_key(const Identity* msg) {
  return *msg->message_oneof_.join_identity_as_key_;
}
const ::TW::Polkadot::Proto::Identity_AddAuthorization&
Identity::_Internal::add_authorization(const Identity* msg) {
  return *msg->message_oneof_.add_authorization_;
}
void Identity::set_allocated_join_identity_as_key(::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* join_identity_as_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (join_identity_as_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Identity_JoinIdentityAsKey>::GetOwningArena(join_identity_as_key);
    if (message_arena != submessage_arena) {
      join_identity_as_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_identity_as_key, submessage_arena);
    }
    set_has_join_identity_as_key();
    message_oneof_.join_identity_as_key_ = join_identity_as_key;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.join_identity_as_key)
}
void Identity::set_allocated_add_authorization(::TW::Polkadot::Proto::Identity_AddAuthorization* add_authorization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (add_authorization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Identity_AddAuthorization>::GetOwningArena(add_authorization);
    if (message_arena != submessage_arena) {
      add_authorization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_authorization, submessage_arena);
    }
    set_has_add_authorization();
    message_oneof_.add_authorization_ = add_authorization;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.Identity.add_authorization)
}
Identity::Identity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.Identity)
}
Identity::Identity(const Identity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kJoinIdentityAsKey: {
      _internal_mutable_join_identity_as_key()->::TW::Polkadot::Proto::Identity_JoinIdentityAsKey::MergeFrom(from._internal_join_identity_as_key());
      break;
    }
    case kAddAuthorization: {
      _internal_mutable_add_authorization()->::TW::Polkadot::Proto::Identity_AddAuthorization::MergeFrom(from._internal_add_authorization());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.Identity)
}

inline void Identity::SharedCtor() {
clear_has_message_oneof();
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.Identity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void Identity::ArenaDtor(void* object) {
  Identity* _this = reinterpret_cast< Identity* >(object);
  (void)_this;
}
void Identity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identity::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.Identity)
  switch (message_oneof_case()) {
    case kJoinIdentityAsKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.join_identity_as_key_;
      }
      break;
    }
    case kAddAuthorization: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.add_authorization_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void Identity::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.Identity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.Identity.JoinIdentityAsKey join_identity_as_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_identity_as_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Identity.AddAuthorization add_authorization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_authorization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Identity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.Identity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Identity.JoinIdentityAsKey join_identity_as_key = 1;
  if (_internal_has_join_identity_as_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::join_identity_as_key(this), target, stream);
  }

  // .TW.Polkadot.Proto.Identity.AddAuthorization add_authorization = 2;
  if (_internal_has_add_authorization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_authorization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.Identity)
  return target;
}

size_t Identity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.Identity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Identity.JoinIdentityAsKey join_identity_as_key = 1;
    case kJoinIdentityAsKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.join_identity_as_key_);
      break;
    }
    // .TW.Polkadot.Proto.Identity.AddAuthorization add_authorization = 2;
    case kAddAuthorization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.add_authorization_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Identity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Identity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Identity::GetClassData() const { return &_class_data_; }

void Identity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Identity *>(to)->MergeFrom(
      static_cast<const Identity &>(from));
}


void Identity::MergeFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_oneof_case()) {
    case kJoinIdentityAsKey: {
      _internal_mutable_join_identity_as_key()->::TW::Polkadot::Proto::Identity_JoinIdentityAsKey::MergeFrom(from._internal_join_identity_as_key());
      break;
    }
    case kAddAuthorization: {
      _internal_mutable_add_authorization()->::TW::Polkadot::Proto::Identity_AddAuthorization::MergeFrom(from._internal_add_authorization());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Identity::CopyFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity::IsInitialized() const {
  return true;
}

void Identity::InternalSwap(Identity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[22]);
}

// ===================================================================

class PolymeshCall::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Identity& identity_call(const PolymeshCall* msg);
};

const ::TW::Polkadot::Proto::Identity&
PolymeshCall::_Internal::identity_call(const PolymeshCall* msg) {
  return *msg->message_oneof_.identity_call_;
}
void PolymeshCall::set_allocated_identity_call(::TW::Polkadot::Proto::Identity* identity_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (identity_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Identity>::GetOwningArena(identity_call);
    if (message_arena != submessage_arena) {
      identity_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity_call, submessage_arena);
    }
    set_has_identity_call();
    message_oneof_.identity_call_ = identity_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.PolymeshCall.identity_call)
}
PolymeshCall::PolymeshCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.PolymeshCall)
}
PolymeshCall::PolymeshCall(const PolymeshCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kIdentityCall: {
      _internal_mutable_identity_call()->::TW::Polkadot::Proto::Identity::MergeFrom(from._internal_identity_call());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.PolymeshCall)
}

inline void PolymeshCall::SharedCtor() {
clear_has_message_oneof();
}

PolymeshCall::~PolymeshCall() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.PolymeshCall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolymeshCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void PolymeshCall::ArenaDtor(void* object) {
  PolymeshCall* _this = reinterpret_cast< PolymeshCall* >(object);
  (void)_this;
}
void PolymeshCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolymeshCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolymeshCall::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.PolymeshCall)
  switch (message_oneof_case()) {
    case kIdentityCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.identity_call_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void PolymeshCall::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.PolymeshCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolymeshCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Polkadot.Proto.Identity identity_call = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolymeshCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.PolymeshCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Polkadot.Proto.Identity identity_call = 2;
  if (_internal_has_identity_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::identity_call(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.PolymeshCall)
  return target;
}

size_t PolymeshCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.PolymeshCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Identity identity_call = 2;
    case kIdentityCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.identity_call_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolymeshCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolymeshCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolymeshCall::GetClassData() const { return &_class_data_; }

void PolymeshCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolymeshCall *>(to)->MergeFrom(
      static_cast<const PolymeshCall &>(from));
}


void PolymeshCall::MergeFrom(const PolymeshCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.PolymeshCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_oneof_case()) {
    case kIdentityCall: {
      _internal_mutable_identity_call()->::TW::Polkadot::Proto::Identity::MergeFrom(from._internal_identity_call());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolymeshCall::CopyFrom(const PolymeshCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.PolymeshCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolymeshCall::IsInitialized() const {
  return true;
}

void PolymeshCall::InternalSwap(PolymeshCall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolymeshCall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[23]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Polkadot::Proto::Era& era(const SigningInput* msg);
  static const ::TW::Polkadot::Proto::Balance& balance_call(const SigningInput* msg);
  static const ::TW::Polkadot::Proto::Staking& staking_call(const SigningInput* msg);
  static const ::TW::Polkadot::Proto::PolymeshCall& polymesh_call(const SigningInput* msg);
};

const ::TW::Polkadot::Proto::Era&
SigningInput::_Internal::era(const SigningInput* msg) {
  return *msg->era_;
}
const ::TW::Polkadot::Proto::Balance&
SigningInput::_Internal::balance_call(const SigningInput* msg) {
  return *msg->message_oneof_.balance_call_;
}
const ::TW::Polkadot::Proto::Staking&
SigningInput::_Internal::staking_call(const SigningInput* msg) {
  return *msg->message_oneof_.staking_call_;
}
const ::TW::Polkadot::Proto::PolymeshCall&
SigningInput::_Internal::polymesh_call(const SigningInput* msg) {
  return *msg->message_oneof_.polymesh_call_;
}
void SigningInput::set_allocated_balance_call(::TW::Polkadot::Proto::Balance* balance_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (balance_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Balance>::GetOwningArena(balance_call);
    if (message_arena != submessage_arena) {
      balance_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balance_call, submessage_arena);
    }
    set_has_balance_call();
    message_oneof_.balance_call_ = balance_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.balance_call)
}
void SigningInput::set_allocated_staking_call(::TW::Polkadot::Proto::Staking* staking_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (staking_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::Staking>::GetOwningArena(staking_call);
    if (message_arena != submessage_arena) {
      staking_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staking_call, submessage_arena);
    }
    set_has_staking_call();
    message_oneof_.staking_call_ = staking_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.staking_call)
}
void SigningInput::set_allocated_polymesh_call(::TW::Polkadot::Proto::PolymeshCall* polymesh_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (polymesh_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Polkadot::Proto::PolymeshCall>::GetOwningArena(polymesh_call);
    if (message_arena != submessage_arena) {
      polymesh_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polymesh_call, submessage_arena);
    }
    set_has_polymesh_call();
    message_oneof_.polymesh_call_ = polymesh_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Polkadot.Proto.SigningInput.polymesh_call)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArenaForAllocation());
  }
  genesis_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    genesis_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_genesis_hash().empty()) {
    genesis_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_genesis_hash(), 
      GetArenaForAllocation());
  }
  tip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tip().empty()) {
    tip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip(), 
      GetArenaForAllocation());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_era()) {
    era_ = new ::TW::Polkadot::Proto::Era(*from.era_);
  } else {
    era_ = nullptr;
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&multi_address_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(multi_address_));
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kBalanceCall: {
      _internal_mutable_balance_call()->::TW::Polkadot::Proto::Balance::MergeFrom(from._internal_balance_call());
      break;
    }
    case kStakingCall: {
      _internal_mutable_staking_call()->::TW::Polkadot::Proto::Staking::MergeFrom(from._internal_staking_call());
      break;
    }
    case kPolymeshCall: {
      _internal_mutable_polymesh_call()->::TW::Polkadot::Proto::PolymeshCall::MergeFrom(from._internal_polymesh_call());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
genesis_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  genesis_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&era_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multi_address_) -
    reinterpret_cast<char*>(&era_)) + sizeof(multi_address_));
clear_has_message_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  genesis_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete era_;
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Polkadot.Proto.SigningInput)
  switch (message_oneof_case()) {
    case kBalanceCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.balance_call_;
      }
      break;
    }
    case kStakingCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.staking_call_;
      }
      break;
    }
    case kPolymeshCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.polymesh_call_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_hash_.ClearToEmpty();
  genesis_hash_.ClearToEmpty();
  tip_.ClearToEmpty();
  private_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && era_ != nullptr) {
    delete era_;
  }
  era_ = nullptr;
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multi_address_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(multi_address_));
  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes genesis_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_genesis_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 spec_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          spec_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 transaction_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          transaction_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_tip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Era era = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_era(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 network = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool multi_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          multi_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Balance balance_call = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_balance_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.Staking staking_call = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_staking_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Polkadot.Proto.PolymeshCall polymesh_call = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_polymesh_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_hash(), target);
  }

  // bytes genesis_hash = 2;
  if (!this->_internal_genesis_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_genesis_hash(), target);
  }

  // uint64 nonce = 3;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nonce(), target);
  }

  // uint32 spec_version = 4;
  if (this->_internal_spec_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_spec_version(), target);
  }

  // uint32 transaction_version = 5;
  if (this->_internal_transaction_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_transaction_version(), target);
  }

  // bytes tip = 6;
  if (!this->_internal_tip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_tip(), target);
  }

  // .TW.Polkadot.Proto.Era era = 7;
  if (this->_internal_has_era()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::era(this), target, stream);
  }

  // bytes private_key = 8;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_private_key(), target);
  }

  // uint32 network = 9;
  if (this->_internal_network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_network(), target);
  }

  // bool multi_address = 10;
  if (this->_internal_multi_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_multi_address(), target);
  }

  // .TW.Polkadot.Proto.Balance balance_call = 11;
  if (_internal_has_balance_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::balance_call(this), target, stream);
  }

  // .TW.Polkadot.Proto.Staking staking_call = 12;
  if (_internal_has_staking_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::staking_call(this), target, stream);
  }

  // .TW.Polkadot.Proto.PolymeshCall polymesh_call = 13;
  if (_internal_has_polymesh_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::polymesh_call(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes genesis_hash = 2;
  if (!this->_internal_genesis_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_genesis_hash());
  }

  // bytes tip = 6;
  if (!this->_internal_tip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tip());
  }

  // bytes private_key = 8;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // .TW.Polkadot.Proto.Era era = 7;
  if (this->_internal_has_era()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *era_);
  }

  // uint64 nonce = 3;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // uint32 spec_version = 4;
  if (this->_internal_spec_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_spec_version());
  }

  // uint32 transaction_version = 5;
  if (this->_internal_transaction_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_transaction_version());
  }

  // uint32 network = 9;
  if (this->_internal_network() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_network());
  }

  // bool multi_address = 10;
  if (this->_internal_multi_address() != 0) {
    total_size += 1 + 1;
  }

  switch (message_oneof_case()) {
    // .TW.Polkadot.Proto.Balance balance_call = 11;
    case kBalanceCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.balance_call_);
      break;
    }
    // .TW.Polkadot.Proto.Staking staking_call = 12;
    case kStakingCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.staking_call_);
      break;
    }
    // .TW.Polkadot.Proto.PolymeshCall polymesh_call = 13;
    case kPolymeshCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.polymesh_call_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_hash().empty()) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (!from._internal_genesis_hash().empty()) {
    _internal_set_genesis_hash(from._internal_genesis_hash());
  }
  if (!from._internal_tip().empty()) {
    _internal_set_tip(from._internal_tip());
  }
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from._internal_has_era()) {
    _internal_mutable_era()->::TW::Polkadot::Proto::Era::MergeFrom(from._internal_era());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_spec_version() != 0) {
    _internal_set_spec_version(from._internal_spec_version());
  }
  if (from._internal_transaction_version() != 0) {
    _internal_set_transaction_version(from._internal_transaction_version());
  }
  if (from._internal_network() != 0) {
    _internal_set_network(from._internal_network());
  }
  if (from._internal_multi_address() != 0) {
    _internal_set_multi_address(from._internal_multi_address());
  }
  switch (from.message_oneof_case()) {
    case kBalanceCall: {
      _internal_mutable_balance_call()->::TW::Polkadot::Proto::Balance::MergeFrom(from._internal_balance_call());
      break;
    }
    case kStakingCall: {
      _internal_mutable_staking_call()->::TW::Polkadot::Proto::Staking::MergeFrom(from._internal_staking_call());
      break;
    }
    case kPolymeshCall: {
      _internal_mutable_polymesh_call()->::TW::Polkadot::Proto::PolymeshCall::MergeFrom(from._internal_polymesh_call());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_hash_, lhs_arena,
      &other->block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &genesis_hash_, lhs_arena,
      &other->genesis_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tip_, lhs_arena,
      &other->tip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, multi_address_)
      + sizeof(SigningInput::multi_address_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, era_)>(
          reinterpret_cast<char*>(&era_),
          reinterpret_cast<char*>(&other->era_));
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[24]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Polkadot.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Polkadot.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Polkadot.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Polkadot.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Polkadot.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Polkadot.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Polkadot.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Polkadot.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Polkadot.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Polkadot.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Polkadot.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Polkadot_2eproto_getter, &descriptor_table_Polkadot_2eproto_once,
      file_level_metadata_Polkadot_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Polkadot
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Era* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Era >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Era >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::CustomCallIndices* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::CustomCallIndices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::CustomCallIndices >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::CallIndices* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::CallIndices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::CallIndices >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Balance_Transfer* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Balance_Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Balance_BatchTransfer* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_BatchTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Balance_BatchTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Balance_AssetTransfer* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_AssetTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Balance_AssetTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Balance_BatchAssetTransfer* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Balance_BatchAssetTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Balance_BatchAssetTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Balance* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Balance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Balance >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Bond* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Bond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Bond >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_BondAndNominate* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondAndNominate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_BondAndNominate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_BondExtra* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_BondExtra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_BondExtra >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Unbond* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Unbond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Unbond >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Rebond* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Rebond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Rebond >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_WithdrawUnbonded* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_WithdrawUnbonded >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Nominate* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Nominate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Nominate >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_ChillAndUnbond* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_ChillAndUnbond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_ChillAndUnbond >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking_Chill* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking_Chill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking_Chill >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Staking* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Staking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Staking >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Identity_JoinIdentityAsKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Identity_AddAuthorization_Data* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Identity_AddAuthorization_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Identity_AddAuthorization_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Identity_AddAuthorization_AuthData >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Identity_AddAuthorization* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Identity_AddAuthorization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Identity_AddAuthorization >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::Identity* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::Identity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::Identity >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::PolymeshCall* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::PolymeshCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::PolymeshCall >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Polkadot::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Polkadot::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Polkadot::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
