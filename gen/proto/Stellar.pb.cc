// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stellar.proto

#include "Stellar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Stellar {
namespace Proto {
constexpr Asset::Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : issuer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alphanum4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AssetDefaultTypeInternal {
  constexpr AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetDefaultTypeInternal _Asset_default_instance_;
constexpr OperationCreateAccount::OperationCreateAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct OperationCreateAccountDefaultTypeInternal {
  constexpr OperationCreateAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationCreateAccountDefaultTypeInternal() {}
  union {
    OperationCreateAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationCreateAccountDefaultTypeInternal _OperationCreateAccount_default_instance_;
constexpr OperationPayment::OperationPayment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_(nullptr)
  , amount_(int64_t{0}){}
struct OperationPaymentDefaultTypeInternal {
  constexpr OperationPaymentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationPaymentDefaultTypeInternal() {}
  union {
    OperationPayment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationPaymentDefaultTypeInternal _OperationPayment_default_instance_;
constexpr OperationChangeTrust::OperationChangeTrust(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_(nullptr)
  , valid_before_(int64_t{0}){}
struct OperationChangeTrustDefaultTypeInternal {
  constexpr OperationChangeTrustDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationChangeTrustDefaultTypeInternal() {}
  union {
    OperationChangeTrust _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationChangeTrustDefaultTypeInternal _OperationChangeTrust_default_instance_;
constexpr Claimant::Claimant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , predicate_(0)
{}
struct ClaimantDefaultTypeInternal {
  constexpr ClaimantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClaimantDefaultTypeInternal() {}
  union {
    Claimant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClaimantDefaultTypeInternal _Claimant_default_instance_;
constexpr OperationCreateClaimableBalance::OperationCreateClaimableBalance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : claimants_()
  , asset_(nullptr)
  , amount_(int64_t{0}){}
struct OperationCreateClaimableBalanceDefaultTypeInternal {
  constexpr OperationCreateClaimableBalanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationCreateClaimableBalanceDefaultTypeInternal() {}
  union {
    OperationCreateClaimableBalance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationCreateClaimableBalanceDefaultTypeInternal _OperationCreateClaimableBalance_default_instance_;
constexpr OperationClaimClaimableBalance::OperationClaimClaimableBalance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balance_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OperationClaimClaimableBalanceDefaultTypeInternal {
  constexpr OperationClaimClaimableBalanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationClaimClaimableBalanceDefaultTypeInternal() {}
  union {
    OperationClaimClaimableBalance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationClaimClaimableBalanceDefaultTypeInternal _OperationClaimClaimableBalance_default_instance_;
constexpr MemoVoid::MemoVoid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MemoVoidDefaultTypeInternal {
  constexpr MemoVoidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoVoidDefaultTypeInternal() {}
  union {
    MemoVoid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoVoidDefaultTypeInternal _MemoVoid_default_instance_;
constexpr MemoText::MemoText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MemoTextDefaultTypeInternal {
  constexpr MemoTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoTextDefaultTypeInternal() {}
  union {
    MemoText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoTextDefaultTypeInternal _MemoText_default_instance_;
constexpr MemoId::MemoId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct MemoIdDefaultTypeInternal {
  constexpr MemoIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoIdDefaultTypeInternal() {}
  union {
    MemoId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoIdDefaultTypeInternal _MemoId_default_instance_;
constexpr MemoHash::MemoHash(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MemoHashDefaultTypeInternal {
  constexpr MemoHashDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoHashDefaultTypeInternal() {}
  union {
    MemoHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoHashDefaultTypeInternal _MemoHash_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , passphrase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_(int64_t{0})
  , fee_(0)
  , time_bounds_(int64_t{0})
  , _oneof_case_{}{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Stellar
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Stellar_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Stellar_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Stellar_2eproto = nullptr;

const uint32_t TableStruct_Stellar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Asset, issuer_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Asset, alphanum4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateAccount, destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateAccount, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationPayment, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationChangeTrust, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationChangeTrust, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationChangeTrust, valid_before_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Claimant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Claimant, account_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::Claimant, predicate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateClaimableBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateClaimableBalance, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateClaimableBalance, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationCreateClaimableBalance, claimants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationClaimClaimableBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::OperationClaimClaimableBalance, balance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoVoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoText, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::MemoHash, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, sequence_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, account_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, passphrase_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, time_bounds_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, operation_oneof_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningInput, memo_type_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningOutput, signature_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Stellar::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Stellar::Proto::Asset)},
  { 8, -1, -1, sizeof(::TW::Stellar::Proto::OperationCreateAccount)},
  { 16, -1, -1, sizeof(::TW::Stellar::Proto::OperationPayment)},
  { 25, -1, -1, sizeof(::TW::Stellar::Proto::OperationChangeTrust)},
  { 33, -1, -1, sizeof(::TW::Stellar::Proto::Claimant)},
  { 41, -1, -1, sizeof(::TW::Stellar::Proto::OperationCreateClaimableBalance)},
  { 50, -1, -1, sizeof(::TW::Stellar::Proto::OperationClaimClaimableBalance)},
  { 57, -1, -1, sizeof(::TW::Stellar::Proto::MemoVoid)},
  { 63, -1, -1, sizeof(::TW::Stellar::Proto::MemoText)},
  { 70, -1, -1, sizeof(::TW::Stellar::Proto::MemoId)},
  { 77, -1, -1, sizeof(::TW::Stellar::Proto::MemoHash)},
  { 84, -1, -1, sizeof(::TW::Stellar::Proto::SigningInput)},
  { 108, -1, -1, sizeof(::TW::Stellar::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationCreateAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationPayment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationChangeTrust_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_Claimant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationCreateClaimableBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_OperationClaimClaimableBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoVoid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_MemoHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Stellar::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Stellar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rStellar.proto\022\020TW.Stellar.Proto\032\014Commo"
  "n.proto\"*\n\005Asset\022\016\n\006issuer\030\001 \001(\t\022\021\n\talph"
  "anum4\030\002 \001(\t\"=\n\026OperationCreateAccount\022\023\n"
  "\013destination\030\001 \001(\t\022\016\n\006amount\030\002 \001(\003\"_\n\020Op"
  "erationPayment\022\023\n\013destination\030\001 \001(\t\022&\n\005a"
  "sset\030\002 \001(\0132\027.TW.Stellar.Proto.Asset\022\016\n\006a"
  "mount\030\003 \001(\003\"T\n\024OperationChangeTrust\022&\n\005a"
  "sset\030\001 \001(\0132\027.TW.Stellar.Proto.Asset\022\024\n\014v"
  "alid_before\030\002 \001(\003\"P\n\010Claimant\022\017\n\007account"
  "\030\001 \001(\t\0223\n\tpredicate\030\002 \001(\0162 .TW.Stellar.P"
  "roto.ClaimPredicate\"\210\001\n\037OperationCreateC"
  "laimableBalance\022&\n\005asset\030\001 \001(\0132\027.TW.Stel"
  "lar.Proto.Asset\022\016\n\006amount\030\002 \001(\003\022-\n\tclaim"
  "ants\030\003 \003(\0132\032.TW.Stellar.Proto.Claimant\"4"
  "\n\036OperationClaimClaimableBalance\022\022\n\nbala"
  "nce_id\030\001 \001(\014\"\n\n\010MemoVoid\"\030\n\010MemoText\022\014\n\004"
  "text\030\001 \001(\t\"\024\n\006MemoId\022\n\n\002id\030\001 \001(\003\"\030\n\010Memo"
  "Hash\022\014\n\004hash\030\001 \001(\014\"\220\006\n\014SigningInput\022\013\n\003f"
  "ee\030\001 \001(\005\022\020\n\010sequence\030\002 \001(\003\022\017\n\007account\030\003 "
  "\001(\t\022\023\n\013private_key\030\004 \001(\014\022\022\n\npassphrase\030\005"
  " \001(\t\022E\n\021op_create_account\030\006 \001(\0132(.TW.Ste"
  "llar.Proto.OperationCreateAccountH\000\0228\n\no"
  "p_payment\030\007 \001(\0132\".TW.Stellar.Proto.Opera"
  "tionPaymentH\000\022A\n\017op_change_trust\030\010 \001(\0132&"
  ".TW.Stellar.Proto.OperationChangeTrustH\000"
  "\022X\n\033op_create_claimable_balance\030\016 \001(\01321."
  "TW.Stellar.Proto.OperationCreateClaimabl"
  "eBalanceH\000\022V\n\032op_claim_claimable_balance"
  "\030\017 \001(\01320.TW.Stellar.Proto.OperationClaim"
  "ClaimableBalanceH\000\022/\n\tmemo_void\030\t \001(\0132\032."
  "TW.Stellar.Proto.MemoVoidH\001\022/\n\tmemo_text"
  "\030\n \001(\0132\032.TW.Stellar.Proto.MemoTextH\001\022+\n\007"
  "memo_id\030\013 \001(\0132\030.TW.Stellar.Proto.MemoIdH"
  "\001\022/\n\tmemo_hash\030\014 \001(\0132\032.TW.Stellar.Proto."
  "MemoHashH\001\0226\n\020memo_return_hash\030\r \001(\0132\032.T"
  "W.Stellar.Proto.MemoHashH\001\022\023\n\013time_bound"
  "s\030\020 \001(\003B\021\n\017operation_oneofB\021\n\017memo_type_"
  "oneof\"g\n\rSigningOutput\022\021\n\tsignature\030\001 \001("
  "\t\022,\n\005error\030\002 \001(\0162\035.TW.Common.Proto.Signi"
  "ngError\022\025\n\rerror_message\030\003 \001(\t*-\n\016ClaimP"
  "redicate\022\033\n\027Predicate_unconditional\020\000B\027\n"
  "\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Stellar_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Stellar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Stellar_2eproto = {
  false, false, 1670, descriptor_table_protodef_Stellar_2eproto, "Stellar.proto", 
  &descriptor_table_Stellar_2eproto_once, descriptor_table_Stellar_2eproto_deps, 1, 13,
  schemas, file_default_instances, TableStruct_Stellar_2eproto::offsets,
  file_level_metadata_Stellar_2eproto, file_level_enum_descriptors_Stellar_2eproto, file_level_service_descriptors_Stellar_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Stellar_2eproto_getter() {
  return &descriptor_table_Stellar_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Stellar_2eproto(&descriptor_table_Stellar_2eproto);
namespace TW {
namespace Stellar {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClaimPredicate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Stellar_2eproto);
  return file_level_enum_descriptors_Stellar_2eproto[0];
}
bool ClaimPredicate_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer().empty()) {
    issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_issuer(), 
      GetArenaForAllocation());
  }
  alphanum4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alphanum4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alphanum4().empty()) {
    alphanum4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alphanum4(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.Asset)
}

inline void Asset::SharedCtor() {
issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alphanum4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alphanum4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.Asset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  issuer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alphanum4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.Asset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issuer_.ClearToEmpty();
  alphanum4_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string issuer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_issuer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.Asset.issuer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alphanum4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_alphanum4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.Asset.alphanum4"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Asset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.Asset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string issuer = 1;
  if (!this->_internal_issuer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.Asset.issuer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_issuer(), target);
  }

  // string alphanum4 = 2;
  if (!this->_internal_alphanum4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alphanum4().data(), static_cast<int>(this->_internal_alphanum4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.Asset.alphanum4");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alphanum4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.Asset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string issuer = 1;
  if (!this->_internal_issuer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer());
  }

  // string alphanum4 = 2;
  if (!this->_internal_alphanum4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alphanum4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }

void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Asset *>(to)->MergeFrom(
      static_cast<const Asset &>(from));
}


void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_issuer().empty()) {
    _internal_set_issuer(from._internal_issuer());
  }
  if (!from._internal_alphanum4().empty()) {
    _internal_set_alphanum4(from._internal_alphanum4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &issuer_, lhs_arena,
      &other->issuer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alphanum4_, lhs_arena,
      &other->alphanum4_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[0]);
}

// ===================================================================

class OperationCreateAccount::_Internal {
 public:
};

OperationCreateAccount::OperationCreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationCreateAccount)
}
OperationCreateAccount::OperationCreateAccount(const OperationCreateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationCreateAccount)
}

inline void OperationCreateAccount::SharedCtor() {
destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = int64_t{0};
}

OperationCreateAccount::~OperationCreateAccount() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationCreateAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationCreateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationCreateAccount::ArenaDtor(void* object) {
  OperationCreateAccount* _this = reinterpret_cast< OperationCreateAccount* >(object);
  (void)_this;
}
void OperationCreateAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationCreateAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationCreateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationCreateAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationCreateAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.OperationCreateAccount.destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationCreateAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationCreateAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.OperationCreateAccount.destination");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination(), target);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationCreateAccount)
  return target;
}

size_t OperationCreateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationCreateAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationCreateAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationCreateAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationCreateAccount::GetClassData() const { return &_class_data_; }

void OperationCreateAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationCreateAccount *>(to)->MergeFrom(
      static_cast<const OperationCreateAccount &>(from));
}


void OperationCreateAccount::MergeFrom(const OperationCreateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationCreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _internal_set_destination(from._internal_destination());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationCreateAccount::CopyFrom(const OperationCreateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationCreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationCreateAccount::IsInitialized() const {
  return true;
}

void OperationCreateAccount::InternalSwap(OperationCreateAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_, lhs_arena,
      &other->destination_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationCreateAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[1]);
}

// ===================================================================

class OperationPayment::_Internal {
 public:
  static const ::TW::Stellar::Proto::Asset& asset(const OperationPayment* msg);
};

const ::TW::Stellar::Proto::Asset&
OperationPayment::_Internal::asset(const OperationPayment* msg) {
  return *msg->asset_;
}
OperationPayment::OperationPayment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationPayment)
}
OperationPayment::OperationPayment(const OperationPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_asset()) {
    asset_ = new ::TW::Stellar::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationPayment)
}

inline void OperationPayment::SharedCtor() {
destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&asset_)) + sizeof(amount_));
}

OperationPayment::~OperationPayment() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationPayment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationPayment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_;
}

void OperationPayment::ArenaDtor(void* object) {
  OperationPayment* _this = reinterpret_cast< OperationPayment* >(object);
  (void)_this;
}
void OperationPayment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationPayment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationPayment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.OperationPayment.destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.Asset asset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationPayment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationPayment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.OperationPayment.destination");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination(), target);
  }

  // .TW.Stellar.Proto.Asset asset = 2;
  if (this->_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::asset(this), target, stream);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationPayment)
  return target;
}

size_t OperationPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationPayment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // .TW.Stellar.Proto.Asset asset = 2;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationPayment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationPayment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationPayment::GetClassData() const { return &_class_data_; }

void OperationPayment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationPayment *>(to)->MergeFrom(
      static_cast<const OperationPayment &>(from));
}


void OperationPayment::MergeFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationPayment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _internal_set_destination(from._internal_destination());
  }
  if (from._internal_has_asset()) {
    _internal_mutable_asset()->::TW::Stellar::Proto::Asset::MergeFrom(from._internal_asset());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationPayment::CopyFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationPayment::IsInitialized() const {
  return true;
}

void OperationPayment::InternalSwap(OperationPayment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_, lhs_arena,
      &other->destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationPayment, amount_)
      + sizeof(OperationPayment::amount_)
      - PROTOBUF_FIELD_OFFSET(OperationPayment, asset_)>(
          reinterpret_cast<char*>(&asset_),
          reinterpret_cast<char*>(&other->asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationPayment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[2]);
}

// ===================================================================

class OperationChangeTrust::_Internal {
 public:
  static const ::TW::Stellar::Proto::Asset& asset(const OperationChangeTrust* msg);
};

const ::TW::Stellar::Proto::Asset&
OperationChangeTrust::_Internal::asset(const OperationChangeTrust* msg) {
  return *msg->asset_;
}
OperationChangeTrust::OperationChangeTrust(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationChangeTrust)
}
OperationChangeTrust::OperationChangeTrust(const OperationChangeTrust& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::TW::Stellar::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  valid_before_ = from.valid_before_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationChangeTrust)
}

inline void OperationChangeTrust::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_before_) -
    reinterpret_cast<char*>(&asset_)) + sizeof(valid_before_));
}

OperationChangeTrust::~OperationChangeTrust() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationChangeTrust)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationChangeTrust::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete asset_;
}

void OperationChangeTrust::ArenaDtor(void* object) {
  OperationChangeTrust* _this = reinterpret_cast< OperationChangeTrust* >(object);
  (void)_this;
}
void OperationChangeTrust::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationChangeTrust::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationChangeTrust::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationChangeTrust)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  valid_before_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationChangeTrust::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Stellar.Proto.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 valid_before = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          valid_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationChangeTrust::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationChangeTrust)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Stellar.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // int64 valid_before = 2;
  if (this->_internal_valid_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_valid_before(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationChangeTrust)
  return target;
}

size_t OperationChangeTrust::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationChangeTrust)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Stellar.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // int64 valid_before = 2;
  if (this->_internal_valid_before() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_valid_before());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationChangeTrust::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationChangeTrust::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationChangeTrust::GetClassData() const { return &_class_data_; }

void OperationChangeTrust::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationChangeTrust *>(to)->MergeFrom(
      static_cast<const OperationChangeTrust &>(from));
}


void OperationChangeTrust::MergeFrom(const OperationChangeTrust& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationChangeTrust)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_asset()) {
    _internal_mutable_asset()->::TW::Stellar::Proto::Asset::MergeFrom(from._internal_asset());
  }
  if (from._internal_valid_before() != 0) {
    _internal_set_valid_before(from._internal_valid_before());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationChangeTrust::CopyFrom(const OperationChangeTrust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationChangeTrust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationChangeTrust::IsInitialized() const {
  return true;
}

void OperationChangeTrust::InternalSwap(OperationChangeTrust* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationChangeTrust, valid_before_)
      + sizeof(OperationChangeTrust::valid_before_)
      - PROTOBUF_FIELD_OFFSET(OperationChangeTrust, asset_)>(
          reinterpret_cast<char*>(&asset_),
          reinterpret_cast<char*>(&other->asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationChangeTrust::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[3]);
}

// ===================================================================

class Claimant::_Internal {
 public:
};

Claimant::Claimant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.Claimant)
}
Claimant::Claimant(const Claimant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  predicate_ = from.predicate_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.Claimant)
}

inline void Claimant::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
predicate_ = 0;
}

Claimant::~Claimant() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.Claimant)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Claimant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Claimant::ArenaDtor(void* object) {
  Claimant* _this = reinterpret_cast< Claimant* >(object);
  (void)_this;
}
void Claimant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Claimant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Claimant::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.Claimant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  predicate_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Claimant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.Claimant.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.ClaimPredicate predicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_predicate(static_cast<::TW::Stellar::Proto::ClaimPredicate>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Claimant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.Claimant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.Claimant.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // .TW.Stellar.Proto.ClaimPredicate predicate = 2;
  if (this->_internal_predicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_predicate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.Claimant)
  return target;
}

size_t Claimant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.Claimant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // .TW.Stellar.Proto.ClaimPredicate predicate = 2;
  if (this->_internal_predicate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_predicate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Claimant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Claimant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Claimant::GetClassData() const { return &_class_data_; }

void Claimant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Claimant *>(to)->MergeFrom(
      static_cast<const Claimant &>(from));
}


void Claimant::MergeFrom(const Claimant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.Claimant)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_predicate() != 0) {
    _internal_set_predicate(from._internal_predicate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Claimant::CopyFrom(const Claimant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.Claimant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Claimant::IsInitialized() const {
  return true;
}

void Claimant::InternalSwap(Claimant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  swap(predicate_, other->predicate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Claimant::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[4]);
}

// ===================================================================

class OperationCreateClaimableBalance::_Internal {
 public:
  static const ::TW::Stellar::Proto::Asset& asset(const OperationCreateClaimableBalance* msg);
};

const ::TW::Stellar::Proto::Asset&
OperationCreateClaimableBalance::_Internal::asset(const OperationCreateClaimableBalance* msg) {
  return *msg->asset_;
}
OperationCreateClaimableBalance::OperationCreateClaimableBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  claimants_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationCreateClaimableBalance)
}
OperationCreateClaimableBalance::OperationCreateClaimableBalance(const OperationCreateClaimableBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      claimants_(from.claimants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::TW::Stellar::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationCreateClaimableBalance)
}

inline void OperationCreateClaimableBalance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&asset_)) + sizeof(amount_));
}

OperationCreateClaimableBalance::~OperationCreateClaimableBalance() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationCreateClaimableBalance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationCreateClaimableBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete asset_;
}

void OperationCreateClaimableBalance::ArenaDtor(void* object) {
  OperationCreateClaimableBalance* _this = reinterpret_cast< OperationCreateClaimableBalance* >(object);
  (void)_this;
}
void OperationCreateClaimableBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationCreateClaimableBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationCreateClaimableBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationCreateClaimableBalance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  claimants_.Clear();
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationCreateClaimableBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Stellar.Proto.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Stellar.Proto.Claimant claimants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_claimants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationCreateClaimableBalance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationCreateClaimableBalance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Stellar.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // repeated .TW.Stellar.Proto.Claimant claimants = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_claimants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_claimants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationCreateClaimableBalance)
  return target;
}

size_t OperationCreateClaimableBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationCreateClaimableBalance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Stellar.Proto.Claimant claimants = 3;
  total_size += 1UL * this->_internal_claimants_size();
  for (const auto& msg : this->claimants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TW.Stellar.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationCreateClaimableBalance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationCreateClaimableBalance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationCreateClaimableBalance::GetClassData() const { return &_class_data_; }

void OperationCreateClaimableBalance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationCreateClaimableBalance *>(to)->MergeFrom(
      static_cast<const OperationCreateClaimableBalance &>(from));
}


void OperationCreateClaimableBalance::MergeFrom(const OperationCreateClaimableBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationCreateClaimableBalance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  claimants_.MergeFrom(from.claimants_);
  if (from._internal_has_asset()) {
    _internal_mutable_asset()->::TW::Stellar::Proto::Asset::MergeFrom(from._internal_asset());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationCreateClaimableBalance::CopyFrom(const OperationCreateClaimableBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationCreateClaimableBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationCreateClaimableBalance::IsInitialized() const {
  return true;
}

void OperationCreateClaimableBalance::InternalSwap(OperationCreateClaimableBalance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  claimants_.InternalSwap(&other->claimants_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationCreateClaimableBalance, amount_)
      + sizeof(OperationCreateClaimableBalance::amount_)
      - PROTOBUF_FIELD_OFFSET(OperationCreateClaimableBalance, asset_)>(
          reinterpret_cast<char*>(&asset_),
          reinterpret_cast<char*>(&other->asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationCreateClaimableBalance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[5]);
}

// ===================================================================

class OperationClaimClaimableBalance::_Internal {
 public:
};

OperationClaimClaimableBalance::OperationClaimClaimableBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.OperationClaimClaimableBalance)
}
OperationClaimClaimableBalance::OperationClaimClaimableBalance(const OperationClaimClaimableBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  balance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    balance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance_id().empty()) {
    balance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_balance_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.OperationClaimClaimableBalance)
}

inline void OperationClaimClaimableBalance::SharedCtor() {
balance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  balance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationClaimClaimableBalance::~OperationClaimClaimableBalance() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.OperationClaimClaimableBalance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationClaimClaimableBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  balance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationClaimClaimableBalance::ArenaDtor(void* object) {
  OperationClaimClaimableBalance* _this = reinterpret_cast< OperationClaimClaimableBalance* >(object);
  (void)_this;
}
void OperationClaimClaimableBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationClaimClaimableBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationClaimClaimableBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.OperationClaimClaimableBalance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balance_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationClaimClaimableBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes balance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_balance_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationClaimClaimableBalance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.OperationClaimClaimableBalance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes balance_id = 1;
  if (!this->_internal_balance_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_balance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.OperationClaimClaimableBalance)
  return target;
}

size_t OperationClaimClaimableBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.OperationClaimClaimableBalance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes balance_id = 1;
  if (!this->_internal_balance_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_balance_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationClaimClaimableBalance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationClaimClaimableBalance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationClaimClaimableBalance::GetClassData() const { return &_class_data_; }

void OperationClaimClaimableBalance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationClaimClaimableBalance *>(to)->MergeFrom(
      static_cast<const OperationClaimClaimableBalance &>(from));
}


void OperationClaimClaimableBalance::MergeFrom(const OperationClaimClaimableBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.OperationClaimClaimableBalance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_balance_id().empty()) {
    _internal_set_balance_id(from._internal_balance_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationClaimClaimableBalance::CopyFrom(const OperationClaimClaimableBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.OperationClaimClaimableBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationClaimClaimableBalance::IsInitialized() const {
  return true;
}

void OperationClaimClaimableBalance::InternalSwap(OperationClaimClaimableBalance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &balance_id_, lhs_arena,
      &other->balance_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationClaimClaimableBalance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[6]);
}

// ===================================================================

class MemoVoid::_Internal {
 public:
};

MemoVoid::MemoVoid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoVoid)
}
MemoVoid::MemoVoid(const MemoVoid& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoVoid)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoVoid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoVoid::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MemoVoid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[7]);
}

// ===================================================================

class MemoText::_Internal {
 public:
};

MemoText::MemoText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoText)
}
MemoText::MemoText(const MemoText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoText)
}

inline void MemoText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoText::~MemoText() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.MemoText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemoText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoText::ArenaDtor(void* object) {
  MemoText* _this = reinterpret_cast< MemoText* >(object);
  (void)_this;
}
void MemoText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoText::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.MemoText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.MemoText.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.MemoText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.MemoText.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.MemoText)
  return target;
}

size_t MemoText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.MemoText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemoText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoText::GetClassData() const { return &_class_data_; }

void MemoText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemoText *>(to)->MergeFrom(
      static_cast<const MemoText &>(from));
}


void MemoText::MergeFrom(const MemoText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.MemoText)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoText::CopyFrom(const MemoText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.MemoText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoText::IsInitialized() const {
  return true;
}

void MemoText::InternalSwap(MemoText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[8]);
}

// ===================================================================

class MemoId::_Internal {
 public:
};

MemoId::MemoId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoId)
}
MemoId::MemoId(const MemoId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoId)
}

inline void MemoId::SharedCtor() {
id_ = int64_t{0};
}

MemoId::~MemoId() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.MemoId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemoId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoId::ArenaDtor(void* object) {
  MemoId* _this = reinterpret_cast< MemoId* >(object);
  (void)_this;
}
void MemoId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoId::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.MemoId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.MemoId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.MemoId)
  return target;
}

size_t MemoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.MemoId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemoId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoId::GetClassData() const { return &_class_data_; }

void MemoId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemoId *>(to)->MergeFrom(
      static_cast<const MemoId &>(from));
}


void MemoId::MergeFrom(const MemoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.MemoId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoId::CopyFrom(const MemoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.MemoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoId::IsInitialized() const {
  return true;
}

void MemoId::InternalSwap(MemoId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[9]);
}

// ===================================================================

class MemoHash::_Internal {
 public:
};

MemoHash::MemoHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.MemoHash)
}
MemoHash::MemoHash(const MemoHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.MemoHash)
}

inline void MemoHash::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoHash::~MemoHash() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.MemoHash)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemoHash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoHash::ArenaDtor(void* object) {
  MemoHash* _this = reinterpret_cast< MemoHash* >(object);
  (void)_this;
}
void MemoHash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoHash::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.MemoHash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoHash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.MemoHash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.MemoHash)
  return target;
}

size_t MemoHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.MemoHash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoHash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemoHash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoHash::GetClassData() const { return &_class_data_; }

void MemoHash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemoHash *>(to)->MergeFrom(
      static_cast<const MemoHash &>(from));
}


void MemoHash::MergeFrom(const MemoHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.MemoHash)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoHash::CopyFrom(const MemoHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.MemoHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoHash::IsInitialized() const {
  return true;
}

void MemoHash::InternalSwap(MemoHash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoHash::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[10]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Stellar::Proto::OperationCreateAccount& op_create_account(const SigningInput* msg);
  static const ::TW::Stellar::Proto::OperationPayment& op_payment(const SigningInput* msg);
  static const ::TW::Stellar::Proto::OperationChangeTrust& op_change_trust(const SigningInput* msg);
  static const ::TW::Stellar::Proto::OperationCreateClaimableBalance& op_create_claimable_balance(const SigningInput* msg);
  static const ::TW::Stellar::Proto::OperationClaimClaimableBalance& op_claim_claimable_balance(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoVoid& memo_void(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoText& memo_text(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoId& memo_id(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoHash& memo_hash(const SigningInput* msg);
  static const ::TW::Stellar::Proto::MemoHash& memo_return_hash(const SigningInput* msg);
};

const ::TW::Stellar::Proto::OperationCreateAccount&
SigningInput::_Internal::op_create_account(const SigningInput* msg) {
  return *msg->operation_oneof_.op_create_account_;
}
const ::TW::Stellar::Proto::OperationPayment&
SigningInput::_Internal::op_payment(const SigningInput* msg) {
  return *msg->operation_oneof_.op_payment_;
}
const ::TW::Stellar::Proto::OperationChangeTrust&
SigningInput::_Internal::op_change_trust(const SigningInput* msg) {
  return *msg->operation_oneof_.op_change_trust_;
}
const ::TW::Stellar::Proto::OperationCreateClaimableBalance&
SigningInput::_Internal::op_create_claimable_balance(const SigningInput* msg) {
  return *msg->operation_oneof_.op_create_claimable_balance_;
}
const ::TW::Stellar::Proto::OperationClaimClaimableBalance&
SigningInput::_Internal::op_claim_claimable_balance(const SigningInput* msg) {
  return *msg->operation_oneof_.op_claim_claimable_balance_;
}
const ::TW::Stellar::Proto::MemoVoid&
SigningInput::_Internal::memo_void(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_void_;
}
const ::TW::Stellar::Proto::MemoText&
SigningInput::_Internal::memo_text(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_text_;
}
const ::TW::Stellar::Proto::MemoId&
SigningInput::_Internal::memo_id(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_id_;
}
const ::TW::Stellar::Proto::MemoHash&
SigningInput::_Internal::memo_hash(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_hash_;
}
const ::TW::Stellar::Proto::MemoHash&
SigningInput::_Internal::memo_return_hash(const SigningInput* msg) {
  return *msg->memo_type_oneof_.memo_return_hash_;
}
void SigningInput::set_allocated_op_create_account(::TW::Stellar::Proto::OperationCreateAccount* op_create_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_create_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::OperationCreateAccount>::GetOwningArena(op_create_account);
    if (message_arena != submessage_arena) {
      op_create_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_create_account, submessage_arena);
    }
    set_has_op_create_account();
    operation_oneof_.op_create_account_ = op_create_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_create_account)
}
void SigningInput::set_allocated_op_payment(::TW::Stellar::Proto::OperationPayment* op_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::OperationPayment>::GetOwningArena(op_payment);
    if (message_arena != submessage_arena) {
      op_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_payment, submessage_arena);
    }
    set_has_op_payment();
    operation_oneof_.op_payment_ = op_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_payment)
}
void SigningInput::set_allocated_op_change_trust(::TW::Stellar::Proto::OperationChangeTrust* op_change_trust) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_change_trust) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::OperationChangeTrust>::GetOwningArena(op_change_trust);
    if (message_arena != submessage_arena) {
      op_change_trust = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_change_trust, submessage_arena);
    }
    set_has_op_change_trust();
    operation_oneof_.op_change_trust_ = op_change_trust;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_change_trust)
}
void SigningInput::set_allocated_op_create_claimable_balance(::TW::Stellar::Proto::OperationCreateClaimableBalance* op_create_claimable_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_create_claimable_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::OperationCreateClaimableBalance>::GetOwningArena(op_create_claimable_balance);
    if (message_arena != submessage_arena) {
      op_create_claimable_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_create_claimable_balance, submessage_arena);
    }
    set_has_op_create_claimable_balance();
    operation_oneof_.op_create_claimable_balance_ = op_create_claimable_balance;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_create_claimable_balance)
}
void SigningInput::set_allocated_op_claim_claimable_balance(::TW::Stellar::Proto::OperationClaimClaimableBalance* op_claim_claimable_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_oneof();
  if (op_claim_claimable_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::OperationClaimClaimableBalance>::GetOwningArena(op_claim_claimable_balance);
    if (message_arena != submessage_arena) {
      op_claim_claimable_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_claim_claimable_balance, submessage_arena);
    }
    set_has_op_claim_claimable_balance();
    operation_oneof_.op_claim_claimable_balance_ = op_claim_claimable_balance;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.op_claim_claimable_balance)
}
void SigningInput::set_allocated_memo_void(::TW::Stellar::Proto::MemoVoid* memo_void) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_memo_type_oneof();
  if (memo_void) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::MemoVoid>::GetOwningArena(memo_void);
    if (message_arena != submessage_arena) {
      memo_void = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_void, submessage_arena);
    }
    set_has_memo_void();
    memo_type_oneof_.memo_void_ = memo_void;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_void)
}
void SigningInput::set_allocated_memo_text(::TW::Stellar::Proto::MemoText* memo_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_memo_type_oneof();
  if (memo_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::MemoText>::GetOwningArena(memo_text);
    if (message_arena != submessage_arena) {
      memo_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_text, submessage_arena);
    }
    set_has_memo_text();
    memo_type_oneof_.memo_text_ = memo_text;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_text)
}
void SigningInput::set_allocated_memo_id(::TW::Stellar::Proto::MemoId* memo_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_memo_type_oneof();
  if (memo_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::MemoId>::GetOwningArena(memo_id);
    if (message_arena != submessage_arena) {
      memo_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_id, submessage_arena);
    }
    set_has_memo_id();
    memo_type_oneof_.memo_id_ = memo_id;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_id)
}
void SigningInput::set_allocated_memo_hash(::TW::Stellar::Proto::MemoHash* memo_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_memo_type_oneof();
  if (memo_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::MemoHash>::GetOwningArena(memo_hash);
    if (message_arena != submessage_arena) {
      memo_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_hash, submessage_arena);
    }
    set_has_memo_hash();
    memo_type_oneof_.memo_hash_ = memo_hash;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_hash)
}
void SigningInput::set_allocated_memo_return_hash(::TW::Stellar::Proto::MemoHash* memo_return_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_memo_type_oneof();
  if (memo_return_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Stellar::Proto::MemoHash>::GetOwningArena(memo_return_hash);
    if (message_arena != submessage_arena) {
      memo_return_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_return_hash, submessage_arena);
    }
    set_has_memo_return_hash();
    memo_type_oneof_.memo_return_hash_ = memo_return_hash;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Stellar.Proto.SigningInput.memo_return_hash)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passphrase().empty()) {
    passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passphrase(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_bounds_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(time_bounds_));
  clear_has_operation_oneof();
  switch (from.operation_oneof_case()) {
    case kOpCreateAccount: {
      _internal_mutable_op_create_account()->::TW::Stellar::Proto::OperationCreateAccount::MergeFrom(from._internal_op_create_account());
      break;
    }
    case kOpPayment: {
      _internal_mutable_op_payment()->::TW::Stellar::Proto::OperationPayment::MergeFrom(from._internal_op_payment());
      break;
    }
    case kOpChangeTrust: {
      _internal_mutable_op_change_trust()->::TW::Stellar::Proto::OperationChangeTrust::MergeFrom(from._internal_op_change_trust());
      break;
    }
    case kOpCreateClaimableBalance: {
      _internal_mutable_op_create_claimable_balance()->::TW::Stellar::Proto::OperationCreateClaimableBalance::MergeFrom(from._internal_op_create_claimable_balance());
      break;
    }
    case kOpClaimClaimableBalance: {
      _internal_mutable_op_claim_claimable_balance()->::TW::Stellar::Proto::OperationClaimClaimableBalance::MergeFrom(from._internal_op_claim_claimable_balance());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  clear_has_memo_type_oneof();
  switch (from.memo_type_oneof_case()) {
    case kMemoVoid: {
      _internal_mutable_memo_void()->::TW::Stellar::Proto::MemoVoid::MergeFrom(from._internal_memo_void());
      break;
    }
    case kMemoText: {
      _internal_mutable_memo_text()->::TW::Stellar::Proto::MemoText::MergeFrom(from._internal_memo_text());
      break;
    }
    case kMemoId: {
      _internal_mutable_memo_id()->::TW::Stellar::Proto::MemoId::MergeFrom(from._internal_memo_id());
      break;
    }
    case kMemoHash: {
      _internal_mutable_memo_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_hash());
      break;
    }
    case kMemoReturnHash: {
      _internal_mutable_memo_return_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_return_hash());
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_bounds_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(time_bounds_));
clear_has_operation_oneof();
clear_has_memo_type_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_operation_oneof()) {
    clear_operation_oneof();
  }
  if (has_memo_type_oneof()) {
    clear_memo_type_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::clear_operation_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Stellar.Proto.SigningInput)
  switch (operation_oneof_case()) {
    case kOpCreateAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_create_account_;
      }
      break;
    }
    case kOpPayment: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_payment_;
      }
      break;
    }
    case kOpChangeTrust: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_change_trust_;
      }
      break;
    }
    case kOpCreateClaimableBalance: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_create_claimable_balance_;
      }
      break;
    }
    case kOpClaimClaimableBalance: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_oneof_.op_claim_claimable_balance_;
      }
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_ONEOF_NOT_SET;
}

void SigningInput::clear_memo_type_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Stellar.Proto.SigningInput)
  switch (memo_type_oneof_case()) {
    case kMemoVoid: {
      if (GetArenaForAllocation() == nullptr) {
        delete memo_type_oneof_.memo_void_;
      }
      break;
    }
    case kMemoText: {
      if (GetArenaForAllocation() == nullptr) {
        delete memo_type_oneof_.memo_text_;
      }
      break;
    }
    case kMemoId: {
      if (GetArenaForAllocation() == nullptr) {
        delete memo_type_oneof_.memo_id_;
      }
      break;
    }
    case kMemoHash: {
      if (GetArenaForAllocation() == nullptr) {
        delete memo_type_oneof_.memo_hash_;
      }
      break;
    }
    case kMemoReturnHash: {
      if (GetArenaForAllocation() == nullptr) {
        delete memo_type_oneof_.memo_return_hash_;
      }
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MEMO_TYPE_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  private_key_.ClearToEmpty();
  passphrase_.ClearToEmpty();
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_bounds_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(time_bounds_));
  clear_operation_oneof();
  clear_memo_type_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.SigningInput.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string passphrase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.SigningInput.passphrase"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_create_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationPayment op_payment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_payment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_change_trust(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoVoid memo_void = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_void(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoText memo_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoId memo_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoHash memo_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo_return_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationCreateClaimableBalance op_create_claimable_balance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_create_claimable_balance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Stellar.Proto.OperationClaimClaimableBalance op_claim_claimable_balance = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_claim_claimable_balance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_bounds = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          time_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fee = 1;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fee(), target);
  }

  // int64 sequence = 2;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sequence(), target);
  }

  // string account = 3;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.SigningInput.account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account(), target);
  }

  // bytes private_key = 4;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_private_key(), target);
  }

  // string passphrase = 5;
  if (!this->_internal_passphrase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passphrase().data(), static_cast<int>(this->_internal_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.SigningInput.passphrase");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_passphrase(), target);
  }

  // .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
  if (_internal_has_op_create_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::op_create_account(this), target, stream);
  }

  // .TW.Stellar.Proto.OperationPayment op_payment = 7;
  if (_internal_has_op_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::op_payment(this), target, stream);
  }

  // .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
  if (_internal_has_op_change_trust()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::op_change_trust(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoVoid memo_void = 9;
  if (_internal_has_memo_void()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::memo_void(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoText memo_text = 10;
  if (_internal_has_memo_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::memo_text(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoId memo_id = 11;
  if (_internal_has_memo_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::memo_id(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoHash memo_hash = 12;
  if (_internal_has_memo_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::memo_hash(this), target, stream);
  }

  // .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
  if (_internal_has_memo_return_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::memo_return_hash(this), target, stream);
  }

  // .TW.Stellar.Proto.OperationCreateClaimableBalance op_create_claimable_balance = 14;
  if (_internal_has_op_create_claimable_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::op_create_claimable_balance(this), target, stream);
  }

  // .TW.Stellar.Proto.OperationClaimClaimableBalance op_claim_claimable_balance = 15;
  if (_internal_has_op_claim_claimable_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::op_claim_claimable_balance(this), target, stream);
  }

  // int64 time_bounds = 16;
  if (this->_internal_time_bounds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_time_bounds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // bytes private_key = 4;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string passphrase = 5;
  if (!this->_internal_passphrase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passphrase());
  }

  // int64 sequence = 2;
  if (this->_internal_sequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sequence());
  }

  // int32 fee = 1;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fee());
  }

  // int64 time_bounds = 16;
  if (this->_internal_time_bounds() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_bounds());
  }

  switch (operation_oneof_case()) {
    // .TW.Stellar.Proto.OperationCreateAccount op_create_account = 6;
    case kOpCreateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_create_account_);
      break;
    }
    // .TW.Stellar.Proto.OperationPayment op_payment = 7;
    case kOpPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_payment_);
      break;
    }
    // .TW.Stellar.Proto.OperationChangeTrust op_change_trust = 8;
    case kOpChangeTrust: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_change_trust_);
      break;
    }
    // .TW.Stellar.Proto.OperationCreateClaimableBalance op_create_claimable_balance = 14;
    case kOpCreateClaimableBalance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_create_claimable_balance_);
      break;
    }
    // .TW.Stellar.Proto.OperationClaimClaimableBalance op_claim_claimable_balance = 15;
    case kOpClaimClaimableBalance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_oneof_.op_claim_claimable_balance_);
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  switch (memo_type_oneof_case()) {
    // .TW.Stellar.Proto.MemoVoid memo_void = 9;
    case kMemoVoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_void_);
      break;
    }
    // .TW.Stellar.Proto.MemoText memo_text = 10;
    case kMemoText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_text_);
      break;
    }
    // .TW.Stellar.Proto.MemoId memo_id = 11;
    case kMemoId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_id_);
      break;
    }
    // .TW.Stellar.Proto.MemoHash memo_hash = 12;
    case kMemoHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_hash_);
      break;
    }
    // .TW.Stellar.Proto.MemoHash memo_return_hash = 13;
    case kMemoReturnHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memo_type_oneof_.memo_return_hash_);
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_passphrase().empty()) {
    _internal_set_passphrase(from._internal_passphrase());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_time_bounds() != 0) {
    _internal_set_time_bounds(from._internal_time_bounds());
  }
  switch (from.operation_oneof_case()) {
    case kOpCreateAccount: {
      _internal_mutable_op_create_account()->::TW::Stellar::Proto::OperationCreateAccount::MergeFrom(from._internal_op_create_account());
      break;
    }
    case kOpPayment: {
      _internal_mutable_op_payment()->::TW::Stellar::Proto::OperationPayment::MergeFrom(from._internal_op_payment());
      break;
    }
    case kOpChangeTrust: {
      _internal_mutable_op_change_trust()->::TW::Stellar::Proto::OperationChangeTrust::MergeFrom(from._internal_op_change_trust());
      break;
    }
    case kOpCreateClaimableBalance: {
      _internal_mutable_op_create_claimable_balance()->::TW::Stellar::Proto::OperationCreateClaimableBalance::MergeFrom(from._internal_op_create_claimable_balance());
      break;
    }
    case kOpClaimClaimableBalance: {
      _internal_mutable_op_claim_claimable_balance()->::TW::Stellar::Proto::OperationClaimClaimableBalance::MergeFrom(from._internal_op_claim_claimable_balance());
      break;
    }
    case OPERATION_ONEOF_NOT_SET: {
      break;
    }
  }
  switch (from.memo_type_oneof_case()) {
    case kMemoVoid: {
      _internal_mutable_memo_void()->::TW::Stellar::Proto::MemoVoid::MergeFrom(from._internal_memo_void());
      break;
    }
    case kMemoText: {
      _internal_mutable_memo_text()->::TW::Stellar::Proto::MemoText::MergeFrom(from._internal_memo_text());
      break;
    }
    case kMemoId: {
      _internal_mutable_memo_id()->::TW::Stellar::Proto::MemoId::MergeFrom(from._internal_memo_id());
      break;
    }
    case kMemoHash: {
      _internal_mutable_memo_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_hash());
      break;
    }
    case kMemoReturnHash: {
      _internal_mutable_memo_return_hash()->::TW::Stellar::Proto::MemoHash::MergeFrom(from._internal_memo_return_hash());
      break;
    }
    case MEMO_TYPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &passphrase_, lhs_arena,
      &other->passphrase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, time_bounds_)
      + sizeof(SigningInput::time_bounds_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, sequence_)>(
          reinterpret_cast<char*>(&sequence_),
          reinterpret_cast<char*>(&other->sequence_));
  swap(operation_oneof_, other->operation_oneof_);
  swap(memo_type_oneof_, other->memo_type_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[11]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Stellar.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Stellar.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Stellar.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Stellar.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.SigningOutput.signature"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Stellar.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Stellar.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string signature = 1;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.SigningOutput.signature");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Stellar.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Stellar.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Stellar.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Stellar.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Stellar.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Stellar_2eproto_getter, &descriptor_table_Stellar_2eproto_once,
      file_level_metadata_Stellar_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Stellar
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::Asset* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationCreateAccount* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationCreateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationCreateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationPayment* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationPayment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationChangeTrust* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationChangeTrust >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationChangeTrust >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::Claimant* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::Claimant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::Claimant >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationCreateClaimableBalance* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationCreateClaimableBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationCreateClaimableBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::OperationClaimClaimableBalance* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::OperationClaimClaimableBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::OperationClaimClaimableBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoVoid* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoVoid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoVoid >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoText* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoText >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoId* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoId >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::MemoHash* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::MemoHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::MemoHash >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Stellar::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Stellar::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Stellar::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
