// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LiquidStaking.proto

#include "LiquidStaking.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace LiquidStaking {
namespace Proto {
constexpr Status::Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
{}
struct StatusDefaultTypeInternal {
  constexpr StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDefaultTypeInternal _Status_default_instance_;
constexpr Asset::Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : liquid_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , denom_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , staking_token_(0)
{}
struct AssetDefaultTypeInternal {
  constexpr AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetDefaultTypeInternal _Asset_default_instance_;
constexpr Stake::Stake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_(nullptr){}
struct StakeDefaultTypeInternal {
  constexpr StakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StakeDefaultTypeInternal() {}
  union {
    Stake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StakeDefaultTypeInternal _Stake_default_instance_;
constexpr Unstake::Unstake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_(nullptr){}
struct UnstakeDefaultTypeInternal {
  constexpr UnstakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnstakeDefaultTypeInternal() {}
  union {
    Unstake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnstakeDefaultTypeInternal _Unstake_default_instance_;
constexpr Withdraw::Withdraw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_(nullptr){}
struct WithdrawDefaultTypeInternal {
  constexpr WithdrawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WithdrawDefaultTypeInternal() {}
  union {
    Withdraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WithdrawDefaultTypeInternal _Withdraw_default_instance_;
constexpr Input::Input(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : smart_contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(0)

  , blockchain_(0)

  , _oneof_case_{}{}
struct InputDefaultTypeInternal {
  constexpr InputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputDefaultTypeInternal() {}
  union {
    Input _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputDefaultTypeInternal _Input_default_instance_;
constexpr Output::Output(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , _oneof_case_{}{}
struct OutputDefaultTypeInternal {
  constexpr OutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputDefaultTypeInternal _Output_default_instance_;
}  // namespace Proto
}  // namespace LiquidStaking
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LiquidStaking_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LiquidStaking_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LiquidStaking_2eproto = nullptr;

const uint32_t TableStruct_LiquidStaking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Status, code_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Status, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Asset, staking_token_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Asset, liquid_token_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Asset, denom_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Asset, from_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Stake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Stake, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Stake, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Unstake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Unstake, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Unstake, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Unstake, receiver_address_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Unstake, receiver_chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Withdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Withdraw, asset_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Withdraw, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Withdraw, idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Input, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Input, smart_contract_address_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Input, protocol_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Input, blockchain_),
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Input, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Output, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Output, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::LiquidStaking::Proto::Output, signing_input_oneof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::LiquidStaking::Proto::Status)},
  { 8, -1, -1, sizeof(::TW::LiquidStaking::Proto::Asset)},
  { 18, -1, -1, sizeof(::TW::LiquidStaking::Proto::Stake)},
  { 26, -1, -1, sizeof(::TW::LiquidStaking::Proto::Unstake)},
  { 36, -1, -1, sizeof(::TW::LiquidStaking::Proto::Withdraw)},
  { 45, -1, -1, sizeof(::TW::LiquidStaking::Proto::Input)},
  { 58, -1, -1, sizeof(::TW::LiquidStaking::Proto::Output)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::LiquidStaking::Proto::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::LiquidStaking::Proto::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::LiquidStaking::Proto::_Stake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::LiquidStaking::Proto::_Unstake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::LiquidStaking::Proto::_Withdraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::LiquidStaking::Proto::_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::LiquidStaking::Proto::_Output_default_instance_),
};

const char descriptor_table_protodef_LiquidStaking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023LiquidStaking.proto\022\026TW.LiquidStaking."
  "Proto\032\016Ethereum.proto\032\014Cosmos.proto\032\013Apt"
  "os.proto\"K\n\006Status\0220\n\004code\030\001 \001(\0162\".TW.Li"
  "quidStaking.Proto.StatusCode\022\017\n\007message\030"
  "\002 \001(\t\"w\n\005Asset\0223\n\rstaking_token\030\001 \001(\0162\034."
  "TW.LiquidStaking.Proto.Coin\022\024\n\014liquid_to"
  "ken\030\002 \001(\t\022\r\n\005denom\030\003 \001(\t\022\024\n\014from_address"
  "\030\004 \001(\t\"E\n\005Stake\022,\n\005asset\030\001 \001(\0132\035.TW.Liqu"
  "idStaking.Proto.Asset\022\016\n\006amount\030\002 \001(\t\"|\n"
  "\007Unstake\022,\n\005asset\030\001 \001(\0132\035.TW.LiquidStaki"
  "ng.Proto.Asset\022\016\n\006amount\030\002 \001(\t\022\030\n\020receiv"
  "er_address\030\003 \001(\t\022\031\n\021receiver_chain_id\030\004 "
  "\001(\t\"U\n\010Withdraw\022,\n\005asset\030\001 \001(\0132\035.TW.Liqu"
  "idStaking.Proto.Asset\022\016\n\006amount\030\002 \001(\t\022\013\n"
  "\003idx\030\003 \001(\t\"\267\002\n\005Input\022.\n\005stake\030\001 \001(\0132\035.TW"
  ".LiquidStaking.Proto.StakeH\000\0222\n\007unstake\030"
  "\002 \001(\0132\037.TW.LiquidStaking.Proto.UnstakeH\000"
  "\0224\n\010withdraw\030\003 \001(\0132 .TW.LiquidStaking.Pr"
  "oto.WithdrawH\000\022\036\n\026smart_contract_address"
  "\030\004 \001(\t\0222\n\010protocol\030\005 \001(\0162 .TW.LiquidStak"
  "ing.Proto.Protocol\0226\n\nblockchain\030\006 \001(\0162\""
  ".TW.LiquidStaking.Proto.BlockchainB\010\n\006ac"
  "tion\"\344\001\n\006Output\022.\n\006status\030\001 \001(\0132\036.TW.Liq"
  "uidStaking.Proto.Status\0223\n\010ethereum\030\002 \001("
  "\0132\037.TW.Ethereum.Proto.SigningInputH\000\022/\n\006"
  "cosmos\030\003 \001(\0132\035.TW.Cosmos.Proto.SigningIn"
  "putH\000\022-\n\005aptos\030\004 \001(\0132\034.TW.Aptos.Proto.Si"
  "gningInputH\000B\025\n\023signing_input_oneof*6\n\004C"
  "oin\022\t\n\005MATIC\020\000\022\010\n\004ATOM\020\001\022\007\n\003BNB\020\002\022\007\n\003APT"
  "\020\003\022\007\n\003ETH\020\004*K\n\nBlockchain\022\014\n\010ETHEREUM\020\000\022"
  "\013\n\007POLYGON\020\001\022\n\n\006STRIDE\020\002\022\013\n\007BNB_BSC\020\003\022\t\n"
  "\005APTOS\020\004*:\n\010Protocol\022\013\n\007Strader\020\000\022\n\n\006Str"
  "ide\020\001\022\013\n\007Tortuga\020\002\022\010\n\004Lido\020\003*\347\001\n\nStatusC"
  "ode\022\006\n\002OK\020\000\022\030\n\024ERROR_ACTION_NOT_SET\020\001\0227\n"
  "3ERROR_TARGETED_BLOCKCHAIN_NOT_SUPPORTED"
  "_BY_PROTOCOL\020\002\022(\n$ERROR_SMART_CONTRACT_A"
  "DDRESS_NOT_SET\020\003\022%\n!ERROR_INPUT_PROTO_DE"
  "SERIALIZATION\020\004\022-\n)ERROR_OPERATION_NOT_S"
  "UPPORTED_BY_PROTOCOL\020\005B\027\n\025wallet.core.jn"
  "i.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LiquidStaking_2eproto_deps[3] = {
  &::descriptor_table_Aptos_2eproto,
  &::descriptor_table_Cosmos_2eproto,
  &::descriptor_table_Ethereum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LiquidStaking_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LiquidStaking_2eproto = {
  false, false, 1575, descriptor_table_protodef_LiquidStaking_2eproto, "LiquidStaking.proto", 
  &descriptor_table_LiquidStaking_2eproto_once, descriptor_table_LiquidStaking_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_LiquidStaking_2eproto::offsets,
  file_level_metadata_LiquidStaking_2eproto, file_level_enum_descriptors_LiquidStaking_2eproto, file_level_service_descriptors_LiquidStaking_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_LiquidStaking_2eproto_getter() {
  return &descriptor_table_LiquidStaking_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_LiquidStaking_2eproto(&descriptor_table_LiquidStaking_2eproto);
namespace TW {
namespace LiquidStaking {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Coin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LiquidStaking_2eproto);
  return file_level_enum_descriptors_LiquidStaking_2eproto[0];
}
bool Coin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Blockchain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LiquidStaking_2eproto);
  return file_level_enum_descriptors_LiquidStaking_2eproto[1];
}
bool Blockchain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LiquidStaking_2eproto);
  return file_level_enum_descriptors_LiquidStaking_2eproto[2];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LiquidStaking_2eproto);
  return file_level_enum_descriptors_LiquidStaking_2eproto[3];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.LiquidStaking.Proto.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:TW.LiquidStaking.Proto.Status)
}

inline void Status::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:TW.LiquidStaking.Proto.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.LiquidStaking.Proto.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.LiquidStaking.Proto.StatusCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::TW::LiquidStaking::Proto::StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Status.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.LiquidStaking.Proto.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.StatusCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Status.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.LiquidStaking.Proto.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.LiquidStaking.Proto.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .TW.LiquidStaking.Proto.StatusCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }

void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Status *>(to)->MergeFrom(
      static_cast<const Status &>(from));
}


void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.LiquidStaking.Proto.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.LiquidStaking.Proto.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LiquidStaking_2eproto_getter, &descriptor_table_LiquidStaking_2eproto_once,
      file_level_metadata_LiquidStaking_2eproto[0]);
}

// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.LiquidStaking.Proto.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  liquid_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    liquid_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_liquid_token().empty()) {
    liquid_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_liquid_token(), 
      GetArenaForAllocation());
  }
  denom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    denom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_denom(), 
      GetArenaForAllocation());
  }
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_address().empty()) {
    from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_address(), 
      GetArenaForAllocation());
  }
  staking_token_ = from.staking_token_;
  // @@protoc_insertion_point(copy_constructor:TW.LiquidStaking.Proto.Asset)
}

inline void Asset::SharedCtor() {
liquid_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  liquid_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
denom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  denom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
staking_token_ = 0;
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:TW.LiquidStaking.Proto.Asset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  liquid_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  denom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.LiquidStaking.Proto.Asset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  liquid_token_.ClearToEmpty();
  denom_.ClearToEmpty();
  from_address_.ClearToEmpty();
  staking_token_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.LiquidStaking.Proto.Coin staking_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_staking_token(static_cast<::TW::LiquidStaking::Proto::Coin>(val));
        } else
          goto handle_unusual;
        continue;
      // string liquid_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_liquid_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Asset.liquid_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string denom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_denom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Asset.denom"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Asset.from_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Asset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.LiquidStaking.Proto.Asset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.Coin staking_token = 1;
  if (this->_internal_staking_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_staking_token(), target);
  }

  // string liquid_token = 2;
  if (!this->_internal_liquid_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liquid_token().data(), static_cast<int>(this->_internal_liquid_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Asset.liquid_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_liquid_token(), target);
  }

  // string denom = 3;
  if (!this->_internal_denom().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_denom().data(), static_cast<int>(this->_internal_denom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Asset.denom");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_denom(), target);
  }

  // string from_address = 4;
  if (!this->_internal_from_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Asset.from_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_from_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.LiquidStaking.Proto.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.LiquidStaking.Proto.Asset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string liquid_token = 2;
  if (!this->_internal_liquid_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_liquid_token());
  }

  // string denom = 3;
  if (!this->_internal_denom().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denom());
  }

  // string from_address = 4;
  if (!this->_internal_from_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_address());
  }

  // .TW.LiquidStaking.Proto.Coin staking_token = 1;
  if (this->_internal_staking_token() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_staking_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }

void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Asset *>(to)->MergeFrom(
      static_cast<const Asset &>(from));
}


void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.LiquidStaking.Proto.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_liquid_token().empty()) {
    _internal_set_liquid_token(from._internal_liquid_token());
  }
  if (!from._internal_denom().empty()) {
    _internal_set_denom(from._internal_denom());
  }
  if (!from._internal_from_address().empty()) {
    _internal_set_from_address(from._internal_from_address());
  }
  if (from._internal_staking_token() != 0) {
    _internal_set_staking_token(from._internal_staking_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.LiquidStaking.Proto.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &liquid_token_, lhs_arena,
      &other->liquid_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &denom_, lhs_arena,
      &other->denom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_address_, lhs_arena,
      &other->from_address_, rhs_arena
  );
  swap(staking_token_, other->staking_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LiquidStaking_2eproto_getter, &descriptor_table_LiquidStaking_2eproto_once,
      file_level_metadata_LiquidStaking_2eproto[1]);
}

// ===================================================================

class Stake::_Internal {
 public:
  static const ::TW::LiquidStaking::Proto::Asset& asset(const Stake* msg);
};

const ::TW::LiquidStaking::Proto::Asset&
Stake::_Internal::asset(const Stake* msg) {
  return *msg->asset_;
}
Stake::Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.LiquidStaking.Proto.Stake)
}
Stake::Stake(const Stake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_asset()) {
    asset_ = new ::TW::LiquidStaking::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.LiquidStaking.Proto.Stake)
}

inline void Stake::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
asset_ = nullptr;
}

Stake::~Stake() {
  // @@protoc_insertion_point(destructor:TW.LiquidStaking.Proto.Stake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Stake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_;
}

void Stake::ArenaDtor(void* object) {
  Stake* _this = reinterpret_cast< Stake* >(object);
  (void)_this;
}
void Stake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.LiquidStaking.Proto.Stake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.LiquidStaking.Proto.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Stake.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.LiquidStaking.Proto.Stake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Stake.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.LiquidStaking.Proto.Stake)
  return target;
}

size_t Stake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.LiquidStaking.Proto.Stake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stake::GetClassData() const { return &_class_data_; }

void Stake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stake *>(to)->MergeFrom(
      static_cast<const Stake &>(from));
}


void Stake::MergeFrom(const Stake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.LiquidStaking.Proto.Stake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_has_asset()) {
    _internal_mutable_asset()->::TW::LiquidStaking::Proto::Asset::MergeFrom(from._internal_asset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stake::CopyFrom(const Stake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.LiquidStaking.Proto.Stake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stake::IsInitialized() const {
  return true;
}

void Stake::InternalSwap(Stake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  swap(asset_, other->asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LiquidStaking_2eproto_getter, &descriptor_table_LiquidStaking_2eproto_once,
      file_level_metadata_LiquidStaking_2eproto[2]);
}

// ===================================================================

class Unstake::_Internal {
 public:
  static const ::TW::LiquidStaking::Proto::Asset& asset(const Unstake* msg);
};

const ::TW::LiquidStaking::Proto::Asset&
Unstake::_Internal::asset(const Unstake* msg) {
  return *msg->asset_;
}
Unstake::Unstake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.LiquidStaking.Proto.Unstake)
}
Unstake::Unstake(const Unstake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArenaForAllocation());
  }
  receiver_chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_chain_id().empty()) {
    receiver_chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_chain_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_asset()) {
    asset_ = new ::TW::LiquidStaking::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.LiquidStaking.Proto.Unstake)
}

inline void Unstake::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
asset_ = nullptr;
}

Unstake::~Unstake() {
  // @@protoc_insertion_point(destructor:TW.LiquidStaking.Proto.Unstake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Unstake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_;
}

void Unstake::ArenaDtor(void* object) {
  Unstake* _this = reinterpret_cast< Unstake* >(object);
  (void)_this;
}
void Unstake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Unstake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Unstake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.LiquidStaking.Proto.Unstake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  receiver_chain_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unstake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.LiquidStaking.Proto.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Unstake.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Unstake.receiver_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver_chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_receiver_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Unstake.receiver_chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Unstake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.LiquidStaking.Proto.Unstake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Unstake.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // string receiver_address = 3;
  if (!this->_internal_receiver_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_address().data(), static_cast<int>(this->_internal_receiver_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Unstake.receiver_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiver_address(), target);
  }

  // string receiver_chain_id = 4;
  if (!this->_internal_receiver_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_chain_id().data(), static_cast<int>(this->_internal_receiver_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Unstake.receiver_chain_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_receiver_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.LiquidStaking.Proto.Unstake)
  return target;
}

size_t Unstake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.LiquidStaking.Proto.Unstake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string receiver_address = 3;
  if (!this->_internal_receiver_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_address());
  }

  // string receiver_chain_id = 4;
  if (!this->_internal_receiver_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_chain_id());
  }

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Unstake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Unstake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Unstake::GetClassData() const { return &_class_data_; }

void Unstake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Unstake *>(to)->MergeFrom(
      static_cast<const Unstake &>(from));
}


void Unstake::MergeFrom(const Unstake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.LiquidStaking.Proto.Unstake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_receiver_address().empty()) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (!from._internal_receiver_chain_id().empty()) {
    _internal_set_receiver_chain_id(from._internal_receiver_chain_id());
  }
  if (from._internal_has_asset()) {
    _internal_mutable_asset()->::TW::LiquidStaking::Proto::Asset::MergeFrom(from._internal_asset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Unstake::CopyFrom(const Unstake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.LiquidStaking.Proto.Unstake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unstake::IsInitialized() const {
  return true;
}

void Unstake::InternalSwap(Unstake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_address_, lhs_arena,
      &other->receiver_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_chain_id_, lhs_arena,
      &other->receiver_chain_id_, rhs_arena
  );
  swap(asset_, other->asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Unstake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LiquidStaking_2eproto_getter, &descriptor_table_LiquidStaking_2eproto_once,
      file_level_metadata_LiquidStaking_2eproto[3]);
}

// ===================================================================

class Withdraw::_Internal {
 public:
  static const ::TW::LiquidStaking::Proto::Asset& asset(const Withdraw* msg);
};

const ::TW::LiquidStaking::Proto::Asset&
Withdraw::_Internal::asset(const Withdraw* msg) {
  return *msg->asset_;
}
Withdraw::Withdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.LiquidStaking.Proto.Withdraw)
}
Withdraw::Withdraw(const Withdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  idx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    idx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idx().empty()) {
    idx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idx(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_asset()) {
    asset_ = new ::TW::LiquidStaking::Proto::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.LiquidStaking.Proto.Withdraw)
}

inline void Withdraw::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
idx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  idx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
asset_ = nullptr;
}

Withdraw::~Withdraw() {
  // @@protoc_insertion_point(destructor:TW.LiquidStaking.Proto.Withdraw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Withdraw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_;
}

void Withdraw::ArenaDtor(void* object) {
  Withdraw* _this = reinterpret_cast< Withdraw* >(object);
  (void)_this;
}
void Withdraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Withdraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Withdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.LiquidStaking.Proto.Withdraw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  idx_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Withdraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.LiquidStaking.Proto.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Withdraw.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_idx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Withdraw.idx"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Withdraw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.LiquidStaking.Proto.Withdraw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Withdraw.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // string idx = 3;
  if (!this->_internal_idx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idx().data(), static_cast<int>(this->_internal_idx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Withdraw.idx");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.LiquidStaking.Proto.Withdraw)
  return target;
}

size_t Withdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.LiquidStaking.Proto.Withdraw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string idx = 3;
  if (!this->_internal_idx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idx());
  }

  // .TW.LiquidStaking.Proto.Asset asset = 1;
  if (this->_internal_has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Withdraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Withdraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Withdraw::GetClassData() const { return &_class_data_; }

void Withdraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Withdraw *>(to)->MergeFrom(
      static_cast<const Withdraw &>(from));
}


void Withdraw::MergeFrom(const Withdraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.LiquidStaking.Proto.Withdraw)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_idx().empty()) {
    _internal_set_idx(from._internal_idx());
  }
  if (from._internal_has_asset()) {
    _internal_mutable_asset()->::TW::LiquidStaking::Proto::Asset::MergeFrom(from._internal_asset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Withdraw::CopyFrom(const Withdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.LiquidStaking.Proto.Withdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdraw::IsInitialized() const {
  return true;
}

void Withdraw::InternalSwap(Withdraw* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &idx_, lhs_arena,
      &other->idx_, rhs_arena
  );
  swap(asset_, other->asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Withdraw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LiquidStaking_2eproto_getter, &descriptor_table_LiquidStaking_2eproto_once,
      file_level_metadata_LiquidStaking_2eproto[4]);
}

// ===================================================================

class Input::_Internal {
 public:
  static const ::TW::LiquidStaking::Proto::Stake& stake(const Input* msg);
  static const ::TW::LiquidStaking::Proto::Unstake& unstake(const Input* msg);
  static const ::TW::LiquidStaking::Proto::Withdraw& withdraw(const Input* msg);
};

const ::TW::LiquidStaking::Proto::Stake&
Input::_Internal::stake(const Input* msg) {
  return *msg->action_.stake_;
}
const ::TW::LiquidStaking::Proto::Unstake&
Input::_Internal::unstake(const Input* msg) {
  return *msg->action_.unstake_;
}
const ::TW::LiquidStaking::Proto::Withdraw&
Input::_Internal::withdraw(const Input* msg) {
  return *msg->action_.withdraw_;
}
void Input::set_allocated_stake(::TW::LiquidStaking::Proto::Stake* stake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (stake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::LiquidStaking::Proto::Stake>::GetOwningArena(stake);
    if (message_arena != submessage_arena) {
      stake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stake, submessage_arena);
    }
    set_has_stake();
    action_.stake_ = stake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Input.stake)
}
void Input::set_allocated_unstake(::TW::LiquidStaking::Proto::Unstake* unstake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (unstake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::LiquidStaking::Proto::Unstake>::GetOwningArena(unstake);
    if (message_arena != submessage_arena) {
      unstake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unstake, submessage_arena);
    }
    set_has_unstake();
    action_.unstake_ = unstake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Input.unstake)
}
void Input::set_allocated_withdraw(::TW::LiquidStaking::Proto::Withdraw* withdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (withdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::LiquidStaking::Proto::Withdraw>::GetOwningArena(withdraw);
    if (message_arena != submessage_arena) {
      withdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw, submessage_arena);
    }
    set_has_withdraw();
    action_.withdraw_ = withdraw;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Input.withdraw)
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.LiquidStaking.Proto.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  smart_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    smart_contract_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_smart_contract_address().empty()) {
    smart_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smart_contract_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockchain_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(blockchain_));
  clear_has_action();
  switch (from.action_case()) {
    case kStake: {
      _internal_mutable_stake()->::TW::LiquidStaking::Proto::Stake::MergeFrom(from._internal_stake());
      break;
    }
    case kUnstake: {
      _internal_mutable_unstake()->::TW::LiquidStaking::Proto::Unstake::MergeFrom(from._internal_unstake());
      break;
    }
    case kWithdraw: {
      _internal_mutable_withdraw()->::TW::LiquidStaking::Proto::Withdraw::MergeFrom(from._internal_withdraw());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.LiquidStaking.Proto.Input)
}

inline void Input::SharedCtor() {
smart_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  smart_contract_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protocol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blockchain_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(blockchain_));
clear_has_action();
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:TW.LiquidStaking.Proto.Input)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  smart_contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_action()) {
    clear_action();
  }
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Input::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:TW.LiquidStaking.Proto.Input)
  switch (action_case()) {
    case kStake: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.stake_;
      }
      break;
    }
    case kUnstake: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.unstake_;
      }
      break;
    }
    case kWithdraw: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.withdraw_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.LiquidStaking.Proto.Input)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smart_contract_address_.ClearToEmpty();
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockchain_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(blockchain_));
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.LiquidStaking.Proto.Stake stake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.LiquidStaking.Proto.Unstake unstake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unstake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.LiquidStaking.Proto.Withdraw withdraw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string smart_contract_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_smart_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.LiquidStaking.Proto.Input.smart_contract_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.LiquidStaking.Proto.Protocol protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::TW::LiquidStaking::Proto::Protocol>(val));
        } else
          goto handle_unusual;
        continue;
      // .TW.LiquidStaking.Proto.Blockchain blockchain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_blockchain(static_cast<::TW::LiquidStaking::Proto::Blockchain>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Input::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.LiquidStaking.Proto.Input)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.Stake stake = 1;
  if (_internal_has_stake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stake(this), target, stream);
  }

  // .TW.LiquidStaking.Proto.Unstake unstake = 2;
  if (_internal_has_unstake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unstake(this), target, stream);
  }

  // .TW.LiquidStaking.Proto.Withdraw withdraw = 3;
  if (_internal_has_withdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::withdraw(this), target, stream);
  }

  // string smart_contract_address = 4;
  if (!this->_internal_smart_contract_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smart_contract_address().data(), static_cast<int>(this->_internal_smart_contract_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.LiquidStaking.Proto.Input.smart_contract_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_smart_contract_address(), target);
  }

  // .TW.LiquidStaking.Proto.Protocol protocol = 5;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_protocol(), target);
  }

  // .TW.LiquidStaking.Proto.Blockchain blockchain = 6;
  if (this->_internal_blockchain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_blockchain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.LiquidStaking.Proto.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.LiquidStaking.Proto.Input)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string smart_contract_address = 4;
  if (!this->_internal_smart_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smart_contract_address());
  }

  // .TW.LiquidStaking.Proto.Protocol protocol = 5;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // .TW.LiquidStaking.Proto.Blockchain blockchain = 6;
  if (this->_internal_blockchain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blockchain());
  }

  switch (action_case()) {
    // .TW.LiquidStaking.Proto.Stake stake = 1;
    case kStake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stake_);
      break;
    }
    // .TW.LiquidStaking.Proto.Unstake unstake = 2;
    case kUnstake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.unstake_);
      break;
    }
    // .TW.LiquidStaking.Proto.Withdraw withdraw = 3;
    case kWithdraw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.withdraw_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Input::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Input::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Input::GetClassData() const { return &_class_data_; }

void Input::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Input *>(to)->MergeFrom(
      static_cast<const Input &>(from));
}


void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.LiquidStaking.Proto.Input)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_smart_contract_address().empty()) {
    _internal_set_smart_contract_address(from._internal_smart_contract_address());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_blockchain() != 0) {
    _internal_set_blockchain(from._internal_blockchain());
  }
  switch (from.action_case()) {
    case kStake: {
      _internal_mutable_stake()->::TW::LiquidStaking::Proto::Stake::MergeFrom(from._internal_stake());
      break;
    }
    case kUnstake: {
      _internal_mutable_unstake()->::TW::LiquidStaking::Proto::Unstake::MergeFrom(from._internal_unstake());
      break;
    }
    case kWithdraw: {
      _internal_mutable_withdraw()->::TW::LiquidStaking::Proto::Withdraw::MergeFrom(from._internal_withdraw());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.LiquidStaking.Proto.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smart_contract_address_, lhs_arena,
      &other->smart_contract_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, blockchain_)
      + sizeof(Input::blockchain_)
      - PROTOBUF_FIELD_OFFSET(Input, protocol_)>(
          reinterpret_cast<char*>(&protocol_),
          reinterpret_cast<char*>(&other->protocol_));
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LiquidStaking_2eproto_getter, &descriptor_table_LiquidStaking_2eproto_once,
      file_level_metadata_LiquidStaking_2eproto[5]);
}

// ===================================================================

class Output::_Internal {
 public:
  static const ::TW::LiquidStaking::Proto::Status& status(const Output* msg);
  static const ::TW::Ethereum::Proto::SigningInput& ethereum(const Output* msg);
  static const ::TW::Cosmos::Proto::SigningInput& cosmos(const Output* msg);
  static const ::TW::Aptos::Proto::SigningInput& aptos(const Output* msg);
};

const ::TW::LiquidStaking::Proto::Status&
Output::_Internal::status(const Output* msg) {
  return *msg->status_;
}
const ::TW::Ethereum::Proto::SigningInput&
Output::_Internal::ethereum(const Output* msg) {
  return *msg->signing_input_oneof_.ethereum_;
}
const ::TW::Cosmos::Proto::SigningInput&
Output::_Internal::cosmos(const Output* msg) {
  return *msg->signing_input_oneof_.cosmos_;
}
const ::TW::Aptos::Proto::SigningInput&
Output::_Internal::aptos(const Output* msg) {
  return *msg->signing_input_oneof_.aptos_;
}
void Output::set_allocated_ethereum(::TW::Ethereum::Proto::SigningInput* ethereum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_signing_input_oneof();
  if (ethereum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ethereum));
    if (message_arena != submessage_arena) {
      ethereum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethereum, submessage_arena);
    }
    set_has_ethereum();
    signing_input_oneof_.ethereum_ = ethereum;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Output.ethereum)
}
void Output::clear_ethereum() {
  if (_internal_has_ethereum()) {
    if (GetArenaForAllocation() == nullptr) {
      delete signing_input_oneof_.ethereum_;
    }
    clear_has_signing_input_oneof();
  }
}
void Output::set_allocated_cosmos(::TW::Cosmos::Proto::SigningInput* cosmos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_signing_input_oneof();
  if (cosmos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cosmos));
    if (message_arena != submessage_arena) {
      cosmos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cosmos, submessage_arena);
    }
    set_has_cosmos();
    signing_input_oneof_.cosmos_ = cosmos;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Output.cosmos)
}
void Output::clear_cosmos() {
  if (_internal_has_cosmos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete signing_input_oneof_.cosmos_;
    }
    clear_has_signing_input_oneof();
  }
}
void Output::set_allocated_aptos(::TW::Aptos::Proto::SigningInput* aptos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_signing_input_oneof();
  if (aptos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aptos));
    if (message_arena != submessage_arena) {
      aptos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aptos, submessage_arena);
    }
    set_has_aptos();
    signing_input_oneof_.aptos_ = aptos;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.LiquidStaking.Proto.Output.aptos)
}
void Output::clear_aptos() {
  if (_internal_has_aptos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete signing_input_oneof_.aptos_;
    }
    clear_has_signing_input_oneof();
  }
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.LiquidStaking.Proto.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::TW::LiquidStaking::Proto::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_signing_input_oneof();
  switch (from.signing_input_oneof_case()) {
    case kEthereum: {
      _internal_mutable_ethereum()->::TW::Ethereum::Proto::SigningInput::MergeFrom(from._internal_ethereum());
      break;
    }
    case kCosmos: {
      _internal_mutable_cosmos()->::TW::Cosmos::Proto::SigningInput::MergeFrom(from._internal_cosmos());
      break;
    }
    case kAptos: {
      _internal_mutable_aptos()->::TW::Aptos::Proto::SigningInput::MergeFrom(from._internal_aptos());
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.LiquidStaking.Proto.Output)
}

inline void Output::SharedCtor() {
status_ = nullptr;
clear_has_signing_input_oneof();
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:TW.LiquidStaking.Proto.Output)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (has_signing_input_oneof()) {
    clear_signing_input_oneof();
  }
}

void Output::ArenaDtor(void* object) {
  Output* _this = reinterpret_cast< Output* >(object);
  (void)_this;
}
void Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Output::clear_signing_input_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.LiquidStaking.Proto.Output)
  switch (signing_input_oneof_case()) {
    case kEthereum: {
      if (GetArenaForAllocation() == nullptr) {
        delete signing_input_oneof_.ethereum_;
      }
      break;
    }
    case kCosmos: {
      if (GetArenaForAllocation() == nullptr) {
        delete signing_input_oneof_.cosmos_;
      }
      break;
    }
    case kAptos: {
      if (GetArenaForAllocation() == nullptr) {
        delete signing_input_oneof_.aptos_;
      }
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGNING_INPUT_ONEOF_NOT_SET;
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.LiquidStaking.Proto.Output)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  clear_signing_input_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.LiquidStaking.Proto.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.SigningInput ethereum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethereum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cosmos.Proto.SigningInput cosmos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cosmos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.SigningInput aptos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aptos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.LiquidStaking.Proto.Output)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .TW.Ethereum.Proto.SigningInput ethereum = 2;
  if (_internal_has_ethereum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ethereum(this), target, stream);
  }

  // .TW.Cosmos.Proto.SigningInput cosmos = 3;
  if (_internal_has_cosmos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cosmos(this), target, stream);
  }

  // .TW.Aptos.Proto.SigningInput aptos = 4;
  if (_internal_has_aptos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::aptos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.LiquidStaking.Proto.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.LiquidStaking.Proto.Output)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.LiquidStaking.Proto.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (signing_input_oneof_case()) {
    // .TW.Ethereum.Proto.SigningInput ethereum = 2;
    case kEthereum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.ethereum_);
      break;
    }
    // .TW.Cosmos.Proto.SigningInput cosmos = 3;
    case kCosmos: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.cosmos_);
      break;
    }
    // .TW.Aptos.Proto.SigningInput aptos = 4;
    case kAptos: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.aptos_);
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output::GetClassData() const { return &_class_data_; }

void Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Output *>(to)->MergeFrom(
      static_cast<const Output &>(from));
}


void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.LiquidStaking.Proto.Output)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::TW::LiquidStaking::Proto::Status::MergeFrom(from._internal_status());
  }
  switch (from.signing_input_oneof_case()) {
    case kEthereum: {
      _internal_mutable_ethereum()->::TW::Ethereum::Proto::SigningInput::MergeFrom(from._internal_ethereum());
      break;
    }
    case kCosmos: {
      _internal_mutable_cosmos()->::TW::Cosmos::Proto::SigningInput::MergeFrom(from._internal_cosmos());
      break;
    }
    case kAptos: {
      _internal_mutable_aptos()->::TW::Aptos::Proto::SigningInput::MergeFrom(from._internal_aptos());
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.LiquidStaking.Proto.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(signing_input_oneof_, other->signing_input_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LiquidStaking_2eproto_getter, &descriptor_table_LiquidStaking_2eproto_once,
      file_level_metadata_LiquidStaking_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace LiquidStaking
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::LiquidStaking::Proto::Status* Arena::CreateMaybeMessage< ::TW::LiquidStaking::Proto::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::LiquidStaking::Proto::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::LiquidStaking::Proto::Asset* Arena::CreateMaybeMessage< ::TW::LiquidStaking::Proto::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::LiquidStaking::Proto::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::LiquidStaking::Proto::Stake* Arena::CreateMaybeMessage< ::TW::LiquidStaking::Proto::Stake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::LiquidStaking::Proto::Stake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::LiquidStaking::Proto::Unstake* Arena::CreateMaybeMessage< ::TW::LiquidStaking::Proto::Unstake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::LiquidStaking::Proto::Unstake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::LiquidStaking::Proto::Withdraw* Arena::CreateMaybeMessage< ::TW::LiquidStaking::Proto::Withdraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::LiquidStaking::Proto::Withdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::LiquidStaking::Proto::Input* Arena::CreateMaybeMessage< ::TW::LiquidStaking::Proto::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::LiquidStaking::Proto::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::LiquidStaking::Proto::Output* Arena::CreateMaybeMessage< ::TW::LiquidStaking::Proto::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::LiquidStaking::Proto::Output >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
