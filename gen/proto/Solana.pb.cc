// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Solana.proto

#include "Solana.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Solana {
namespace Proto {
constexpr Transfer::Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : references_()
  , recipient_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct TransferDefaultTypeInternal {
  constexpr TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferDefaultTypeInternal() {}
  union {
    Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferDefaultTypeInternal _Transfer_default_instance_;
constexpr DelegateStake::DelegateStake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_pubkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stake_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct DelegateStakeDefaultTypeInternal {
  constexpr DelegateStakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegateStakeDefaultTypeInternal() {}
  union {
    DelegateStake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegateStakeDefaultTypeInternal _DelegateStake_default_instance_;
constexpr DeactivateStake::DeactivateStake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stake_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeactivateStakeDefaultTypeInternal {
  constexpr DeactivateStakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeactivateStakeDefaultTypeInternal() {}
  union {
    DeactivateStake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeactivateStakeDefaultTypeInternal _DeactivateStake_default_instance_;
constexpr DeactivateAllStake::DeactivateAllStake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stake_accounts_(){}
struct DeactivateAllStakeDefaultTypeInternal {
  constexpr DeactivateAllStakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeactivateAllStakeDefaultTypeInternal() {}
  union {
    DeactivateAllStake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeactivateAllStakeDefaultTypeInternal _DeactivateAllStake_default_instance_;
constexpr WithdrawStake::WithdrawStake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stake_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct WithdrawStakeDefaultTypeInternal {
  constexpr WithdrawStakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WithdrawStakeDefaultTypeInternal() {}
  union {
    WithdrawStake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WithdrawStakeDefaultTypeInternal _WithdrawStake_default_instance_;
constexpr StakeAccountValue::StakeAccountValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stake_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct StakeAccountValueDefaultTypeInternal {
  constexpr StakeAccountValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StakeAccountValueDefaultTypeInternal() {}
  union {
    StakeAccountValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StakeAccountValueDefaultTypeInternal _StakeAccountValue_default_instance_;
constexpr WithdrawAllStake::WithdrawAllStake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stake_accounts_(){}
struct WithdrawAllStakeDefaultTypeInternal {
  constexpr WithdrawAllStakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WithdrawAllStakeDefaultTypeInternal() {}
  union {
    WithdrawAllStake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WithdrawAllStakeDefaultTypeInternal _WithdrawAllStake_default_instance_;
constexpr CreateTokenAccount::CreateTokenAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : main_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_mint_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateTokenAccountDefaultTypeInternal {
  constexpr CreateTokenAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTokenAccountDefaultTypeInternal() {}
  union {
    CreateTokenAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTokenAccountDefaultTypeInternal _CreateTokenAccount_default_instance_;
constexpr TokenTransfer::TokenTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : references_()
  , token_mint_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_token_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recipient_token_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(uint64_t{0u})
  , decimals_(0u){}
struct TokenTransferDefaultTypeInternal {
  constexpr TokenTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenTransferDefaultTypeInternal() {}
  union {
    TokenTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenTransferDefaultTypeInternal _TokenTransfer_default_instance_;
constexpr CreateAndTransferToken::CreateAndTransferToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : references_()
  , recipient_main_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_mint_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recipient_token_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_token_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(uint64_t{0u})
  , decimals_(0u){}
struct CreateAndTransferTokenDefaultTypeInternal {
  constexpr CreateAndTransferTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAndTransferTokenDefaultTypeInternal() {}
  union {
    CreateAndTransferToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAndTransferTokenDefaultTypeInternal _CreateAndTransferToken_default_instance_;
constexpr CreateNonceAccount::CreateNonceAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_account_private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rent_(uint64_t{0u}){}
struct CreateNonceAccountDefaultTypeInternal {
  constexpr CreateNonceAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateNonceAccountDefaultTypeInternal() {}
  union {
    CreateNonceAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateNonceAccountDefaultTypeInternal _CreateNonceAccount_default_instance_;
constexpr WithdrawNonceAccount::WithdrawNonceAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recipient_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct WithdrawNonceAccountDefaultTypeInternal {
  constexpr WithdrawNonceAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WithdrawNonceAccountDefaultTypeInternal() {}
  union {
    WithdrawNonceAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WithdrawNonceAccountDefaultTypeInternal _WithdrawNonceAccount_default_instance_;
constexpr AdvanceNonceAccount::AdvanceNonceAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AdvanceNonceAccountDefaultTypeInternal {
  constexpr AdvanceNonceAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdvanceNonceAccountDefaultTypeInternal() {}
  union {
    AdvanceNonceAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdvanceNonceAccountDefaultTypeInternal _AdvanceNonceAccount_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recent_blockhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_payer_private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_payer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , v0_msg_(false)
  , _oneof_case_{}{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unsigned_tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
constexpr PreSigningOutput::PreSigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signers_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct PreSigningOutputDefaultTypeInternal {
  constexpr PreSigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreSigningOutputDefaultTypeInternal() {}
  union {
    PreSigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreSigningOutputDefaultTypeInternal _PreSigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Solana
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Solana_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Solana_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Solana_2eproto = nullptr;

const uint32_t TableStruct_Solana_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, recipient_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::Transfer, references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, validator_pubkey_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DelegateStake, stake_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateStake, stake_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateAllStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::DeactivateAllStake, stake_accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawStake, stake_account_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawStake, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::StakeAccountValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::StakeAccountValue, stake_account_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::StakeAccountValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawAllStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawAllStake, stake_accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, main_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, token_mint_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateTokenAccount, token_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, token_mint_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, sender_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, recipient_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, decimals_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::TokenTransfer, references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, recipient_main_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, token_mint_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, recipient_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, sender_token_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, decimals_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateAndTransferToken, references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateNonceAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateNonceAccount, nonce_account_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateNonceAccount, rent_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::CreateNonceAccount, nonce_account_private_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawNonceAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawNonceAccount, nonce_account_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawNonceAccount, recipient_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::WithdrawNonceAccount, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AdvanceNonceAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::AdvanceNonceAccount, nonce_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, recent_blockhash_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, v0_msg_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, nonce_account_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, fee_payer_private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, fee_payer_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningInput, transaction_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningOutput, error_message_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::SigningOutput, unsigned_tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::PreSigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::PreSigningOutput, signers_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::PreSigningOutput, data_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::PreSigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Solana::Proto::PreSigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Solana::Proto::Transfer)},
  { 10, -1, -1, sizeof(::TW::Solana::Proto::DelegateStake)},
  { 19, -1, -1, sizeof(::TW::Solana::Proto::DeactivateStake)},
  { 26, -1, -1, sizeof(::TW::Solana::Proto::DeactivateAllStake)},
  { 33, -1, -1, sizeof(::TW::Solana::Proto::WithdrawStake)},
  { 41, -1, -1, sizeof(::TW::Solana::Proto::StakeAccountValue)},
  { 49, -1, -1, sizeof(::TW::Solana::Proto::WithdrawAllStake)},
  { 56, -1, -1, sizeof(::TW::Solana::Proto::CreateTokenAccount)},
  { 65, -1, -1, sizeof(::TW::Solana::Proto::TokenTransfer)},
  { 78, -1, -1, sizeof(::TW::Solana::Proto::CreateAndTransferToken)},
  { 92, -1, -1, sizeof(::TW::Solana::Proto::CreateNonceAccount)},
  { 101, -1, -1, sizeof(::TW::Solana::Proto::WithdrawNonceAccount)},
  { 110, -1, -1, sizeof(::TW::Solana::Proto::AdvanceNonceAccount)},
  { 117, -1, -1, sizeof(::TW::Solana::Proto::SigningInput)},
  { 143, -1, -1, sizeof(::TW::Solana::Proto::SigningOutput)},
  { 153, -1, -1, sizeof(::TW::Solana::Proto::PreSigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_DelegateStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_DeactivateStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_DeactivateAllStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_WithdrawStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_StakeAccountValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_WithdrawAllStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_CreateTokenAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_TokenTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_CreateAndTransferToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_CreateNonceAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_WithdrawNonceAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_AdvanceNonceAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_SigningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Solana::Proto::_PreSigningOutput_default_instance_),
};

const char descriptor_table_protodef_Solana_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Solana.proto\022\017TW.Solana.Proto\032\014Common."
  "proto\"N\n\010Transfer\022\021\n\trecipient\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\004\022\014\n\004memo\030\003 \001(\t\022\022\n\nreferences\030"
  "\004 \003(\t\"O\n\rDelegateStake\022\030\n\020validator_pubk"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\004\022\025\n\rstake_account"
  "\030\003 \001(\t\"(\n\017DeactivateStake\022\025\n\rstake_accou"
  "nt\030\001 \001(\t\",\n\022DeactivateAllStake\022\026\n\016stake_"
  "accounts\030\001 \003(\t\"5\n\rWithdrawStake\022\025\n\rstake"
  "_account\030\001 \001(\t\022\r\n\005value\030\002 \001(\004\"9\n\021StakeAc"
  "countValue\022\025\n\rstake_account\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\004\"N\n\020WithdrawAllStake\022:\n\016stake_ac"
  "counts\030\001 \003(\0132\".TW.Solana.Proto.StakeAcco"
  "untValue\"]\n\022CreateTokenAccount\022\024\n\014main_a"
  "ddress\030\001 \001(\t\022\032\n\022token_mint_address\030\002 \001(\t"
  "\022\025\n\rtoken_address\030\003 \001(\t\"\256\001\n\rTokenTransfe"
  "r\022\032\n\022token_mint_address\030\001 \001(\t\022\034\n\024sender_"
  "token_address\030\002 \001(\t\022\037\n\027recipient_token_a"
  "ddress\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\020\n\010decimals"
  "\030\005 \001(\r\022\014\n\004memo\030\006 \001(\t\022\022\n\nreferences\030\007 \003(\t"
  "\"\327\001\n\026CreateAndTransferToken\022\036\n\026recipient"
  "_main_address\030\001 \001(\t\022\032\n\022token_mint_addres"
  "s\030\002 \001(\t\022\037\n\027recipient_token_address\030\003 \001(\t"
  "\022\034\n\024sender_token_address\030\004 \001(\t\022\016\n\006amount"
  "\030\005 \001(\004\022\020\n\010decimals\030\006 \001(\r\022\014\n\004memo\030\007 \001(\t\022\022"
  "\n\nreferences\030\010 \003(\t\"\\\n\022CreateNonceAccount"
  "\022\025\n\rnonce_account\030\001 \001(\t\022\014\n\004rent\030\002 \001(\004\022!\n"
  "\031nonce_account_private_key\030\003 \001(\014\"O\n\024With"
  "drawNonceAccount\022\025\n\rnonce_account\030\001 \001(\t\022"
  "\021\n\trecipient\030\002 \001(\t\022\r\n\005value\030\003 \001(\004\",\n\023Adv"
  "anceNonceAccount\022\025\n\rnonce_account\030\001 \001(\t\""
  "\243\010\n\014SigningInput\022\023\n\013private_key\030\001 \001(\014\022\030\n"
  "\020recent_blockhash\030\002 \001(\t\022\016\n\006v0_msg\030\003 \001(\010\022"
  "9\n\024transfer_transaction\030\004 \001(\0132\031.TW.Solan"
  "a.Proto.TransferH\000\022D\n\032delegate_stake_tra"
  "nsaction\030\005 \001(\0132\036.TW.Solana.Proto.Delegat"
  "eStakeH\000\022H\n\034deactivate_stake_transaction"
  "\030\006 \001(\0132 .TW.Solana.Proto.DeactivateStake"
  "H\000\022O\n deactivate_all_stake_transaction\030\007"
  " \001(\0132#.TW.Solana.Proto.DeactivateAllStak"
  "eH\000\022>\n\024withdraw_transaction\030\010 \001(\0132\036.TW.S"
  "olana.Proto.WithdrawStakeH\000\022E\n\030withdraw_"
  "all_transaction\030\t \001(\0132!.TW.Solana.Proto."
  "WithdrawAllStakeH\000\022O\n create_token_accou"
  "nt_transaction\030\n \001(\0132#.TW.Solana.Proto.C"
  "reateTokenAccountH\000\022D\n\032token_transfer_tr"
  "ansaction\030\013 \001(\0132\036.TW.Solana.Proto.TokenT"
  "ransferH\000\022X\n%create_and_transfer_token_t"
  "ransaction\030\014 \001(\0132\'.TW.Solana.Proto.Creat"
  "eAndTransferTokenH\000\022C\n\024create_nonce_acco"
  "unt\030\r \001(\0132#.TW.Solana.Proto.CreateNonceA"
  "ccountH\000\022G\n\026withdraw_nonce_account\030\020 \001(\013"
  "2%.TW.Solana.Proto.WithdrawNonceAccountH"
  "\000\022E\n\025advance_nonce_account\030\023 \001(\0132$.TW.So"
  "lana.Proto.AdvanceNonceAccountH\000\022\016\n\006send"
  "er\030\016 \001(\t\022\025\n\rnonce_account\030\017 \001(\t\022\035\n\025fee_p"
  "ayer_private_key\030\021 \001(\014\022\021\n\tfee_payer\030\022 \001("
  "\tB\022\n\020transaction_type\"z\n\rSigningOutput\022\017"
  "\n\007encoded\030\001 \001(\t\022,\n\005error\030\002 \001(\0162\035.TW.Comm"
  "on.Proto.SigningError\022\025\n\rerror_message\030\003"
  " \001(\t\022\023\n\013unsigned_tx\030\004 \001(\t\"v\n\020PreSigningO"
  "utput\022\017\n\007signers\030\001 \003(\014\022\014\n\004data\030\002 \001(\014\022,\n\005"
  "error\030\003 \001(\0162\035.TW.Common.Proto.SigningErr"
  "or\022\025\n\rerror_message\030\004 \001(\tB\027\n\025wallet.core"
  ".jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Solana_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Solana_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Solana_2eproto = {
  false, false, 2538, descriptor_table_protodef_Solana_2eproto, "Solana.proto", 
  &descriptor_table_Solana_2eproto_once, descriptor_table_Solana_2eproto_deps, 1, 16,
  schemas, file_default_instances, TableStruct_Solana_2eproto::offsets,
  file_level_metadata_Solana_2eproto, file_level_enum_descriptors_Solana_2eproto, file_level_service_descriptors_Solana_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Solana_2eproto_getter() {
  return &descriptor_table_Solana_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Solana_2eproto(&descriptor_table_Solana_2eproto);
namespace TW {
namespace Solana {
namespace Proto {

// ===================================================================

class Transfer::_Internal {
 public:
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  references_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recipient_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.Transfer)
}

inline void Transfer::SharedCtor() {
recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recipient_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = uint64_t{0u};
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recipient_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  recipient_.ClearToEmpty();
  memo_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recipient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recipient();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.Transfer.recipient"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.Transfer.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string references = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.Transfer.references"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recipient = 1;
  if (!this->_internal_recipient().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient().data(), static_cast<int>(this->_internal_recipient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.Transfer.recipient");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recipient(), target);
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.Transfer.memo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memo(), target);
  }

  // repeated string references = 4;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.Transfer.references");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string references = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(references_.size());
  for (int i = 0, n = references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      references_.Get(i));
  }

  // string recipient = 1;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient());
  }

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transfer::GetClassData() const { return &_class_data_; }

void Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transfer *>(to)->MergeFrom(
      static_cast<const Transfer &>(from));
}


void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (!from._internal_recipient().empty()) {
    _internal_set_recipient(from._internal_recipient());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recipient_, lhs_arena,
      &other->recipient_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[0]);
}

// ===================================================================

class DelegateStake::_Internal {
 public:
};

DelegateStake::DelegateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.DelegateStake)
}
DelegateStake::DelegateStake(const DelegateStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validator_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    validator_pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_pubkey().empty()) {
    validator_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_pubkey(), 
      GetArenaForAllocation());
  }
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.DelegateStake)
}

inline void DelegateStake::SharedCtor() {
validator_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  validator_pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = uint64_t{0u};
}

DelegateStake::~DelegateStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.DelegateStake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelegateStake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  validator_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateStake::ArenaDtor(void* object) {
  DelegateStake* _this = reinterpret_cast< DelegateStake* >(object);
  (void)_this;
}
void DelegateStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelegateStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.DelegateStake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_pubkey_.ClearToEmpty();
  stake_account_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DelegateStake.validator_pubkey"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stake_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DelegateStake.stake_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelegateStake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.DelegateStake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_pubkey = 1;
  if (!this->_internal_validator_pubkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_pubkey().data(), static_cast<int>(this->_internal_validator_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DelegateStake.validator_pubkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_validator_pubkey(), target);
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  // string stake_account = 3;
  if (!this->_internal_stake_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DelegateStake.stake_account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stake_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.DelegateStake)
  return target;
}

size_t DelegateStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.DelegateStake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_pubkey = 1;
  if (!this->_internal_validator_pubkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_pubkey());
  }

  // string stake_account = 3;
  if (!this->_internal_stake_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegateStake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelegateStake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegateStake::GetClassData() const { return &_class_data_; }

void DelegateStake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelegateStake *>(to)->MergeFrom(
      static_cast<const DelegateStake &>(from));
}


void DelegateStake::MergeFrom(const DelegateStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.DelegateStake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_pubkey().empty()) {
    _internal_set_validator_pubkey(from._internal_validator_pubkey());
  }
  if (!from._internal_stake_account().empty()) {
    _internal_set_stake_account(from._internal_stake_account());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegateStake::CopyFrom(const DelegateStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.DelegateStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateStake::IsInitialized() const {
  return true;
}

void DelegateStake::InternalSwap(DelegateStake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_pubkey_, lhs_arena,
      &other->validator_pubkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stake_account_, lhs_arena,
      &other->stake_account_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateStake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[1]);
}

// ===================================================================

class DeactivateStake::_Internal {
 public:
};

DeactivateStake::DeactivateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.DeactivateStake)
}
DeactivateStake::DeactivateStake(const DeactivateStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.DeactivateStake)
}

inline void DeactivateStake::SharedCtor() {
stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeactivateStake::~DeactivateStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.DeactivateStake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeactivateStake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeactivateStake::ArenaDtor(void* object) {
  DeactivateStake* _this = reinterpret_cast< DeactivateStake* >(object);
  (void)_this;
}
void DeactivateStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeactivateStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeactivateStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.DeactivateStake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeactivateStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stake_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DeactivateStake.stake_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeactivateStake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.DeactivateStake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stake_account = 1;
  if (!this->_internal_stake_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DeactivateStake.stake_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stake_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.DeactivateStake)
  return target;
}

size_t DeactivateStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.DeactivateStake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stake_account = 1;
  if (!this->_internal_stake_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeactivateStake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeactivateStake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeactivateStake::GetClassData() const { return &_class_data_; }

void DeactivateStake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeactivateStake *>(to)->MergeFrom(
      static_cast<const DeactivateStake &>(from));
}


void DeactivateStake::MergeFrom(const DeactivateStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.DeactivateStake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stake_account().empty()) {
    _internal_set_stake_account(from._internal_stake_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeactivateStake::CopyFrom(const DeactivateStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.DeactivateStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeactivateStake::IsInitialized() const {
  return true;
}

void DeactivateStake::InternalSwap(DeactivateStake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stake_account_, lhs_arena,
      &other->stake_account_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeactivateStake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[2]);
}

// ===================================================================

class DeactivateAllStake::_Internal {
 public:
};

DeactivateAllStake::DeactivateAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stake_accounts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.DeactivateAllStake)
}
DeactivateAllStake::DeactivateAllStake(const DeactivateAllStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stake_accounts_(from.stake_accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.DeactivateAllStake)
}

inline void DeactivateAllStake::SharedCtor() {
}

DeactivateAllStake::~DeactivateAllStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.DeactivateAllStake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeactivateAllStake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeactivateAllStake::ArenaDtor(void* object) {
  DeactivateAllStake* _this = reinterpret_cast< DeactivateAllStake* >(object);
  (void)_this;
}
void DeactivateAllStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeactivateAllStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeactivateAllStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.DeactivateAllStake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeactivateAllStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string stake_accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stake_accounts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.DeactivateAllStake.stake_accounts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeactivateAllStake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.DeactivateAllStake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string stake_accounts = 1;
  for (int i = 0, n = this->_internal_stake_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_stake_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.DeactivateAllStake.stake_accounts");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.DeactivateAllStake)
  return target;
}

size_t DeactivateAllStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.DeactivateAllStake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stake_accounts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stake_accounts_.size());
  for (int i = 0, n = stake_accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stake_accounts_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeactivateAllStake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeactivateAllStake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeactivateAllStake::GetClassData() const { return &_class_data_; }

void DeactivateAllStake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeactivateAllStake *>(to)->MergeFrom(
      static_cast<const DeactivateAllStake &>(from));
}


void DeactivateAllStake::MergeFrom(const DeactivateAllStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.DeactivateAllStake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stake_accounts_.MergeFrom(from.stake_accounts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeactivateAllStake::CopyFrom(const DeactivateAllStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.DeactivateAllStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeactivateAllStake::IsInitialized() const {
  return true;
}

void DeactivateAllStake::InternalSwap(DeactivateAllStake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stake_accounts_.InternalSwap(&other->stake_accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeactivateAllStake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[3]);
}

// ===================================================================

class WithdrawStake::_Internal {
 public:
};

WithdrawStake::WithdrawStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.WithdrawStake)
}
WithdrawStake::WithdrawStake(const WithdrawStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.WithdrawStake)
}

inline void WithdrawStake::SharedCtor() {
stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = uint64_t{0u};
}

WithdrawStake::~WithdrawStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.WithdrawStake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WithdrawStake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawStake::ArenaDtor(void* object) {
  WithdrawStake* _this = reinterpret_cast< WithdrawStake* >(object);
  (void)_this;
}
void WithdrawStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WithdrawStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.WithdrawStake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_account_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stake_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.WithdrawStake.stake_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WithdrawStake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.WithdrawStake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stake_account = 1;
  if (!this->_internal_stake_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.WithdrawStake.stake_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stake_account(), target);
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.WithdrawStake)
  return target;
}

size_t WithdrawStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.WithdrawStake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stake_account = 1;
  if (!this->_internal_stake_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WithdrawStake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WithdrawStake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WithdrawStake::GetClassData() const { return &_class_data_; }

void WithdrawStake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WithdrawStake *>(to)->MergeFrom(
      static_cast<const WithdrawStake &>(from));
}


void WithdrawStake::MergeFrom(const WithdrawStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.WithdrawStake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stake_account().empty()) {
    _internal_set_stake_account(from._internal_stake_account());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WithdrawStake::CopyFrom(const WithdrawStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.WithdrawStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawStake::IsInitialized() const {
  return true;
}

void WithdrawStake::InternalSwap(WithdrawStake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stake_account_, lhs_arena,
      &other->stake_account_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawStake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[4]);
}

// ===================================================================

class StakeAccountValue::_Internal {
 public:
};

StakeAccountValue::StakeAccountValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.StakeAccountValue)
}
StakeAccountValue::StakeAccountValue(const StakeAccountValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stake_account().empty()) {
    stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake_account(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.StakeAccountValue)
}

inline void StakeAccountValue::SharedCtor() {
stake_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = uint64_t{0u};
}

StakeAccountValue::~StakeAccountValue() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.StakeAccountValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StakeAccountValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stake_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StakeAccountValue::ArenaDtor(void* object) {
  StakeAccountValue* _this = reinterpret_cast< StakeAccountValue* >(object);
  (void)_this;
}
void StakeAccountValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakeAccountValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StakeAccountValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.StakeAccountValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_account_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeAccountValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stake_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stake_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.StakeAccountValue.stake_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StakeAccountValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.StakeAccountValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stake_account = 1;
  if (!this->_internal_stake_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake_account().data(), static_cast<int>(this->_internal_stake_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.StakeAccountValue.stake_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stake_account(), target);
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.StakeAccountValue)
  return target;
}

size_t StakeAccountValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.StakeAccountValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stake_account = 1;
  if (!this->_internal_stake_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake_account());
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StakeAccountValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StakeAccountValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StakeAccountValue::GetClassData() const { return &_class_data_; }

void StakeAccountValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StakeAccountValue *>(to)->MergeFrom(
      static_cast<const StakeAccountValue &>(from));
}


void StakeAccountValue::MergeFrom(const StakeAccountValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.StakeAccountValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stake_account().empty()) {
    _internal_set_stake_account(from._internal_stake_account());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StakeAccountValue::CopyFrom(const StakeAccountValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.StakeAccountValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeAccountValue::IsInitialized() const {
  return true;
}

void StakeAccountValue::InternalSwap(StakeAccountValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stake_account_, lhs_arena,
      &other->stake_account_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeAccountValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[5]);
}

// ===================================================================

class WithdrawAllStake::_Internal {
 public:
};

WithdrawAllStake::WithdrawAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stake_accounts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.WithdrawAllStake)
}
WithdrawAllStake::WithdrawAllStake(const WithdrawAllStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stake_accounts_(from.stake_accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.WithdrawAllStake)
}

inline void WithdrawAllStake::SharedCtor() {
}

WithdrawAllStake::~WithdrawAllStake() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.WithdrawAllStake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WithdrawAllStake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WithdrawAllStake::ArenaDtor(void* object) {
  WithdrawAllStake* _this = reinterpret_cast< WithdrawAllStake* >(object);
  (void)_this;
}
void WithdrawAllStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawAllStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WithdrawAllStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.WithdrawAllStake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawAllStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stake_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WithdrawAllStake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.WithdrawAllStake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stake_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stake_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.WithdrawAllStake)
  return target;
}

size_t WithdrawAllStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.WithdrawAllStake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
  total_size += 1UL * this->_internal_stake_accounts_size();
  for (const auto& msg : this->stake_accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WithdrawAllStake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WithdrawAllStake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WithdrawAllStake::GetClassData() const { return &_class_data_; }

void WithdrawAllStake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WithdrawAllStake *>(to)->MergeFrom(
      static_cast<const WithdrawAllStake &>(from));
}


void WithdrawAllStake::MergeFrom(const WithdrawAllStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.WithdrawAllStake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stake_accounts_.MergeFrom(from.stake_accounts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WithdrawAllStake::CopyFrom(const WithdrawAllStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.WithdrawAllStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawAllStake::IsInitialized() const {
  return true;
}

void WithdrawAllStake::InternalSwap(WithdrawAllStake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stake_accounts_.InternalSwap(&other->stake_accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawAllStake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[6]);
}

// ===================================================================

class CreateTokenAccount::_Internal {
 public:
};

CreateTokenAccount::CreateTokenAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.CreateTokenAccount)
}
CreateTokenAccount::CreateTokenAccount(const CreateTokenAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    main_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_main_address().empty()) {
    main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_main_address(), 
      GetArenaForAllocation());
  }
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_mint_address().empty()) {
    token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_mint_address(), 
      GetArenaForAllocation());
  }
  token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_address().empty()) {
    token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.CreateTokenAccount)
}

inline void CreateTokenAccount::SharedCtor() {
main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  main_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateTokenAccount::~CreateTokenAccount() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.CreateTokenAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTokenAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  main_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_mint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTokenAccount::ArenaDtor(void* object) {
  CreateTokenAccount* _this = reinterpret_cast< CreateTokenAccount* >(object);
  (void)_this;
}
void CreateTokenAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTokenAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTokenAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.CreateTokenAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_address_.ClearToEmpty();
  token_mint_address_.ClearToEmpty();
  token_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTokenAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string main_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_main_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateTokenAccount.main_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token_mint_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_mint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateTokenAccount.token_mint_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateTokenAccount.token_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTokenAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.CreateTokenAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_address = 1;
  if (!this->_internal_main_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_main_address().data(), static_cast<int>(this->_internal_main_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateTokenAccount.main_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_address(), target);
  }

  // string token_mint_address = 2;
  if (!this->_internal_token_mint_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_mint_address().data(), static_cast<int>(this->_internal_token_mint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateTokenAccount.token_mint_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_mint_address(), target);
  }

  // string token_address = 3;
  if (!this->_internal_token_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_address().data(), static_cast<int>(this->_internal_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateTokenAccount.token_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.CreateTokenAccount)
  return target;
}

size_t CreateTokenAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.CreateTokenAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string main_address = 1;
  if (!this->_internal_main_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_address());
  }

  // string token_mint_address = 2;
  if (!this->_internal_token_mint_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_mint_address());
  }

  // string token_address = 3;
  if (!this->_internal_token_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTokenAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTokenAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTokenAccount::GetClassData() const { return &_class_data_; }

void CreateTokenAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateTokenAccount *>(to)->MergeFrom(
      static_cast<const CreateTokenAccount &>(from));
}


void CreateTokenAccount::MergeFrom(const CreateTokenAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.CreateTokenAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_main_address().empty()) {
    _internal_set_main_address(from._internal_main_address());
  }
  if (!from._internal_token_mint_address().empty()) {
    _internal_set_token_mint_address(from._internal_token_mint_address());
  }
  if (!from._internal_token_address().empty()) {
    _internal_set_token_address(from._internal_token_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTokenAccount::CopyFrom(const CreateTokenAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.CreateTokenAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTokenAccount::IsInitialized() const {
  return true;
}

void CreateTokenAccount::InternalSwap(CreateTokenAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &main_address_, lhs_arena,
      &other->main_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_mint_address_, lhs_arena,
      &other->token_mint_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_address_, lhs_arena,
      &other->token_address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTokenAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[7]);
}

// ===================================================================

class TokenTransfer::_Internal {
 public:
};

TokenTransfer::TokenTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  references_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.TokenTransfer)
}
TokenTransfer::TokenTransfer(const TokenTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_mint_address().empty()) {
    token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_mint_address(), 
      GetArenaForAllocation());
  }
  sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_token_address().empty()) {
    sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_token_address(), 
      GetArenaForAllocation());
  }
  recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recipient_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient_token_address().empty()) {
    recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient_token_address(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.TokenTransfer)
}

inline void TokenTransfer::SharedCtor() {
token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recipient_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
}

TokenTransfer::~TokenTransfer() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.TokenTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_mint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenTransfer::ArenaDtor(void* object) {
  TokenTransfer* _this = reinterpret_cast< TokenTransfer* >(object);
  (void)_this;
}
void TokenTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.TokenTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  token_mint_address_.ClearToEmpty();
  sender_token_address_.ClearToEmpty();
  recipient_token_address_.ClearToEmpty();
  memo_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decimals_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token_mint_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token_mint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.token_mint_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender_token_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.sender_token_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string recipient_token_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recipient_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.recipient_token_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 decimals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string references = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.TokenTransfer.references"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.TokenTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_mint_address = 1;
  if (!this->_internal_token_mint_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_mint_address().data(), static_cast<int>(this->_internal_token_mint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.token_mint_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_mint_address(), target);
  }

  // string sender_token_address = 2;
  if (!this->_internal_sender_token_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_token_address().data(), static_cast<int>(this->_internal_sender_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.sender_token_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender_token_address(), target);
  }

  // string recipient_token_address = 3;
  if (!this->_internal_recipient_token_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_token_address().data(), static_cast<int>(this->_internal_recipient_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.recipient_token_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recipient_token_address(), target);
  }

  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  // uint32 decimals = 5;
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_decimals(), target);
  }

  // string memo = 6;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.memo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_memo(), target);
  }

  // repeated string references = 7;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.TokenTransfer.references");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.TokenTransfer)
  return target;
}

size_t TokenTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.TokenTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string references = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(references_.size());
  for (int i = 0, n = references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      references_.Get(i));
  }

  // string token_mint_address = 1;
  if (!this->_internal_token_mint_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_mint_address());
  }

  // string sender_token_address = 2;
  if (!this->_internal_sender_token_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_token_address());
  }

  // string recipient_token_address = 3;
  if (!this->_internal_recipient_token_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_token_address());
  }

  // string memo = 6;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint32 decimals = 5;
  if (this->_internal_decimals() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_decimals());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenTransfer::GetClassData() const { return &_class_data_; }

void TokenTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenTransfer *>(to)->MergeFrom(
      static_cast<const TokenTransfer &>(from));
}


void TokenTransfer::MergeFrom(const TokenTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.TokenTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (!from._internal_token_mint_address().empty()) {
    _internal_set_token_mint_address(from._internal_token_mint_address());
  }
  if (!from._internal_sender_token_address().empty()) {
    _internal_set_sender_token_address(from._internal_sender_token_address());
  }
  if (!from._internal_recipient_token_address().empty()) {
    _internal_set_recipient_token_address(from._internal_recipient_token_address());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_decimals() != 0) {
    _internal_set_decimals(from._internal_decimals());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenTransfer::CopyFrom(const TokenTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.TokenTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenTransfer::IsInitialized() const {
  return true;
}

void TokenTransfer::InternalSwap(TokenTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_mint_address_, lhs_arena,
      &other->token_mint_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_token_address_, lhs_arena,
      &other->sender_token_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recipient_token_address_, lhs_arena,
      &other->recipient_token_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenTransfer, decimals_)
      + sizeof(TokenTransfer::decimals_)
      - PROTOBUF_FIELD_OFFSET(TokenTransfer, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[8]);
}

// ===================================================================

class CreateAndTransferToken::_Internal {
 public:
};

CreateAndTransferToken::CreateAndTransferToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  references_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.CreateAndTransferToken)
}
CreateAndTransferToken::CreateAndTransferToken(const CreateAndTransferToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recipient_main_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient_main_address().empty()) {
    recipient_main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient_main_address(), 
      GetArenaForAllocation());
  }
  token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_mint_address().empty()) {
    token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_mint_address(), 
      GetArenaForAllocation());
  }
  recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recipient_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient_token_address().empty()) {
    recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient_token_address(), 
      GetArenaForAllocation());
  }
  sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_token_address().empty()) {
    sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_token_address(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.CreateAndTransferToken)
}

inline void CreateAndTransferToken::SharedCtor() {
recipient_main_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recipient_main_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_mint_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recipient_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recipient_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decimals_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
}

CreateAndTransferToken::~CreateAndTransferToken() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.CreateAndTransferToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAndTransferToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recipient_main_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_mint_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAndTransferToken::ArenaDtor(void* object) {
  CreateAndTransferToken* _this = reinterpret_cast< CreateAndTransferToken* >(object);
  (void)_this;
}
void CreateAndTransferToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAndTransferToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAndTransferToken::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.CreateAndTransferToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  recipient_main_address_.ClearToEmpty();
  token_mint_address_.ClearToEmpty();
  recipient_token_address_.ClearToEmpty();
  sender_token_address_.ClearToEmpty();
  memo_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decimals_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(decimals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAndTransferToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recipient_main_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recipient_main_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.recipient_main_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token_mint_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_mint_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.token_mint_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string recipient_token_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recipient_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.recipient_token_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender_token_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.sender_token_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 decimals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string references = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateAndTransferToken.references"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAndTransferToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.CreateAndTransferToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recipient_main_address = 1;
  if (!this->_internal_recipient_main_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_main_address().data(), static_cast<int>(this->_internal_recipient_main_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.recipient_main_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recipient_main_address(), target);
  }

  // string token_mint_address = 2;
  if (!this->_internal_token_mint_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_mint_address().data(), static_cast<int>(this->_internal_token_mint_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.token_mint_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_mint_address(), target);
  }

  // string recipient_token_address = 3;
  if (!this->_internal_recipient_token_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_token_address().data(), static_cast<int>(this->_internal_recipient_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.recipient_token_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recipient_token_address(), target);
  }

  // string sender_token_address = 4;
  if (!this->_internal_sender_token_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_token_address().data(), static_cast<int>(this->_internal_sender_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.sender_token_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_token_address(), target);
  }

  // uint64 amount = 5;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_amount(), target);
  }

  // uint32 decimals = 6;
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_decimals(), target);
  }

  // string memo = 7;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.memo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_memo(), target);
  }

  // repeated string references = 8;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateAndTransferToken.references");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.CreateAndTransferToken)
  return target;
}

size_t CreateAndTransferToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.CreateAndTransferToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string references = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(references_.size());
  for (int i = 0, n = references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      references_.Get(i));
  }

  // string recipient_main_address = 1;
  if (!this->_internal_recipient_main_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_main_address());
  }

  // string token_mint_address = 2;
  if (!this->_internal_token_mint_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_mint_address());
  }

  // string recipient_token_address = 3;
  if (!this->_internal_recipient_token_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_token_address());
  }

  // string sender_token_address = 4;
  if (!this->_internal_sender_token_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_token_address());
  }

  // string memo = 7;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 amount = 5;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint32 decimals = 6;
  if (this->_internal_decimals() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_decimals());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAndTransferToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAndTransferToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAndTransferToken::GetClassData() const { return &_class_data_; }

void CreateAndTransferToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAndTransferToken *>(to)->MergeFrom(
      static_cast<const CreateAndTransferToken &>(from));
}


void CreateAndTransferToken::MergeFrom(const CreateAndTransferToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.CreateAndTransferToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (!from._internal_recipient_main_address().empty()) {
    _internal_set_recipient_main_address(from._internal_recipient_main_address());
  }
  if (!from._internal_token_mint_address().empty()) {
    _internal_set_token_mint_address(from._internal_token_mint_address());
  }
  if (!from._internal_recipient_token_address().empty()) {
    _internal_set_recipient_token_address(from._internal_recipient_token_address());
  }
  if (!from._internal_sender_token_address().empty()) {
    _internal_set_sender_token_address(from._internal_sender_token_address());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_decimals() != 0) {
    _internal_set_decimals(from._internal_decimals());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAndTransferToken::CopyFrom(const CreateAndTransferToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.CreateAndTransferToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAndTransferToken::IsInitialized() const {
  return true;
}

void CreateAndTransferToken::InternalSwap(CreateAndTransferToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recipient_main_address_, lhs_arena,
      &other->recipient_main_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_mint_address_, lhs_arena,
      &other->token_mint_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recipient_token_address_, lhs_arena,
      &other->recipient_token_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_token_address_, lhs_arena,
      &other->sender_token_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAndTransferToken, decimals_)
      + sizeof(CreateAndTransferToken::decimals_)
      - PROTOBUF_FIELD_OFFSET(CreateAndTransferToken, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAndTransferToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[9]);
}

// ===================================================================

class CreateNonceAccount::_Internal {
 public:
};

CreateNonceAccount::CreateNonceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.CreateNonceAccount)
}
CreateNonceAccount::CreateNonceAccount(const CreateNonceAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce_account().empty()) {
    nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce_account(), 
      GetArenaForAllocation());
  }
  nonce_account_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_account_private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce_account_private_key().empty()) {
    nonce_account_private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce_account_private_key(), 
      GetArenaForAllocation());
  }
  rent_ = from.rent_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.CreateNonceAccount)
}

inline void CreateNonceAccount::SharedCtor() {
nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nonce_account_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_account_private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rent_ = uint64_t{0u};
}

CreateNonceAccount::~CreateNonceAccount() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.CreateNonceAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateNonceAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_account_private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateNonceAccount::ArenaDtor(void* object) {
  CreateNonceAccount* _this = reinterpret_cast< CreateNonceAccount* >(object);
  (void)_this;
}
void CreateNonceAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateNonceAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateNonceAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.CreateNonceAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_account_.ClearToEmpty();
  nonce_account_private_key_.ClearToEmpty();
  rent_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNonceAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.CreateNonceAccount.nonce_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nonce_account_private_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nonce_account_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateNonceAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.CreateNonceAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce_account = 1;
  if (!this->_internal_nonce_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce_account().data(), static_cast<int>(this->_internal_nonce_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.CreateNonceAccount.nonce_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce_account(), target);
  }

  // uint64 rent = 2;
  if (this->_internal_rent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rent(), target);
  }

  // bytes nonce_account_private_key = 3;
  if (!this->_internal_nonce_account_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nonce_account_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.CreateNonceAccount)
  return target;
}

size_t CreateNonceAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.CreateNonceAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce_account = 1;
  if (!this->_internal_nonce_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce_account());
  }

  // bytes nonce_account_private_key = 3;
  if (!this->_internal_nonce_account_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce_account_private_key());
  }

  // uint64 rent = 2;
  if (this->_internal_rent() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNonceAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateNonceAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNonceAccount::GetClassData() const { return &_class_data_; }

void CreateNonceAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateNonceAccount *>(to)->MergeFrom(
      static_cast<const CreateNonceAccount &>(from));
}


void CreateNonceAccount::MergeFrom(const CreateNonceAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.CreateNonceAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce_account().empty()) {
    _internal_set_nonce_account(from._internal_nonce_account());
  }
  if (!from._internal_nonce_account_private_key().empty()) {
    _internal_set_nonce_account_private_key(from._internal_nonce_account_private_key());
  }
  if (from._internal_rent() != 0) {
    _internal_set_rent(from._internal_rent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNonceAccount::CopyFrom(const CreateNonceAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.CreateNonceAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNonceAccount::IsInitialized() const {
  return true;
}

void CreateNonceAccount::InternalSwap(CreateNonceAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_account_, lhs_arena,
      &other->nonce_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_account_private_key_, lhs_arena,
      &other->nonce_account_private_key_, rhs_arena
  );
  swap(rent_, other->rent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNonceAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[10]);
}

// ===================================================================

class WithdrawNonceAccount::_Internal {
 public:
};

WithdrawNonceAccount::WithdrawNonceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.WithdrawNonceAccount)
}
WithdrawNonceAccount::WithdrawNonceAccount(const WithdrawNonceAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce_account().empty()) {
    nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce_account(), 
      GetArenaForAllocation());
  }
  recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recipient_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipient(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.WithdrawNonceAccount)
}

inline void WithdrawNonceAccount::SharedCtor() {
nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recipient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recipient_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = uint64_t{0u};
}

WithdrawNonceAccount::~WithdrawNonceAccount() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.WithdrawNonceAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WithdrawNonceAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawNonceAccount::ArenaDtor(void* object) {
  WithdrawNonceAccount* _this = reinterpret_cast< WithdrawNonceAccount* >(object);
  (void)_this;
}
void WithdrawNonceAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawNonceAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WithdrawNonceAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.WithdrawNonceAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_account_.ClearToEmpty();
  recipient_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawNonceAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.WithdrawNonceAccount.nonce_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.WithdrawNonceAccount.recipient"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WithdrawNonceAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.WithdrawNonceAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce_account = 1;
  if (!this->_internal_nonce_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce_account().data(), static_cast<int>(this->_internal_nonce_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.WithdrawNonceAccount.nonce_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce_account(), target);
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient().data(), static_cast<int>(this->_internal_recipient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.WithdrawNonceAccount.recipient");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recipient(), target);
  }

  // uint64 value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.WithdrawNonceAccount)
  return target;
}

size_t WithdrawNonceAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.WithdrawNonceAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce_account = 1;
  if (!this->_internal_nonce_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce_account());
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient());
  }

  // uint64 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WithdrawNonceAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WithdrawNonceAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WithdrawNonceAccount::GetClassData() const { return &_class_data_; }

void WithdrawNonceAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WithdrawNonceAccount *>(to)->MergeFrom(
      static_cast<const WithdrawNonceAccount &>(from));
}


void WithdrawNonceAccount::MergeFrom(const WithdrawNonceAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.WithdrawNonceAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce_account().empty()) {
    _internal_set_nonce_account(from._internal_nonce_account());
  }
  if (!from._internal_recipient().empty()) {
    _internal_set_recipient(from._internal_recipient());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WithdrawNonceAccount::CopyFrom(const WithdrawNonceAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.WithdrawNonceAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawNonceAccount::IsInitialized() const {
  return true;
}

void WithdrawNonceAccount::InternalSwap(WithdrawNonceAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_account_, lhs_arena,
      &other->nonce_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recipient_, lhs_arena,
      &other->recipient_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawNonceAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[11]);
}

// ===================================================================

class AdvanceNonceAccount::_Internal {
 public:
};

AdvanceNonceAccount::AdvanceNonceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.AdvanceNonceAccount)
}
AdvanceNonceAccount::AdvanceNonceAccount(const AdvanceNonceAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce_account().empty()) {
    nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.AdvanceNonceAccount)
}

inline void AdvanceNonceAccount::SharedCtor() {
nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdvanceNonceAccount::~AdvanceNonceAccount() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.AdvanceNonceAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AdvanceNonceAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdvanceNonceAccount::ArenaDtor(void* object) {
  AdvanceNonceAccount* _this = reinterpret_cast< AdvanceNonceAccount* >(object);
  (void)_this;
}
void AdvanceNonceAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdvanceNonceAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdvanceNonceAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.AdvanceNonceAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdvanceNonceAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.AdvanceNonceAccount.nonce_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdvanceNonceAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.AdvanceNonceAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce_account = 1;
  if (!this->_internal_nonce_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce_account().data(), static_cast<int>(this->_internal_nonce_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.AdvanceNonceAccount.nonce_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.AdvanceNonceAccount)
  return target;
}

size_t AdvanceNonceAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.AdvanceNonceAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce_account = 1;
  if (!this->_internal_nonce_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce_account());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdvanceNonceAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdvanceNonceAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdvanceNonceAccount::GetClassData() const { return &_class_data_; }

void AdvanceNonceAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdvanceNonceAccount *>(to)->MergeFrom(
      static_cast<const AdvanceNonceAccount &>(from));
}


void AdvanceNonceAccount::MergeFrom(const AdvanceNonceAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.AdvanceNonceAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce_account().empty()) {
    _internal_set_nonce_account(from._internal_nonce_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdvanceNonceAccount::CopyFrom(const AdvanceNonceAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.AdvanceNonceAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceNonceAccount::IsInitialized() const {
  return true;
}

void AdvanceNonceAccount::InternalSwap(AdvanceNonceAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_account_, lhs_arena,
      &other->nonce_account_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvanceNonceAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[12]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Solana::Proto::Transfer& transfer_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::DelegateStake& delegate_stake_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::DeactivateStake& deactivate_stake_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::DeactivateAllStake& deactivate_all_stake_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::WithdrawStake& withdraw_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::WithdrawAllStake& withdraw_all_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::CreateTokenAccount& create_token_account_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::TokenTransfer& token_transfer_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::CreateAndTransferToken& create_and_transfer_token_transaction(const SigningInput* msg);
  static const ::TW::Solana::Proto::CreateNonceAccount& create_nonce_account(const SigningInput* msg);
  static const ::TW::Solana::Proto::WithdrawNonceAccount& withdraw_nonce_account(const SigningInput* msg);
  static const ::TW::Solana::Proto::AdvanceNonceAccount& advance_nonce_account(const SigningInput* msg);
};

const ::TW::Solana::Proto::Transfer&
SigningInput::_Internal::transfer_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.transfer_transaction_;
}
const ::TW::Solana::Proto::DelegateStake&
SigningInput::_Internal::delegate_stake_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.delegate_stake_transaction_;
}
const ::TW::Solana::Proto::DeactivateStake&
SigningInput::_Internal::deactivate_stake_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.deactivate_stake_transaction_;
}
const ::TW::Solana::Proto::DeactivateAllStake&
SigningInput::_Internal::deactivate_all_stake_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.deactivate_all_stake_transaction_;
}
const ::TW::Solana::Proto::WithdrawStake&
SigningInput::_Internal::withdraw_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.withdraw_transaction_;
}
const ::TW::Solana::Proto::WithdrawAllStake&
SigningInput::_Internal::withdraw_all_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.withdraw_all_transaction_;
}
const ::TW::Solana::Proto::CreateTokenAccount&
SigningInput::_Internal::create_token_account_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.create_token_account_transaction_;
}
const ::TW::Solana::Proto::TokenTransfer&
SigningInput::_Internal::token_transfer_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.token_transfer_transaction_;
}
const ::TW::Solana::Proto::CreateAndTransferToken&
SigningInput::_Internal::create_and_transfer_token_transaction(const SigningInput* msg) {
  return *msg->transaction_type_.create_and_transfer_token_transaction_;
}
const ::TW::Solana::Proto::CreateNonceAccount&
SigningInput::_Internal::create_nonce_account(const SigningInput* msg) {
  return *msg->transaction_type_.create_nonce_account_;
}
const ::TW::Solana::Proto::WithdrawNonceAccount&
SigningInput::_Internal::withdraw_nonce_account(const SigningInput* msg) {
  return *msg->transaction_type_.withdraw_nonce_account_;
}
const ::TW::Solana::Proto::AdvanceNonceAccount&
SigningInput::_Internal::advance_nonce_account(const SigningInput* msg) {
  return *msg->transaction_type_.advance_nonce_account_;
}
void SigningInput::set_allocated_transfer_transaction(::TW::Solana::Proto::Transfer* transfer_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (transfer_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::Transfer>::GetOwningArena(transfer_transaction);
    if (message_arena != submessage_arena) {
      transfer_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_transaction, submessage_arena);
    }
    set_has_transfer_transaction();
    transaction_type_.transfer_transaction_ = transfer_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.transfer_transaction)
}
void SigningInput::set_allocated_delegate_stake_transaction(::TW::Solana::Proto::DelegateStake* delegate_stake_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (delegate_stake_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::DelegateStake>::GetOwningArena(delegate_stake_transaction);
    if (message_arena != submessage_arena) {
      delegate_stake_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegate_stake_transaction, submessage_arena);
    }
    set_has_delegate_stake_transaction();
    transaction_type_.delegate_stake_transaction_ = delegate_stake_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
}
void SigningInput::set_allocated_deactivate_stake_transaction(::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (deactivate_stake_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::DeactivateStake>::GetOwningArena(deactivate_stake_transaction);
    if (message_arena != submessage_arena) {
      deactivate_stake_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deactivate_stake_transaction, submessage_arena);
    }
    set_has_deactivate_stake_transaction();
    transaction_type_.deactivate_stake_transaction_ = deactivate_stake_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
}
void SigningInput::set_allocated_deactivate_all_stake_transaction(::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (deactivate_all_stake_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::DeactivateAllStake>::GetOwningArena(deactivate_all_stake_transaction);
    if (message_arena != submessage_arena) {
      deactivate_all_stake_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deactivate_all_stake_transaction, submessage_arena);
    }
    set_has_deactivate_all_stake_transaction();
    transaction_type_.deactivate_all_stake_transaction_ = deactivate_all_stake_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
}
void SigningInput::set_allocated_withdraw_transaction(::TW::Solana::Proto::WithdrawStake* withdraw_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (withdraw_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::WithdrawStake>::GetOwningArena(withdraw_transaction);
    if (message_arena != submessage_arena) {
      withdraw_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_transaction, submessage_arena);
    }
    set_has_withdraw_transaction();
    transaction_type_.withdraw_transaction_ = withdraw_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.withdraw_transaction)
}
void SigningInput::set_allocated_withdraw_all_transaction(::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (withdraw_all_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::WithdrawAllStake>::GetOwningArena(withdraw_all_transaction);
    if (message_arena != submessage_arena) {
      withdraw_all_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_all_transaction, submessage_arena);
    }
    set_has_withdraw_all_transaction();
    transaction_type_.withdraw_all_transaction_ = withdraw_all_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
}
void SigningInput::set_allocated_create_token_account_transaction(::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (create_token_account_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::CreateTokenAccount>::GetOwningArena(create_token_account_transaction);
    if (message_arena != submessage_arena) {
      create_token_account_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_token_account_transaction, submessage_arena);
    }
    set_has_create_token_account_transaction();
    transaction_type_.create_token_account_transaction_ = create_token_account_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.create_token_account_transaction)
}
void SigningInput::set_allocated_token_transfer_transaction(::TW::Solana::Proto::TokenTransfer* token_transfer_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (token_transfer_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::TokenTransfer>::GetOwningArena(token_transfer_transaction);
    if (message_arena != submessage_arena) {
      token_transfer_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_transfer_transaction, submessage_arena);
    }
    set_has_token_transfer_transaction();
    transaction_type_.token_transfer_transaction_ = token_transfer_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.token_transfer_transaction)
}
void SigningInput::set_allocated_create_and_transfer_token_transaction(::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (create_and_transfer_token_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::CreateAndTransferToken>::GetOwningArena(create_and_transfer_token_transaction);
    if (message_arena != submessage_arena) {
      create_and_transfer_token_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_and_transfer_token_transaction, submessage_arena);
    }
    set_has_create_and_transfer_token_transaction();
    transaction_type_.create_and_transfer_token_transaction_ = create_and_transfer_token_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
}
void SigningInput::set_allocated_create_nonce_account(::TW::Solana::Proto::CreateNonceAccount* create_nonce_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (create_nonce_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::CreateNonceAccount>::GetOwningArena(create_nonce_account);
    if (message_arena != submessage_arena) {
      create_nonce_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_nonce_account, submessage_arena);
    }
    set_has_create_nonce_account();
    transaction_type_.create_nonce_account_ = create_nonce_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.create_nonce_account)
}
void SigningInput::set_allocated_withdraw_nonce_account(::TW::Solana::Proto::WithdrawNonceAccount* withdraw_nonce_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (withdraw_nonce_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::WithdrawNonceAccount>::GetOwningArena(withdraw_nonce_account);
    if (message_arena != submessage_arena) {
      withdraw_nonce_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw_nonce_account, submessage_arena);
    }
    set_has_withdraw_nonce_account();
    transaction_type_.withdraw_nonce_account_ = withdraw_nonce_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.withdraw_nonce_account)
}
void SigningInput::set_allocated_advance_nonce_account(::TW::Solana::Proto::AdvanceNonceAccount* advance_nonce_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_type();
  if (advance_nonce_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Solana::Proto::AdvanceNonceAccount>::GetOwningArena(advance_nonce_account);
    if (message_arena != submessage_arena) {
      advance_nonce_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advance_nonce_account, submessage_arena);
    }
    set_has_advance_nonce_account();
    transaction_type_.advance_nonce_account_ = advance_nonce_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.advance_nonce_account)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  recent_blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recent_blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recent_blockhash().empty()) {
    recent_blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recent_blockhash(), 
      GetArenaForAllocation());
  }
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce_account().empty()) {
    nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce_account(), 
      GetArenaForAllocation());
  }
  fee_payer_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fee_payer_private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer_private_key().empty()) {
    fee_payer_private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee_payer_private_key(), 
      GetArenaForAllocation());
  }
  fee_payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fee_payer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer().empty()) {
    fee_payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee_payer(), 
      GetArenaForAllocation());
  }
  v0_msg_ = from.v0_msg_;
  clear_has_transaction_type();
  switch (from.transaction_type_case()) {
    case kTransferTransaction: {
      _internal_mutable_transfer_transaction()->::TW::Solana::Proto::Transfer::MergeFrom(from._internal_transfer_transaction());
      break;
    }
    case kDelegateStakeTransaction: {
      _internal_mutable_delegate_stake_transaction()->::TW::Solana::Proto::DelegateStake::MergeFrom(from._internal_delegate_stake_transaction());
      break;
    }
    case kDeactivateStakeTransaction: {
      _internal_mutable_deactivate_stake_transaction()->::TW::Solana::Proto::DeactivateStake::MergeFrom(from._internal_deactivate_stake_transaction());
      break;
    }
    case kDeactivateAllStakeTransaction: {
      _internal_mutable_deactivate_all_stake_transaction()->::TW::Solana::Proto::DeactivateAllStake::MergeFrom(from._internal_deactivate_all_stake_transaction());
      break;
    }
    case kWithdrawTransaction: {
      _internal_mutable_withdraw_transaction()->::TW::Solana::Proto::WithdrawStake::MergeFrom(from._internal_withdraw_transaction());
      break;
    }
    case kWithdrawAllTransaction: {
      _internal_mutable_withdraw_all_transaction()->::TW::Solana::Proto::WithdrawAllStake::MergeFrom(from._internal_withdraw_all_transaction());
      break;
    }
    case kCreateTokenAccountTransaction: {
      _internal_mutable_create_token_account_transaction()->::TW::Solana::Proto::CreateTokenAccount::MergeFrom(from._internal_create_token_account_transaction());
      break;
    }
    case kTokenTransferTransaction: {
      _internal_mutable_token_transfer_transaction()->::TW::Solana::Proto::TokenTransfer::MergeFrom(from._internal_token_transfer_transaction());
      break;
    }
    case kCreateAndTransferTokenTransaction: {
      _internal_mutable_create_and_transfer_token_transaction()->::TW::Solana::Proto::CreateAndTransferToken::MergeFrom(from._internal_create_and_transfer_token_transaction());
      break;
    }
    case kCreateNonceAccount: {
      _internal_mutable_create_nonce_account()->::TW::Solana::Proto::CreateNonceAccount::MergeFrom(from._internal_create_nonce_account());
      break;
    }
    case kWithdrawNonceAccount: {
      _internal_mutable_withdraw_nonce_account()->::TW::Solana::Proto::WithdrawNonceAccount::MergeFrom(from._internal_withdraw_nonce_account());
      break;
    }
    case kAdvanceNonceAccount: {
      _internal_mutable_advance_nonce_account()->::TW::Solana::Proto::AdvanceNonceAccount::MergeFrom(from._internal_advance_nonce_account());
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recent_blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recent_blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nonce_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fee_payer_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fee_payer_private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fee_payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fee_payer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
v0_msg_ = false;
clear_has_transaction_type();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recent_blockhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_payer_private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_transaction_type()) {
    clear_transaction_type();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::clear_transaction_type() {
// @@protoc_insertion_point(one_of_clear_start:TW.Solana.Proto.SigningInput)
  switch (transaction_type_case()) {
    case kTransferTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.transfer_transaction_;
      }
      break;
    }
    case kDelegateStakeTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.delegate_stake_transaction_;
      }
      break;
    }
    case kDeactivateStakeTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.deactivate_stake_transaction_;
      }
      break;
    }
    case kDeactivateAllStakeTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.deactivate_all_stake_transaction_;
      }
      break;
    }
    case kWithdrawTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.withdraw_transaction_;
      }
      break;
    }
    case kWithdrawAllTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.withdraw_all_transaction_;
      }
      break;
    }
    case kCreateTokenAccountTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.create_token_account_transaction_;
      }
      break;
    }
    case kTokenTransferTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.token_transfer_transaction_;
      }
      break;
    }
    case kCreateAndTransferTokenTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.create_and_transfer_token_transaction_;
      }
      break;
    }
    case kCreateNonceAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.create_nonce_account_;
      }
      break;
    }
    case kWithdrawNonceAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.withdraw_nonce_account_;
      }
      break;
    }
    case kAdvanceNonceAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_type_.advance_nonce_account_;
      }
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_TYPE_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmpty();
  recent_blockhash_.ClearToEmpty();
  sender_.ClearToEmpty();
  nonce_account_.ClearToEmpty();
  fee_payer_private_key_.ClearToEmpty();
  fee_payer_.ClearToEmpty();
  v0_msg_ = false;
  clear_transaction_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string recent_blockhash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recent_blockhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.recent_blockhash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool v0_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          v0_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.Transfer transfer_transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegate_stake_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deactivate_stake_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_deactivate_all_stake_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_all_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_token_account_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_transfer_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_and_transfer_token_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.CreateNonceAccount create_nonce_account = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_nonce_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.sender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nonce_account = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_nonce_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.nonce_account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.WithdrawNonceAccount withdraw_nonce_account = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw_nonce_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes fee_payer_private_key = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_fee_payer_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fee_payer = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_fee_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningInput.fee_payer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Solana.Proto.AdvanceNonceAccount advance_nonce_account = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_advance_nonce_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // string recent_blockhash = 2;
  if (!this->_internal_recent_blockhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recent_blockhash().data(), static_cast<int>(this->_internal_recent_blockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.recent_blockhash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recent_blockhash(), target);
  }

  // bool v0_msg = 3;
  if (this->_internal_v0_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_v0_msg(), target);
  }

  // .TW.Solana.Proto.Transfer transfer_transaction = 4;
  if (_internal_has_transfer_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transfer_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 5;
  if (_internal_has_delegate_stake_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::delegate_stake_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 6;
  if (_internal_has_deactivate_stake_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::deactivate_stake_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 7;
  if (_internal_has_deactivate_all_stake_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::deactivate_all_stake_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 8;
  if (_internal_has_withdraw_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::withdraw_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 9;
  if (_internal_has_withdraw_all_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::withdraw_all_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 10;
  if (_internal_has_create_token_account_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::create_token_account_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 11;
  if (_internal_has_token_transfer_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::token_transfer_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 12;
  if (_internal_has_create_and_transfer_token_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::create_and_transfer_token_transaction(this), target, stream);
  }

  // .TW.Solana.Proto.CreateNonceAccount create_nonce_account = 13;
  if (_internal_has_create_nonce_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::create_nonce_account(this), target, stream);
  }

  // string sender = 14;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.sender");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_sender(), target);
  }

  // string nonce_account = 15;
  if (!this->_internal_nonce_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce_account().data(), static_cast<int>(this->_internal_nonce_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.nonce_account");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_nonce_account(), target);
  }

  // .TW.Solana.Proto.WithdrawNonceAccount withdraw_nonce_account = 16;
  if (_internal_has_withdraw_nonce_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::withdraw_nonce_account(this), target, stream);
  }

  // bytes fee_payer_private_key = 17;
  if (!this->_internal_fee_payer_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_fee_payer_private_key(), target);
  }

  // string fee_payer = 18;
  if (!this->_internal_fee_payer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee_payer().data(), static_cast<int>(this->_internal_fee_payer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningInput.fee_payer");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_fee_payer(), target);
  }

  // .TW.Solana.Proto.AdvanceNonceAccount advance_nonce_account = 19;
  if (_internal_has_advance_nonce_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::advance_nonce_account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string recent_blockhash = 2;
  if (!this->_internal_recent_blockhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recent_blockhash());
  }

  // string sender = 14;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string nonce_account = 15;
  if (!this->_internal_nonce_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce_account());
  }

  // bytes fee_payer_private_key = 17;
  if (!this->_internal_fee_payer_private_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fee_payer_private_key());
  }

  // string fee_payer = 18;
  if (!this->_internal_fee_payer().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee_payer());
  }

  // bool v0_msg = 3;
  if (this->_internal_v0_msg() != 0) {
    total_size += 1 + 1;
  }

  switch (transaction_type_case()) {
    // .TW.Solana.Proto.Transfer transfer_transaction = 4;
    case kTransferTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.transfer_transaction_);
      break;
    }
    // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 5;
    case kDelegateStakeTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.delegate_stake_transaction_);
      break;
    }
    // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 6;
    case kDeactivateStakeTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.deactivate_stake_transaction_);
      break;
    }
    // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 7;
    case kDeactivateAllStakeTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.deactivate_all_stake_transaction_);
      break;
    }
    // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 8;
    case kWithdrawTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.withdraw_transaction_);
      break;
    }
    // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 9;
    case kWithdrawAllTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.withdraw_all_transaction_);
      break;
    }
    // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 10;
    case kCreateTokenAccountTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.create_token_account_transaction_);
      break;
    }
    // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 11;
    case kTokenTransferTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.token_transfer_transaction_);
      break;
    }
    // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 12;
    case kCreateAndTransferTokenTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.create_and_transfer_token_transaction_);
      break;
    }
    // .TW.Solana.Proto.CreateNonceAccount create_nonce_account = 13;
    case kCreateNonceAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.create_nonce_account_);
      break;
    }
    // .TW.Solana.Proto.WithdrawNonceAccount withdraw_nonce_account = 16;
    case kWithdrawNonceAccount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.withdraw_nonce_account_);
      break;
    }
    // .TW.Solana.Proto.AdvanceNonceAccount advance_nonce_account = 19;
    case kAdvanceNonceAccount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_type_.advance_nonce_account_);
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_recent_blockhash().empty()) {
    _internal_set_recent_blockhash(from._internal_recent_blockhash());
  }
  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from._internal_nonce_account().empty()) {
    _internal_set_nonce_account(from._internal_nonce_account());
  }
  if (!from._internal_fee_payer_private_key().empty()) {
    _internal_set_fee_payer_private_key(from._internal_fee_payer_private_key());
  }
  if (!from._internal_fee_payer().empty()) {
    _internal_set_fee_payer(from._internal_fee_payer());
  }
  if (from._internal_v0_msg() != 0) {
    _internal_set_v0_msg(from._internal_v0_msg());
  }
  switch (from.transaction_type_case()) {
    case kTransferTransaction: {
      _internal_mutable_transfer_transaction()->::TW::Solana::Proto::Transfer::MergeFrom(from._internal_transfer_transaction());
      break;
    }
    case kDelegateStakeTransaction: {
      _internal_mutable_delegate_stake_transaction()->::TW::Solana::Proto::DelegateStake::MergeFrom(from._internal_delegate_stake_transaction());
      break;
    }
    case kDeactivateStakeTransaction: {
      _internal_mutable_deactivate_stake_transaction()->::TW::Solana::Proto::DeactivateStake::MergeFrom(from._internal_deactivate_stake_transaction());
      break;
    }
    case kDeactivateAllStakeTransaction: {
      _internal_mutable_deactivate_all_stake_transaction()->::TW::Solana::Proto::DeactivateAllStake::MergeFrom(from._internal_deactivate_all_stake_transaction());
      break;
    }
    case kWithdrawTransaction: {
      _internal_mutable_withdraw_transaction()->::TW::Solana::Proto::WithdrawStake::MergeFrom(from._internal_withdraw_transaction());
      break;
    }
    case kWithdrawAllTransaction: {
      _internal_mutable_withdraw_all_transaction()->::TW::Solana::Proto::WithdrawAllStake::MergeFrom(from._internal_withdraw_all_transaction());
      break;
    }
    case kCreateTokenAccountTransaction: {
      _internal_mutable_create_token_account_transaction()->::TW::Solana::Proto::CreateTokenAccount::MergeFrom(from._internal_create_token_account_transaction());
      break;
    }
    case kTokenTransferTransaction: {
      _internal_mutable_token_transfer_transaction()->::TW::Solana::Proto::TokenTransfer::MergeFrom(from._internal_token_transfer_transaction());
      break;
    }
    case kCreateAndTransferTokenTransaction: {
      _internal_mutable_create_and_transfer_token_transaction()->::TW::Solana::Proto::CreateAndTransferToken::MergeFrom(from._internal_create_and_transfer_token_transaction());
      break;
    }
    case kCreateNonceAccount: {
      _internal_mutable_create_nonce_account()->::TW::Solana::Proto::CreateNonceAccount::MergeFrom(from._internal_create_nonce_account());
      break;
    }
    case kWithdrawNonceAccount: {
      _internal_mutable_withdraw_nonce_account()->::TW::Solana::Proto::WithdrawNonceAccount::MergeFrom(from._internal_withdraw_nonce_account());
      break;
    }
    case kAdvanceNonceAccount: {
      _internal_mutable_advance_nonce_account()->::TW::Solana::Proto::AdvanceNonceAccount::MergeFrom(from._internal_advance_nonce_account());
      break;
    }
    case TRANSACTION_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recent_blockhash_, lhs_arena,
      &other->recent_blockhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_account_, lhs_arena,
      &other->nonce_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fee_payer_private_key_, lhs_arena,
      &other->fee_payer_private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fee_payer_, lhs_arena,
      &other->fee_payer_, rhs_arena
  );
  swap(v0_msg_, other->v0_msg_);
  swap(transaction_type_, other->transaction_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[13]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  unsigned_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unsigned_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unsigned_tx().empty()) {
    unsigned_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unsigned_tx(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unsigned_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unsigned_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unsigned_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  error_message_.ClearToEmpty();
  unsigned_tx_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningOutput.encoded"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string unsigned_tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_unsigned_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.SigningOutput.unsigned_tx"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string encoded = 1;
  if (!this->_internal_encoded().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoded().data(), static_cast<int>(this->_internal_encoded().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningOutput.encoded");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // string unsigned_tx = 4;
  if (!this->_internal_unsigned_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unsigned_tx().data(), static_cast<int>(this->_internal_unsigned_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.SigningOutput.unsigned_tx");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_unsigned_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoded());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string unsigned_tx = 4;
  if (!this->_internal_unsigned_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unsigned_tx());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_unsigned_tx().empty()) {
    _internal_set_unsigned_tx(from._internal_unsigned_tx());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unsigned_tx_, lhs_arena,
      &other->unsigned_tx_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[14]);
}

// ===================================================================

class PreSigningOutput::_Internal {
 public:
};

PreSigningOutput::PreSigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Solana.Proto.PreSigningOutput)
}
PreSigningOutput::PreSigningOutput(const PreSigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signers_(from.signers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Solana.Proto.PreSigningOutput)
}

inline void PreSigningOutput::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

PreSigningOutput::~PreSigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Solana.Proto.PreSigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreSigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreSigningOutput::ArenaDtor(void* object) {
  PreSigningOutput* _this = reinterpret_cast< PreSigningOutput* >(object);
  (void)_this;
}
void PreSigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreSigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreSigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Solana.Proto.PreSigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signers_.Clear();
  data_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreSigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes signers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Solana.Proto.PreSigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreSigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Solana.Proto.PreSigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes signers = 1;
  for (int i = 0, n = this->_internal_signers_size(); i < n; i++) {
    const auto& s = this->_internal_signers(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Solana.Proto.PreSigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Solana.Proto.PreSigningOutput)
  return target;
}

size_t PreSigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Solana.Proto.PreSigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signers_.size());
  for (int i = 0, n = signers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signers_.Get(i));
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreSigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreSigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreSigningOutput::GetClassData() const { return &_class_data_; }

void PreSigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreSigningOutput *>(to)->MergeFrom(
      static_cast<const PreSigningOutput &>(from));
}


void PreSigningOutput::MergeFrom(const PreSigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Solana.Proto.PreSigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signers_.MergeFrom(from.signers_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreSigningOutput::CopyFrom(const PreSigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Solana.Proto.PreSigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreSigningOutput::IsInitialized() const {
  return true;
}

void PreSigningOutput::InternalSwap(PreSigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signers_.InternalSwap(&other->signers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreSigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Solana_2eproto_getter, &descriptor_table_Solana_2eproto_once,
      file_level_metadata_Solana_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Solana
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::Transfer* Arena::CreateMaybeMessage< ::TW::Solana::Proto::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::DelegateStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::DelegateStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::DelegateStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::DeactivateStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::DeactivateStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::DeactivateStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::DeactivateAllStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::DeactivateAllStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::DeactivateAllStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::WithdrawStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::WithdrawStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::WithdrawStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::StakeAccountValue* Arena::CreateMaybeMessage< ::TW::Solana::Proto::StakeAccountValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::StakeAccountValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::WithdrawAllStake* Arena::CreateMaybeMessage< ::TW::Solana::Proto::WithdrawAllStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::WithdrawAllStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::CreateTokenAccount* Arena::CreateMaybeMessage< ::TW::Solana::Proto::CreateTokenAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::CreateTokenAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::TokenTransfer* Arena::CreateMaybeMessage< ::TW::Solana::Proto::TokenTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::TokenTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::CreateAndTransferToken* Arena::CreateMaybeMessage< ::TW::Solana::Proto::CreateAndTransferToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::CreateAndTransferToken >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::CreateNonceAccount* Arena::CreateMaybeMessage< ::TW::Solana::Proto::CreateNonceAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::CreateNonceAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::WithdrawNonceAccount* Arena::CreateMaybeMessage< ::TW::Solana::Proto::WithdrawNonceAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::WithdrawNonceAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::AdvanceNonceAccount* Arena::CreateMaybeMessage< ::TW::Solana::Proto::AdvanceNonceAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::AdvanceNonceAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Solana::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Solana::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::SigningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Solana::Proto::PreSigningOutput* Arena::CreateMaybeMessage< ::TW::Solana::Proto::PreSigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Solana::Proto::PreSigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
