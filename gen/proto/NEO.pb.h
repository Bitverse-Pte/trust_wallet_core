// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NEO.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NEO_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NEO_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NEO_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NEO_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NEO_2eproto;
namespace TW {
namespace NEO {
namespace Proto {
class OutputAddress;
struct OutputAddressDefaultTypeInternal;
extern OutputAddressDefaultTypeInternal _OutputAddress_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionAttributePlan;
struct TransactionAttributePlanDefaultTypeInternal;
extern TransactionAttributePlanDefaultTypeInternal _TransactionAttributePlan_default_instance_;
class TransactionInput;
struct TransactionInputDefaultTypeInternal;
extern TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
class TransactionOutput;
struct TransactionOutputDefaultTypeInternal;
extern TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
class TransactionOutputPlan;
struct TransactionOutputPlanDefaultTypeInternal;
extern TransactionOutputPlanDefaultTypeInternal _TransactionOutputPlan_default_instance_;
class TransactionPlan;
struct TransactionPlanDefaultTypeInternal;
extern TransactionPlanDefaultTypeInternal _TransactionPlan_default_instance_;
class Transaction_InvocationGeneric;
struct Transaction_InvocationGenericDefaultTypeInternal;
extern Transaction_InvocationGenericDefaultTypeInternal _Transaction_InvocationGeneric_default_instance_;
class Transaction_Nep5Transfer;
struct Transaction_Nep5TransferDefaultTypeInternal;
extern Transaction_Nep5TransferDefaultTypeInternal _Transaction_Nep5Transfer_default_instance_;
}  // namespace Proto
}  // namespace NEO
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::NEO::Proto::OutputAddress* Arena::CreateMaybeMessage<::TW::NEO::Proto::OutputAddress>(Arena*);
template<> ::TW::NEO::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::NEO::Proto::SigningInput>(Arena*);
template<> ::TW::NEO::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::NEO::Proto::SigningOutput>(Arena*);
template<> ::TW::NEO::Proto::Transaction* Arena::CreateMaybeMessage<::TW::NEO::Proto::Transaction>(Arena*);
template<> ::TW::NEO::Proto::TransactionAttributePlan* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionAttributePlan>(Arena*);
template<> ::TW::NEO::Proto::TransactionInput* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionInput>(Arena*);
template<> ::TW::NEO::Proto::TransactionOutput* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionOutput>(Arena*);
template<> ::TW::NEO::Proto::TransactionOutputPlan* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionOutputPlan>(Arena*);
template<> ::TW::NEO::Proto::TransactionPlan* Arena::CreateMaybeMessage<::TW::NEO::Proto::TransactionPlan>(Arena*);
template<> ::TW::NEO::Proto::Transaction_InvocationGeneric* Arena::CreateMaybeMessage<::TW::NEO::Proto::Transaction_InvocationGeneric>(Arena*);
template<> ::TW::NEO::Proto::Transaction_Nep5Transfer* Arena::CreateMaybeMessage<::TW::NEO::Proto::Transaction_Nep5Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace NEO {
namespace Proto {

// ===================================================================

class TransactionInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionInput) */ {
 public:
  inline TransactionInput() : TransactionInput(nullptr) {}
  ~TransactionInput() override;
  explicit constexpr TransactionInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionInput(const TransactionInput& from);
  TransactionInput(TransactionInput&& from) noexcept
    : TransactionInput() {
    *this = ::std::move(from);
  }

  inline TransactionInput& operator=(const TransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInput& operator=(TransactionInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionInput* internal_default_instance() {
    return reinterpret_cast<const TransactionInput*>(
               &_TransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionInput& a, TransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionInput";
  }
  protected:
  explicit TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevHashFieldNumber = 1,
    kAssetIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kPrevIndexFieldNumber = 2,
  };
  // bytes prev_hash = 1;
  void clear_prev_hash();
  const std::string& prev_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_hash();
  PROTOBUF_NODISCARD std::string* release_prev_hash();
  void set_allocated_prev_hash(std::string* prev_hash);
  private:
  const std::string& _internal_prev_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_hash(const std::string& value);
  std::string* _internal_mutable_prev_hash();
  public:

  // string asset_id = 4;
  void clear_asset_id();
  const std::string& asset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_id();
  PROTOBUF_NODISCARD std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // int64 value = 3;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // fixed32 prev_index = 2;
  void clear_prev_index();
  uint32_t prev_index() const;
  void set_prev_index(uint32_t value);
  private:
  uint32_t _internal_prev_index() const;
  void _internal_set_prev_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  int64_t value_;
  uint32_t prev_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class OutputAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.OutputAddress) */ {
 public:
  inline OutputAddress() : OutputAddress(nullptr) {}
  ~OutputAddress() override;
  explicit constexpr OutputAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputAddress(const OutputAddress& from);
  OutputAddress(OutputAddress&& from) noexcept
    : OutputAddress() {
    *this = ::std::move(from);
  }

  inline OutputAddress& operator=(const OutputAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputAddress& operator=(OutputAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputAddress* internal_default_instance() {
    return reinterpret_cast<const OutputAddress*>(
               &_OutputAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputAddress& a, OutputAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.OutputAddress";
  }
  protected:
  explicit OutputAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // string to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // sint64 amount = 1;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.OutputAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  int64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionOutput) */ {
 public:
  inline TransactionOutput() : TransactionOutput(nullptr) {}
  ~TransactionOutput() override;
  explicit constexpr TransactionOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOutput(const TransactionOutput& from);
  TransactionOutput(TransactionOutput&& from) noexcept
    : TransactionOutput() {
    *this = ::std::move(from);
  }

  inline TransactionOutput& operator=(const TransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutput& operator=(TransactionOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOutput* internal_default_instance() {
    return reinterpret_cast<const TransactionOutput*>(
               &_TransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionOutput& a, TransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionOutput";
  }
  protected:
  explicit TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraOutputsFieldNumber = 5,
    kAssetIdFieldNumber = 1,
    kToAddressFieldNumber = 3,
    kChangeAddressFieldNumber = 4,
    kAmountFieldNumber = 2,
  };
  // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 5;
  int extra_outputs_size() const;
  private:
  int _internal_extra_outputs_size() const;
  public:
  void clear_extra_outputs();
  ::TW::NEO::Proto::OutputAddress* mutable_extra_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >*
      mutable_extra_outputs();
  private:
  const ::TW::NEO::Proto::OutputAddress& _internal_extra_outputs(int index) const;
  ::TW::NEO::Proto::OutputAddress* _internal_add_extra_outputs();
  public:
  const ::TW::NEO::Proto::OutputAddress& extra_outputs(int index) const;
  ::TW::NEO::Proto::OutputAddress* add_extra_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >&
      extra_outputs() const;

  // string asset_id = 1;
  void clear_asset_id();
  const std::string& asset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_id();
  PROTOBUF_NODISCARD std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // string to_address = 3;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 4;
  void clear_change_address();
  const std::string& change_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_change_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_change_address();
  PROTOBUF_NODISCARD std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // sint64 amount = 2;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress > extra_outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  int64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Nep5Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.Transaction.Nep5Transfer) */ {
 public:
  inline Transaction_Nep5Transfer() : Transaction_Nep5Transfer(nullptr) {}
  ~Transaction_Nep5Transfer() override;
  explicit constexpr Transaction_Nep5Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Nep5Transfer(const Transaction_Nep5Transfer& from);
  Transaction_Nep5Transfer(Transaction_Nep5Transfer&& from) noexcept
    : Transaction_Nep5Transfer() {
    *this = ::std::move(from);
  }

  inline Transaction_Nep5Transfer& operator=(const Transaction_Nep5Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Nep5Transfer& operator=(Transaction_Nep5Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_Nep5Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Nep5Transfer* internal_default_instance() {
    return reinterpret_cast<const Transaction_Nep5Transfer*>(
               &_Transaction_Nep5Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transaction_Nep5Transfer& a, Transaction_Nep5Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Nep5Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Nep5Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_Nep5Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_Nep5Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_Nep5Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_Nep5Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Nep5Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.Transaction.Nep5Transfer";
  }
  protected:
  explicit Transaction_Nep5Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kAmountFieldNumber = 4,
    kScriptWithRetFieldNumber = 5,
  };
  // string asset_id = 1;
  void clear_asset_id();
  const std::string& asset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_id();
  PROTOBUF_NODISCARD std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 3;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes amount = 4;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bool script_with_ret = 5;
  void clear_script_with_ret();
  bool script_with_ret() const;
  void set_script_with_ret(bool value);
  private:
  bool _internal_script_with_ret() const;
  void _internal_set_script_with_ret(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.Transaction.Nep5Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  bool script_with_ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class Transaction_InvocationGeneric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.Transaction.InvocationGeneric) */ {
 public:
  inline Transaction_InvocationGeneric() : Transaction_InvocationGeneric(nullptr) {}
  ~Transaction_InvocationGeneric() override;
  explicit constexpr Transaction_InvocationGeneric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_InvocationGeneric(const Transaction_InvocationGeneric& from);
  Transaction_InvocationGeneric(Transaction_InvocationGeneric&& from) noexcept
    : Transaction_InvocationGeneric() {
    *this = ::std::move(from);
  }

  inline Transaction_InvocationGeneric& operator=(const Transaction_InvocationGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_InvocationGeneric& operator=(Transaction_InvocationGeneric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_InvocationGeneric& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_InvocationGeneric* internal_default_instance() {
    return reinterpret_cast<const Transaction_InvocationGeneric*>(
               &_Transaction_InvocationGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transaction_InvocationGeneric& a, Transaction_InvocationGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_InvocationGeneric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_InvocationGeneric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction_InvocationGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction_InvocationGeneric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_InvocationGeneric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_InvocationGeneric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_InvocationGeneric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.Transaction.InvocationGeneric";
  }
  protected:
  explicit Transaction_InvocationGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 2,
    kGasFieldNumber = 1,
  };
  // bytes script = 2;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // uint64 gas = 1;
  void clear_gas();
  uint64_t gas() const;
  void set_gas(uint64_t value);
  private:
  uint64_t _internal_gas() const;
  void _internal_set_gas(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.Transaction.InvocationGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  uint64_t gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  enum TransactionOneofCase {
    kNep5Transfer = 1,
    kInvocationGeneric = 2,
    TRANSACTION_ONEOF_NOT_SET = 0,
  };

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_Nep5Transfer Nep5Transfer;
  typedef Transaction_InvocationGeneric InvocationGeneric;

  // accessors -------------------------------------------------------

  enum : int {
    kNep5TransferFieldNumber = 1,
    kInvocationGenericFieldNumber = 2,
  };
  // .TW.NEO.Proto.Transaction.Nep5Transfer nep5_transfer = 1;
  bool has_nep5_transfer() const;
  private:
  bool _internal_has_nep5_transfer() const;
  public:
  void clear_nep5_transfer();
  const ::TW::NEO::Proto::Transaction_Nep5Transfer& nep5_transfer() const;
  PROTOBUF_NODISCARD ::TW::NEO::Proto::Transaction_Nep5Transfer* release_nep5_transfer();
  ::TW::NEO::Proto::Transaction_Nep5Transfer* mutable_nep5_transfer();
  void set_allocated_nep5_transfer(::TW::NEO::Proto::Transaction_Nep5Transfer* nep5_transfer);
  private:
  const ::TW::NEO::Proto::Transaction_Nep5Transfer& _internal_nep5_transfer() const;
  ::TW::NEO::Proto::Transaction_Nep5Transfer* _internal_mutable_nep5_transfer();
  public:
  void unsafe_arena_set_allocated_nep5_transfer(
      ::TW::NEO::Proto::Transaction_Nep5Transfer* nep5_transfer);
  ::TW::NEO::Proto::Transaction_Nep5Transfer* unsafe_arena_release_nep5_transfer();

  // .TW.NEO.Proto.Transaction.InvocationGeneric invocation_generic = 2;
  bool has_invocation_generic() const;
  private:
  bool _internal_has_invocation_generic() const;
  public:
  void clear_invocation_generic();
  const ::TW::NEO::Proto::Transaction_InvocationGeneric& invocation_generic() const;
  PROTOBUF_NODISCARD ::TW::NEO::Proto::Transaction_InvocationGeneric* release_invocation_generic();
  ::TW::NEO::Proto::Transaction_InvocationGeneric* mutable_invocation_generic();
  void set_allocated_invocation_generic(::TW::NEO::Proto::Transaction_InvocationGeneric* invocation_generic);
  private:
  const ::TW::NEO::Proto::Transaction_InvocationGeneric& _internal_invocation_generic() const;
  ::TW::NEO::Proto::Transaction_InvocationGeneric* _internal_mutable_invocation_generic();
  public:
  void unsafe_arena_set_allocated_invocation_generic(
      ::TW::NEO::Proto::Transaction_InvocationGeneric* invocation_generic);
  ::TW::NEO::Proto::Transaction_InvocationGeneric* unsafe_arena_release_invocation_generic();

  void clear_transaction_oneof();
  TransactionOneofCase transaction_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.Transaction)
 private:
  class _Internal;
  void set_has_nep5_transfer();
  void set_has_invocation_generic();

  inline bool has_transaction_oneof() const;
  inline void clear_has_transaction_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TransactionOneofUnion {
    constexpr TransactionOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::NEO::Proto::Transaction_Nep5Transfer* nep5_transfer_;
    ::TW::NEO::Proto::Transaction_InvocationGeneric* invocation_generic_;
  } transaction_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kPrivateKeyFieldNumber = 3,
    kGasAssetIdFieldNumber = 5,
    kGasChangeAddressFieldNumber = 6,
    kPlanFieldNumber = 7,
    kTransactionFieldNumber = 8,
    kFeeFieldNumber = 4,
  };
  // repeated .TW.NEO.Proto.TransactionInput inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::NEO::Proto::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
      mutable_inputs();
  private:
  const ::TW::NEO::Proto::TransactionInput& _internal_inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* _internal_add_inputs();
  public:
  const ::TW::NEO::Proto::TransactionInput& inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
      inputs() const;

  // repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::NEO::Proto::TransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >*
      mutable_outputs();
  private:
  const ::TW::NEO::Proto::TransactionOutput& _internal_outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutput* _internal_add_outputs();
  public:
  const ::TW::NEO::Proto::TransactionOutput& outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >&
      outputs() const;

  // bytes private_key = 3;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string gas_asset_id = 5;
  void clear_gas_asset_id();
  const std::string& gas_asset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_asset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_asset_id();
  PROTOBUF_NODISCARD std::string* release_gas_asset_id();
  void set_allocated_gas_asset_id(std::string* gas_asset_id);
  private:
  const std::string& _internal_gas_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_asset_id(const std::string& value);
  std::string* _internal_mutable_gas_asset_id();
  public:

  // string gas_change_address = 6;
  void clear_gas_change_address();
  const std::string& gas_change_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_change_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_change_address();
  PROTOBUF_NODISCARD std::string* release_gas_change_address();
  void set_allocated_gas_change_address(std::string* gas_change_address);
  private:
  const std::string& _internal_gas_change_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_change_address(const std::string& value);
  std::string* _internal_mutable_gas_change_address();
  public:

  // .TW.NEO.Proto.TransactionPlan plan = 7;
  bool has_plan() const;
  private:
  bool _internal_has_plan() const;
  public:
  void clear_plan();
  const ::TW::NEO::Proto::TransactionPlan& plan() const;
  PROTOBUF_NODISCARD ::TW::NEO::Proto::TransactionPlan* release_plan();
  ::TW::NEO::Proto::TransactionPlan* mutable_plan();
  void set_allocated_plan(::TW::NEO::Proto::TransactionPlan* plan);
  private:
  const ::TW::NEO::Proto::TransactionPlan& _internal_plan() const;
  ::TW::NEO::Proto::TransactionPlan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::TW::NEO::Proto::TransactionPlan* plan);
  ::TW::NEO::Proto::TransactionPlan* unsafe_arena_release_plan();

  // .TW.NEO.Proto.Transaction transaction = 8;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::NEO::Proto::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::TW::NEO::Proto::Transaction* release_transaction();
  ::TW::NEO::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::NEO::Proto::Transaction* transaction);
  private:
  const ::TW::NEO::Proto::Transaction& _internal_transaction() const;
  ::TW::NEO::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::NEO::Proto::Transaction* transaction);
  ::TW::NEO::Proto::Transaction* unsafe_arena_release_transaction();

  // int64 fee = 4;
  void clear_fee();
  int64_t fee() const;
  void set_fee(int64_t value);
  private:
  int64_t _internal_fee() const;
  void _internal_set_fee(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_change_address_;
  ::TW::NEO::Proto::TransactionPlan* plan_;
  ::TW::NEO::Proto::Transaction* transaction_;
  int64_t fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kErrorFieldNumber = 2,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutputPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionOutputPlan) */ {
 public:
  inline TransactionOutputPlan() : TransactionOutputPlan(nullptr) {}
  ~TransactionOutputPlan() override;
  explicit constexpr TransactionOutputPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOutputPlan(const TransactionOutputPlan& from);
  TransactionOutputPlan(TransactionOutputPlan&& from) noexcept
    : TransactionOutputPlan() {
    *this = ::std::move(from);
  }

  inline TransactionOutputPlan& operator=(const TransactionOutputPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutputPlan& operator=(TransactionOutputPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOutputPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOutputPlan* internal_default_instance() {
    return reinterpret_cast<const TransactionOutputPlan*>(
               &_TransactionOutputPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransactionOutputPlan& a, TransactionOutputPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutputPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutputPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOutputPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOutputPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOutputPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionOutputPlan& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutputPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionOutputPlan";
  }
  protected:
  explicit TransactionOutputPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraOutputsFieldNumber = 7,
    kAssetIdFieldNumber = 4,
    kToAddressFieldNumber = 5,
    kChangeAddressFieldNumber = 6,
    kAmountFieldNumber = 1,
    kAvailableAmountFieldNumber = 2,
    kChangeFieldNumber = 3,
  };
  // repeated .TW.NEO.Proto.OutputAddress extra_outputs = 7;
  int extra_outputs_size() const;
  private:
  int _internal_extra_outputs_size() const;
  public:
  void clear_extra_outputs();
  ::TW::NEO::Proto::OutputAddress* mutable_extra_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >*
      mutable_extra_outputs();
  private:
  const ::TW::NEO::Proto::OutputAddress& _internal_extra_outputs(int index) const;
  ::TW::NEO::Proto::OutputAddress* _internal_add_extra_outputs();
  public:
  const ::TW::NEO::Proto::OutputAddress& extra_outputs(int index) const;
  ::TW::NEO::Proto::OutputAddress* add_extra_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >&
      extra_outputs() const;

  // string asset_id = 4;
  void clear_asset_id();
  const std::string& asset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_id();
  PROTOBUF_NODISCARD std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // string to_address = 5;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 6;
  void clear_change_address();
  const std::string& change_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_change_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_change_address();
  PROTOBUF_NODISCARD std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // int64 amount = 1;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // int64 available_amount = 2;
  void clear_available_amount();
  int64_t available_amount() const;
  void set_available_amount(int64_t value);
  private:
  int64_t _internal_available_amount() const;
  void _internal_set_available_amount(int64_t value);
  public:

  // int64 change = 3;
  void clear_change();
  int64_t change() const;
  void set_change(int64_t value);
  private:
  int64_t _internal_change() const;
  void _internal_set_change(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionOutputPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress > extra_outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  int64_t amount_;
  int64_t available_amount_;
  int64_t change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class TransactionAttributePlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionAttributePlan) */ {
 public:
  inline TransactionAttributePlan() : TransactionAttributePlan(nullptr) {}
  ~TransactionAttributePlan() override;
  explicit constexpr TransactionAttributePlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionAttributePlan(const TransactionAttributePlan& from);
  TransactionAttributePlan(TransactionAttributePlan&& from) noexcept
    : TransactionAttributePlan() {
    *this = ::std::move(from);
  }

  inline TransactionAttributePlan& operator=(const TransactionAttributePlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionAttributePlan& operator=(TransactionAttributePlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionAttributePlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionAttributePlan* internal_default_instance() {
    return reinterpret_cast<const TransactionAttributePlan*>(
               &_TransactionAttributePlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransactionAttributePlan& a, TransactionAttributePlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionAttributePlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionAttributePlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionAttributePlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionAttributePlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionAttributePlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionAttributePlan& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionAttributePlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionAttributePlan";
  }
  protected:
  explicit TransactionAttributePlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kUsageFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 usage = 1;
  void clear_usage();
  int32_t usage() const;
  void set_usage(int32_t value);
  private:
  int32_t _internal_usage() const;
  void _internal_set_usage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionAttributePlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t usage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// -------------------------------------------------------------------

class TransactionPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.NEO.Proto.TransactionPlan) */ {
 public:
  inline TransactionPlan() : TransactionPlan(nullptr) {}
  ~TransactionPlan() override;
  explicit constexpr TransactionPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionPlan(const TransactionPlan& from);
  TransactionPlan(TransactionPlan&& from) noexcept
    : TransactionPlan() {
    *this = ::std::move(from);
  }

  inline TransactionPlan& operator=(const TransactionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionPlan& operator=(TransactionPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionPlan* internal_default_instance() {
    return reinterpret_cast<const TransactionPlan*>(
               &_TransactionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TransactionPlan& a, TransactionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionPlan& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.NEO.Proto.TransactionPlan";
  }
  protected:
  explicit TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 1,
    kInputsFieldNumber = 2,
    kAttributesFieldNumber = 5,
    kFeeFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::NEO::Proto::TransactionOutputPlan* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >*
      mutable_outputs();
  private:
  const ::TW::NEO::Proto::TransactionOutputPlan& _internal_outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutputPlan* _internal_add_outputs();
  public:
  const ::TW::NEO::Proto::TransactionOutputPlan& outputs(int index) const;
  ::TW::NEO::Proto::TransactionOutputPlan* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >&
      outputs() const;

  // repeated .TW.NEO.Proto.TransactionInput inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::NEO::Proto::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
      mutable_inputs();
  private:
  const ::TW::NEO::Proto::TransactionInput& _internal_inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* _internal_add_inputs();
  public:
  const ::TW::NEO::Proto::TransactionInput& inputs(int index) const;
  ::TW::NEO::Proto::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
      inputs() const;

  // repeated .TW.NEO.Proto.TransactionAttributePlan attributes = 5;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::TW::NEO::Proto::TransactionAttributePlan* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionAttributePlan >*
      mutable_attributes();
  private:
  const ::TW::NEO::Proto::TransactionAttributePlan& _internal_attributes(int index) const;
  ::TW::NEO::Proto::TransactionAttributePlan* _internal_add_attributes();
  public:
  const ::TW::NEO::Proto::TransactionAttributePlan& attributes(int index) const;
  ::TW::NEO::Proto::TransactionAttributePlan* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionAttributePlan >&
      attributes() const;

  // int64 fee = 3;
  void clear_fee();
  int64_t fee() const;
  void set_fee(int64_t value);
  private:
  int64_t _internal_fee() const;
  void _internal_set_fee(int64_t value);
  public:

  // .TW.Common.Proto.SigningError error = 4;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.NEO.Proto.TransactionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionAttributePlan > attributes_;
  int64_t fee_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NEO_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionInput

// bytes prev_hash = 1;
inline void TransactionInput::clear_prev_hash() {
  prev_hash_.ClearToEmpty();
}
inline const std::string& TransactionInput::prev_hash() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.prev_hash)
  return _internal_prev_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInput::set_prev_hash(ArgT0&& arg0, ArgT... args) {
 
 prev_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.prev_hash)
}
inline std::string* TransactionInput::mutable_prev_hash() {
  std::string* _s = _internal_mutable_prev_hash();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionInput.prev_hash)
  return _s;
}
inline const std::string& TransactionInput::_internal_prev_hash() const {
  return prev_hash_.Get();
}
inline void TransactionInput::_internal_set_prev_hash(const std::string& value) {
  
  prev_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionInput::_internal_mutable_prev_hash() {
  
  return prev_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionInput::release_prev_hash() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionInput.prev_hash)
  return prev_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionInput::set_allocated_prev_hash(std::string* prev_hash) {
  if (prev_hash != nullptr) {
    
  } else {
    
  }
  prev_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prev_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionInput.prev_hash)
}

// fixed32 prev_index = 2;
inline void TransactionInput::clear_prev_index() {
  prev_index_ = 0u;
}
inline uint32_t TransactionInput::_internal_prev_index() const {
  return prev_index_;
}
inline uint32_t TransactionInput::prev_index() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.prev_index)
  return _internal_prev_index();
}
inline void TransactionInput::_internal_set_prev_index(uint32_t value) {
  
  prev_index_ = value;
}
inline void TransactionInput::set_prev_index(uint32_t value) {
  _internal_set_prev_index(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.prev_index)
}

// int64 value = 3;
inline void TransactionInput::clear_value() {
  value_ = int64_t{0};
}
inline int64_t TransactionInput::_internal_value() const {
  return value_;
}
inline int64_t TransactionInput::value() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.value)
  return _internal_value();
}
inline void TransactionInput::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void TransactionInput::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.value)
}

// string asset_id = 4;
inline void TransactionInput::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& TransactionInput::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionInput.asset_id)
  return _internal_asset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInput::set_asset_id(ArgT0&& arg0, ArgT... args) {
 
 asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionInput.asset_id)
}
inline std::string* TransactionInput::mutable_asset_id() {
  std::string* _s = _internal_mutable_asset_id();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionInput.asset_id)
  return _s;
}
inline const std::string& TransactionInput::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void TransactionInput::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionInput::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionInput::release_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionInput.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionInput::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionInput.asset_id)
}

// -------------------------------------------------------------------

// OutputAddress

// sint64 amount = 1;
inline void OutputAddress::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t OutputAddress::_internal_amount() const {
  return amount_;
}
inline int64_t OutputAddress::amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.OutputAddress.amount)
  return _internal_amount();
}
inline void OutputAddress::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void OutputAddress::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.OutputAddress.amount)
}

// string to_address = 2;
inline void OutputAddress::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& OutputAddress::to_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.OutputAddress.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputAddress::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.OutputAddress.to_address)
}
inline std::string* OutputAddress::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.OutputAddress.to_address)
  return _s;
}
inline const std::string& OutputAddress::_internal_to_address() const {
  return to_address_.Get();
}
inline void OutputAddress::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OutputAddress::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OutputAddress::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.OutputAddress.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OutputAddress::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.OutputAddress.to_address)
}

// -------------------------------------------------------------------

// TransactionOutput

// string asset_id = 1;
inline void TransactionOutput::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& TransactionOutput::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.asset_id)
  return _internal_asset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutput::set_asset_id(ArgT0&& arg0, ArgT... args) {
 
 asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.asset_id)
}
inline std::string* TransactionOutput::mutable_asset_id() {
  std::string* _s = _internal_mutable_asset_id();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutput.asset_id)
  return _s;
}
inline const std::string& TransactionOutput::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void TransactionOutput::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutput::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutput::release_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutput.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutput::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutput.asset_id)
}

// sint64 amount = 2;
inline void TransactionOutput::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t TransactionOutput::_internal_amount() const {
  return amount_;
}
inline int64_t TransactionOutput::amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.amount)
  return _internal_amount();
}
inline void TransactionOutput::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void TransactionOutput::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.amount)
}

// string to_address = 3;
inline void TransactionOutput::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransactionOutput::to_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutput::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.to_address)
}
inline std::string* TransactionOutput::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutput.to_address)
  return _s;
}
inline const std::string& TransactionOutput::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransactionOutput::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutput::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutput::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutput.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutput::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutput.to_address)
}

// string change_address = 4;
inline void TransactionOutput::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& TransactionOutput::change_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.change_address)
  return _internal_change_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutput::set_change_address(ArgT0&& arg0, ArgT... args) {
 
 change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutput.change_address)
}
inline std::string* TransactionOutput::mutable_change_address() {
  std::string* _s = _internal_mutable_change_address();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutput.change_address)
  return _s;
}
inline const std::string& TransactionOutput::_internal_change_address() const {
  return change_address_.Get();
}
inline void TransactionOutput::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutput::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutput::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutput.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutput::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutput.change_address)
}

// repeated .TW.NEO.Proto.OutputAddress extra_outputs = 5;
inline int TransactionOutput::_internal_extra_outputs_size() const {
  return extra_outputs_.size();
}
inline int TransactionOutput::extra_outputs_size() const {
  return _internal_extra_outputs_size();
}
inline void TransactionOutput::clear_extra_outputs() {
  extra_outputs_.Clear();
}
inline ::TW::NEO::Proto::OutputAddress* TransactionOutput::mutable_extra_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutput.extra_outputs)
  return extra_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >*
TransactionOutput::mutable_extra_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.TransactionOutput.extra_outputs)
  return &extra_outputs_;
}
inline const ::TW::NEO::Proto::OutputAddress& TransactionOutput::_internal_extra_outputs(int index) const {
  return extra_outputs_.Get(index);
}
inline const ::TW::NEO::Proto::OutputAddress& TransactionOutput::extra_outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutput.extra_outputs)
  return _internal_extra_outputs(index);
}
inline ::TW::NEO::Proto::OutputAddress* TransactionOutput::_internal_add_extra_outputs() {
  return extra_outputs_.Add();
}
inline ::TW::NEO::Proto::OutputAddress* TransactionOutput::add_extra_outputs() {
  ::TW::NEO::Proto::OutputAddress* _add = _internal_add_extra_outputs();
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.TransactionOutput.extra_outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >&
TransactionOutput::extra_outputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.TransactionOutput.extra_outputs)
  return extra_outputs_;
}

// -------------------------------------------------------------------

// Transaction_Nep5Transfer

// string asset_id = 1;
inline void Transaction_Nep5Transfer::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& Transaction_Nep5Transfer::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.Nep5Transfer.asset_id)
  return _internal_asset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Nep5Transfer::set_asset_id(ArgT0&& arg0, ArgT... args) {
 
 asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.Transaction.Nep5Transfer.asset_id)
}
inline std::string* Transaction_Nep5Transfer::mutable_asset_id() {
  std::string* _s = _internal_mutable_asset_id();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.Transaction.Nep5Transfer.asset_id)
  return _s;
}
inline const std::string& Transaction_Nep5Transfer::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void Transaction_Nep5Transfer::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::release_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.Transaction.Nep5Transfer.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Nep5Transfer::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.Transaction.Nep5Transfer.asset_id)
}

// string from = 2;
inline void Transaction_Nep5Transfer::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Transaction_Nep5Transfer::from() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.Nep5Transfer.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Nep5Transfer::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.Transaction.Nep5Transfer.from)
}
inline std::string* Transaction_Nep5Transfer::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.Transaction.Nep5Transfer.from)
  return _s;
}
inline const std::string& Transaction_Nep5Transfer::_internal_from() const {
  return from_.Get();
}
inline void Transaction_Nep5Transfer::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::release_from() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.Transaction.Nep5Transfer.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Nep5Transfer::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.Transaction.Nep5Transfer.from)
}

// string to = 3;
inline void Transaction_Nep5Transfer::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Transaction_Nep5Transfer::to() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.Nep5Transfer.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Nep5Transfer::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.Transaction.Nep5Transfer.to)
}
inline std::string* Transaction_Nep5Transfer::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.Transaction.Nep5Transfer.to)
  return _s;
}
inline const std::string& Transaction_Nep5Transfer::_internal_to() const {
  return to_.Get();
}
inline void Transaction_Nep5Transfer::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::release_to() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.Transaction.Nep5Transfer.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Nep5Transfer::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.Transaction.Nep5Transfer.to)
}

// bytes amount = 4;
inline void Transaction_Nep5Transfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Transaction_Nep5Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.Nep5Transfer.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Nep5Transfer::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.Transaction.Nep5Transfer.amount)
}
inline std::string* Transaction_Nep5Transfer::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.Transaction.Nep5Transfer.amount)
  return _s;
}
inline const std::string& Transaction_Nep5Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transaction_Nep5Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Nep5Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.Transaction.Nep5Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Nep5Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.Transaction.Nep5Transfer.amount)
}

// bool script_with_ret = 5;
inline void Transaction_Nep5Transfer::clear_script_with_ret() {
  script_with_ret_ = false;
}
inline bool Transaction_Nep5Transfer::_internal_script_with_ret() const {
  return script_with_ret_;
}
inline bool Transaction_Nep5Transfer::script_with_ret() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.Nep5Transfer.script_with_ret)
  return _internal_script_with_ret();
}
inline void Transaction_Nep5Transfer::_internal_set_script_with_ret(bool value) {
  
  script_with_ret_ = value;
}
inline void Transaction_Nep5Transfer::set_script_with_ret(bool value) {
  _internal_set_script_with_ret(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.Transaction.Nep5Transfer.script_with_ret)
}

// -------------------------------------------------------------------

// Transaction_InvocationGeneric

// uint64 gas = 1;
inline void Transaction_InvocationGeneric::clear_gas() {
  gas_ = uint64_t{0u};
}
inline uint64_t Transaction_InvocationGeneric::_internal_gas() const {
  return gas_;
}
inline uint64_t Transaction_InvocationGeneric::gas() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.InvocationGeneric.gas)
  return _internal_gas();
}
inline void Transaction_InvocationGeneric::_internal_set_gas(uint64_t value) {
  
  gas_ = value;
}
inline void Transaction_InvocationGeneric::set_gas(uint64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.Transaction.InvocationGeneric.gas)
}

// bytes script = 2;
inline void Transaction_InvocationGeneric::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& Transaction_InvocationGeneric::script() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.InvocationGeneric.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_InvocationGeneric::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.Transaction.InvocationGeneric.script)
}
inline std::string* Transaction_InvocationGeneric::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.Transaction.InvocationGeneric.script)
  return _s;
}
inline const std::string& Transaction_InvocationGeneric::_internal_script() const {
  return script_.Get();
}
inline void Transaction_InvocationGeneric::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_InvocationGeneric::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_InvocationGeneric::release_script() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.Transaction.InvocationGeneric.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_InvocationGeneric::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.Transaction.InvocationGeneric.script)
}

// -------------------------------------------------------------------

// Transaction

// .TW.NEO.Proto.Transaction.Nep5Transfer nep5_transfer = 1;
inline bool Transaction::_internal_has_nep5_transfer() const {
  return transaction_oneof_case() == kNep5Transfer;
}
inline bool Transaction::has_nep5_transfer() const {
  return _internal_has_nep5_transfer();
}
inline void Transaction::set_has_nep5_transfer() {
  _oneof_case_[0] = kNep5Transfer;
}
inline void Transaction::clear_nep5_transfer() {
  if (_internal_has_nep5_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.nep5_transfer_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::NEO::Proto::Transaction_Nep5Transfer* Transaction::release_nep5_transfer() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.Transaction.nep5_transfer)
  if (_internal_has_nep5_transfer()) {
    clear_has_transaction_oneof();
      ::TW::NEO::Proto::Transaction_Nep5Transfer* temp = transaction_oneof_.nep5_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.nep5_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEO::Proto::Transaction_Nep5Transfer& Transaction::_internal_nep5_transfer() const {
  return _internal_has_nep5_transfer()
      ? *transaction_oneof_.nep5_transfer_
      : reinterpret_cast< ::TW::NEO::Proto::Transaction_Nep5Transfer&>(::TW::NEO::Proto::_Transaction_Nep5Transfer_default_instance_);
}
inline const ::TW::NEO::Proto::Transaction_Nep5Transfer& Transaction::nep5_transfer() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.nep5_transfer)
  return _internal_nep5_transfer();
}
inline ::TW::NEO::Proto::Transaction_Nep5Transfer* Transaction::unsafe_arena_release_nep5_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEO.Proto.Transaction.nep5_transfer)
  if (_internal_has_nep5_transfer()) {
    clear_has_transaction_oneof();
    ::TW::NEO::Proto::Transaction_Nep5Transfer* temp = transaction_oneof_.nep5_transfer_;
    transaction_oneof_.nep5_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_nep5_transfer(::TW::NEO::Proto::Transaction_Nep5Transfer* nep5_transfer) {
  clear_transaction_oneof();
  if (nep5_transfer) {
    set_has_nep5_transfer();
    transaction_oneof_.nep5_transfer_ = nep5_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEO.Proto.Transaction.nep5_transfer)
}
inline ::TW::NEO::Proto::Transaction_Nep5Transfer* Transaction::_internal_mutable_nep5_transfer() {
  if (!_internal_has_nep5_transfer()) {
    clear_transaction_oneof();
    set_has_nep5_transfer();
    transaction_oneof_.nep5_transfer_ = CreateMaybeMessage< ::TW::NEO::Proto::Transaction_Nep5Transfer >(GetArenaForAllocation());
  }
  return transaction_oneof_.nep5_transfer_;
}
inline ::TW::NEO::Proto::Transaction_Nep5Transfer* Transaction::mutable_nep5_transfer() {
  ::TW::NEO::Proto::Transaction_Nep5Transfer* _msg = _internal_mutable_nep5_transfer();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.Transaction.nep5_transfer)
  return _msg;
}

// .TW.NEO.Proto.Transaction.InvocationGeneric invocation_generic = 2;
inline bool Transaction::_internal_has_invocation_generic() const {
  return transaction_oneof_case() == kInvocationGeneric;
}
inline bool Transaction::has_invocation_generic() const {
  return _internal_has_invocation_generic();
}
inline void Transaction::set_has_invocation_generic() {
  _oneof_case_[0] = kInvocationGeneric;
}
inline void Transaction::clear_invocation_generic() {
  if (_internal_has_invocation_generic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_oneof_.invocation_generic_;
    }
    clear_has_transaction_oneof();
  }
}
inline ::TW::NEO::Proto::Transaction_InvocationGeneric* Transaction::release_invocation_generic() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.Transaction.invocation_generic)
  if (_internal_has_invocation_generic()) {
    clear_has_transaction_oneof();
      ::TW::NEO::Proto::Transaction_InvocationGeneric* temp = transaction_oneof_.invocation_generic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_oneof_.invocation_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::NEO::Proto::Transaction_InvocationGeneric& Transaction::_internal_invocation_generic() const {
  return _internal_has_invocation_generic()
      ? *transaction_oneof_.invocation_generic_
      : reinterpret_cast< ::TW::NEO::Proto::Transaction_InvocationGeneric&>(::TW::NEO::Proto::_Transaction_InvocationGeneric_default_instance_);
}
inline const ::TW::NEO::Proto::Transaction_InvocationGeneric& Transaction::invocation_generic() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.Transaction.invocation_generic)
  return _internal_invocation_generic();
}
inline ::TW::NEO::Proto::Transaction_InvocationGeneric* Transaction::unsafe_arena_release_invocation_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.NEO.Proto.Transaction.invocation_generic)
  if (_internal_has_invocation_generic()) {
    clear_has_transaction_oneof();
    ::TW::NEO::Proto::Transaction_InvocationGeneric* temp = transaction_oneof_.invocation_generic_;
    transaction_oneof_.invocation_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction::unsafe_arena_set_allocated_invocation_generic(::TW::NEO::Proto::Transaction_InvocationGeneric* invocation_generic) {
  clear_transaction_oneof();
  if (invocation_generic) {
    set_has_invocation_generic();
    transaction_oneof_.invocation_generic_ = invocation_generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEO.Proto.Transaction.invocation_generic)
}
inline ::TW::NEO::Proto::Transaction_InvocationGeneric* Transaction::_internal_mutable_invocation_generic() {
  if (!_internal_has_invocation_generic()) {
    clear_transaction_oneof();
    set_has_invocation_generic();
    transaction_oneof_.invocation_generic_ = CreateMaybeMessage< ::TW::NEO::Proto::Transaction_InvocationGeneric >(GetArenaForAllocation());
  }
  return transaction_oneof_.invocation_generic_;
}
inline ::TW::NEO::Proto::Transaction_InvocationGeneric* Transaction::mutable_invocation_generic() {
  ::TW::NEO::Proto::Transaction_InvocationGeneric* _msg = _internal_mutable_invocation_generic();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.Transaction.invocation_generic)
  return _msg;
}

inline bool Transaction::has_transaction_oneof() const {
  return transaction_oneof_case() != TRANSACTION_ONEOF_NOT_SET;
}
inline void Transaction::clear_has_transaction_oneof() {
  _oneof_case_[0] = TRANSACTION_ONEOF_NOT_SET;
}
inline Transaction::TransactionOneofCase Transaction::transaction_oneof_case() const {
  return Transaction::TransactionOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// repeated .TW.NEO.Proto.TransactionInput inputs = 1;
inline int SigningInput::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SigningInput::inputs_size() const {
  return _internal_inputs_size();
}
inline void SigningInput::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionInput* SigningInput::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
SigningInput::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.SigningInput.inputs)
  return &inputs_;
}
inline const ::TW::NEO::Proto::TransactionInput& SigningInput::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionInput& SigningInput::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.inputs)
  return _internal_inputs(index);
}
inline ::TW::NEO::Proto::TransactionInput* SigningInput::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::NEO::Proto::TransactionInput* SigningInput::add_inputs() {
  ::TW::NEO::Proto::TransactionInput* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.SigningInput.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
SigningInput::inputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.SigningInput.inputs)
  return inputs_;
}

// repeated .TW.NEO.Proto.TransactionOutput outputs = 2;
inline int SigningInput::_internal_outputs_size() const {
  return outputs_.size();
}
inline int SigningInput::outputs_size() const {
  return _internal_outputs_size();
}
inline void SigningInput::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionOutput* SigningInput::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >*
SigningInput::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.SigningInput.outputs)
  return &outputs_;
}
inline const ::TW::NEO::Proto::TransactionOutput& SigningInput::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionOutput& SigningInput::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.outputs)
  return _internal_outputs(index);
}
inline ::TW::NEO::Proto::TransactionOutput* SigningInput::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::NEO::Proto::TransactionOutput* SigningInput::add_outputs() {
  ::TW::NEO::Proto::TransactionOutput* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.SigningInput.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutput >&
SigningInput::outputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.SigningInput.outputs)
  return outputs_;
}

// bytes private_key = 3;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.private_key)
}

// int64 fee = 4;
inline void SigningInput::clear_fee() {
  fee_ = int64_t{0};
}
inline int64_t SigningInput::_internal_fee() const {
  return fee_;
}
inline int64_t SigningInput::fee() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.fee)
  return _internal_fee();
}
inline void SigningInput::_internal_set_fee(int64_t value) {
  
  fee_ = value;
}
inline void SigningInput::set_fee(int64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.fee)
}

// string gas_asset_id = 5;
inline void SigningInput::clear_gas_asset_id() {
  gas_asset_id_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.gas_asset_id)
  return _internal_gas_asset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_gas_asset_id(ArgT0&& arg0, ArgT... args) {
 
 gas_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.gas_asset_id)
}
inline std::string* SigningInput::mutable_gas_asset_id() {
  std::string* _s = _internal_mutable_gas_asset_id();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.gas_asset_id)
  return _s;
}
inline const std::string& SigningInput::_internal_gas_asset_id() const {
  return gas_asset_id_.Get();
}
inline void SigningInput::_internal_set_gas_asset_id(const std::string& value) {
  
  gas_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_gas_asset_id() {
  
  return gas_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_gas_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.gas_asset_id)
  return gas_asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_gas_asset_id(std::string* gas_asset_id) {
  if (gas_asset_id != nullptr) {
    
  } else {
    
  }
  gas_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_asset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_asset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.gas_asset_id)
}

// string gas_change_address = 6;
inline void SigningInput::clear_gas_change_address() {
  gas_change_address_.ClearToEmpty();
}
inline const std::string& SigningInput::gas_change_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.gas_change_address)
  return _internal_gas_change_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_gas_change_address(ArgT0&& arg0, ArgT... args) {
 
 gas_change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningInput.gas_change_address)
}
inline std::string* SigningInput::mutable_gas_change_address() {
  std::string* _s = _internal_mutable_gas_change_address();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.gas_change_address)
  return _s;
}
inline const std::string& SigningInput::_internal_gas_change_address() const {
  return gas_change_address_.Get();
}
inline void SigningInput::_internal_set_gas_change_address(const std::string& value) {
  
  gas_change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_gas_change_address() {
  
  return gas_change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_gas_change_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.gas_change_address)
  return gas_change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_gas_change_address(std::string* gas_change_address) {
  if (gas_change_address != nullptr) {
    
  } else {
    
  }
  gas_change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_change_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_change_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.gas_change_address)
}

// .TW.NEO.Proto.TransactionPlan plan = 7;
inline bool SigningInput::_internal_has_plan() const {
  return this != internal_default_instance() && plan_ != nullptr;
}
inline bool SigningInput::has_plan() const {
  return _internal_has_plan();
}
inline void SigningInput::clear_plan() {
  if (GetArenaForAllocation() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
}
inline const ::TW::NEO::Proto::TransactionPlan& SigningInput::_internal_plan() const {
  const ::TW::NEO::Proto::TransactionPlan* p = plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NEO::Proto::TransactionPlan&>(
      ::TW::NEO::Proto::_TransactionPlan_default_instance_);
}
inline const ::TW::NEO::Proto::TransactionPlan& SigningInput::plan() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.plan)
  return _internal_plan();
}
inline void SigningInput::unsafe_arena_set_allocated_plan(
    ::TW::NEO::Proto::TransactionPlan* plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_);
  }
  plan_ = plan;
  if (plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEO.Proto.SigningInput.plan)
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::release_plan() {
  
  ::TW::NEO::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.plan)
  
  ::TW::NEO::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
  return temp;
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::_internal_mutable_plan() {
  
  if (plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NEO::Proto::TransactionPlan>(GetArenaForAllocation());
    plan_ = p;
  }
  return plan_;
}
inline ::TW::NEO::Proto::TransactionPlan* SigningInput::mutable_plan() {
  ::TW::NEO::Proto::TransactionPlan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.plan)
  return _msg;
}
inline void SigningInput::set_allocated_plan(::TW::NEO::Proto::TransactionPlan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete plan_;
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEO::Proto::TransactionPlan>::GetOwningArena(plan);
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.plan)
}

// .TW.NEO.Proto.Transaction transaction = 8;
inline bool SigningInput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningInput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningInput::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::NEO::Proto::Transaction& SigningInput::_internal_transaction() const {
  const ::TW::NEO::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::NEO::Proto::Transaction&>(
      ::TW::NEO::Proto::_Transaction_default_instance_);
}
inline const ::TW::NEO::Proto::Transaction& SigningInput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningInput.transaction)
  return _internal_transaction();
}
inline void SigningInput::unsafe_arena_set_allocated_transaction(
    ::TW::NEO::Proto::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.NEO.Proto.SigningInput.transaction)
}
inline ::TW::NEO::Proto::Transaction* SigningInput::release_transaction() {
  
  ::TW::NEO::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::NEO::Proto::Transaction* SigningInput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningInput.transaction)
  
  ::TW::NEO::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::NEO::Proto::Transaction* SigningInput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::NEO::Proto::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::NEO::Proto::Transaction* SigningInput::mutable_transaction() {
  ::TW::NEO::Proto::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningInput.transaction)
  return _msg;
}
inline void SigningInput::set_allocated_transaction(::TW::NEO::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEO::Proto::Transaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningInput.transaction)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningOutput.error)
}

// string error_message = 3;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.SigningOutput.error_message)
}

// -------------------------------------------------------------------

// TransactionOutputPlan

// int64 amount = 1;
inline void TransactionOutputPlan::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t TransactionOutputPlan::_internal_amount() const {
  return amount_;
}
inline int64_t TransactionOutputPlan::amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.amount)
  return _internal_amount();
}
inline void TransactionOutputPlan::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void TransactionOutputPlan::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.amount)
}

// int64 available_amount = 2;
inline void TransactionOutputPlan::clear_available_amount() {
  available_amount_ = int64_t{0};
}
inline int64_t TransactionOutputPlan::_internal_available_amount() const {
  return available_amount_;
}
inline int64_t TransactionOutputPlan::available_amount() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.available_amount)
  return _internal_available_amount();
}
inline void TransactionOutputPlan::_internal_set_available_amount(int64_t value) {
  
  available_amount_ = value;
}
inline void TransactionOutputPlan::set_available_amount(int64_t value) {
  _internal_set_available_amount(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.available_amount)
}

// int64 change = 3;
inline void TransactionOutputPlan::clear_change() {
  change_ = int64_t{0};
}
inline int64_t TransactionOutputPlan::_internal_change() const {
  return change_;
}
inline int64_t TransactionOutputPlan::change() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.change)
  return _internal_change();
}
inline void TransactionOutputPlan::_internal_set_change(int64_t value) {
  
  change_ = value;
}
inline void TransactionOutputPlan::set_change(int64_t value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.change)
}

// string asset_id = 4;
inline void TransactionOutputPlan::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& TransactionOutputPlan::asset_id() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.asset_id)
  return _internal_asset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutputPlan::set_asset_id(ArgT0&& arg0, ArgT... args) {
 
 asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.asset_id)
}
inline std::string* TransactionOutputPlan::mutable_asset_id() {
  std::string* _s = _internal_mutable_asset_id();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutputPlan.asset_id)
  return _s;
}
inline const std::string& TransactionOutputPlan::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void TransactionOutputPlan::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutputPlan::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutputPlan::release_asset_id() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutputPlan.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutputPlan::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutputPlan.asset_id)
}

// string to_address = 5;
inline void TransactionOutputPlan::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransactionOutputPlan::to_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutputPlan::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.to_address)
}
inline std::string* TransactionOutputPlan::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutputPlan.to_address)
  return _s;
}
inline const std::string& TransactionOutputPlan::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransactionOutputPlan::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutputPlan::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutputPlan::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutputPlan.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutputPlan::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutputPlan.to_address)
}

// string change_address = 6;
inline void TransactionOutputPlan::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& TransactionOutputPlan::change_address() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.change_address)
  return _internal_change_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutputPlan::set_change_address(ArgT0&& arg0, ArgT... args) {
 
 change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionOutputPlan.change_address)
}
inline std::string* TransactionOutputPlan::mutable_change_address() {
  std::string* _s = _internal_mutable_change_address();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutputPlan.change_address)
  return _s;
}
inline const std::string& TransactionOutputPlan::_internal_change_address() const {
  return change_address_.Get();
}
inline void TransactionOutputPlan::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutputPlan::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutputPlan::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionOutputPlan.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutputPlan::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionOutputPlan.change_address)
}

// repeated .TW.NEO.Proto.OutputAddress extra_outputs = 7;
inline int TransactionOutputPlan::_internal_extra_outputs_size() const {
  return extra_outputs_.size();
}
inline int TransactionOutputPlan::extra_outputs_size() const {
  return _internal_extra_outputs_size();
}
inline void TransactionOutputPlan::clear_extra_outputs() {
  extra_outputs_.Clear();
}
inline ::TW::NEO::Proto::OutputAddress* TransactionOutputPlan::mutable_extra_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionOutputPlan.extra_outputs)
  return extra_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >*
TransactionOutputPlan::mutable_extra_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.TransactionOutputPlan.extra_outputs)
  return &extra_outputs_;
}
inline const ::TW::NEO::Proto::OutputAddress& TransactionOutputPlan::_internal_extra_outputs(int index) const {
  return extra_outputs_.Get(index);
}
inline const ::TW::NEO::Proto::OutputAddress& TransactionOutputPlan::extra_outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionOutputPlan.extra_outputs)
  return _internal_extra_outputs(index);
}
inline ::TW::NEO::Proto::OutputAddress* TransactionOutputPlan::_internal_add_extra_outputs() {
  return extra_outputs_.Add();
}
inline ::TW::NEO::Proto::OutputAddress* TransactionOutputPlan::add_extra_outputs() {
  ::TW::NEO::Proto::OutputAddress* _add = _internal_add_extra_outputs();
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.TransactionOutputPlan.extra_outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::OutputAddress >&
TransactionOutputPlan::extra_outputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.TransactionOutputPlan.extra_outputs)
  return extra_outputs_;
}

// -------------------------------------------------------------------

// TransactionAttributePlan

// int32 usage = 1;
inline void TransactionAttributePlan::clear_usage() {
  usage_ = 0;
}
inline int32_t TransactionAttributePlan::_internal_usage() const {
  return usage_;
}
inline int32_t TransactionAttributePlan::usage() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionAttributePlan.usage)
  return _internal_usage();
}
inline void TransactionAttributePlan::_internal_set_usage(int32_t value) {
  
  usage_ = value;
}
inline void TransactionAttributePlan::set_usage(int32_t value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionAttributePlan.usage)
}

// bytes data = 2;
inline void TransactionAttributePlan::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& TransactionAttributePlan::data() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionAttributePlan.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionAttributePlan::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionAttributePlan.data)
}
inline std::string* TransactionAttributePlan::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionAttributePlan.data)
  return _s;
}
inline const std::string& TransactionAttributePlan::_internal_data() const {
  return data_.Get();
}
inline void TransactionAttributePlan::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionAttributePlan::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionAttributePlan::release_data() {
  // @@protoc_insertion_point(field_release:TW.NEO.Proto.TransactionAttributePlan.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionAttributePlan::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.NEO.Proto.TransactionAttributePlan.data)
}

// -------------------------------------------------------------------

// TransactionPlan

// repeated .TW.NEO.Proto.TransactionOutputPlan outputs = 1;
inline int TransactionPlan::_internal_outputs_size() const {
  return outputs_.size();
}
inline int TransactionPlan::outputs_size() const {
  return _internal_outputs_size();
}
inline void TransactionPlan::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionOutputPlan* TransactionPlan::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionPlan.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >*
TransactionPlan::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.TransactionPlan.outputs)
  return &outputs_;
}
inline const ::TW::NEO::Proto::TransactionOutputPlan& TransactionPlan::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionOutputPlan& TransactionPlan::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.outputs)
  return _internal_outputs(index);
}
inline ::TW::NEO::Proto::TransactionOutputPlan* TransactionPlan::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::NEO::Proto::TransactionOutputPlan* TransactionPlan::add_outputs() {
  ::TW::NEO::Proto::TransactionOutputPlan* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.TransactionPlan.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionOutputPlan >&
TransactionPlan::outputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.TransactionPlan.outputs)
  return outputs_;
}

// repeated .TW.NEO.Proto.TransactionInput inputs = 2;
inline int TransactionPlan::_internal_inputs_size() const {
  return inputs_.size();
}
inline int TransactionPlan::inputs_size() const {
  return _internal_inputs_size();
}
inline void TransactionPlan::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::NEO::Proto::TransactionInput* TransactionPlan::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionPlan.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >*
TransactionPlan::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.TransactionPlan.inputs)
  return &inputs_;
}
inline const ::TW::NEO::Proto::TransactionInput& TransactionPlan::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionInput& TransactionPlan::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.inputs)
  return _internal_inputs(index);
}
inline ::TW::NEO::Proto::TransactionInput* TransactionPlan::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::NEO::Proto::TransactionInput* TransactionPlan::add_inputs() {
  ::TW::NEO::Proto::TransactionInput* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.TransactionPlan.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionInput >&
TransactionPlan::inputs() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.TransactionPlan.inputs)
  return inputs_;
}

// int64 fee = 3;
inline void TransactionPlan::clear_fee() {
  fee_ = int64_t{0};
}
inline int64_t TransactionPlan::_internal_fee() const {
  return fee_;
}
inline int64_t TransactionPlan::fee() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.fee)
  return _internal_fee();
}
inline void TransactionPlan::_internal_set_fee(int64_t value) {
  
  fee_ = value;
}
inline void TransactionPlan::set_fee(int64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionPlan.fee)
}

// .TW.Common.Proto.SigningError error = 4;
inline void TransactionPlan::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError TransactionPlan::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError TransactionPlan::error() const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.error)
  return _internal_error();
}
inline void TransactionPlan::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void TransactionPlan::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.NEO.Proto.TransactionPlan.error)
}

// repeated .TW.NEO.Proto.TransactionAttributePlan attributes = 5;
inline int TransactionPlan::_internal_attributes_size() const {
  return attributes_.size();
}
inline int TransactionPlan::attributes_size() const {
  return _internal_attributes_size();
}
inline void TransactionPlan::clear_attributes() {
  attributes_.Clear();
}
inline ::TW::NEO::Proto::TransactionAttributePlan* TransactionPlan::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:TW.NEO.Proto.TransactionPlan.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionAttributePlan >*
TransactionPlan::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:TW.NEO.Proto.TransactionPlan.attributes)
  return &attributes_;
}
inline const ::TW::NEO::Proto::TransactionAttributePlan& TransactionPlan::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::TW::NEO::Proto::TransactionAttributePlan& TransactionPlan::attributes(int index) const {
  // @@protoc_insertion_point(field_get:TW.NEO.Proto.TransactionPlan.attributes)
  return _internal_attributes(index);
}
inline ::TW::NEO::Proto::TransactionAttributePlan* TransactionPlan::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::TW::NEO::Proto::TransactionAttributePlan* TransactionPlan::add_attributes() {
  ::TW::NEO::Proto::TransactionAttributePlan* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:TW.NEO.Proto.TransactionPlan.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::NEO::Proto::TransactionAttributePlan >&
TransactionPlan::attributes() const {
  // @@protoc_insertion_point(field_list:TW.NEO.Proto.TransactionPlan.attributes)
  return attributes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace NEO
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NEO_2eproto
