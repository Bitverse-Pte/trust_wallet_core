// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Greenfield.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Greenfield_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Greenfield_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Greenfield_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Greenfield_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Greenfield_2eproto;
namespace TW {
namespace Greenfield {
namespace Proto {
class Amount;
struct AmountDefaultTypeInternal;
extern AmountDefaultTypeInternal _Amount_default_instance_;
class Fee;
struct FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_BridgeTransferOut;
struct Message_BridgeTransferOutDefaultTypeInternal;
extern Message_BridgeTransferOutDefaultTypeInternal _Message_BridgeTransferOut_default_instance_;
class Message_Send;
struct Message_SendDefaultTypeInternal;
extern Message_SendDefaultTypeInternal _Message_Send_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Greenfield
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Greenfield::Proto::Amount* Arena::CreateMaybeMessage<::TW::Greenfield::Proto::Amount>(Arena*);
template<> ::TW::Greenfield::Proto::Fee* Arena::CreateMaybeMessage<::TW::Greenfield::Proto::Fee>(Arena*);
template<> ::TW::Greenfield::Proto::Message* Arena::CreateMaybeMessage<::TW::Greenfield::Proto::Message>(Arena*);
template<> ::TW::Greenfield::Proto::Message_BridgeTransferOut* Arena::CreateMaybeMessage<::TW::Greenfield::Proto::Message_BridgeTransferOut>(Arena*);
template<> ::TW::Greenfield::Proto::Message_Send* Arena::CreateMaybeMessage<::TW::Greenfield::Proto::Message_Send>(Arena*);
template<> ::TW::Greenfield::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Greenfield::Proto::SigningInput>(Arena*);
template<> ::TW::Greenfield::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Greenfield::Proto::SigningOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Greenfield {
namespace Proto {

enum BroadcastMode : int {
  SYNC = 0,
  ASYNC = 1,
  BroadcastMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BroadcastMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BroadcastMode_IsValid(int value);
constexpr BroadcastMode BroadcastMode_MIN = SYNC;
constexpr BroadcastMode BroadcastMode_MAX = ASYNC;
constexpr int BroadcastMode_ARRAYSIZE = BroadcastMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastMode_descriptor();
template<typename T>
inline const std::string& BroadcastMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastMode_descriptor(), enum_t_value);
}
inline bool BroadcastMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastMode>(
    BroadcastMode_descriptor(), name, value);
}
enum EncodingMode : int {
  Protobuf = 0,
  EncodingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EncodingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EncodingMode_IsValid(int value);
constexpr EncodingMode EncodingMode_MIN = Protobuf;
constexpr EncodingMode EncodingMode_MAX = Protobuf;
constexpr int EncodingMode_ARRAYSIZE = EncodingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncodingMode_descriptor();
template<typename T>
inline const std::string& EncodingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncodingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncodingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EncodingMode_descriptor(), enum_t_value);
}
inline bool EncodingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncodingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EncodingMode>(
    EncodingMode_descriptor(), name, value);
}
enum SigningMode : int {
  Eip712 = 0,
  SigningMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SigningMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SigningMode_IsValid(int value);
constexpr SigningMode SigningMode_MIN = Eip712;
constexpr SigningMode SigningMode_MAX = Eip712;
constexpr int SigningMode_ARRAYSIZE = SigningMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigningMode_descriptor();
template<typename T>
inline const std::string& SigningMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SigningMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SigningMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SigningMode_descriptor(), enum_t_value);
}
inline bool SigningMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SigningMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SigningMode>(
    SigningMode_descriptor(), name, value);
}
// ===================================================================

class Amount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Greenfield.Proto.Amount) */ {
 public:
  inline Amount() : Amount(nullptr) {}
  ~Amount() override;
  explicit constexpr Amount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Amount(const Amount& from);
  Amount(Amount&& from) noexcept
    : Amount() {
    *this = ::std::move(from);
  }

  inline Amount& operator=(const Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Amount& operator=(Amount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Amount& default_instance() {
    return *internal_default_instance();
  }
  static inline const Amount* internal_default_instance() {
    return reinterpret_cast<const Amount*>(
               &_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Amount& a, Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(Amount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Amount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Amount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Amount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Amount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Amount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Amount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Greenfield.Proto.Amount";
  }
  protected:
  explicit Amount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string denom = 1;
  void clear_denom();
  const std::string& denom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_denom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* denom);
  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(const std::string& value);
  std::string* _internal_mutable_denom();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TW.Greenfield.Proto.Amount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Greenfield_2eproto;
};
// -------------------------------------------------------------------

class Fee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Greenfield.Proto.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  ~Fee() override;
  explicit constexpr Fee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }
  inline void Swap(Fee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fee& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Greenfield.Proto.Fee";
  }
  protected:
  explicit Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountsFieldNumber = 1,
    kGasFieldNumber = 2,
  };
  // repeated .TW.Greenfield.Proto.Amount amounts = 1;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  ::TW::Greenfield::Proto::Amount* mutable_amounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >*
      mutable_amounts();
  private:
  const ::TW::Greenfield::Proto::Amount& _internal_amounts(int index) const;
  ::TW::Greenfield::Proto::Amount* _internal_add_amounts();
  public:
  const ::TW::Greenfield::Proto::Amount& amounts(int index) const;
  ::TW::Greenfield::Proto::Amount* add_amounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >&
      amounts() const;

  // uint64 gas = 2;
  void clear_gas();
  uint64_t gas() const;
  void set_gas(uint64_t value);
  private:
  uint64_t _internal_gas() const;
  void _internal_set_gas(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Greenfield.Proto.Fee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount > amounts_;
  uint64_t gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Greenfield_2eproto;
};
// -------------------------------------------------------------------

class Message_Send final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Greenfield.Proto.Message.Send) */ {
 public:
  inline Message_Send() : Message_Send(nullptr) {}
  ~Message_Send() override;
  explicit constexpr Message_Send(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Send(const Message_Send& from);
  Message_Send(Message_Send&& from) noexcept
    : Message_Send() {
    *this = ::std::move(from);
  }

  inline Message_Send& operator=(const Message_Send& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Send& operator=(Message_Send&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Send& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Send* internal_default_instance() {
    return reinterpret_cast<const Message_Send*>(
               &_Message_Send_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message_Send& a, Message_Send& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Send* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Send* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Send* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Send>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Send& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_Send& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Send* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Greenfield.Proto.Message.Send";
  }
  protected:
  explicit Message_Send(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountsFieldNumber = 3,
    kFromAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
    kTypePrefixFieldNumber = 4,
  };
  // repeated .TW.Greenfield.Proto.Amount amounts = 3;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  ::TW::Greenfield::Proto::Amount* mutable_amounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >*
      mutable_amounts();
  private:
  const ::TW::Greenfield::Proto::Amount& _internal_amounts(int index) const;
  ::TW::Greenfield::Proto::Amount* _internal_add_amounts();
  public:
  const ::TW::Greenfield::Proto::Amount& amounts(int index) const;
  ::TW::Greenfield::Proto::Amount* add_amounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >&
      amounts() const;

  // string from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_address();
  PROTOBUF_NODISCARD std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // string to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string type_prefix = 4;
  void clear_type_prefix();
  const std::string& type_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_prefix();
  PROTOBUF_NODISCARD std::string* release_type_prefix();
  void set_allocated_type_prefix(std::string* type_prefix);
  private:
  const std::string& _internal_type_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_prefix(const std::string& value);
  std::string* _internal_mutable_type_prefix();
  public:

  // @@protoc_insertion_point(class_scope:TW.Greenfield.Proto.Message.Send)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount > amounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Greenfield_2eproto;
};
// -------------------------------------------------------------------

class Message_BridgeTransferOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Greenfield.Proto.Message.BridgeTransferOut) */ {
 public:
  inline Message_BridgeTransferOut() : Message_BridgeTransferOut(nullptr) {}
  ~Message_BridgeTransferOut() override;
  explicit constexpr Message_BridgeTransferOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_BridgeTransferOut(const Message_BridgeTransferOut& from);
  Message_BridgeTransferOut(Message_BridgeTransferOut&& from) noexcept
    : Message_BridgeTransferOut() {
    *this = ::std::move(from);
  }

  inline Message_BridgeTransferOut& operator=(const Message_BridgeTransferOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_BridgeTransferOut& operator=(Message_BridgeTransferOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_BridgeTransferOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_BridgeTransferOut* internal_default_instance() {
    return reinterpret_cast<const Message_BridgeTransferOut*>(
               &_Message_BridgeTransferOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_BridgeTransferOut& a, Message_BridgeTransferOut& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_BridgeTransferOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_BridgeTransferOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_BridgeTransferOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_BridgeTransferOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_BridgeTransferOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_BridgeTransferOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_BridgeTransferOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Greenfield.Proto.Message.BridgeTransferOut";
  }
  protected:
  explicit Message_BridgeTransferOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
    kTypePrefixFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // string from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_address();
  PROTOBUF_NODISCARD std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // string to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string type_prefix = 4;
  void clear_type_prefix();
  const std::string& type_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_prefix();
  PROTOBUF_NODISCARD std::string* release_type_prefix();
  void set_allocated_type_prefix(std::string* type_prefix);
  private:
  const std::string& _internal_type_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_prefix(const std::string& value);
  std::string* _internal_mutable_type_prefix();
  public:

  // .TW.Greenfield.Proto.Amount amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::TW::Greenfield::Proto::Amount& amount() const;
  PROTOBUF_NODISCARD ::TW::Greenfield::Proto::Amount* release_amount();
  ::TW::Greenfield::Proto::Amount* mutable_amount();
  void set_allocated_amount(::TW::Greenfield::Proto::Amount* amount);
  private:
  const ::TW::Greenfield::Proto::Amount& _internal_amount() const;
  ::TW::Greenfield::Proto::Amount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::TW::Greenfield::Proto::Amount* amount);
  ::TW::Greenfield::Proto::Amount* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:TW.Greenfield.Proto.Message.BridgeTransferOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_prefix_;
  ::TW::Greenfield::Proto::Amount* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Greenfield_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Greenfield.Proto.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kSendCoinsMessage = 1,
    kBridgeTransferOut = 2,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Greenfield.Proto.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_Send Send;
  typedef Message_BridgeTransferOut BridgeTransferOut;

  // accessors -------------------------------------------------------

  enum : int {
    kSendCoinsMessageFieldNumber = 1,
    kBridgeTransferOutFieldNumber = 2,
  };
  // .TW.Greenfield.Proto.Message.Send send_coins_message = 1;
  bool has_send_coins_message() const;
  private:
  bool _internal_has_send_coins_message() const;
  public:
  void clear_send_coins_message();
  const ::TW::Greenfield::Proto::Message_Send& send_coins_message() const;
  PROTOBUF_NODISCARD ::TW::Greenfield::Proto::Message_Send* release_send_coins_message();
  ::TW::Greenfield::Proto::Message_Send* mutable_send_coins_message();
  void set_allocated_send_coins_message(::TW::Greenfield::Proto::Message_Send* send_coins_message);
  private:
  const ::TW::Greenfield::Proto::Message_Send& _internal_send_coins_message() const;
  ::TW::Greenfield::Proto::Message_Send* _internal_mutable_send_coins_message();
  public:
  void unsafe_arena_set_allocated_send_coins_message(
      ::TW::Greenfield::Proto::Message_Send* send_coins_message);
  ::TW::Greenfield::Proto::Message_Send* unsafe_arena_release_send_coins_message();

  // .TW.Greenfield.Proto.Message.BridgeTransferOut bridge_transfer_out = 2;
  bool has_bridge_transfer_out() const;
  private:
  bool _internal_has_bridge_transfer_out() const;
  public:
  void clear_bridge_transfer_out();
  const ::TW::Greenfield::Proto::Message_BridgeTransferOut& bridge_transfer_out() const;
  PROTOBUF_NODISCARD ::TW::Greenfield::Proto::Message_BridgeTransferOut* release_bridge_transfer_out();
  ::TW::Greenfield::Proto::Message_BridgeTransferOut* mutable_bridge_transfer_out();
  void set_allocated_bridge_transfer_out(::TW::Greenfield::Proto::Message_BridgeTransferOut* bridge_transfer_out);
  private:
  const ::TW::Greenfield::Proto::Message_BridgeTransferOut& _internal_bridge_transfer_out() const;
  ::TW::Greenfield::Proto::Message_BridgeTransferOut* _internal_mutable_bridge_transfer_out();
  public:
  void unsafe_arena_set_allocated_bridge_transfer_out(
      ::TW::Greenfield::Proto::Message_BridgeTransferOut* bridge_transfer_out);
  ::TW::Greenfield::Proto::Message_BridgeTransferOut* unsafe_arena_release_bridge_transfer_out();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.Greenfield.Proto.Message)
 private:
  class _Internal;
  void set_has_send_coins_message();
  void set_has_bridge_transfer_out();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Greenfield::Proto::Message_Send* send_coins_message_;
    ::TW::Greenfield::Proto::Message_BridgeTransferOut* bridge_transfer_out_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Greenfield_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Greenfield.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Greenfield.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 10,
    kEthChainIdFieldNumber = 4,
    kCosmosChainIdFieldNumber = 5,
    kMemoFieldNumber = 7,
    kPrivateKeyFieldNumber = 9,
    kPublicKeyFieldNumber = 12,
    kFeeFieldNumber = 6,
    kEncodingModeFieldNumber = 1,
    kSigningModeFieldNumber = 2,
    kAccountNumberFieldNumber = 3,
    kSequenceFieldNumber = 8,
    kModeFieldNumber = 11,
  };
  // repeated .TW.Greenfield.Proto.Message messages = 10;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::TW::Greenfield::Proto::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Message >*
      mutable_messages();
  private:
  const ::TW::Greenfield::Proto::Message& _internal_messages(int index) const;
  ::TW::Greenfield::Proto::Message* _internal_add_messages();
  public:
  const ::TW::Greenfield::Proto::Message& messages(int index) const;
  ::TW::Greenfield::Proto::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Message >&
      messages() const;

  // string eth_chain_id = 4;
  void clear_eth_chain_id();
  const std::string& eth_chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eth_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eth_chain_id();
  PROTOBUF_NODISCARD std::string* release_eth_chain_id();
  void set_allocated_eth_chain_id(std::string* eth_chain_id);
  private:
  const std::string& _internal_eth_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eth_chain_id(const std::string& value);
  std::string* _internal_mutable_eth_chain_id();
  public:

  // string cosmos_chain_id = 5;
  void clear_cosmos_chain_id();
  const std::string& cosmos_chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cosmos_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cosmos_chain_id();
  PROTOBUF_NODISCARD std::string* release_cosmos_chain_id();
  void set_allocated_cosmos_chain_id(std::string* cosmos_chain_id);
  private:
  const std::string& _internal_cosmos_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cosmos_chain_id(const std::string& value);
  std::string* _internal_mutable_cosmos_chain_id();
  public:

  // string memo = 7;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes private_key = 9;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // bytes public_key = 12;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // .TW.Greenfield.Proto.Fee fee = 6;
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::TW::Greenfield::Proto::Fee& fee() const;
  PROTOBUF_NODISCARD ::TW::Greenfield::Proto::Fee* release_fee();
  ::TW::Greenfield::Proto::Fee* mutable_fee();
  void set_allocated_fee(::TW::Greenfield::Proto::Fee* fee);
  private:
  const ::TW::Greenfield::Proto::Fee& _internal_fee() const;
  ::TW::Greenfield::Proto::Fee* _internal_mutable_fee();
  public:
  void unsafe_arena_set_allocated_fee(
      ::TW::Greenfield::Proto::Fee* fee);
  ::TW::Greenfield::Proto::Fee* unsafe_arena_release_fee();

  // .TW.Greenfield.Proto.EncodingMode encoding_mode = 1;
  void clear_encoding_mode();
  ::TW::Greenfield::Proto::EncodingMode encoding_mode() const;
  void set_encoding_mode(::TW::Greenfield::Proto::EncodingMode value);
  private:
  ::TW::Greenfield::Proto::EncodingMode _internal_encoding_mode() const;
  void _internal_set_encoding_mode(::TW::Greenfield::Proto::EncodingMode value);
  public:

  // .TW.Greenfield.Proto.SigningMode signing_mode = 2;
  void clear_signing_mode();
  ::TW::Greenfield::Proto::SigningMode signing_mode() const;
  void set_signing_mode(::TW::Greenfield::Proto::SigningMode value);
  private:
  ::TW::Greenfield::Proto::SigningMode _internal_signing_mode() const;
  void _internal_set_signing_mode(::TW::Greenfield::Proto::SigningMode value);
  public:

  // uint64 account_number = 3;
  void clear_account_number();
  uint64_t account_number() const;
  void set_account_number(uint64_t value);
  private:
  uint64_t _internal_account_number() const;
  void _internal_set_account_number(uint64_t value);
  public:

  // uint64 sequence = 8;
  void clear_sequence();
  uint64_t sequence() const;
  void set_sequence(uint64_t value);
  private:
  uint64_t _internal_sequence() const;
  void _internal_set_sequence(uint64_t value);
  public:

  // .TW.Greenfield.Proto.BroadcastMode mode = 11;
  void clear_mode();
  ::TW::Greenfield::Proto::BroadcastMode mode() const;
  void set_mode(::TW::Greenfield::Proto::BroadcastMode value);
  private:
  ::TW::Greenfield::Proto::BroadcastMode _internal_mode() const;
  void _internal_set_mode(::TW::Greenfield::Proto::BroadcastMode value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Greenfield.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Message > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cosmos_chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::TW::Greenfield::Proto::Fee* fee_;
  int encoding_mode_;
  int signing_mode_;
  uint64_t account_number_;
  uint64_t sequence_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Greenfield_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Greenfield.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Greenfield.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kSerializedFieldNumber = 2,
    kSignatureJsonFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kErrorFieldNumber = 5,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string serialized = 2;
  void clear_serialized();
  const std::string& serialized() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized();
  PROTOBUF_NODISCARD std::string* release_serialized();
  void set_allocated_serialized(std::string* serialized);
  private:
  const std::string& _internal_serialized() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized(const std::string& value);
  std::string* _internal_mutable_serialized();
  public:

  // string signature_json = 3;
  void clear_signature_json();
  const std::string& signature_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature_json();
  PROTOBUF_NODISCARD std::string* release_signature_json();
  void set_allocated_signature_json(std::string* signature_json);
  private:
  const std::string& _internal_signature_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_json(const std::string& value);
  std::string* _internal_mutable_signature_json();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 5;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Greenfield.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Greenfield_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Amount

// string denom = 1;
inline void Amount::clear_denom() {
  denom_.ClearToEmpty();
}
inline const std::string& Amount::denom() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Amount.denom)
  return _internal_denom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Amount::set_denom(ArgT0&& arg0, ArgT... args) {
 
 denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Amount.denom)
}
inline std::string* Amount::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Amount.denom)
  return _s;
}
inline const std::string& Amount::_internal_denom() const {
  return denom_.Get();
}
inline void Amount::_internal_set_denom(const std::string& value) {
  
  denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Amount::_internal_mutable_denom() {
  
  return denom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Amount::release_denom() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Amount.denom)
  return denom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Amount::set_allocated_denom(std::string* denom) {
  if (denom != nullptr) {
    
  } else {
    
  }
  denom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denom,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (denom_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    denom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Amount.denom)
}

// string amount = 2;
inline void Amount::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Amount::amount() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Amount.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Amount::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Amount.amount)
}
inline std::string* Amount::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Amount.amount)
  return _s;
}
inline const std::string& Amount::_internal_amount() const {
  return amount_.Get();
}
inline void Amount::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Amount::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Amount::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Amount.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Amount::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Amount.amount)
}

// -------------------------------------------------------------------

// Fee

// repeated .TW.Greenfield.Proto.Amount amounts = 1;
inline int Fee::_internal_amounts_size() const {
  return amounts_.size();
}
inline int Fee::amounts_size() const {
  return _internal_amounts_size();
}
inline void Fee::clear_amounts() {
  amounts_.Clear();
}
inline ::TW::Greenfield::Proto::Amount* Fee::mutable_amounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Fee.amounts)
  return amounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >*
Fee::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Greenfield.Proto.Fee.amounts)
  return &amounts_;
}
inline const ::TW::Greenfield::Proto::Amount& Fee::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline const ::TW::Greenfield::Proto::Amount& Fee::amounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Fee.amounts)
  return _internal_amounts(index);
}
inline ::TW::Greenfield::Proto::Amount* Fee::_internal_add_amounts() {
  return amounts_.Add();
}
inline ::TW::Greenfield::Proto::Amount* Fee::add_amounts() {
  ::TW::Greenfield::Proto::Amount* _add = _internal_add_amounts();
  // @@protoc_insertion_point(field_add:TW.Greenfield.Proto.Fee.amounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >&
Fee::amounts() const {
  // @@protoc_insertion_point(field_list:TW.Greenfield.Proto.Fee.amounts)
  return amounts_;
}

// uint64 gas = 2;
inline void Fee::clear_gas() {
  gas_ = uint64_t{0u};
}
inline uint64_t Fee::_internal_gas() const {
  return gas_;
}
inline uint64_t Fee::gas() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Fee.gas)
  return _internal_gas();
}
inline void Fee::_internal_set_gas(uint64_t value) {
  
  gas_ = value;
}
inline void Fee::set_gas(uint64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Fee.gas)
}

// -------------------------------------------------------------------

// Message_Send

// string from_address = 1;
inline void Message_Send::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& Message_Send::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.Send.from_address)
  return _internal_from_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Send::set_from_address(ArgT0&& arg0, ArgT... args) {
 
 from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Message.Send.from_address)
}
inline std::string* Message_Send::mutable_from_address() {
  std::string* _s = _internal_mutable_from_address();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.Send.from_address)
  return _s;
}
inline const std::string& Message_Send::_internal_from_address() const {
  return from_address_.Get();
}
inline void Message_Send::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message_Send::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message_Send::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.Send.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message_Send::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Message.Send.from_address)
}

// string to_address = 2;
inline void Message_Send::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Message_Send::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.Send.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Send::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Message.Send.to_address)
}
inline std::string* Message_Send::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.Send.to_address)
  return _s;
}
inline const std::string& Message_Send::_internal_to_address() const {
  return to_address_.Get();
}
inline void Message_Send::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message_Send::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message_Send::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.Send.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message_Send::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Message.Send.to_address)
}

// repeated .TW.Greenfield.Proto.Amount amounts = 3;
inline int Message_Send::_internal_amounts_size() const {
  return amounts_.size();
}
inline int Message_Send::amounts_size() const {
  return _internal_amounts_size();
}
inline void Message_Send::clear_amounts() {
  amounts_.Clear();
}
inline ::TW::Greenfield::Proto::Amount* Message_Send::mutable_amounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.Send.amounts)
  return amounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >*
Message_Send::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Greenfield.Proto.Message.Send.amounts)
  return &amounts_;
}
inline const ::TW::Greenfield::Proto::Amount& Message_Send::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline const ::TW::Greenfield::Proto::Amount& Message_Send::amounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.Send.amounts)
  return _internal_amounts(index);
}
inline ::TW::Greenfield::Proto::Amount* Message_Send::_internal_add_amounts() {
  return amounts_.Add();
}
inline ::TW::Greenfield::Proto::Amount* Message_Send::add_amounts() {
  ::TW::Greenfield::Proto::Amount* _add = _internal_add_amounts();
  // @@protoc_insertion_point(field_add:TW.Greenfield.Proto.Message.Send.amounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Amount >&
Message_Send::amounts() const {
  // @@protoc_insertion_point(field_list:TW.Greenfield.Proto.Message.Send.amounts)
  return amounts_;
}

// string type_prefix = 4;
inline void Message_Send::clear_type_prefix() {
  type_prefix_.ClearToEmpty();
}
inline const std::string& Message_Send::type_prefix() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.Send.type_prefix)
  return _internal_type_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Send::set_type_prefix(ArgT0&& arg0, ArgT... args) {
 
 type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Message.Send.type_prefix)
}
inline std::string* Message_Send::mutable_type_prefix() {
  std::string* _s = _internal_mutable_type_prefix();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.Send.type_prefix)
  return _s;
}
inline const std::string& Message_Send::_internal_type_prefix() const {
  return type_prefix_.Get();
}
inline void Message_Send::_internal_set_type_prefix(const std::string& value) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message_Send::_internal_mutable_type_prefix() {
  
  return type_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message_Send::release_type_prefix() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.Send.type_prefix)
  return type_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message_Send::set_allocated_type_prefix(std::string* type_prefix) {
  if (type_prefix != nullptr) {
    
  } else {
    
  }
  type_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Message.Send.type_prefix)
}

// -------------------------------------------------------------------

// Message_BridgeTransferOut

// string from_address = 1;
inline void Message_BridgeTransferOut::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& Message_BridgeTransferOut::from_address() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.BridgeTransferOut.from_address)
  return _internal_from_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BridgeTransferOut::set_from_address(ArgT0&& arg0, ArgT... args) {
 
 from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Message.BridgeTransferOut.from_address)
}
inline std::string* Message_BridgeTransferOut::mutable_from_address() {
  std::string* _s = _internal_mutable_from_address();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.BridgeTransferOut.from_address)
  return _s;
}
inline const std::string& Message_BridgeTransferOut::_internal_from_address() const {
  return from_address_.Get();
}
inline void Message_BridgeTransferOut::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message_BridgeTransferOut::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message_BridgeTransferOut::release_from_address() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.BridgeTransferOut.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message_BridgeTransferOut::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Message.BridgeTransferOut.from_address)
}

// string to_address = 2;
inline void Message_BridgeTransferOut::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& Message_BridgeTransferOut::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.BridgeTransferOut.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BridgeTransferOut::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Message.BridgeTransferOut.to_address)
}
inline std::string* Message_BridgeTransferOut::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.BridgeTransferOut.to_address)
  return _s;
}
inline const std::string& Message_BridgeTransferOut::_internal_to_address() const {
  return to_address_.Get();
}
inline void Message_BridgeTransferOut::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message_BridgeTransferOut::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message_BridgeTransferOut::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.BridgeTransferOut.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message_BridgeTransferOut::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Message.BridgeTransferOut.to_address)
}

// .TW.Greenfield.Proto.Amount amount = 3;
inline bool Message_BridgeTransferOut::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Message_BridgeTransferOut::has_amount() const {
  return _internal_has_amount();
}
inline void Message_BridgeTransferOut::clear_amount() {
  if (GetArenaForAllocation() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::TW::Greenfield::Proto::Amount& Message_BridgeTransferOut::_internal_amount() const {
  const ::TW::Greenfield::Proto::Amount* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Greenfield::Proto::Amount&>(
      ::TW::Greenfield::Proto::_Amount_default_instance_);
}
inline const ::TW::Greenfield::Proto::Amount& Message_BridgeTransferOut::amount() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.BridgeTransferOut.amount)
  return _internal_amount();
}
inline void Message_BridgeTransferOut::unsafe_arena_set_allocated_amount(
    ::TW::Greenfield::Proto::Amount* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Greenfield.Proto.Message.BridgeTransferOut.amount)
}
inline ::TW::Greenfield::Proto::Amount* Message_BridgeTransferOut::release_amount() {
  
  ::TW::Greenfield::Proto::Amount* temp = amount_;
  amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Greenfield::Proto::Amount* Message_BridgeTransferOut::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.BridgeTransferOut.amount)
  
  ::TW::Greenfield::Proto::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::TW::Greenfield::Proto::Amount* Message_BridgeTransferOut::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Greenfield::Proto::Amount>(GetArenaForAllocation());
    amount_ = p;
  }
  return amount_;
}
inline ::TW::Greenfield::Proto::Amount* Message_BridgeTransferOut::mutable_amount() {
  ::TW::Greenfield::Proto::Amount* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.BridgeTransferOut.amount)
  return _msg;
}
inline void Message_BridgeTransferOut::set_allocated_amount(::TW::Greenfield::Proto::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Greenfield::Proto::Amount>::GetOwningArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Message.BridgeTransferOut.amount)
}

// string type_prefix = 4;
inline void Message_BridgeTransferOut::clear_type_prefix() {
  type_prefix_.ClearToEmpty();
}
inline const std::string& Message_BridgeTransferOut::type_prefix() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.BridgeTransferOut.type_prefix)
  return _internal_type_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BridgeTransferOut::set_type_prefix(ArgT0&& arg0, ArgT... args) {
 
 type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.Message.BridgeTransferOut.type_prefix)
}
inline std::string* Message_BridgeTransferOut::mutable_type_prefix() {
  std::string* _s = _internal_mutable_type_prefix();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.BridgeTransferOut.type_prefix)
  return _s;
}
inline const std::string& Message_BridgeTransferOut::_internal_type_prefix() const {
  return type_prefix_.Get();
}
inline void Message_BridgeTransferOut::_internal_set_type_prefix(const std::string& value) {
  
  type_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message_BridgeTransferOut::_internal_mutable_type_prefix() {
  
  return type_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message_BridgeTransferOut::release_type_prefix() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.BridgeTransferOut.type_prefix)
  return type_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message_BridgeTransferOut::set_allocated_type_prefix(std::string* type_prefix) {
  if (type_prefix != nullptr) {
    
  } else {
    
  }
  type_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.Message.BridgeTransferOut.type_prefix)
}

// -------------------------------------------------------------------

// Message

// .TW.Greenfield.Proto.Message.Send send_coins_message = 1;
inline bool Message::_internal_has_send_coins_message() const {
  return message_oneof_case() == kSendCoinsMessage;
}
inline bool Message::has_send_coins_message() const {
  return _internal_has_send_coins_message();
}
inline void Message::set_has_send_coins_message() {
  _oneof_case_[0] = kSendCoinsMessage;
}
inline void Message::clear_send_coins_message() {
  if (_internal_has_send_coins_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.send_coins_message_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Greenfield::Proto::Message_Send* Message::release_send_coins_message() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.send_coins_message)
  if (_internal_has_send_coins_message()) {
    clear_has_message_oneof();
      ::TW::Greenfield::Proto::Message_Send* temp = message_oneof_.send_coins_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.send_coins_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Greenfield::Proto::Message_Send& Message::_internal_send_coins_message() const {
  return _internal_has_send_coins_message()
      ? *message_oneof_.send_coins_message_
      : reinterpret_cast< ::TW::Greenfield::Proto::Message_Send&>(::TW::Greenfield::Proto::_Message_Send_default_instance_);
}
inline const ::TW::Greenfield::Proto::Message_Send& Message::send_coins_message() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.send_coins_message)
  return _internal_send_coins_message();
}
inline ::TW::Greenfield::Proto::Message_Send* Message::unsafe_arena_release_send_coins_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Greenfield.Proto.Message.send_coins_message)
  if (_internal_has_send_coins_message()) {
    clear_has_message_oneof();
    ::TW::Greenfield::Proto::Message_Send* temp = message_oneof_.send_coins_message_;
    message_oneof_.send_coins_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_send_coins_message(::TW::Greenfield::Proto::Message_Send* send_coins_message) {
  clear_message_oneof();
  if (send_coins_message) {
    set_has_send_coins_message();
    message_oneof_.send_coins_message_ = send_coins_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Greenfield.Proto.Message.send_coins_message)
}
inline ::TW::Greenfield::Proto::Message_Send* Message::_internal_mutable_send_coins_message() {
  if (!_internal_has_send_coins_message()) {
    clear_message_oneof();
    set_has_send_coins_message();
    message_oneof_.send_coins_message_ = CreateMaybeMessage< ::TW::Greenfield::Proto::Message_Send >(GetArenaForAllocation());
  }
  return message_oneof_.send_coins_message_;
}
inline ::TW::Greenfield::Proto::Message_Send* Message::mutable_send_coins_message() {
  ::TW::Greenfield::Proto::Message_Send* _msg = _internal_mutable_send_coins_message();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.send_coins_message)
  return _msg;
}

// .TW.Greenfield.Proto.Message.BridgeTransferOut bridge_transfer_out = 2;
inline bool Message::_internal_has_bridge_transfer_out() const {
  return message_oneof_case() == kBridgeTransferOut;
}
inline bool Message::has_bridge_transfer_out() const {
  return _internal_has_bridge_transfer_out();
}
inline void Message::set_has_bridge_transfer_out() {
  _oneof_case_[0] = kBridgeTransferOut;
}
inline void Message::clear_bridge_transfer_out() {
  if (_internal_has_bridge_transfer_out()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.bridge_transfer_out_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::Greenfield::Proto::Message_BridgeTransferOut* Message::release_bridge_transfer_out() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.Message.bridge_transfer_out)
  if (_internal_has_bridge_transfer_out()) {
    clear_has_message_oneof();
      ::TW::Greenfield::Proto::Message_BridgeTransferOut* temp = message_oneof_.bridge_transfer_out_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.bridge_transfer_out_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Greenfield::Proto::Message_BridgeTransferOut& Message::_internal_bridge_transfer_out() const {
  return _internal_has_bridge_transfer_out()
      ? *message_oneof_.bridge_transfer_out_
      : reinterpret_cast< ::TW::Greenfield::Proto::Message_BridgeTransferOut&>(::TW::Greenfield::Proto::_Message_BridgeTransferOut_default_instance_);
}
inline const ::TW::Greenfield::Proto::Message_BridgeTransferOut& Message::bridge_transfer_out() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.Message.bridge_transfer_out)
  return _internal_bridge_transfer_out();
}
inline ::TW::Greenfield::Proto::Message_BridgeTransferOut* Message::unsafe_arena_release_bridge_transfer_out() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Greenfield.Proto.Message.bridge_transfer_out)
  if (_internal_has_bridge_transfer_out()) {
    clear_has_message_oneof();
    ::TW::Greenfield::Proto::Message_BridgeTransferOut* temp = message_oneof_.bridge_transfer_out_;
    message_oneof_.bridge_transfer_out_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_bridge_transfer_out(::TW::Greenfield::Proto::Message_BridgeTransferOut* bridge_transfer_out) {
  clear_message_oneof();
  if (bridge_transfer_out) {
    set_has_bridge_transfer_out();
    message_oneof_.bridge_transfer_out_ = bridge_transfer_out;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Greenfield.Proto.Message.bridge_transfer_out)
}
inline ::TW::Greenfield::Proto::Message_BridgeTransferOut* Message::_internal_mutable_bridge_transfer_out() {
  if (!_internal_has_bridge_transfer_out()) {
    clear_message_oneof();
    set_has_bridge_transfer_out();
    message_oneof_.bridge_transfer_out_ = CreateMaybeMessage< ::TW::Greenfield::Proto::Message_BridgeTransferOut >(GetArenaForAllocation());
  }
  return message_oneof_.bridge_transfer_out_;
}
inline ::TW::Greenfield::Proto::Message_BridgeTransferOut* Message::mutable_bridge_transfer_out() {
  ::TW::Greenfield::Proto::Message_BridgeTransferOut* _msg = _internal_mutable_bridge_transfer_out();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.Message.bridge_transfer_out)
  return _msg;
}

inline bool Message::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Message::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Message::MessageOneofCase Message::message_oneof_case() const {
  return Message::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// .TW.Greenfield.Proto.EncodingMode encoding_mode = 1;
inline void SigningInput::clear_encoding_mode() {
  encoding_mode_ = 0;
}
inline ::TW::Greenfield::Proto::EncodingMode SigningInput::_internal_encoding_mode() const {
  return static_cast< ::TW::Greenfield::Proto::EncodingMode >(encoding_mode_);
}
inline ::TW::Greenfield::Proto::EncodingMode SigningInput::encoding_mode() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.encoding_mode)
  return _internal_encoding_mode();
}
inline void SigningInput::_internal_set_encoding_mode(::TW::Greenfield::Proto::EncodingMode value) {
  
  encoding_mode_ = value;
}
inline void SigningInput::set_encoding_mode(::TW::Greenfield::Proto::EncodingMode value) {
  _internal_set_encoding_mode(value);
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.encoding_mode)
}

// .TW.Greenfield.Proto.SigningMode signing_mode = 2;
inline void SigningInput::clear_signing_mode() {
  signing_mode_ = 0;
}
inline ::TW::Greenfield::Proto::SigningMode SigningInput::_internal_signing_mode() const {
  return static_cast< ::TW::Greenfield::Proto::SigningMode >(signing_mode_);
}
inline ::TW::Greenfield::Proto::SigningMode SigningInput::signing_mode() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.signing_mode)
  return _internal_signing_mode();
}
inline void SigningInput::_internal_set_signing_mode(::TW::Greenfield::Proto::SigningMode value) {
  
  signing_mode_ = value;
}
inline void SigningInput::set_signing_mode(::TW::Greenfield::Proto::SigningMode value) {
  _internal_set_signing_mode(value);
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.signing_mode)
}

// uint64 account_number = 3;
inline void SigningInput::clear_account_number() {
  account_number_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_account_number() const {
  return account_number_;
}
inline uint64_t SigningInput::account_number() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.account_number)
  return _internal_account_number();
}
inline void SigningInput::_internal_set_account_number(uint64_t value) {
  
  account_number_ = value;
}
inline void SigningInput::set_account_number(uint64_t value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.account_number)
}

// string eth_chain_id = 4;
inline void SigningInput::clear_eth_chain_id() {
  eth_chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::eth_chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.eth_chain_id)
  return _internal_eth_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_eth_chain_id(ArgT0&& arg0, ArgT... args) {
 
 eth_chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.eth_chain_id)
}
inline std::string* SigningInput::mutable_eth_chain_id() {
  std::string* _s = _internal_mutable_eth_chain_id();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningInput.eth_chain_id)
  return _s;
}
inline const std::string& SigningInput::_internal_eth_chain_id() const {
  return eth_chain_id_.Get();
}
inline void SigningInput::_internal_set_eth_chain_id(const std::string& value) {
  
  eth_chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_eth_chain_id() {
  
  return eth_chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_eth_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningInput.eth_chain_id)
  return eth_chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_eth_chain_id(std::string* eth_chain_id) {
  if (eth_chain_id != nullptr) {
    
  } else {
    
  }
  eth_chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eth_chain_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (eth_chain_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    eth_chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningInput.eth_chain_id)
}

// string cosmos_chain_id = 5;
inline void SigningInput::clear_cosmos_chain_id() {
  cosmos_chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::cosmos_chain_id() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.cosmos_chain_id)
  return _internal_cosmos_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_cosmos_chain_id(ArgT0&& arg0, ArgT... args) {
 
 cosmos_chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.cosmos_chain_id)
}
inline std::string* SigningInput::mutable_cosmos_chain_id() {
  std::string* _s = _internal_mutable_cosmos_chain_id();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningInput.cosmos_chain_id)
  return _s;
}
inline const std::string& SigningInput::_internal_cosmos_chain_id() const {
  return cosmos_chain_id_.Get();
}
inline void SigningInput::_internal_set_cosmos_chain_id(const std::string& value) {
  
  cosmos_chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_cosmos_chain_id() {
  
  return cosmos_chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_cosmos_chain_id() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningInput.cosmos_chain_id)
  return cosmos_chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_cosmos_chain_id(std::string* cosmos_chain_id) {
  if (cosmos_chain_id != nullptr) {
    
  } else {
    
  }
  cosmos_chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cosmos_chain_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cosmos_chain_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cosmos_chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningInput.cosmos_chain_id)
}

// .TW.Greenfield.Proto.Fee fee = 6;
inline bool SigningInput::_internal_has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline bool SigningInput::has_fee() const {
  return _internal_has_fee();
}
inline void SigningInput::clear_fee() {
  if (GetArenaForAllocation() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
inline const ::TW::Greenfield::Proto::Fee& SigningInput::_internal_fee() const {
  const ::TW::Greenfield::Proto::Fee* p = fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Greenfield::Proto::Fee&>(
      ::TW::Greenfield::Proto::_Fee_default_instance_);
}
inline const ::TW::Greenfield::Proto::Fee& SigningInput::fee() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.fee)
  return _internal_fee();
}
inline void SigningInput::unsafe_arena_set_allocated_fee(
    ::TW::Greenfield::Proto::Fee* fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Greenfield.Proto.SigningInput.fee)
}
inline ::TW::Greenfield::Proto::Fee* SigningInput::release_fee() {
  
  ::TW::Greenfield::Proto::Fee* temp = fee_;
  fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Greenfield::Proto::Fee* SigningInput::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningInput.fee)
  
  ::TW::Greenfield::Proto::Fee* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::TW::Greenfield::Proto::Fee* SigningInput::_internal_mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Greenfield::Proto::Fee>(GetArenaForAllocation());
    fee_ = p;
  }
  return fee_;
}
inline ::TW::Greenfield::Proto::Fee* SigningInput::mutable_fee() {
  ::TW::Greenfield::Proto::Fee* _msg = _internal_mutable_fee();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningInput.fee)
  return _msg;
}
inline void SigningInput::set_allocated_fee(::TW::Greenfield::Proto::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fee_;
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Greenfield::Proto::Fee>::GetOwningArena(fee);
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningInput.fee)
}

// string memo = 7;
inline void SigningInput::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& SigningInput::memo() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.memo)
}
inline std::string* SigningInput::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningInput.memo)
  return _s;
}
inline const std::string& SigningInput::_internal_memo() const {
  return memo_.Get();
}
inline void SigningInput::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningInput.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningInput.memo)
}

// uint64 sequence = 8;
inline void SigningInput::clear_sequence() {
  sequence_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_sequence() const {
  return sequence_;
}
inline uint64_t SigningInput::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.sequence)
  return _internal_sequence();
}
inline void SigningInput::_internal_set_sequence(uint64_t value) {
  
  sequence_ = value;
}
inline void SigningInput::set_sequence(uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.sequence)
}

// bytes private_key = 9;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningInput.private_key)
}

// repeated .TW.Greenfield.Proto.Message messages = 10;
inline int SigningInput::_internal_messages_size() const {
  return messages_.size();
}
inline int SigningInput::messages_size() const {
  return _internal_messages_size();
}
inline void SigningInput::clear_messages() {
  messages_.Clear();
}
inline ::TW::Greenfield::Proto::Message* SigningInput::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningInput.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Message >*
SigningInput::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:TW.Greenfield.Proto.SigningInput.messages)
  return &messages_;
}
inline const ::TW::Greenfield::Proto::Message& SigningInput::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::TW::Greenfield::Proto::Message& SigningInput::messages(int index) const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.messages)
  return _internal_messages(index);
}
inline ::TW::Greenfield::Proto::Message* SigningInput::_internal_add_messages() {
  return messages_.Add();
}
inline ::TW::Greenfield::Proto::Message* SigningInput::add_messages() {
  ::TW::Greenfield::Proto::Message* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:TW.Greenfield.Proto.SigningInput.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Greenfield::Proto::Message >&
SigningInput::messages() const {
  // @@protoc_insertion_point(field_list:TW.Greenfield.Proto.SigningInput.messages)
  return messages_;
}

// .TW.Greenfield.Proto.BroadcastMode mode = 11;
inline void SigningInput::clear_mode() {
  mode_ = 0;
}
inline ::TW::Greenfield::Proto::BroadcastMode SigningInput::_internal_mode() const {
  return static_cast< ::TW::Greenfield::Proto::BroadcastMode >(mode_);
}
inline ::TW::Greenfield::Proto::BroadcastMode SigningInput::mode() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.mode)
  return _internal_mode();
}
inline void SigningInput::_internal_set_mode(::TW::Greenfield::Proto::BroadcastMode value) {
  
  mode_ = value;
}
inline void SigningInput::set_mode(::TW::Greenfield::Proto::BroadcastMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.mode)
}

// bytes public_key = 12;
inline void SigningInput::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& SigningInput::public_key() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningInput.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningInput.public_key)
}
inline std::string* SigningInput::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningInput.public_key)
  return _s;
}
inline const std::string& SigningInput::_internal_public_key() const {
  return public_key_.Get();
}
inline void SigningInput::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_public_key() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningInput.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningInput.public_key)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes signature = 1;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningOutput.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningOutput.signature)
  return _s;
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningOutput.signature)
}

// string serialized = 2;
inline void SigningOutput::clear_serialized() {
  serialized_.ClearToEmpty();
}
inline const std::string& SigningOutput::serialized() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningOutput.serialized)
  return _internal_serialized();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_serialized(ArgT0&& arg0, ArgT... args) {
 
 serialized_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningOutput.serialized)
}
inline std::string* SigningOutput::mutable_serialized() {
  std::string* _s = _internal_mutable_serialized();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningOutput.serialized)
  return _s;
}
inline const std::string& SigningOutput::_internal_serialized() const {
  return serialized_.Get();
}
inline void SigningOutput::_internal_set_serialized(const std::string& value) {
  
  serialized_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_serialized() {
  
  return serialized_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_serialized() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningOutput.serialized)
  return serialized_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_serialized(std::string* serialized) {
  if (serialized != nullptr) {
    
  } else {
    
  }
  serialized_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningOutput.serialized)
}

// string signature_json = 3;
inline void SigningOutput::clear_signature_json() {
  signature_json_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature_json() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningOutput.signature_json)
  return _internal_signature_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_signature_json(ArgT0&& arg0, ArgT... args) {
 
 signature_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningOutput.signature_json)
}
inline std::string* SigningOutput::mutable_signature_json() {
  std::string* _s = _internal_mutable_signature_json();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningOutput.signature_json)
  return _s;
}
inline const std::string& SigningOutput::_internal_signature_json() const {
  return signature_json_.Get();
}
inline void SigningOutput::_internal_set_signature_json(const std::string& value) {
  
  signature_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_signature_json() {
  
  return signature_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_signature_json() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningOutput.signature_json)
  return signature_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_signature_json(std::string* signature_json) {
  if (signature_json != nullptr) {
    
  } else {
    
  }
  signature_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningOutput.signature_json)
}

// string error_message = 4;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Greenfield.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Greenfield.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Greenfield.Proto.SigningOutput.error_message)
}

// .TW.Common.Proto.SigningError error = 5;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Greenfield.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Greenfield.Proto.SigningOutput.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Greenfield
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Greenfield::Proto::BroadcastMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Greenfield::Proto::BroadcastMode>() {
  return ::TW::Greenfield::Proto::BroadcastMode_descriptor();
}
template <> struct is_proto_enum< ::TW::Greenfield::Proto::EncodingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Greenfield::Proto::EncodingMode>() {
  return ::TW::Greenfield::Proto::EncodingMode_descriptor();
}
template <> struct is_proto_enum< ::TW::Greenfield::Proto::SigningMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Greenfield::Proto::SigningMode>() {
  return ::TW::Greenfield::Proto::SigningMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Greenfield_2eproto
