// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IOST.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IOST_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IOST_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IOST_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IOST_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IOST_2eproto;
namespace TW {
namespace IOST {
namespace Proto {
class AccountInfo;
struct AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class AmountLimit;
struct AmountLimitDefaultTypeInternal;
extern AmountLimitDefaultTypeInternal _AmountLimit_default_instance_;
class Signature;
struct SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace Proto
}  // namespace IOST
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::IOST::Proto::AccountInfo* Arena::CreateMaybeMessage<::TW::IOST::Proto::AccountInfo>(Arena*);
template<> ::TW::IOST::Proto::Action* Arena::CreateMaybeMessage<::TW::IOST::Proto::Action>(Arena*);
template<> ::TW::IOST::Proto::AmountLimit* Arena::CreateMaybeMessage<::TW::IOST::Proto::AmountLimit>(Arena*);
template<> ::TW::IOST::Proto::Signature* Arena::CreateMaybeMessage<::TW::IOST::Proto::Signature>(Arena*);
template<> ::TW::IOST::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::IOST::Proto::SigningInput>(Arena*);
template<> ::TW::IOST::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::IOST::Proto::SigningOutput>(Arena*);
template<> ::TW::IOST::Proto::Transaction* Arena::CreateMaybeMessage<::TW::IOST::Proto::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace IOST {
namespace Proto {

enum Algorithm : int {
  UNKNOWN = 0,
  SECP256K1 = 1,
  ED25519 = 2,
  Algorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Algorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Algorithm_IsValid(int value);
constexpr Algorithm Algorithm_MIN = UNKNOWN;
constexpr Algorithm Algorithm_MAX = ED25519;
constexpr int Algorithm_ARRAYSIZE = Algorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Algorithm_descriptor();
template<typename T>
inline const std::string& Algorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Algorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Algorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Algorithm_descriptor(), enum_t_value);
}
inline bool Algorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Algorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Algorithm>(
    Algorithm_descriptor(), name, value);
}
// ===================================================================

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IOST.Proto.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IOST.Proto.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractFieldNumber = 1,
    kActionNameFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string contract = 1;
  void clear_contract();
  const std::string& contract() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract();
  PROTOBUF_NODISCARD std::string* release_contract();
  void set_allocated_contract(std::string* contract);
  private:
  const std::string& _internal_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract(const std::string& value);
  std::string* _internal_mutable_contract();
  public:

  // string action_name = 2;
  void clear_action_name();
  const std::string& action_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_name();
  PROTOBUF_NODISCARD std::string* release_action_name();
  void set_allocated_action_name(std::string* action_name);
  private:
  const std::string& _internal_action_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_name(const std::string& value);
  std::string* _internal_mutable_action_name();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TW.IOST.Proto.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IOST_2eproto;
};
// -------------------------------------------------------------------

class AmountLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IOST.Proto.AmountLimit) */ {
 public:
  inline AmountLimit() : AmountLimit(nullptr) {}
  ~AmountLimit() override;
  explicit constexpr AmountLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AmountLimit(const AmountLimit& from);
  AmountLimit(AmountLimit&& from) noexcept
    : AmountLimit() {
    *this = ::std::move(from);
  }

  inline AmountLimit& operator=(const AmountLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmountLimit& operator=(AmountLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AmountLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const AmountLimit* internal_default_instance() {
    return reinterpret_cast<const AmountLimit*>(
               &_AmountLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AmountLimit& a, AmountLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(AmountLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmountLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AmountLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AmountLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AmountLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AmountLimit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmountLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IOST.Proto.AmountLimit";
  }
  protected:
  explicit AmountLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:TW.IOST.Proto.AmountLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IOST_2eproto;
};
// -------------------------------------------------------------------

class Signature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IOST.Proto.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  ~Signature() override;
  explicit constexpr Signature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Signature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IOST.Proto.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kAlgorithmFieldNumber = 1,
  };
  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes public_key = 3;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // .TW.IOST.Proto.Algorithm algorithm = 1;
  void clear_algorithm();
  ::TW::IOST::Proto::Algorithm algorithm() const;
  void set_algorithm(::TW::IOST::Proto::Algorithm value);
  private:
  ::TW::IOST::Proto::Algorithm _internal_algorithm() const;
  void _internal_set_algorithm(::TW::IOST::Proto::Algorithm value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IOST.Proto.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IOST_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IOST.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IOST.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 7,
    kAmountLimitFieldNumber = 8,
    kSignersFieldNumber = 9,
    kSignaturesFieldNumber = 10,
    kPublisherSigsFieldNumber = 12,
    kPublisherFieldNumber = 11,
    kTimeFieldNumber = 1,
    kExpirationFieldNumber = 2,
    kGasRatioFieldNumber = 3,
    kGasLimitFieldNumber = 4,
    kDelayFieldNumber = 5,
    kChainIdFieldNumber = 6,
  };
  // repeated .TW.IOST.Proto.Action actions = 7;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::TW::IOST::Proto::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Action >*
      mutable_actions();
  private:
  const ::TW::IOST::Proto::Action& _internal_actions(int index) const;
  ::TW::IOST::Proto::Action* _internal_add_actions();
  public:
  const ::TW::IOST::Proto::Action& actions(int index) const;
  ::TW::IOST::Proto::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Action >&
      actions() const;

  // repeated .TW.IOST.Proto.AmountLimit amount_limit = 8;
  int amount_limit_size() const;
  private:
  int _internal_amount_limit_size() const;
  public:
  void clear_amount_limit();
  ::TW::IOST::Proto::AmountLimit* mutable_amount_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::AmountLimit >*
      mutable_amount_limit();
  private:
  const ::TW::IOST::Proto::AmountLimit& _internal_amount_limit(int index) const;
  ::TW::IOST::Proto::AmountLimit* _internal_add_amount_limit();
  public:
  const ::TW::IOST::Proto::AmountLimit& amount_limit(int index) const;
  ::TW::IOST::Proto::AmountLimit* add_amount_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::AmountLimit >&
      amount_limit() const;

  // repeated string signers = 9;
  int signers_size() const;
  private:
  int _internal_signers_size() const;
  public:
  void clear_signers();
  const std::string& signers(int index) const;
  std::string* mutable_signers(int index);
  void set_signers(int index, const std::string& value);
  void set_signers(int index, std::string&& value);
  void set_signers(int index, const char* value);
  void set_signers(int index, const char* value, size_t size);
  std::string* add_signers();
  void add_signers(const std::string& value);
  void add_signers(std::string&& value);
  void add_signers(const char* value);
  void add_signers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signers();
  private:
  const std::string& _internal_signers(int index) const;
  std::string* _internal_add_signers();
  public:

  // repeated .TW.IOST.Proto.Signature signatures = 10;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::TW::IOST::Proto::Signature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >*
      mutable_signatures();
  private:
  const ::TW::IOST::Proto::Signature& _internal_signatures(int index) const;
  ::TW::IOST::Proto::Signature* _internal_add_signatures();
  public:
  const ::TW::IOST::Proto::Signature& signatures(int index) const;
  ::TW::IOST::Proto::Signature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >&
      signatures() const;

  // repeated .TW.IOST.Proto.Signature publisher_sigs = 12;
  int publisher_sigs_size() const;
  private:
  int _internal_publisher_sigs_size() const;
  public:
  void clear_publisher_sigs();
  ::TW::IOST::Proto::Signature* mutable_publisher_sigs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >*
      mutable_publisher_sigs();
  private:
  const ::TW::IOST::Proto::Signature& _internal_publisher_sigs(int index) const;
  ::TW::IOST::Proto::Signature* _internal_add_publisher_sigs();
  public:
  const ::TW::IOST::Proto::Signature& publisher_sigs(int index) const;
  ::TW::IOST::Proto::Signature* add_publisher_sigs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >&
      publisher_sigs() const;

  // string publisher = 11;
  void clear_publisher();
  const std::string& publisher() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publisher(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publisher();
  PROTOBUF_NODISCARD std::string* release_publisher();
  void set_allocated_publisher(std::string* publisher);
  private:
  const std::string& _internal_publisher() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publisher(const std::string& value);
  std::string* _internal_mutable_publisher();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 expiration = 2;
  void clear_expiration();
  int64_t expiration() const;
  void set_expiration(int64_t value);
  private:
  int64_t _internal_expiration() const;
  void _internal_set_expiration(int64_t value);
  public:

  // double gas_ratio = 3;
  void clear_gas_ratio();
  double gas_ratio() const;
  void set_gas_ratio(double value);
  private:
  double _internal_gas_ratio() const;
  void _internal_set_gas_ratio(double value);
  public:

  // double gas_limit = 4;
  void clear_gas_limit();
  double gas_limit() const;
  void set_gas_limit(double value);
  private:
  double _internal_gas_limit() const;
  void _internal_set_gas_limit(double value);
  public:

  // int64 delay = 5;
  void clear_delay();
  int64_t delay() const;
  void set_delay(int64_t value);
  private:
  int64_t _internal_delay() const;
  void _internal_set_delay(int64_t value);
  public:

  // uint32 chain_id = 6;
  void clear_chain_id();
  uint32_t chain_id() const;
  void set_chain_id(uint32_t value);
  private:
  uint32_t _internal_chain_id() const;
  void _internal_set_chain_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IOST.Proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::AmountLimit > amount_limit_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature > signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature > publisher_sigs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publisher_;
  int64_t time_;
  int64_t expiration_;
  double gas_ratio_;
  double gas_limit_;
  int64_t delay_;
  uint32_t chain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IOST_2eproto;
};
// -------------------------------------------------------------------

class AccountInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IOST.Proto.AccountInfo) */ {
 public:
  inline AccountInfo() : AccountInfo(nullptr) {}
  ~AccountInfo() override;
  explicit constexpr AccountInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountInfo(const AccountInfo& from);
  AccountInfo(AccountInfo&& from) noexcept
    : AccountInfo() {
    *this = ::std::move(from);
  }

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountInfo& operator=(AccountInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountInfo& a, AccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IOST.Proto.AccountInfo";
  }
  protected:
  explicit AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kActiveKeyFieldNumber = 2,
    kOwnerKeyFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes active_key = 2;
  void clear_active_key();
  const std::string& active_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active_key();
  PROTOBUF_NODISCARD std::string* release_active_key();
  void set_allocated_active_key(std::string* active_key);
  private:
  const std::string& _internal_active_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_key(const std::string& value);
  std::string* _internal_mutable_active_key();
  public:

  // bytes owner_key = 3;
  void clear_owner_key();
  const std::string& owner_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_key();
  PROTOBUF_NODISCARD std::string* release_owner_key();
  void set_allocated_owner_key(std::string* owner_key);
  private:
  const std::string& _internal_owner_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_key(const std::string& value);
  std::string* _internal_mutable_owner_key();
  public:

  // @@protoc_insertion_point(class_scope:TW.IOST.Proto.AccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IOST_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IOST.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IOST.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransferDestinationFieldNumber = 3,
    kTransferAmountFieldNumber = 4,
    kTransferMemoFieldNumber = 5,
    kAccountFieldNumber = 1,
    kTransactionTemplateFieldNumber = 2,
  };
  // string transfer_destination = 3;
  void clear_transfer_destination();
  const std::string& transfer_destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transfer_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transfer_destination();
  PROTOBUF_NODISCARD std::string* release_transfer_destination();
  void set_allocated_transfer_destination(std::string* transfer_destination);
  private:
  const std::string& _internal_transfer_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transfer_destination(const std::string& value);
  std::string* _internal_mutable_transfer_destination();
  public:

  // string transfer_amount = 4;
  void clear_transfer_amount();
  const std::string& transfer_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transfer_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transfer_amount();
  PROTOBUF_NODISCARD std::string* release_transfer_amount();
  void set_allocated_transfer_amount(std::string* transfer_amount);
  private:
  const std::string& _internal_transfer_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transfer_amount(const std::string& value);
  std::string* _internal_mutable_transfer_amount();
  public:

  // string transfer_memo = 5;
  void clear_transfer_memo();
  const std::string& transfer_memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transfer_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transfer_memo();
  PROTOBUF_NODISCARD std::string* release_transfer_memo();
  void set_allocated_transfer_memo(std::string* transfer_memo);
  private:
  const std::string& _internal_transfer_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transfer_memo(const std::string& value);
  std::string* _internal_mutable_transfer_memo();
  public:

  // .TW.IOST.Proto.AccountInfo account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::TW::IOST::Proto::AccountInfo& account() const;
  PROTOBUF_NODISCARD ::TW::IOST::Proto::AccountInfo* release_account();
  ::TW::IOST::Proto::AccountInfo* mutable_account();
  void set_allocated_account(::TW::IOST::Proto::AccountInfo* account);
  private:
  const ::TW::IOST::Proto::AccountInfo& _internal_account() const;
  ::TW::IOST::Proto::AccountInfo* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::TW::IOST::Proto::AccountInfo* account);
  ::TW::IOST::Proto::AccountInfo* unsafe_arena_release_account();

  // .TW.IOST.Proto.Transaction transaction_template = 2;
  bool has_transaction_template() const;
  private:
  bool _internal_has_transaction_template() const;
  public:
  void clear_transaction_template();
  const ::TW::IOST::Proto::Transaction& transaction_template() const;
  PROTOBUF_NODISCARD ::TW::IOST::Proto::Transaction* release_transaction_template();
  ::TW::IOST::Proto::Transaction* mutable_transaction_template();
  void set_allocated_transaction_template(::TW::IOST::Proto::Transaction* transaction_template);
  private:
  const ::TW::IOST::Proto::Transaction& _internal_transaction_template() const;
  ::TW::IOST::Proto::Transaction* _internal_mutable_transaction_template();
  public:
  void unsafe_arena_set_allocated_transaction_template(
      ::TW::IOST::Proto::Transaction* transaction_template);
  ::TW::IOST::Proto::Transaction* unsafe_arena_release_transaction_template();

  // @@protoc_insertion_point(class_scope:TW.IOST.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transfer_destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transfer_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transfer_memo_;
  ::TW::IOST::Proto::AccountInfo* account_;
  ::TW::IOST::Proto::Transaction* transaction_template_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IOST_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.IOST.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.IOST.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 2,
    kErrorMessageFieldNumber = 4,
    kTransactionFieldNumber = 1,
    kErrorFieldNumber = 3,
  };
  // bytes encoded = 2;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.IOST.Proto.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::IOST::Proto::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::TW::IOST::Proto::Transaction* release_transaction();
  ::TW::IOST::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::IOST::Proto::Transaction* transaction);
  private:
  const ::TW::IOST::Proto::Transaction& _internal_transaction() const;
  ::TW::IOST::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::IOST::Proto::Transaction* transaction);
  ::TW::IOST::Proto::Transaction* unsafe_arena_release_transaction();

  // .TW.Common.Proto.SigningError error = 3;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.IOST.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::TW::IOST::Proto::Transaction* transaction_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IOST_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Action

// string contract = 1;
inline void Action::clear_contract() {
  contract_.ClearToEmpty();
}
inline const std::string& Action::contract() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Action.contract)
  return _internal_contract();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Action::set_contract(ArgT0&& arg0, ArgT... args) {
 
 contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Action.contract)
}
inline std::string* Action::mutable_contract() {
  std::string* _s = _internal_mutable_contract();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Action.contract)
  return _s;
}
inline const std::string& Action::_internal_contract() const {
  return contract_.Get();
}
inline void Action::_internal_set_contract(const std::string& value) {
  
  contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Action::_internal_mutable_contract() {
  
  return contract_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Action::release_contract() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.Action.contract)
  return contract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Action::set_allocated_contract(std::string* contract) {
  if (contract != nullptr) {
    
  } else {
    
  }
  contract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    contract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.Action.contract)
}

// string action_name = 2;
inline void Action::clear_action_name() {
  action_name_.ClearToEmpty();
}
inline const std::string& Action::action_name() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Action.action_name)
  return _internal_action_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Action::set_action_name(ArgT0&& arg0, ArgT... args) {
 
 action_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Action.action_name)
}
inline std::string* Action::mutable_action_name() {
  std::string* _s = _internal_mutable_action_name();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Action.action_name)
  return _s;
}
inline const std::string& Action::_internal_action_name() const {
  return action_name_.Get();
}
inline void Action::_internal_set_action_name(const std::string& value) {
  
  action_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Action::_internal_mutable_action_name() {
  
  return action_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Action::release_action_name() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.Action.action_name)
  return action_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Action::set_allocated_action_name(std::string* action_name) {
  if (action_name != nullptr) {
    
  } else {
    
  }
  action_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.Action.action_name)
}

// string data = 3;
inline void Action::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Action::data() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Action.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Action::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Action.data)
}
inline std::string* Action::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Action.data)
  return _s;
}
inline const std::string& Action::_internal_data() const {
  return data_.Get();
}
inline void Action::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Action::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Action::release_data() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.Action.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Action::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.Action.data)
}

// -------------------------------------------------------------------

// AmountLimit

// string token = 1;
inline void AmountLimit::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AmountLimit::token() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.AmountLimit.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AmountLimit::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.AmountLimit.token)
}
inline std::string* AmountLimit::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.AmountLimit.token)
  return _s;
}
inline const std::string& AmountLimit::_internal_token() const {
  return token_.Get();
}
inline void AmountLimit::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AmountLimit::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AmountLimit::release_token() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.AmountLimit.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AmountLimit::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.AmountLimit.token)
}

// string value = 2;
inline void AmountLimit::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AmountLimit::value() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.AmountLimit.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AmountLimit::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.AmountLimit.value)
}
inline std::string* AmountLimit::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.AmountLimit.value)
  return _s;
}
inline const std::string& AmountLimit::_internal_value() const {
  return value_.Get();
}
inline void AmountLimit::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AmountLimit::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AmountLimit::release_value() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.AmountLimit.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AmountLimit::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.AmountLimit.value)
}

// -------------------------------------------------------------------

// Signature

// .TW.IOST.Proto.Algorithm algorithm = 1;
inline void Signature::clear_algorithm() {
  algorithm_ = 0;
}
inline ::TW::IOST::Proto::Algorithm Signature::_internal_algorithm() const {
  return static_cast< ::TW::IOST::Proto::Algorithm >(algorithm_);
}
inline ::TW::IOST::Proto::Algorithm Signature::algorithm() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Signature.algorithm)
  return _internal_algorithm();
}
inline void Signature::_internal_set_algorithm(::TW::IOST::Proto::Algorithm value) {
  
  algorithm_ = value;
}
inline void Signature::set_algorithm(::TW::IOST::Proto::Algorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Signature.algorithm)
}

// bytes signature = 2;
inline void Signature::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Signature.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Signature.signature)
}
inline std::string* Signature::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Signature.signature)
  return _s;
}
inline const std::string& Signature::_internal_signature() const {
  return signature_.Get();
}
inline void Signature::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.Signature.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.Signature.signature)
}

// bytes public_key = 3;
inline void Signature::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& Signature::public_key() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Signature.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Signature.public_key)
}
inline std::string* Signature::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Signature.public_key)
  return _s;
}
inline const std::string& Signature::_internal_public_key() const {
  return public_key_.Get();
}
inline void Signature::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Signature::release_public_key() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.Signature.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Signature::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.Signature.public_key)
}

// -------------------------------------------------------------------

// Transaction

// int64 time = 1;
inline void Transaction::clear_time() {
  time_ = int64_t{0};
}
inline int64_t Transaction::_internal_time() const {
  return time_;
}
inline int64_t Transaction::time() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.time)
  return _internal_time();
}
inline void Transaction::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void Transaction::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.time)
}

// int64 expiration = 2;
inline void Transaction::clear_expiration() {
  expiration_ = int64_t{0};
}
inline int64_t Transaction::_internal_expiration() const {
  return expiration_;
}
inline int64_t Transaction::expiration() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.expiration)
  return _internal_expiration();
}
inline void Transaction::_internal_set_expiration(int64_t value) {
  
  expiration_ = value;
}
inline void Transaction::set_expiration(int64_t value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.expiration)
}

// double gas_ratio = 3;
inline void Transaction::clear_gas_ratio() {
  gas_ratio_ = 0;
}
inline double Transaction::_internal_gas_ratio() const {
  return gas_ratio_;
}
inline double Transaction::gas_ratio() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.gas_ratio)
  return _internal_gas_ratio();
}
inline void Transaction::_internal_set_gas_ratio(double value) {
  
  gas_ratio_ = value;
}
inline void Transaction::set_gas_ratio(double value) {
  _internal_set_gas_ratio(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.gas_ratio)
}

// double gas_limit = 4;
inline void Transaction::clear_gas_limit() {
  gas_limit_ = 0;
}
inline double Transaction::_internal_gas_limit() const {
  return gas_limit_;
}
inline double Transaction::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.gas_limit)
  return _internal_gas_limit();
}
inline void Transaction::_internal_set_gas_limit(double value) {
  
  gas_limit_ = value;
}
inline void Transaction::set_gas_limit(double value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.gas_limit)
}

// int64 delay = 5;
inline void Transaction::clear_delay() {
  delay_ = int64_t{0};
}
inline int64_t Transaction::_internal_delay() const {
  return delay_;
}
inline int64_t Transaction::delay() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.delay)
  return _internal_delay();
}
inline void Transaction::_internal_set_delay(int64_t value) {
  
  delay_ = value;
}
inline void Transaction::set_delay(int64_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.delay)
}

// uint32 chain_id = 6;
inline void Transaction::clear_chain_id() {
  chain_id_ = 0u;
}
inline uint32_t Transaction::_internal_chain_id() const {
  return chain_id_;
}
inline uint32_t Transaction::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.chain_id)
  return _internal_chain_id();
}
inline void Transaction::_internal_set_chain_id(uint32_t value) {
  
  chain_id_ = value;
}
inline void Transaction::set_chain_id(uint32_t value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.chain_id)
}

// repeated .TW.IOST.Proto.Action actions = 7;
inline int Transaction::_internal_actions_size() const {
  return actions_.size();
}
inline int Transaction::actions_size() const {
  return _internal_actions_size();
}
inline void Transaction::clear_actions() {
  actions_.Clear();
}
inline ::TW::IOST::Proto::Action* Transaction::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Transaction.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Action >*
Transaction::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:TW.IOST.Proto.Transaction.actions)
  return &actions_;
}
inline const ::TW::IOST::Proto::Action& Transaction::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::TW::IOST::Proto::Action& Transaction::actions(int index) const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.actions)
  return _internal_actions(index);
}
inline ::TW::IOST::Proto::Action* Transaction::_internal_add_actions() {
  return actions_.Add();
}
inline ::TW::IOST::Proto::Action* Transaction::add_actions() {
  ::TW::IOST::Proto::Action* _add = _internal_add_actions();
  // @@protoc_insertion_point(field_add:TW.IOST.Proto.Transaction.actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Action >&
Transaction::actions() const {
  // @@protoc_insertion_point(field_list:TW.IOST.Proto.Transaction.actions)
  return actions_;
}

// repeated .TW.IOST.Proto.AmountLimit amount_limit = 8;
inline int Transaction::_internal_amount_limit_size() const {
  return amount_limit_.size();
}
inline int Transaction::amount_limit_size() const {
  return _internal_amount_limit_size();
}
inline void Transaction::clear_amount_limit() {
  amount_limit_.Clear();
}
inline ::TW::IOST::Proto::AmountLimit* Transaction::mutable_amount_limit(int index) {
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Transaction.amount_limit)
  return amount_limit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::AmountLimit >*
Transaction::mutable_amount_limit() {
  // @@protoc_insertion_point(field_mutable_list:TW.IOST.Proto.Transaction.amount_limit)
  return &amount_limit_;
}
inline const ::TW::IOST::Proto::AmountLimit& Transaction::_internal_amount_limit(int index) const {
  return amount_limit_.Get(index);
}
inline const ::TW::IOST::Proto::AmountLimit& Transaction::amount_limit(int index) const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.amount_limit)
  return _internal_amount_limit(index);
}
inline ::TW::IOST::Proto::AmountLimit* Transaction::_internal_add_amount_limit() {
  return amount_limit_.Add();
}
inline ::TW::IOST::Proto::AmountLimit* Transaction::add_amount_limit() {
  ::TW::IOST::Proto::AmountLimit* _add = _internal_add_amount_limit();
  // @@protoc_insertion_point(field_add:TW.IOST.Proto.Transaction.amount_limit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::AmountLimit >&
Transaction::amount_limit() const {
  // @@protoc_insertion_point(field_list:TW.IOST.Proto.Transaction.amount_limit)
  return amount_limit_;
}

// repeated string signers = 9;
inline int Transaction::_internal_signers_size() const {
  return signers_.size();
}
inline int Transaction::signers_size() const {
  return _internal_signers_size();
}
inline void Transaction::clear_signers() {
  signers_.Clear();
}
inline std::string* Transaction::add_signers() {
  std::string* _s = _internal_add_signers();
  // @@protoc_insertion_point(field_add_mutable:TW.IOST.Proto.Transaction.signers)
  return _s;
}
inline const std::string& Transaction::_internal_signers(int index) const {
  return signers_.Get(index);
}
inline const std::string& Transaction::signers(int index) const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.signers)
  return _internal_signers(index);
}
inline std::string* Transaction::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Transaction.signers)
  return signers_.Mutable(index);
}
inline void Transaction::set_signers(int index, const std::string& value) {
  signers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.signers)
}
inline void Transaction::set_signers(int index, std::string&& value) {
  signers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.signers)
}
inline void Transaction::set_signers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.IOST.Proto.Transaction.signers)
}
inline void Transaction::set_signers(int index, const char* value, size_t size) {
  signers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.IOST.Proto.Transaction.signers)
}
inline std::string* Transaction::_internal_add_signers() {
  return signers_.Add();
}
inline void Transaction::add_signers(const std::string& value) {
  signers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.IOST.Proto.Transaction.signers)
}
inline void Transaction::add_signers(std::string&& value) {
  signers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.IOST.Proto.Transaction.signers)
}
inline void Transaction::add_signers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.IOST.Proto.Transaction.signers)
}
inline void Transaction::add_signers(const char* value, size_t size) {
  signers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.IOST.Proto.Transaction.signers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::signers() const {
  // @@protoc_insertion_point(field_list:TW.IOST.Proto.Transaction.signers)
  return signers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:TW.IOST.Proto.Transaction.signers)
  return &signers_;
}

// repeated .TW.IOST.Proto.Signature signatures = 10;
inline int Transaction::_internal_signatures_size() const {
  return signatures_.size();
}
inline int Transaction::signatures_size() const {
  return _internal_signatures_size();
}
inline void Transaction::clear_signatures() {
  signatures_.Clear();
}
inline ::TW::IOST::Proto::Signature* Transaction::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Transaction.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >*
Transaction::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:TW.IOST.Proto.Transaction.signatures)
  return &signatures_;
}
inline const ::TW::IOST::Proto::Signature& Transaction::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::TW::IOST::Proto::Signature& Transaction::signatures(int index) const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.signatures)
  return _internal_signatures(index);
}
inline ::TW::IOST::Proto::Signature* Transaction::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::TW::IOST::Proto::Signature* Transaction::add_signatures() {
  ::TW::IOST::Proto::Signature* _add = _internal_add_signatures();
  // @@protoc_insertion_point(field_add:TW.IOST.Proto.Transaction.signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >&
Transaction::signatures() const {
  // @@protoc_insertion_point(field_list:TW.IOST.Proto.Transaction.signatures)
  return signatures_;
}

// string publisher = 11;
inline void Transaction::clear_publisher() {
  publisher_.ClearToEmpty();
}
inline const std::string& Transaction::publisher() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.publisher)
  return _internal_publisher();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_publisher(ArgT0&& arg0, ArgT... args) {
 
 publisher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.Transaction.publisher)
}
inline std::string* Transaction::mutable_publisher() {
  std::string* _s = _internal_mutable_publisher();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Transaction.publisher)
  return _s;
}
inline const std::string& Transaction::_internal_publisher() const {
  return publisher_.Get();
}
inline void Transaction::_internal_set_publisher(const std::string& value) {
  
  publisher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_publisher() {
  
  return publisher_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_publisher() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.Transaction.publisher)
  return publisher_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_publisher(std::string* publisher) {
  if (publisher != nullptr) {
    
  } else {
    
  }
  publisher_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publisher,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publisher_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    publisher_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.Transaction.publisher)
}

// repeated .TW.IOST.Proto.Signature publisher_sigs = 12;
inline int Transaction::_internal_publisher_sigs_size() const {
  return publisher_sigs_.size();
}
inline int Transaction::publisher_sigs_size() const {
  return _internal_publisher_sigs_size();
}
inline void Transaction::clear_publisher_sigs() {
  publisher_sigs_.Clear();
}
inline ::TW::IOST::Proto::Signature* Transaction::mutable_publisher_sigs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.Transaction.publisher_sigs)
  return publisher_sigs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >*
Transaction::mutable_publisher_sigs() {
  // @@protoc_insertion_point(field_mutable_list:TW.IOST.Proto.Transaction.publisher_sigs)
  return &publisher_sigs_;
}
inline const ::TW::IOST::Proto::Signature& Transaction::_internal_publisher_sigs(int index) const {
  return publisher_sigs_.Get(index);
}
inline const ::TW::IOST::Proto::Signature& Transaction::publisher_sigs(int index) const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.Transaction.publisher_sigs)
  return _internal_publisher_sigs(index);
}
inline ::TW::IOST::Proto::Signature* Transaction::_internal_add_publisher_sigs() {
  return publisher_sigs_.Add();
}
inline ::TW::IOST::Proto::Signature* Transaction::add_publisher_sigs() {
  ::TW::IOST::Proto::Signature* _add = _internal_add_publisher_sigs();
  // @@protoc_insertion_point(field_add:TW.IOST.Proto.Transaction.publisher_sigs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::IOST::Proto::Signature >&
Transaction::publisher_sigs() const {
  // @@protoc_insertion_point(field_list:TW.IOST.Proto.Transaction.publisher_sigs)
  return publisher_sigs_;
}

// -------------------------------------------------------------------

// AccountInfo

// string name = 1;
inline void AccountInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AccountInfo::name() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.AccountInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.AccountInfo.name)
}
inline std::string* AccountInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.AccountInfo.name)
  return _s;
}
inline const std::string& AccountInfo::_internal_name() const {
  return name_.Get();
}
inline void AccountInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_name() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.AccountInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.AccountInfo.name)
}

// bytes active_key = 2;
inline void AccountInfo::clear_active_key() {
  active_key_.ClearToEmpty();
}
inline const std::string& AccountInfo::active_key() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.AccountInfo.active_key)
  return _internal_active_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_active_key(ArgT0&& arg0, ArgT... args) {
 
 active_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.AccountInfo.active_key)
}
inline std::string* AccountInfo::mutable_active_key() {
  std::string* _s = _internal_mutable_active_key();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.AccountInfo.active_key)
  return _s;
}
inline const std::string& AccountInfo::_internal_active_key() const {
  return active_key_.Get();
}
inline void AccountInfo::_internal_set_active_key(const std::string& value) {
  
  active_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_active_key() {
  
  return active_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_active_key() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.AccountInfo.active_key)
  return active_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_active_key(std::string* active_key) {
  if (active_key != nullptr) {
    
  } else {
    
  }
  active_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.AccountInfo.active_key)
}

// bytes owner_key = 3;
inline void AccountInfo::clear_owner_key() {
  owner_key_.ClearToEmpty();
}
inline const std::string& AccountInfo::owner_key() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.AccountInfo.owner_key)
  return _internal_owner_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_owner_key(ArgT0&& arg0, ArgT... args) {
 
 owner_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.AccountInfo.owner_key)
}
inline std::string* AccountInfo::mutable_owner_key() {
  std::string* _s = _internal_mutable_owner_key();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.AccountInfo.owner_key)
  return _s;
}
inline const std::string& AccountInfo::_internal_owner_key() const {
  return owner_key_.Get();
}
inline void AccountInfo::_internal_set_owner_key(const std::string& value) {
  
  owner_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_owner_key() {
  
  return owner_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_owner_key() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.AccountInfo.owner_key)
  return owner_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_owner_key(std::string* owner_key) {
  if (owner_key != nullptr) {
    
  } else {
    
  }
  owner_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.AccountInfo.owner_key)
}

// -------------------------------------------------------------------

// SigningInput

// .TW.IOST.Proto.AccountInfo account = 1;
inline bool SigningInput::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool SigningInput::has_account() const {
  return _internal_has_account();
}
inline void SigningInput::clear_account() {
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::TW::IOST::Proto::AccountInfo& SigningInput::_internal_account() const {
  const ::TW::IOST::Proto::AccountInfo* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::IOST::Proto::AccountInfo&>(
      ::TW::IOST::Proto::_AccountInfo_default_instance_);
}
inline const ::TW::IOST::Proto::AccountInfo& SigningInput::account() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningInput.account)
  return _internal_account();
}
inline void SigningInput::unsafe_arena_set_allocated_account(
    ::TW::IOST::Proto::AccountInfo* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IOST.Proto.SigningInput.account)
}
inline ::TW::IOST::Proto::AccountInfo* SigningInput::release_account() {
  
  ::TW::IOST::Proto::AccountInfo* temp = account_;
  account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::IOST::Proto::AccountInfo* SigningInput::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningInput.account)
  
  ::TW::IOST::Proto::AccountInfo* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::TW::IOST::Proto::AccountInfo* SigningInput::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::IOST::Proto::AccountInfo>(GetArenaForAllocation());
    account_ = p;
  }
  return account_;
}
inline ::TW::IOST::Proto::AccountInfo* SigningInput::mutable_account() {
  ::TW::IOST::Proto::AccountInfo* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningInput.account)
  return _msg;
}
inline void SigningInput::set_allocated_account(::TW::IOST::Proto::AccountInfo* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::IOST::Proto::AccountInfo>::GetOwningArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningInput.account)
}

// .TW.IOST.Proto.Transaction transaction_template = 2;
inline bool SigningInput::_internal_has_transaction_template() const {
  return this != internal_default_instance() && transaction_template_ != nullptr;
}
inline bool SigningInput::has_transaction_template() const {
  return _internal_has_transaction_template();
}
inline void SigningInput::clear_transaction_template() {
  if (GetArenaForAllocation() == nullptr && transaction_template_ != nullptr) {
    delete transaction_template_;
  }
  transaction_template_ = nullptr;
}
inline const ::TW::IOST::Proto::Transaction& SigningInput::_internal_transaction_template() const {
  const ::TW::IOST::Proto::Transaction* p = transaction_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::IOST::Proto::Transaction&>(
      ::TW::IOST::Proto::_Transaction_default_instance_);
}
inline const ::TW::IOST::Proto::Transaction& SigningInput::transaction_template() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningInput.transaction_template)
  return _internal_transaction_template();
}
inline void SigningInput::unsafe_arena_set_allocated_transaction_template(
    ::TW::IOST::Proto::Transaction* transaction_template) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_template_);
  }
  transaction_template_ = transaction_template;
  if (transaction_template) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IOST.Proto.SigningInput.transaction_template)
}
inline ::TW::IOST::Proto::Transaction* SigningInput::release_transaction_template() {
  
  ::TW::IOST::Proto::Transaction* temp = transaction_template_;
  transaction_template_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::IOST::Proto::Transaction* SigningInput::unsafe_arena_release_transaction_template() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningInput.transaction_template)
  
  ::TW::IOST::Proto::Transaction* temp = transaction_template_;
  transaction_template_ = nullptr;
  return temp;
}
inline ::TW::IOST::Proto::Transaction* SigningInput::_internal_mutable_transaction_template() {
  
  if (transaction_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::IOST::Proto::Transaction>(GetArenaForAllocation());
    transaction_template_ = p;
  }
  return transaction_template_;
}
inline ::TW::IOST::Proto::Transaction* SigningInput::mutable_transaction_template() {
  ::TW::IOST::Proto::Transaction* _msg = _internal_mutable_transaction_template();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningInput.transaction_template)
  return _msg;
}
inline void SigningInput::set_allocated_transaction_template(::TW::IOST::Proto::Transaction* transaction_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_template_;
  }
  if (transaction_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::IOST::Proto::Transaction>::GetOwningArena(transaction_template);
    if (message_arena != submessage_arena) {
      transaction_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_template, submessage_arena);
    }
    
  } else {
    
  }
  transaction_template_ = transaction_template;
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningInput.transaction_template)
}

// string transfer_destination = 3;
inline void SigningInput::clear_transfer_destination() {
  transfer_destination_.ClearToEmpty();
}
inline const std::string& SigningInput::transfer_destination() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningInput.transfer_destination)
  return _internal_transfer_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_transfer_destination(ArgT0&& arg0, ArgT... args) {
 
 transfer_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.SigningInput.transfer_destination)
}
inline std::string* SigningInput::mutable_transfer_destination() {
  std::string* _s = _internal_mutable_transfer_destination();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningInput.transfer_destination)
  return _s;
}
inline const std::string& SigningInput::_internal_transfer_destination() const {
  return transfer_destination_.Get();
}
inline void SigningInput::_internal_set_transfer_destination(const std::string& value) {
  
  transfer_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_transfer_destination() {
  
  return transfer_destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_transfer_destination() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningInput.transfer_destination)
  return transfer_destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_transfer_destination(std::string* transfer_destination) {
  if (transfer_destination != nullptr) {
    
  } else {
    
  }
  transfer_destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transfer_destination,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transfer_destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transfer_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningInput.transfer_destination)
}

// string transfer_amount = 4;
inline void SigningInput::clear_transfer_amount() {
  transfer_amount_.ClearToEmpty();
}
inline const std::string& SigningInput::transfer_amount() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningInput.transfer_amount)
  return _internal_transfer_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_transfer_amount(ArgT0&& arg0, ArgT... args) {
 
 transfer_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.SigningInput.transfer_amount)
}
inline std::string* SigningInput::mutable_transfer_amount() {
  std::string* _s = _internal_mutable_transfer_amount();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningInput.transfer_amount)
  return _s;
}
inline const std::string& SigningInput::_internal_transfer_amount() const {
  return transfer_amount_.Get();
}
inline void SigningInput::_internal_set_transfer_amount(const std::string& value) {
  
  transfer_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_transfer_amount() {
  
  return transfer_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_transfer_amount() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningInput.transfer_amount)
  return transfer_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_transfer_amount(std::string* transfer_amount) {
  if (transfer_amount != nullptr) {
    
  } else {
    
  }
  transfer_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transfer_amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transfer_amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transfer_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningInput.transfer_amount)
}

// string transfer_memo = 5;
inline void SigningInput::clear_transfer_memo() {
  transfer_memo_.ClearToEmpty();
}
inline const std::string& SigningInput::transfer_memo() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningInput.transfer_memo)
  return _internal_transfer_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_transfer_memo(ArgT0&& arg0, ArgT... args) {
 
 transfer_memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.SigningInput.transfer_memo)
}
inline std::string* SigningInput::mutable_transfer_memo() {
  std::string* _s = _internal_mutable_transfer_memo();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningInput.transfer_memo)
  return _s;
}
inline const std::string& SigningInput::_internal_transfer_memo() const {
  return transfer_memo_.Get();
}
inline void SigningInput::_internal_set_transfer_memo(const std::string& value) {
  
  transfer_memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_transfer_memo() {
  
  return transfer_memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_transfer_memo() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningInput.transfer_memo)
  return transfer_memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_transfer_memo(std::string* transfer_memo) {
  if (transfer_memo != nullptr) {
    
  } else {
    
  }
  transfer_memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transfer_memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transfer_memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transfer_memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningInput.transfer_memo)
}

// -------------------------------------------------------------------

// SigningOutput

// .TW.IOST.Proto.Transaction transaction = 1;
inline bool SigningOutput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningOutput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningOutput::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::IOST::Proto::Transaction& SigningOutput::_internal_transaction() const {
  const ::TW::IOST::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::IOST::Proto::Transaction&>(
      ::TW::IOST::Proto::_Transaction_default_instance_);
}
inline const ::TW::IOST::Proto::Transaction& SigningOutput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningOutput.transaction)
  return _internal_transaction();
}
inline void SigningOutput::unsafe_arena_set_allocated_transaction(
    ::TW::IOST::Proto::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.IOST.Proto.SigningOutput.transaction)
}
inline ::TW::IOST::Proto::Transaction* SigningOutput::release_transaction() {
  
  ::TW::IOST::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::IOST::Proto::Transaction* SigningOutput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningOutput.transaction)
  
  ::TW::IOST::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::IOST::Proto::Transaction* SigningOutput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::IOST::Proto::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::IOST::Proto::Transaction* SigningOutput::mutable_transaction() {
  ::TW::IOST::Proto::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningOutput.transaction)
  return _msg;
}
inline void SigningOutput::set_allocated_transaction(::TW::IOST::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::IOST::Proto::Transaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningOutput.transaction)
}

// bytes encoded = 2;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 3;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.SigningOutput.error)
}

// string error_message = 4;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.IOST.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.IOST.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.IOST.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.IOST.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.IOST.Proto.SigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace IOST
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::IOST::Proto::Algorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::IOST::Proto::Algorithm>() {
  return ::TW::IOST::Proto::Algorithm_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IOST_2eproto
