// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Oasis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Oasis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Oasis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Oasis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Oasis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Oasis_2eproto;
namespace TW {
namespace Oasis {
namespace Proto {
class EscrowMessage;
struct EscrowMessageDefaultTypeInternal;
extern EscrowMessageDefaultTypeInternal _EscrowMessage_default_instance_;
class ReclaimEscrowMessage;
struct ReclaimEscrowMessageDefaultTypeInternal;
extern ReclaimEscrowMessageDefaultTypeInternal _ReclaimEscrowMessage_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class TransferMessage;
struct TransferMessageDefaultTypeInternal;
extern TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
}  // namespace Proto
}  // namespace Oasis
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Oasis::Proto::EscrowMessage* Arena::CreateMaybeMessage<::TW::Oasis::Proto::EscrowMessage>(Arena*);
template<> ::TW::Oasis::Proto::ReclaimEscrowMessage* Arena::CreateMaybeMessage<::TW::Oasis::Proto::ReclaimEscrowMessage>(Arena*);
template<> ::TW::Oasis::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Oasis::Proto::SigningInput>(Arena*);
template<> ::TW::Oasis::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Oasis::Proto::SigningOutput>(Arena*);
template<> ::TW::Oasis::Proto::TransferMessage* Arena::CreateMaybeMessage<::TW::Oasis::Proto::TransferMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Oasis {
namespace Proto {

// ===================================================================

class TransferMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Oasis.Proto.TransferMessage) */ {
 public:
  inline TransferMessage() : TransferMessage(nullptr) {}
  ~TransferMessage() override;
  explicit constexpr TransferMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferMessage(const TransferMessage& from);
  TransferMessage(TransferMessage&& from) noexcept
    : TransferMessage() {
    *this = ::std::move(from);
  }

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferMessage& operator=(TransferMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferMessage* internal_default_instance() {
    return reinterpret_cast<const TransferMessage*>(
               &_TransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransferMessage& a, TransferMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Oasis.Proto.TransferMessage";
  }
  protected:
  explicit TransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kGasAmountFieldNumber = 3,
    kAmountFieldNumber = 4,
    kContextFieldNumber = 6,
    kGasPriceFieldNumber = 2,
    kNonceFieldNumber = 5,
  };
  // string to = 1;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string gas_amount = 3;
  void clear_gas_amount();
  const std::string& gas_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_amount();
  PROTOBUF_NODISCARD std::string* release_gas_amount();
  void set_allocated_gas_amount(std::string* gas_amount);
  private:
  const std::string& _internal_gas_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_amount(const std::string& value);
  std::string* _internal_mutable_gas_amount();
  public:

  // string amount = 4;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string context = 6;
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // uint64 gas_price = 2;
  void clear_gas_price();
  uint64_t gas_price() const;
  void set_gas_price(uint64_t value);
  private:
  uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(uint64_t value);
  public:

  // uint64 nonce = 5;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Oasis.Proto.TransferMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  uint64_t gas_price_;
  uint64_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Oasis_2eproto;
};
// -------------------------------------------------------------------

class EscrowMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Oasis.Proto.EscrowMessage) */ {
 public:
  inline EscrowMessage() : EscrowMessage(nullptr) {}
  ~EscrowMessage() override;
  explicit constexpr EscrowMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EscrowMessage(const EscrowMessage& from);
  EscrowMessage(EscrowMessage&& from) noexcept
    : EscrowMessage() {
    *this = ::std::move(from);
  }

  inline EscrowMessage& operator=(const EscrowMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EscrowMessage& operator=(EscrowMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EscrowMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EscrowMessage* internal_default_instance() {
    return reinterpret_cast<const EscrowMessage*>(
               &_EscrowMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EscrowMessage& a, EscrowMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EscrowMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EscrowMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EscrowMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EscrowMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EscrowMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EscrowMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EscrowMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Oasis.Proto.EscrowMessage";
  }
  protected:
  explicit EscrowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasAmountFieldNumber = 2,
    kAccountFieldNumber = 4,
    kAmountFieldNumber = 5,
    kContextFieldNumber = 6,
    kGasPriceFieldNumber = 1,
    kNonceFieldNumber = 3,
  };
  // string gas_amount = 2;
  void clear_gas_amount();
  const std::string& gas_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_amount();
  PROTOBUF_NODISCARD std::string* release_gas_amount();
  void set_allocated_gas_amount(std::string* gas_amount);
  private:
  const std::string& _internal_gas_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_amount(const std::string& value);
  std::string* _internal_mutable_gas_amount();
  public:

  // string account = 4;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string amount = 5;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string context = 6;
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // uint64 gas_price = 1;
  void clear_gas_price();
  uint64_t gas_price() const;
  void set_gas_price(uint64_t value);
  private:
  uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(uint64_t value);
  public:

  // uint64 nonce = 3;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Oasis.Proto.EscrowMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  uint64_t gas_price_;
  uint64_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Oasis_2eproto;
};
// -------------------------------------------------------------------

class ReclaimEscrowMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Oasis.Proto.ReclaimEscrowMessage) */ {
 public:
  inline ReclaimEscrowMessage() : ReclaimEscrowMessage(nullptr) {}
  ~ReclaimEscrowMessage() override;
  explicit constexpr ReclaimEscrowMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReclaimEscrowMessage(const ReclaimEscrowMessage& from);
  ReclaimEscrowMessage(ReclaimEscrowMessage&& from) noexcept
    : ReclaimEscrowMessage() {
    *this = ::std::move(from);
  }

  inline ReclaimEscrowMessage& operator=(const ReclaimEscrowMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReclaimEscrowMessage& operator=(ReclaimEscrowMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReclaimEscrowMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReclaimEscrowMessage* internal_default_instance() {
    return reinterpret_cast<const ReclaimEscrowMessage*>(
               &_ReclaimEscrowMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReclaimEscrowMessage& a, ReclaimEscrowMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReclaimEscrowMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReclaimEscrowMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReclaimEscrowMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReclaimEscrowMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReclaimEscrowMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReclaimEscrowMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReclaimEscrowMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Oasis.Proto.ReclaimEscrowMessage";
  }
  protected:
  explicit ReclaimEscrowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasAmountFieldNumber = 2,
    kAccountFieldNumber = 4,
    kSharesFieldNumber = 5,
    kContextFieldNumber = 6,
    kGasPriceFieldNumber = 1,
    kNonceFieldNumber = 3,
  };
  // string gas_amount = 2;
  void clear_gas_amount();
  const std::string& gas_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gas_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gas_amount();
  PROTOBUF_NODISCARD std::string* release_gas_amount();
  void set_allocated_gas_amount(std::string* gas_amount);
  private:
  const std::string& _internal_gas_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gas_amount(const std::string& value);
  std::string* _internal_mutable_gas_amount();
  public:

  // string account = 4;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string shares = 5;
  void clear_shares();
  const std::string& shares() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shares(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shares();
  PROTOBUF_NODISCARD std::string* release_shares();
  void set_allocated_shares(std::string* shares);
  private:
  const std::string& _internal_shares() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shares(const std::string& value);
  std::string* _internal_mutable_shares();
  public:

  // string context = 6;
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // uint64 gas_price = 1;
  void clear_gas_price();
  uint64_t gas_price() const;
  void set_gas_price(uint64_t value);
  private:
  uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(uint64_t value);
  public:

  // uint64 nonce = 3;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Oasis.Proto.ReclaimEscrowMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shares_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  uint64_t gas_price_;
  uint64_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Oasis_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Oasis.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kTransfer = 2,
    kEscrow = 3,
    kReclaimEscrow = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Oasis.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kTransferFieldNumber = 2,
    kEscrowFieldNumber = 3,
    kReclaimEscrowFieldNumber = 4,
  };
  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Oasis.Proto.TransferMessage transfer = 2;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Oasis::Proto::TransferMessage& transfer() const;
  PROTOBUF_NODISCARD ::TW::Oasis::Proto::TransferMessage* release_transfer();
  ::TW::Oasis::Proto::TransferMessage* mutable_transfer();
  void set_allocated_transfer(::TW::Oasis::Proto::TransferMessage* transfer);
  private:
  const ::TW::Oasis::Proto::TransferMessage& _internal_transfer() const;
  ::TW::Oasis::Proto::TransferMessage* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Oasis::Proto::TransferMessage* transfer);
  ::TW::Oasis::Proto::TransferMessage* unsafe_arena_release_transfer();

  // .TW.Oasis.Proto.EscrowMessage escrow = 3;
  bool has_escrow() const;
  private:
  bool _internal_has_escrow() const;
  public:
  void clear_escrow();
  const ::TW::Oasis::Proto::EscrowMessage& escrow() const;
  PROTOBUF_NODISCARD ::TW::Oasis::Proto::EscrowMessage* release_escrow();
  ::TW::Oasis::Proto::EscrowMessage* mutable_escrow();
  void set_allocated_escrow(::TW::Oasis::Proto::EscrowMessage* escrow);
  private:
  const ::TW::Oasis::Proto::EscrowMessage& _internal_escrow() const;
  ::TW::Oasis::Proto::EscrowMessage* _internal_mutable_escrow();
  public:
  void unsafe_arena_set_allocated_escrow(
      ::TW::Oasis::Proto::EscrowMessage* escrow);
  ::TW::Oasis::Proto::EscrowMessage* unsafe_arena_release_escrow();

  // .TW.Oasis.Proto.ReclaimEscrowMessage reclaimEscrow = 4;
  bool has_reclaimescrow() const;
  private:
  bool _internal_has_reclaimescrow() const;
  public:
  void clear_reclaimescrow();
  const ::TW::Oasis::Proto::ReclaimEscrowMessage& reclaimescrow() const;
  PROTOBUF_NODISCARD ::TW::Oasis::Proto::ReclaimEscrowMessage* release_reclaimescrow();
  ::TW::Oasis::Proto::ReclaimEscrowMessage* mutable_reclaimescrow();
  void set_allocated_reclaimescrow(::TW::Oasis::Proto::ReclaimEscrowMessage* reclaimescrow);
  private:
  const ::TW::Oasis::Proto::ReclaimEscrowMessage& _internal_reclaimescrow() const;
  ::TW::Oasis::Proto::ReclaimEscrowMessage* _internal_mutable_reclaimescrow();
  public:
  void unsafe_arena_set_allocated_reclaimescrow(
      ::TW::Oasis::Proto::ReclaimEscrowMessage* reclaimescrow);
  ::TW::Oasis::Proto::ReclaimEscrowMessage* unsafe_arena_release_reclaimescrow();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:TW.Oasis.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_escrow();
  void set_has_reclaimescrow();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Oasis::Proto::TransferMessage* transfer_;
    ::TW::Oasis::Proto::EscrowMessage* escrow_;
    ::TW::Oasis::Proto::ReclaimEscrowMessage* reclaimescrow_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Oasis_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Oasis.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Oasis.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kErrorFieldNumber = 2,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Oasis.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Oasis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransferMessage

// string to = 1;
inline void TransferMessage::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& TransferMessage::to() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.TransferMessage.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.TransferMessage.to)
}
inline std::string* TransferMessage::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.TransferMessage.to)
  return _s;
}
inline const std::string& TransferMessage::_internal_to() const {
  return to_.Get();
}
inline void TransferMessage::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_to() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.TransferMessage.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.TransferMessage.to)
}

// uint64 gas_price = 2;
inline void TransferMessage::clear_gas_price() {
  gas_price_ = uint64_t{0u};
}
inline uint64_t TransferMessage::_internal_gas_price() const {
  return gas_price_;
}
inline uint64_t TransferMessage::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.TransferMessage.gas_price)
  return _internal_gas_price();
}
inline void TransferMessage::_internal_set_gas_price(uint64_t value) {
  
  gas_price_ = value;
}
inline void TransferMessage::set_gas_price(uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.TransferMessage.gas_price)
}

// string gas_amount = 3;
inline void TransferMessage::clear_gas_amount() {
  gas_amount_.ClearToEmpty();
}
inline const std::string& TransferMessage::gas_amount() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.TransferMessage.gas_amount)
  return _internal_gas_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_gas_amount(ArgT0&& arg0, ArgT... args) {
 
 gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.TransferMessage.gas_amount)
}
inline std::string* TransferMessage::mutable_gas_amount() {
  std::string* _s = _internal_mutable_gas_amount();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.TransferMessage.gas_amount)
  return _s;
}
inline const std::string& TransferMessage::_internal_gas_amount() const {
  return gas_amount_.Get();
}
inline void TransferMessage::_internal_set_gas_amount(const std::string& value) {
  
  gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_gas_amount() {
  
  return gas_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_gas_amount() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.TransferMessage.gas_amount)
  return gas_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_gas_amount(std::string* gas_amount) {
  if (gas_amount != nullptr) {
    
  } else {
    
  }
  gas_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.TransferMessage.gas_amount)
}

// string amount = 4;
inline void TransferMessage::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& TransferMessage::amount() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.TransferMessage.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.TransferMessage.amount)
}
inline std::string* TransferMessage::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.TransferMessage.amount)
  return _s;
}
inline const std::string& TransferMessage::_internal_amount() const {
  return amount_.Get();
}
inline void TransferMessage::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.TransferMessage.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.TransferMessage.amount)
}

// uint64 nonce = 5;
inline void TransferMessage::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t TransferMessage::_internal_nonce() const {
  return nonce_;
}
inline uint64_t TransferMessage::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.TransferMessage.nonce)
  return _internal_nonce();
}
inline void TransferMessage::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void TransferMessage::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.TransferMessage.nonce)
}

// string context = 6;
inline void TransferMessage::clear_context() {
  context_.ClearToEmpty();
}
inline const std::string& TransferMessage::context() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.TransferMessage.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_context(ArgT0&& arg0, ArgT... args) {
 
 context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.TransferMessage.context)
}
inline std::string* TransferMessage::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.TransferMessage.context)
  return _s;
}
inline const std::string& TransferMessage::_internal_context() const {
  return context_.Get();
}
inline void TransferMessage::_internal_set_context(const std::string& value) {
  
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_context() {
  
  return context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_context() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.TransferMessage.context)
  return context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (context_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.TransferMessage.context)
}

// -------------------------------------------------------------------

// EscrowMessage

// uint64 gas_price = 1;
inline void EscrowMessage::clear_gas_price() {
  gas_price_ = uint64_t{0u};
}
inline uint64_t EscrowMessage::_internal_gas_price() const {
  return gas_price_;
}
inline uint64_t EscrowMessage::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.EscrowMessage.gas_price)
  return _internal_gas_price();
}
inline void EscrowMessage::_internal_set_gas_price(uint64_t value) {
  
  gas_price_ = value;
}
inline void EscrowMessage::set_gas_price(uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.EscrowMessage.gas_price)
}

// string gas_amount = 2;
inline void EscrowMessage::clear_gas_amount() {
  gas_amount_.ClearToEmpty();
}
inline const std::string& EscrowMessage::gas_amount() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.EscrowMessage.gas_amount)
  return _internal_gas_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EscrowMessage::set_gas_amount(ArgT0&& arg0, ArgT... args) {
 
 gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.EscrowMessage.gas_amount)
}
inline std::string* EscrowMessage::mutable_gas_amount() {
  std::string* _s = _internal_mutable_gas_amount();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.EscrowMessage.gas_amount)
  return _s;
}
inline const std::string& EscrowMessage::_internal_gas_amount() const {
  return gas_amount_.Get();
}
inline void EscrowMessage::_internal_set_gas_amount(const std::string& value) {
  
  gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EscrowMessage::_internal_mutable_gas_amount() {
  
  return gas_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EscrowMessage::release_gas_amount() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.EscrowMessage.gas_amount)
  return gas_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EscrowMessage::set_allocated_gas_amount(std::string* gas_amount) {
  if (gas_amount != nullptr) {
    
  } else {
    
  }
  gas_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.EscrowMessage.gas_amount)
}

// uint64 nonce = 3;
inline void EscrowMessage::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t EscrowMessage::_internal_nonce() const {
  return nonce_;
}
inline uint64_t EscrowMessage::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.EscrowMessage.nonce)
  return _internal_nonce();
}
inline void EscrowMessage::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void EscrowMessage::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.EscrowMessage.nonce)
}

// string account = 4;
inline void EscrowMessage::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& EscrowMessage::account() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.EscrowMessage.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EscrowMessage::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.EscrowMessage.account)
}
inline std::string* EscrowMessage::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.EscrowMessage.account)
  return _s;
}
inline const std::string& EscrowMessage::_internal_account() const {
  return account_.Get();
}
inline void EscrowMessage::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EscrowMessage::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EscrowMessage::release_account() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.EscrowMessage.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EscrowMessage::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.EscrowMessage.account)
}

// string amount = 5;
inline void EscrowMessage::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& EscrowMessage::amount() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.EscrowMessage.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EscrowMessage::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.EscrowMessage.amount)
}
inline std::string* EscrowMessage::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.EscrowMessage.amount)
  return _s;
}
inline const std::string& EscrowMessage::_internal_amount() const {
  return amount_.Get();
}
inline void EscrowMessage::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EscrowMessage::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EscrowMessage::release_amount() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.EscrowMessage.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EscrowMessage::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.EscrowMessage.amount)
}

// string context = 6;
inline void EscrowMessage::clear_context() {
  context_.ClearToEmpty();
}
inline const std::string& EscrowMessage::context() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.EscrowMessage.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EscrowMessage::set_context(ArgT0&& arg0, ArgT... args) {
 
 context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.EscrowMessage.context)
}
inline std::string* EscrowMessage::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.EscrowMessage.context)
  return _s;
}
inline const std::string& EscrowMessage::_internal_context() const {
  return context_.Get();
}
inline void EscrowMessage::_internal_set_context(const std::string& value) {
  
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EscrowMessage::_internal_mutable_context() {
  
  return context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EscrowMessage::release_context() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.EscrowMessage.context)
  return context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EscrowMessage::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (context_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.EscrowMessage.context)
}

// -------------------------------------------------------------------

// ReclaimEscrowMessage

// uint64 gas_price = 1;
inline void ReclaimEscrowMessage::clear_gas_price() {
  gas_price_ = uint64_t{0u};
}
inline uint64_t ReclaimEscrowMessage::_internal_gas_price() const {
  return gas_price_;
}
inline uint64_t ReclaimEscrowMessage::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.ReclaimEscrowMessage.gas_price)
  return _internal_gas_price();
}
inline void ReclaimEscrowMessage::_internal_set_gas_price(uint64_t value) {
  
  gas_price_ = value;
}
inline void ReclaimEscrowMessage::set_gas_price(uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.ReclaimEscrowMessage.gas_price)
}

// string gas_amount = 2;
inline void ReclaimEscrowMessage::clear_gas_amount() {
  gas_amount_.ClearToEmpty();
}
inline const std::string& ReclaimEscrowMessage::gas_amount() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.ReclaimEscrowMessage.gas_amount)
  return _internal_gas_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReclaimEscrowMessage::set_gas_amount(ArgT0&& arg0, ArgT... args) {
 
 gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.ReclaimEscrowMessage.gas_amount)
}
inline std::string* ReclaimEscrowMessage::mutable_gas_amount() {
  std::string* _s = _internal_mutable_gas_amount();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.ReclaimEscrowMessage.gas_amount)
  return _s;
}
inline const std::string& ReclaimEscrowMessage::_internal_gas_amount() const {
  return gas_amount_.Get();
}
inline void ReclaimEscrowMessage::_internal_set_gas_amount(const std::string& value) {
  
  gas_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::_internal_mutable_gas_amount() {
  
  return gas_amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::release_gas_amount() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.ReclaimEscrowMessage.gas_amount)
  return gas_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReclaimEscrowMessage::set_allocated_gas_amount(std::string* gas_amount) {
  if (gas_amount != nullptr) {
    
  } else {
    
  }
  gas_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gas_amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gas_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.ReclaimEscrowMessage.gas_amount)
}

// uint64 nonce = 3;
inline void ReclaimEscrowMessage::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t ReclaimEscrowMessage::_internal_nonce() const {
  return nonce_;
}
inline uint64_t ReclaimEscrowMessage::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.ReclaimEscrowMessage.nonce)
  return _internal_nonce();
}
inline void ReclaimEscrowMessage::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void ReclaimEscrowMessage::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.ReclaimEscrowMessage.nonce)
}

// string account = 4;
inline void ReclaimEscrowMessage::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReclaimEscrowMessage::account() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.ReclaimEscrowMessage.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReclaimEscrowMessage::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.ReclaimEscrowMessage.account)
}
inline std::string* ReclaimEscrowMessage::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.ReclaimEscrowMessage.account)
  return _s;
}
inline const std::string& ReclaimEscrowMessage::_internal_account() const {
  return account_.Get();
}
inline void ReclaimEscrowMessage::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::release_account() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.ReclaimEscrowMessage.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReclaimEscrowMessage::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.ReclaimEscrowMessage.account)
}

// string shares = 5;
inline void ReclaimEscrowMessage::clear_shares() {
  shares_.ClearToEmpty();
}
inline const std::string& ReclaimEscrowMessage::shares() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.ReclaimEscrowMessage.shares)
  return _internal_shares();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReclaimEscrowMessage::set_shares(ArgT0&& arg0, ArgT... args) {
 
 shares_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.ReclaimEscrowMessage.shares)
}
inline std::string* ReclaimEscrowMessage::mutable_shares() {
  std::string* _s = _internal_mutable_shares();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.ReclaimEscrowMessage.shares)
  return _s;
}
inline const std::string& ReclaimEscrowMessage::_internal_shares() const {
  return shares_.Get();
}
inline void ReclaimEscrowMessage::_internal_set_shares(const std::string& value) {
  
  shares_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::_internal_mutable_shares() {
  
  return shares_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::release_shares() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.ReclaimEscrowMessage.shares)
  return shares_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReclaimEscrowMessage::set_allocated_shares(std::string* shares) {
  if (shares != nullptr) {
    
  } else {
    
  }
  shares_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shares,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shares_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shares_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.ReclaimEscrowMessage.shares)
}

// string context = 6;
inline void ReclaimEscrowMessage::clear_context() {
  context_.ClearToEmpty();
}
inline const std::string& ReclaimEscrowMessage::context() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.ReclaimEscrowMessage.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReclaimEscrowMessage::set_context(ArgT0&& arg0, ArgT... args) {
 
 context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.ReclaimEscrowMessage.context)
}
inline std::string* ReclaimEscrowMessage::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.ReclaimEscrowMessage.context)
  return _s;
}
inline const std::string& ReclaimEscrowMessage::_internal_context() const {
  return context_.Get();
}
inline void ReclaimEscrowMessage::_internal_set_context(const std::string& value) {
  
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::_internal_mutable_context() {
  
  return context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReclaimEscrowMessage::release_context() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.ReclaimEscrowMessage.context)
  return context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReclaimEscrowMessage::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (context_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.ReclaimEscrowMessage.context)
}

// -------------------------------------------------------------------

// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.SigningInput.private_key)
}

// .TW.Oasis.Proto.TransferMessage transfer = 2;
inline bool SigningInput::_internal_has_transfer() const {
  return message_case() == kTransfer;
}
inline bool SigningInput::has_transfer() const {
  return _internal_has_transfer();
}
inline void SigningInput::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void SigningInput::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.transfer_;
    }
    clear_has_message();
  }
}
inline ::TW::Oasis::Proto::TransferMessage* SigningInput::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_message();
      ::TW::Oasis::Proto::TransferMessage* temp = message_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Oasis::Proto::TransferMessage& SigningInput::_internal_transfer() const {
  return _internal_has_transfer()
      ? *message_.transfer_
      : reinterpret_cast< ::TW::Oasis::Proto::TransferMessage&>(::TW::Oasis::Proto::_TransferMessage_default_instance_);
}
inline const ::TW::Oasis::Proto::TransferMessage& SigningInput::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.SigningInput.transfer)
  return _internal_transfer();
}
inline ::TW::Oasis::Proto::TransferMessage* SigningInput::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Oasis.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_message();
    ::TW::Oasis::Proto::TransferMessage* temp = message_.transfer_;
    message_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer(::TW::Oasis::Proto::TransferMessage* transfer) {
  clear_message();
  if (transfer) {
    set_has_transfer();
    message_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Oasis.Proto.SigningInput.transfer)
}
inline ::TW::Oasis::Proto::TransferMessage* SigningInput::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_message();
    set_has_transfer();
    message_.transfer_ = CreateMaybeMessage< ::TW::Oasis::Proto::TransferMessage >(GetArenaForAllocation());
  }
  return message_.transfer_;
}
inline ::TW::Oasis::Proto::TransferMessage* SigningInput::mutable_transfer() {
  ::TW::Oasis::Proto::TransferMessage* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.SigningInput.transfer)
  return _msg;
}

// .TW.Oasis.Proto.EscrowMessage escrow = 3;
inline bool SigningInput::_internal_has_escrow() const {
  return message_case() == kEscrow;
}
inline bool SigningInput::has_escrow() const {
  return _internal_has_escrow();
}
inline void SigningInput::set_has_escrow() {
  _oneof_case_[0] = kEscrow;
}
inline void SigningInput::clear_escrow() {
  if (_internal_has_escrow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.escrow_;
    }
    clear_has_message();
  }
}
inline ::TW::Oasis::Proto::EscrowMessage* SigningInput::release_escrow() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.SigningInput.escrow)
  if (_internal_has_escrow()) {
    clear_has_message();
      ::TW::Oasis::Proto::EscrowMessage* temp = message_.escrow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.escrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Oasis::Proto::EscrowMessage& SigningInput::_internal_escrow() const {
  return _internal_has_escrow()
      ? *message_.escrow_
      : reinterpret_cast< ::TW::Oasis::Proto::EscrowMessage&>(::TW::Oasis::Proto::_EscrowMessage_default_instance_);
}
inline const ::TW::Oasis::Proto::EscrowMessage& SigningInput::escrow() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.SigningInput.escrow)
  return _internal_escrow();
}
inline ::TW::Oasis::Proto::EscrowMessage* SigningInput::unsafe_arena_release_escrow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Oasis.Proto.SigningInput.escrow)
  if (_internal_has_escrow()) {
    clear_has_message();
    ::TW::Oasis::Proto::EscrowMessage* temp = message_.escrow_;
    message_.escrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_escrow(::TW::Oasis::Proto::EscrowMessage* escrow) {
  clear_message();
  if (escrow) {
    set_has_escrow();
    message_.escrow_ = escrow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Oasis.Proto.SigningInput.escrow)
}
inline ::TW::Oasis::Proto::EscrowMessage* SigningInput::_internal_mutable_escrow() {
  if (!_internal_has_escrow()) {
    clear_message();
    set_has_escrow();
    message_.escrow_ = CreateMaybeMessage< ::TW::Oasis::Proto::EscrowMessage >(GetArenaForAllocation());
  }
  return message_.escrow_;
}
inline ::TW::Oasis::Proto::EscrowMessage* SigningInput::mutable_escrow() {
  ::TW::Oasis::Proto::EscrowMessage* _msg = _internal_mutable_escrow();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.SigningInput.escrow)
  return _msg;
}

// .TW.Oasis.Proto.ReclaimEscrowMessage reclaimEscrow = 4;
inline bool SigningInput::_internal_has_reclaimescrow() const {
  return message_case() == kReclaimEscrow;
}
inline bool SigningInput::has_reclaimescrow() const {
  return _internal_has_reclaimescrow();
}
inline void SigningInput::set_has_reclaimescrow() {
  _oneof_case_[0] = kReclaimEscrow;
}
inline void SigningInput::clear_reclaimescrow() {
  if (_internal_has_reclaimescrow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.reclaimescrow_;
    }
    clear_has_message();
  }
}
inline ::TW::Oasis::Proto::ReclaimEscrowMessage* SigningInput::release_reclaimescrow() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.SigningInput.reclaimEscrow)
  if (_internal_has_reclaimescrow()) {
    clear_has_message();
      ::TW::Oasis::Proto::ReclaimEscrowMessage* temp = message_.reclaimescrow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.reclaimescrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Oasis::Proto::ReclaimEscrowMessage& SigningInput::_internal_reclaimescrow() const {
  return _internal_has_reclaimescrow()
      ? *message_.reclaimescrow_
      : reinterpret_cast< ::TW::Oasis::Proto::ReclaimEscrowMessage&>(::TW::Oasis::Proto::_ReclaimEscrowMessage_default_instance_);
}
inline const ::TW::Oasis::Proto::ReclaimEscrowMessage& SigningInput::reclaimescrow() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.SigningInput.reclaimEscrow)
  return _internal_reclaimescrow();
}
inline ::TW::Oasis::Proto::ReclaimEscrowMessage* SigningInput::unsafe_arena_release_reclaimescrow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Oasis.Proto.SigningInput.reclaimEscrow)
  if (_internal_has_reclaimescrow()) {
    clear_has_message();
    ::TW::Oasis::Proto::ReclaimEscrowMessage* temp = message_.reclaimescrow_;
    message_.reclaimescrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_reclaimescrow(::TW::Oasis::Proto::ReclaimEscrowMessage* reclaimescrow) {
  clear_message();
  if (reclaimescrow) {
    set_has_reclaimescrow();
    message_.reclaimescrow_ = reclaimescrow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Oasis.Proto.SigningInput.reclaimEscrow)
}
inline ::TW::Oasis::Proto::ReclaimEscrowMessage* SigningInput::_internal_mutable_reclaimescrow() {
  if (!_internal_has_reclaimescrow()) {
    clear_message();
    set_has_reclaimescrow();
    message_.reclaimescrow_ = CreateMaybeMessage< ::TW::Oasis::Proto::ReclaimEscrowMessage >(GetArenaForAllocation());
  }
  return message_.reclaimescrow_;
}
inline ::TW::Oasis::Proto::ReclaimEscrowMessage* SigningInput::mutable_reclaimescrow() {
  ::TW::Oasis::Proto::ReclaimEscrowMessage* _msg = _internal_mutable_reclaimescrow();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.SigningInput.reclaimEscrow)
  return _msg;
}

inline bool SigningInput::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void SigningInput::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline SigningInput::MessageCase SigningInput::message_case() const {
  return SigningInput::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.SigningOutput.error)
}

// string error_message = 3;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Oasis.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Oasis.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Oasis.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Oasis.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Oasis.Proto.SigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Oasis
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Oasis_2eproto
