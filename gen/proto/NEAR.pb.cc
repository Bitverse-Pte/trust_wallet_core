// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NEAR.proto

#include "NEAR.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace NEAR {
namespace Proto {
constexpr PublicKey::PublicKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_type_(0u){}
struct PublicKeyDefaultTypeInternal {
  constexpr PublicKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublicKeyDefaultTypeInternal() {}
  union {
    PublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
constexpr FunctionCallPermission::FunctionCallPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : method_names_()
  , allowance_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FunctionCallPermissionDefaultTypeInternal {
  constexpr FunctionCallPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCallPermissionDefaultTypeInternal() {}
  union {
    FunctionCallPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCallPermissionDefaultTypeInternal _FunctionCallPermission_default_instance_;
constexpr FullAccessPermission::FullAccessPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FullAccessPermissionDefaultTypeInternal {
  constexpr FullAccessPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FullAccessPermissionDefaultTypeInternal() {}
  union {
    FullAccessPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FullAccessPermissionDefaultTypeInternal _FullAccessPermission_default_instance_;
constexpr AccessKey::AccessKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_(uint64_t{0u})
  , _oneof_case_{}{}
struct AccessKeyDefaultTypeInternal {
  constexpr AccessKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccessKeyDefaultTypeInternal() {}
  union {
    AccessKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccessKeyDefaultTypeInternal _AccessKey_default_instance_;
constexpr CreateAccount::CreateAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateAccountDefaultTypeInternal {
  constexpr CreateAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAccountDefaultTypeInternal() {}
  union {
    CreateAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAccountDefaultTypeInternal _CreateAccount_default_instance_;
constexpr DeployContract::DeployContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeployContractDefaultTypeInternal {
  constexpr DeployContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeployContractDefaultTypeInternal() {}
  union {
    DeployContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeployContractDefaultTypeInternal _DeployContract_default_instance_;
constexpr FunctionCall::FunctionCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : method_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deposit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_(uint64_t{0u}){}
struct FunctionCallDefaultTypeInternal {
  constexpr FunctionCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCallDefaultTypeInternal() {}
  union {
    FunctionCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCallDefaultTypeInternal _FunctionCall_default_instance_;
constexpr Transfer::Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deposit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransferDefaultTypeInternal {
  constexpr TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferDefaultTypeInternal() {}
  union {
    Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferDefaultTypeInternal _Transfer_default_instance_;
constexpr Stake::Stake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stake_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(nullptr){}
struct StakeDefaultTypeInternal {
  constexpr StakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StakeDefaultTypeInternal() {}
  union {
    Stake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StakeDefaultTypeInternal _Stake_default_instance_;
constexpr AddKey::AddKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(nullptr)
  , access_key_(nullptr){}
struct AddKeyDefaultTypeInternal {
  constexpr AddKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddKeyDefaultTypeInternal() {}
  union {
    AddKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddKeyDefaultTypeInternal _AddKey_default_instance_;
constexpr DeleteKey::DeleteKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(nullptr){}
struct DeleteKeyDefaultTypeInternal {
  constexpr DeleteKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteKeyDefaultTypeInternal() {}
  union {
    DeleteKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteKeyDefaultTypeInternal _DeleteKey_default_instance_;
constexpr DeleteAccount::DeleteAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beneficiary_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteAccountDefaultTypeInternal {
  constexpr DeleteAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAccountDefaultTypeInternal() {}
  union {
    DeleteAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAccountDefaultTypeInternal _DeleteAccount_default_instance_;
constexpr TokenTransfer::TokenTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deposit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_(uint64_t{0u}){}
struct TokenTransferDefaultTypeInternal {
  constexpr TokenTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenTransferDefaultTypeInternal() {}
  union {
    TokenTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenTransferDefaultTypeInternal _TokenTransfer_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_()
  , signer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_(uint64_t{0u}){}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signed_transaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace NEAR
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NEAR_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NEAR_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NEAR_2eproto = nullptr;

const uint32_t TableStruct_NEAR_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::PublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::PublicKey, key_type_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::PublicKey, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCallPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCallPermission, allowance_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCallPermission, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCallPermission, method_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FullAccessPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, nonce_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AccessKey, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::CreateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeployContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeployContract, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, method_name_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, args_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, gas_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::FunctionCall, deposit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Transfer, deposit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Stake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Stake, stake_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Stake, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AddKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AddKey, public_key_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::AddKey, access_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteKey, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::DeleteAccount, beneficiary_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::TokenTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::TokenTransfer, token_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::TokenTransfer, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::TokenTransfer, gas_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::TokenTransfer, deposit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::Action, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, signer_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, block_hash_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, actions_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningInput, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningOutput, signed_transaction_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningOutput, error_message_),
  PROTOBUF_FIELD_OFFSET(::TW::NEAR::Proto::SigningOutput, hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::NEAR::Proto::PublicKey)},
  { 8, -1, -1, sizeof(::TW::NEAR::Proto::FunctionCallPermission)},
  { 17, -1, -1, sizeof(::TW::NEAR::Proto::FullAccessPermission)},
  { 23, -1, -1, sizeof(::TW::NEAR::Proto::AccessKey)},
  { 33, -1, -1, sizeof(::TW::NEAR::Proto::CreateAccount)},
  { 39, -1, -1, sizeof(::TW::NEAR::Proto::DeployContract)},
  { 46, -1, -1, sizeof(::TW::NEAR::Proto::FunctionCall)},
  { 56, -1, -1, sizeof(::TW::NEAR::Proto::Transfer)},
  { 63, -1, -1, sizeof(::TW::NEAR::Proto::Stake)},
  { 71, -1, -1, sizeof(::TW::NEAR::Proto::AddKey)},
  { 79, -1, -1, sizeof(::TW::NEAR::Proto::DeleteKey)},
  { 86, -1, -1, sizeof(::TW::NEAR::Proto::DeleteAccount)},
  { 93, -1, -1, sizeof(::TW::NEAR::Proto::TokenTransfer)},
  { 103, -1, -1, sizeof(::TW::NEAR::Proto::Action)},
  { 119, -1, -1, sizeof(::TW::NEAR::Proto::SigningInput)},
  { 132, -1, -1, sizeof(::TW::NEAR::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_PublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_FunctionCallPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_FullAccessPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_AccessKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_CreateAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_DeployContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_FunctionCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_Stake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_AddKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_DeleteKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_DeleteAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_TokenTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::NEAR::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_NEAR_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nNEAR.proto\022\rTW.NEAR.Proto\032\014Common.prot"
  "o\"+\n\tPublicKey\022\020\n\010key_type\030\001 \001(\r\022\014\n\004data"
  "\030\002 \001(\014\"V\n\026FunctionCallPermission\022\021\n\tallo"
  "wance\030\001 \001(\014\022\023\n\013receiver_id\030\002 \001(\t\022\024\n\014meth"
  "od_names\030\003 \003(\t\"\026\n\024FullAccessPermission\"\244"
  "\001\n\tAccessKey\022\r\n\005nonce\030\001 \001(\004\022>\n\rfunction_"
  "call\030\002 \001(\0132%.TW.NEAR.Proto.FunctionCallP"
  "ermissionH\000\022:\n\013full_access\030\003 \001(\0132#.TW.NE"
  "AR.Proto.FullAccessPermissionH\000B\014\n\npermi"
  "ssion\"\017\n\rCreateAccount\"\036\n\016DeployContract"
  "\022\014\n\004code\030\001 \001(\014\"O\n\014FunctionCall\022\023\n\013method"
  "_name\030\001 \001(\t\022\014\n\004args\030\002 \001(\014\022\013\n\003gas\030\003 \001(\004\022\017"
  "\n\007deposit\030\004 \001(\014\"\033\n\010Transfer\022\017\n\007deposit\030\001"
  " \001(\014\"D\n\005Stake\022\r\n\005stake\030\001 \001(\014\022,\n\npublic_k"
  "ey\030\002 \001(\0132\030.TW.NEAR.Proto.PublicKey\"d\n\006Ad"
  "dKey\022,\n\npublic_key\030\001 \001(\0132\030.TW.NEAR.Proto"
  ".PublicKey\022,\n\naccess_key\030\002 \001(\0132\030.TW.NEAR"
  ".Proto.AccessKey\"9\n\tDeleteKey\022,\n\npublic_"
  "key\030\001 \001(\0132\030.TW.NEAR.Proto.PublicKey\"\'\n\rD"
  "eleteAccount\022\026\n\016beneficiary_id\030\001 \001(\t\"X\n\r"
  "TokenTransfer\022\024\n\014token_amount\030\001 \001(\t\022\023\n\013r"
  "eceiver_id\030\002 \001(\t\022\013\n\003gas\030\003 \001(\004\022\017\n\007deposit"
  "\030\004 \001(\014\"\331\003\n\006Action\0226\n\016create_account\030\001 \001("
  "\0132\034.TW.NEAR.Proto.CreateAccountH\000\0228\n\017dep"
  "loy_contract\030\002 \001(\0132\035.TW.NEAR.Proto.Deplo"
  "yContractH\000\0224\n\rfunction_call\030\003 \001(\0132\033.TW."
  "NEAR.Proto.FunctionCallH\000\022+\n\010transfer\030\004 "
  "\001(\0132\027.TW.NEAR.Proto.TransferH\000\022%\n\005stake\030"
  "\005 \001(\0132\024.TW.NEAR.Proto.StakeH\000\022(\n\007add_key"
  "\030\006 \001(\0132\025.TW.NEAR.Proto.AddKeyH\000\022.\n\ndelet"
  "e_key\030\007 \001(\0132\030.TW.NEAR.Proto.DeleteKeyH\000\022"
  "6\n\016delete_account\030\010 \001(\0132\034.TW.NEAR.Proto."
  "DeleteAccountH\000\0226\n\016token_transfer\030\r \001(\0132"
  "\034.TW.NEAR.Proto.TokenTransferH\000B\t\n\007paylo"
  "ad\"\252\001\n\014SigningInput\022\021\n\tsigner_id\030\001 \001(\t\022\r"
  "\n\005nonce\030\002 \001(\004\022\023\n\013receiver_id\030\003 \001(\t\022\022\n\nbl"
  "ock_hash\030\004 \001(\014\022&\n\007actions\030\005 \003(\0132\025.TW.NEA"
  "R.Proto.Action\022\023\n\013private_key\030\006 \001(\014\022\022\n\np"
  "ublic_key\030\007 \001(\014\"~\n\rSigningOutput\022\032\n\022sign"
  "ed_transaction\030\001 \001(\014\022,\n\005error\030\002 \001(\0162\035.TW"
  ".Common.Proto.SigningError\022\025\n\rerror_mess"
  "age\030\003 \001(\t\022\014\n\004hash\030\004 \001(\014B\027\n\025wallet.core.j"
  "ni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NEAR_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NEAR_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NEAR_2eproto = {
  false, false, 1696, descriptor_table_protodef_NEAR_2eproto, "NEAR.proto", 
  &descriptor_table_NEAR_2eproto_once, descriptor_table_NEAR_2eproto_deps, 1, 16,
  schemas, file_default_instances, TableStruct_NEAR_2eproto::offsets,
  file_level_metadata_NEAR_2eproto, file_level_enum_descriptors_NEAR_2eproto, file_level_service_descriptors_NEAR_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_NEAR_2eproto_getter() {
  return &descriptor_table_NEAR_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_NEAR_2eproto(&descriptor_table_NEAR_2eproto);
namespace TW {
namespace NEAR {
namespace Proto {

// ===================================================================

class PublicKey::_Internal {
 public:
};

PublicKey::PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  key_type_ = from.key_type_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.PublicKey)
}

inline void PublicKey::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_type_ = 0u;
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.PublicKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicKey::ArenaDtor(void* object) {
  PublicKey* _this = reinterpret_cast< PublicKey* >(object);
  (void)_this;
}
void PublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.PublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  key_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.PublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key_type = 1;
  if (this->_internal_key_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.PublicKey)
  return target;
}

size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.PublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 key_type = 1;
  if (this->_internal_key_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_key_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKey::GetClassData() const { return &_class_data_; }

void PublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublicKey *>(to)->MergeFrom(
      static_cast<const PublicKey &>(from));
}


void PublicKey::MergeFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_key_type() != 0) {
    _internal_set_key_type(from._internal_key_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::InternalSwap(PublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(key_type_, other->key_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[0]);
}

// ===================================================================

class FunctionCallPermission::_Internal {
 public:
};

FunctionCallPermission::FunctionCallPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  method_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.FunctionCallPermission)
}
FunctionCallPermission::FunctionCallPermission(const FunctionCallPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      method_names_(from.method_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allowance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    allowance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_allowance().empty()) {
    allowance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_allowance(), 
      GetArenaForAllocation());
  }
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.FunctionCallPermission)
}

inline void FunctionCallPermission::SharedCtor() {
allowance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  allowance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionCallPermission::~FunctionCallPermission() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.FunctionCallPermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCallPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  allowance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionCallPermission::ArenaDtor(void* object) {
  FunctionCallPermission* _this = reinterpret_cast< FunctionCallPermission* >(object);
  (void)_this;
}
void FunctionCallPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCallPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCallPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.FunctionCallPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_names_.Clear();
  allowance_.ClearToEmpty();
  receiver_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCallPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes allowance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_allowance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.FunctionCallPermission.receiver_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string method_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_method_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.FunctionCallPermission.method_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCallPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.FunctionCallPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes allowance = 1;
  if (!this->_internal_allowance().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_allowance(), target);
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.FunctionCallPermission.receiver_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  // repeated string method_names = 3;
  for (int i = 0, n = this->_internal_method_names_size(); i < n; i++) {
    const auto& s = this->_internal_method_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.FunctionCallPermission.method_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.FunctionCallPermission)
  return target;
}

size_t FunctionCallPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.FunctionCallPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string method_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(method_names_.size());
  for (int i = 0, n = method_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      method_names_.Get(i));
  }

  // bytes allowance = 1;
  if (!this->_internal_allowance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_allowance());
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCallPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCallPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCallPermission::GetClassData() const { return &_class_data_; }

void FunctionCallPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCallPermission *>(to)->MergeFrom(
      static_cast<const FunctionCallPermission &>(from));
}


void FunctionCallPermission::MergeFrom(const FunctionCallPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.FunctionCallPermission)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  method_names_.MergeFrom(from.method_names_);
  if (!from._internal_allowance().empty()) {
    _internal_set_allowance(from._internal_allowance());
  }
  if (!from._internal_receiver_id().empty()) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCallPermission::CopyFrom(const FunctionCallPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.FunctionCallPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCallPermission::IsInitialized() const {
  return true;
}

void FunctionCallPermission::InternalSwap(FunctionCallPermission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  method_names_.InternalSwap(&other->method_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &allowance_, lhs_arena,
      &other->allowance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_id_, lhs_arena,
      &other->receiver_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCallPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[1]);
}

// ===================================================================

class FullAccessPermission::_Internal {
 public:
};

FullAccessPermission::FullAccessPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.FullAccessPermission)
}
FullAccessPermission::FullAccessPermission(const FullAccessPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.FullAccessPermission)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullAccessPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullAccessPermission::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FullAccessPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[2]);
}

// ===================================================================

class AccessKey::_Internal {
 public:
  static const ::TW::NEAR::Proto::FunctionCallPermission& function_call(const AccessKey* msg);
  static const ::TW::NEAR::Proto::FullAccessPermission& full_access(const AccessKey* msg);
};

const ::TW::NEAR::Proto::FunctionCallPermission&
AccessKey::_Internal::function_call(const AccessKey* msg) {
  return *msg->permission_.function_call_;
}
const ::TW::NEAR::Proto::FullAccessPermission&
AccessKey::_Internal::full_access(const AccessKey* msg) {
  return *msg->permission_.full_access_;
}
void AccessKey::set_allocated_function_call(::TW::NEAR::Proto::FunctionCallPermission* function_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_permission();
  if (function_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::FunctionCallPermission>::GetOwningArena(function_call);
    if (message_arena != submessage_arena) {
      function_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_call, submessage_arena);
    }
    set_has_function_call();
    permission_.function_call_ = function_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.AccessKey.function_call)
}
void AccessKey::set_allocated_full_access(::TW::NEAR::Proto::FullAccessPermission* full_access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_permission();
  if (full_access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::FullAccessPermission>::GetOwningArena(full_access);
    if (message_arena != submessage_arena) {
      full_access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_access, submessage_arena);
    }
    set_has_full_access();
    permission_.full_access_ = full_access;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.AccessKey.full_access)
}
AccessKey::AccessKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.AccessKey)
}
AccessKey::AccessKey(const AccessKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_ = from.nonce_;
  clear_has_permission();
  switch (from.permission_case()) {
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCallPermission::MergeFrom(from._internal_function_call());
      break;
    }
    case kFullAccess: {
      _internal_mutable_full_access()->::TW::NEAR::Proto::FullAccessPermission::MergeFrom(from._internal_full_access());
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.AccessKey)
}

inline void AccessKey::SharedCtor() {
nonce_ = uint64_t{0u};
clear_has_permission();
}

AccessKey::~AccessKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.AccessKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccessKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_permission()) {
    clear_permission();
  }
}

void AccessKey::ArenaDtor(void* object) {
  AccessKey* _this = reinterpret_cast< AccessKey* >(object);
  (void)_this;
}
void AccessKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccessKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccessKey::clear_permission() {
// @@protoc_insertion_point(one_of_clear_start:TW.NEAR.Proto.AccessKey)
  switch (permission_case()) {
    case kFunctionCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete permission_.function_call_;
      }
      break;
    }
    case kFullAccess: {
      if (GetArenaForAllocation() == nullptr) {
        delete permission_.full_access_;
      }
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PERMISSION_NOT_SET;
}


void AccessKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.AccessKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_ = uint64_t{0u};
  clear_permission();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.FullAccessPermission full_access = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_access(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccessKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.AccessKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  // .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
  if (_internal_has_function_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::function_call(this), target, stream);
  }

  // .TW.NEAR.Proto.FullAccessPermission full_access = 3;
  if (_internal_has_full_access()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::full_access(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.AccessKey)
  return target;
}

size_t AccessKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.AccessKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  switch (permission_case()) {
    // .TW.NEAR.Proto.FunctionCallPermission function_call = 2;
    case kFunctionCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *permission_.function_call_);
      break;
    }
    // .TW.NEAR.Proto.FullAccessPermission full_access = 3;
    case kFullAccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *permission_.full_access_);
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccessKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccessKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccessKey::GetClassData() const { return &_class_data_; }

void AccessKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccessKey *>(to)->MergeFrom(
      static_cast<const AccessKey &>(from));
}


void AccessKey::MergeFrom(const AccessKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.AccessKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  switch (from.permission_case()) {
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCallPermission::MergeFrom(from._internal_function_call());
      break;
    }
    case kFullAccess: {
      _internal_mutable_full_access()->::TW::NEAR::Proto::FullAccessPermission::MergeFrom(from._internal_full_access());
      break;
    }
    case PERMISSION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccessKey::CopyFrom(const AccessKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.AccessKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessKey::IsInitialized() const {
  return true;
}

void AccessKey::InternalSwap(AccessKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nonce_, other->nonce_);
  swap(permission_, other->permission_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[3]);
}

// ===================================================================

class CreateAccount::_Internal {
 public:
};

CreateAccount::CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.CreateAccount)
}
CreateAccount::CreateAccount(const CreateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.CreateAccount)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccount::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CreateAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[4]);
}

// ===================================================================

class DeployContract::_Internal {
 public:
};

DeployContract::DeployContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.DeployContract)
}
DeployContract::DeployContract(const DeployContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.DeployContract)
}

inline void DeployContract::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeployContract::~DeployContract() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.DeployContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeployContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeployContract::ArenaDtor(void* object) {
  DeployContract* _this = reinterpret_cast< DeployContract* >(object);
  (void)_this;
}
void DeployContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeployContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeployContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.DeployContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeployContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.DeployContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.DeployContract)
  return target;
}

size_t DeployContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.DeployContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeployContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeployContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeployContract::GetClassData() const { return &_class_data_; }

void DeployContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeployContract *>(to)->MergeFrom(
      static_cast<const DeployContract &>(from));
}


void DeployContract::MergeFrom(const DeployContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.DeployContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeployContract::CopyFrom(const DeployContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.DeployContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployContract::IsInitialized() const {
  return true;
}

void DeployContract::InternalSwap(DeployContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[5]);
}

// ===================================================================

class FunctionCall::_Internal {
 public:
};

FunctionCall::FunctionCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.FunctionCall)
}
FunctionCall::FunctionCall(const FunctionCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method_name(), 
      GetArenaForAllocation());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deposit().empty()) {
    deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deposit(), 
      GetArenaForAllocation());
  }
  gas_ = from.gas_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.FunctionCall)
}

inline void FunctionCall::SharedCtor() {
method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_ = uint64_t{0u};
}

FunctionCall::~FunctionCall() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.FunctionCall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deposit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionCall::ArenaDtor(void* object) {
  FunctionCall* _this = reinterpret_cast< FunctionCall* >(object);
  (void)_this;
}
void FunctionCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.FunctionCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_name_.ClearToEmpty();
  args_.ClearToEmpty();
  deposit_.ClearToEmpty();
  gas_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.FunctionCall.method_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes deposit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deposit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.FunctionCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string method_name = 1;
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.FunctionCall.method_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method_name(), target);
  }

  // bytes args = 2;
  if (!this->_internal_args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_args(), target);
  }

  // uint64 gas = 3;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gas(), target);
  }

  // bytes deposit = 4;
  if (!this->_internal_deposit().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_deposit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.FunctionCall)
  return target;
}

size_t FunctionCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.FunctionCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method_name = 1;
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // bytes args = 2;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes deposit = 4;
  if (!this->_internal_deposit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deposit());
  }

  // uint64 gas = 3;
  if (this->_internal_gas() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall::GetClassData() const { return &_class_data_; }

void FunctionCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall *>(to)->MergeFrom(
      static_cast<const FunctionCall &>(from));
}


void FunctionCall::MergeFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_method_name().empty()) {
    _internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (!from._internal_deposit().empty()) {
    _internal_set_deposit(from._internal_deposit());
  }
  if (from._internal_gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  return true;
}

void FunctionCall::InternalSwap(FunctionCall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, lhs_arena,
      &other->args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deposit_, lhs_arena,
      &other->deposit_, rhs_arena
  );
  swap(gas_, other->gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[6]);
}

// ===================================================================

class Transfer::_Internal {
 public:
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deposit().empty()) {
    deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deposit(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.Transfer)
}

inline void Transfer::SharedCtor() {
deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deposit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deposit_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes deposit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deposit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deposit = 1;
  if (!this->_internal_deposit().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_deposit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes deposit = 1;
  if (!this->_internal_deposit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deposit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transfer::GetClassData() const { return &_class_data_; }

void Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transfer *>(to)->MergeFrom(
      static_cast<const Transfer &>(from));
}


void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deposit().empty()) {
    _internal_set_deposit(from._internal_deposit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deposit_, lhs_arena,
      &other->deposit_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[7]);
}

// ===================================================================

class Stake::_Internal {
 public:
  static const ::TW::NEAR::Proto::PublicKey& public_key(const Stake* msg);
};

const ::TW::NEAR::Proto::PublicKey&
Stake::_Internal::public_key(const Stake* msg) {
  return *msg->public_key_;
}
Stake::Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.Stake)
}
Stake::Stake(const Stake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stake().empty()) {
    stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_public_key()) {
    public_key_ = new ::TW::NEAR::Proto::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.Stake)
}

inline void Stake::SharedCtor() {
stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_ = nullptr;
}

Stake::~Stake() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.Stake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Stake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_key_;
}

void Stake::ArenaDtor(void* object) {
  Stake* _this = reinterpret_cast< Stake* >(object);
  (void)_this;
}
void Stake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.Stake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stake_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes stake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.PublicKey public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.Stake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes stake = 1;
  if (!this->_internal_stake().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_stake(), target);
  }

  // .TW.NEAR.Proto.PublicKey public_key = 2;
  if (this->_internal_has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::public_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.Stake)
  return target;
}

size_t Stake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.Stake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes stake = 1;
  if (!this->_internal_stake().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stake());
  }

  // .TW.NEAR.Proto.PublicKey public_key = 2;
  if (this->_internal_has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stake::GetClassData() const { return &_class_data_; }

void Stake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stake *>(to)->MergeFrom(
      static_cast<const Stake &>(from));
}


void Stake::MergeFrom(const Stake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.Stake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stake().empty()) {
    _internal_set_stake(from._internal_stake());
  }
  if (from._internal_has_public_key()) {
    _internal_mutable_public_key()->::TW::NEAR::Proto::PublicKey::MergeFrom(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stake::CopyFrom(const Stake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.Stake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stake::IsInitialized() const {
  return true;
}

void Stake::InternalSwap(Stake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stake_, lhs_arena,
      &other->stake_, rhs_arena
  );
  swap(public_key_, other->public_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[8]);
}

// ===================================================================

class AddKey::_Internal {
 public:
  static const ::TW::NEAR::Proto::PublicKey& public_key(const AddKey* msg);
  static const ::TW::NEAR::Proto::AccessKey& access_key(const AddKey* msg);
};

const ::TW::NEAR::Proto::PublicKey&
AddKey::_Internal::public_key(const AddKey* msg) {
  return *msg->public_key_;
}
const ::TW::NEAR::Proto::AccessKey&
AddKey::_Internal::access_key(const AddKey* msg) {
  return *msg->access_key_;
}
AddKey::AddKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.AddKey)
}
AddKey::AddKey(const AddKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new ::TW::NEAR::Proto::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from._internal_has_access_key()) {
    access_key_ = new ::TW::NEAR::Proto::AccessKey(*from.access_key_);
  } else {
    access_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.AddKey)
}

inline void AddKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&access_key_) -
    reinterpret_cast<char*>(&public_key_)) + sizeof(access_key_));
}

AddKey::~AddKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.AddKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete access_key_;
}

void AddKey::ArenaDtor(void* object) {
  AddKey* _this = reinterpret_cast< AddKey* >(object);
  (void)_this;
}
void AddKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.AddKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && access_key_ != nullptr) {
    delete access_key_;
  }
  access_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.NEAR.Proto.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.AccessKey access_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_access_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.AddKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->_internal_has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // .TW.NEAR.Proto.AccessKey access_key = 2;
  if (this->_internal_has_access_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::access_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.AddKey)
  return target;
}

size_t AddKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.AddKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->_internal_has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .TW.NEAR.Proto.AccessKey access_key = 2;
  if (this->_internal_has_access_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *access_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddKey::GetClassData() const { return &_class_data_; }

void AddKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddKey *>(to)->MergeFrom(
      static_cast<const AddKey &>(from));
}


void AddKey::MergeFrom(const AddKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.AddKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_public_key()) {
    _internal_mutable_public_key()->::TW::NEAR::Proto::PublicKey::MergeFrom(from._internal_public_key());
  }
  if (from._internal_has_access_key()) {
    _internal_mutable_access_key()->::TW::NEAR::Proto::AccessKey::MergeFrom(from._internal_access_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddKey::CopyFrom(const AddKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.AddKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddKey::IsInitialized() const {
  return true;
}

void AddKey::InternalSwap(AddKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddKey, access_key_)
      + sizeof(AddKey::access_key_)
      - PROTOBUF_FIELD_OFFSET(AddKey, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[9]);
}

// ===================================================================

class DeleteKey::_Internal {
 public:
  static const ::TW::NEAR::Proto::PublicKey& public_key(const DeleteKey* msg);
};

const ::TW::NEAR::Proto::PublicKey&
DeleteKey::_Internal::public_key(const DeleteKey* msg) {
  return *msg->public_key_;
}
DeleteKey::DeleteKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.DeleteKey)
}
DeleteKey::DeleteKey(const DeleteKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new ::TW::NEAR::Proto::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.DeleteKey)
}

inline void DeleteKey::SharedCtor() {
public_key_ = nullptr;
}

DeleteKey::~DeleteKey() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.DeleteKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
}

void DeleteKey::ArenaDtor(void* object) {
  DeleteKey* _this = reinterpret_cast< DeleteKey* >(object);
  (void)_this;
}
void DeleteKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.DeleteKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.NEAR.Proto.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.DeleteKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->_internal_has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.DeleteKey)
  return target;
}

size_t DeleteKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.DeleteKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.NEAR.Proto.PublicKey public_key = 1;
  if (this->_internal_has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteKey::GetClassData() const { return &_class_data_; }

void DeleteKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteKey *>(to)->MergeFrom(
      static_cast<const DeleteKey &>(from));
}


void DeleteKey::MergeFrom(const DeleteKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.DeleteKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_public_key()) {
    _internal_mutable_public_key()->::TW::NEAR::Proto::PublicKey::MergeFrom(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteKey::CopyFrom(const DeleteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.DeleteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKey::IsInitialized() const {
  return true;
}

void DeleteKey::InternalSwap(DeleteKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(public_key_, other->public_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[10]);
}

// ===================================================================

class DeleteAccount::_Internal {
 public:
};

DeleteAccount::DeleteAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.DeleteAccount)
}
DeleteAccount::DeleteAccount(const DeleteAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beneficiary_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    beneficiary_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_beneficiary_id().empty()) {
    beneficiary_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_beneficiary_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.DeleteAccount)
}

inline void DeleteAccount::SharedCtor() {
beneficiary_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  beneficiary_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteAccount::~DeleteAccount() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.DeleteAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  beneficiary_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAccount::ArenaDtor(void* object) {
  DeleteAccount* _this = reinterpret_cast< DeleteAccount* >(object);
  (void)_this;
}
void DeleteAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.DeleteAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beneficiary_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string beneficiary_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_beneficiary_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.DeleteAccount.beneficiary_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.DeleteAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string beneficiary_id = 1;
  if (!this->_internal_beneficiary_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_beneficiary_id().data(), static_cast<int>(this->_internal_beneficiary_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.DeleteAccount.beneficiary_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_beneficiary_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.DeleteAccount)
  return target;
}

size_t DeleteAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.DeleteAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string beneficiary_id = 1;
  if (!this->_internal_beneficiary_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_beneficiary_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAccount::GetClassData() const { return &_class_data_; }

void DeleteAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAccount *>(to)->MergeFrom(
      static_cast<const DeleteAccount &>(from));
}


void DeleteAccount::MergeFrom(const DeleteAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.DeleteAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_beneficiary_id().empty()) {
    _internal_set_beneficiary_id(from._internal_beneficiary_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAccount::CopyFrom(const DeleteAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.DeleteAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAccount::IsInitialized() const {
  return true;
}

void DeleteAccount::InternalSwap(DeleteAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &beneficiary_id_, lhs_arena,
      &other->beneficiary_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[11]);
}

// ===================================================================

class TokenTransfer::_Internal {
 public:
};

TokenTransfer::TokenTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.TokenTransfer)
}
TokenTransfer::TokenTransfer(const TokenTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_amount().empty()) {
    token_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_amount(), 
      GetArenaForAllocation());
  }
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_id(), 
      GetArenaForAllocation());
  }
  deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deposit().empty()) {
    deposit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deposit(), 
      GetArenaForAllocation());
  }
  gas_ = from.gas_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.TokenTransfer)
}

inline void TokenTransfer::SharedCtor() {
token_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deposit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deposit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_ = uint64_t{0u};
}

TokenTransfer::~TokenTransfer() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.TokenTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deposit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenTransfer::ArenaDtor(void* object) {
  TokenTransfer* _this = reinterpret_cast< TokenTransfer* >(object);
  (void)_this;
}
void TokenTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.TokenTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_amount_.ClearToEmpty();
  receiver_id_.ClearToEmpty();
  deposit_.ClearToEmpty();
  gas_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.TokenTransfer.token_amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.TokenTransfer.receiver_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes deposit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deposit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.TokenTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_amount = 1;
  if (!this->_internal_token_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_amount().data(), static_cast<int>(this->_internal_token_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.TokenTransfer.token_amount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_amount(), target);
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.TokenTransfer.receiver_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  // uint64 gas = 3;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gas(), target);
  }

  // bytes deposit = 4;
  if (!this->_internal_deposit().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_deposit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.TokenTransfer)
  return target;
}

size_t TokenTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.TokenTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_amount = 1;
  if (!this->_internal_token_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_amount());
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  // bytes deposit = 4;
  if (!this->_internal_deposit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deposit());
  }

  // uint64 gas = 3;
  if (this->_internal_gas() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenTransfer::GetClassData() const { return &_class_data_; }

void TokenTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenTransfer *>(to)->MergeFrom(
      static_cast<const TokenTransfer &>(from));
}


void TokenTransfer::MergeFrom(const TokenTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.TokenTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_amount().empty()) {
    _internal_set_token_amount(from._internal_token_amount());
  }
  if (!from._internal_receiver_id().empty()) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
  if (!from._internal_deposit().empty()) {
    _internal_set_deposit(from._internal_deposit());
  }
  if (from._internal_gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenTransfer::CopyFrom(const TokenTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.TokenTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenTransfer::IsInitialized() const {
  return true;
}

void TokenTransfer::InternalSwap(TokenTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_amount_, lhs_arena,
      &other->token_amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_id_, lhs_arena,
      &other->receiver_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deposit_, lhs_arena,
      &other->deposit_, rhs_arena
  );
  swap(gas_, other->gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[12]);
}

// ===================================================================

class Action::_Internal {
 public:
  static const ::TW::NEAR::Proto::CreateAccount& create_account(const Action* msg);
  static const ::TW::NEAR::Proto::DeployContract& deploy_contract(const Action* msg);
  static const ::TW::NEAR::Proto::FunctionCall& function_call(const Action* msg);
  static const ::TW::NEAR::Proto::Transfer& transfer(const Action* msg);
  static const ::TW::NEAR::Proto::Stake& stake(const Action* msg);
  static const ::TW::NEAR::Proto::AddKey& add_key(const Action* msg);
  static const ::TW::NEAR::Proto::DeleteKey& delete_key(const Action* msg);
  static const ::TW::NEAR::Proto::DeleteAccount& delete_account(const Action* msg);
  static const ::TW::NEAR::Proto::TokenTransfer& token_transfer(const Action* msg);
};

const ::TW::NEAR::Proto::CreateAccount&
Action::_Internal::create_account(const Action* msg) {
  return *msg->payload_.create_account_;
}
const ::TW::NEAR::Proto::DeployContract&
Action::_Internal::deploy_contract(const Action* msg) {
  return *msg->payload_.deploy_contract_;
}
const ::TW::NEAR::Proto::FunctionCall&
Action::_Internal::function_call(const Action* msg) {
  return *msg->payload_.function_call_;
}
const ::TW::NEAR::Proto::Transfer&
Action::_Internal::transfer(const Action* msg) {
  return *msg->payload_.transfer_;
}
const ::TW::NEAR::Proto::Stake&
Action::_Internal::stake(const Action* msg) {
  return *msg->payload_.stake_;
}
const ::TW::NEAR::Proto::AddKey&
Action::_Internal::add_key(const Action* msg) {
  return *msg->payload_.add_key_;
}
const ::TW::NEAR::Proto::DeleteKey&
Action::_Internal::delete_key(const Action* msg) {
  return *msg->payload_.delete_key_;
}
const ::TW::NEAR::Proto::DeleteAccount&
Action::_Internal::delete_account(const Action* msg) {
  return *msg->payload_.delete_account_;
}
const ::TW::NEAR::Proto::TokenTransfer&
Action::_Internal::token_transfer(const Action* msg) {
  return *msg->payload_.token_transfer_;
}
void Action::set_allocated_create_account(::TW::NEAR::Proto::CreateAccount* create_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::CreateAccount>::GetOwningArena(create_account);
    if (message_arena != submessage_arena) {
      create_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_account, submessage_arena);
    }
    set_has_create_account();
    payload_.create_account_ = create_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.create_account)
}
void Action::set_allocated_deploy_contract(::TW::NEAR::Proto::DeployContract* deploy_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (deploy_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::DeployContract>::GetOwningArena(deploy_contract);
    if (message_arena != submessage_arena) {
      deploy_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deploy_contract, submessage_arena);
    }
    set_has_deploy_contract();
    payload_.deploy_contract_ = deploy_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.deploy_contract)
}
void Action::set_allocated_function_call(::TW::NEAR::Proto::FunctionCall* function_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (function_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::FunctionCall>::GetOwningArena(function_call);
    if (message_arena != submessage_arena) {
      function_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_call, submessage_arena);
    }
    set_has_function_call();
    payload_.function_call_ = function_call;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.function_call)
}
void Action::set_allocated_transfer(::TW::NEAR::Proto::Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::Transfer>::GetOwningArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    payload_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.transfer)
}
void Action::set_allocated_stake(::TW::NEAR::Proto::Stake* stake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (stake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::Stake>::GetOwningArena(stake);
    if (message_arena != submessage_arena) {
      stake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stake, submessage_arena);
    }
    set_has_stake();
    payload_.stake_ = stake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.stake)
}
void Action::set_allocated_add_key(::TW::NEAR::Proto::AddKey* add_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (add_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::AddKey>::GetOwningArena(add_key);
    if (message_arena != submessage_arena) {
      add_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_key, submessage_arena);
    }
    set_has_add_key();
    payload_.add_key_ = add_key;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.add_key)
}
void Action::set_allocated_delete_key(::TW::NEAR::Proto::DeleteKey* delete_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::DeleteKey>::GetOwningArena(delete_key);
    if (message_arena != submessage_arena) {
      delete_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_key, submessage_arena);
    }
    set_has_delete_key();
    payload_.delete_key_ = delete_key;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.delete_key)
}
void Action::set_allocated_delete_account(::TW::NEAR::Proto::DeleteAccount* delete_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (delete_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::DeleteAccount>::GetOwningArena(delete_account);
    if (message_arena != submessage_arena) {
      delete_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_account, submessage_arena);
    }
    set_has_delete_account();
    payload_.delete_account_ = delete_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.delete_account)
}
void Action::set_allocated_token_transfer(::TW::NEAR::Proto::TokenTransfer* token_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (token_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::NEAR::Proto::TokenTransfer>::GetOwningArena(token_transfer);
    if (message_arena != submessage_arena) {
      token_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_transfer, submessage_arena);
    }
    set_has_token_transfer();
    payload_.token_transfer_ = token_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.NEAR.Proto.Action.token_transfer)
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kCreateAccount: {
      _internal_mutable_create_account()->::TW::NEAR::Proto::CreateAccount::MergeFrom(from._internal_create_account());
      break;
    }
    case kDeployContract: {
      _internal_mutable_deploy_contract()->::TW::NEAR::Proto::DeployContract::MergeFrom(from._internal_deploy_contract());
      break;
    }
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCall::MergeFrom(from._internal_function_call());
      break;
    }
    case kTransfer: {
      _internal_mutable_transfer()->::TW::NEAR::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kStake: {
      _internal_mutable_stake()->::TW::NEAR::Proto::Stake::MergeFrom(from._internal_stake());
      break;
    }
    case kAddKey: {
      _internal_mutable_add_key()->::TW::NEAR::Proto::AddKey::MergeFrom(from._internal_add_key());
      break;
    }
    case kDeleteKey: {
      _internal_mutable_delete_key()->::TW::NEAR::Proto::DeleteKey::MergeFrom(from._internal_delete_key());
      break;
    }
    case kDeleteAccount: {
      _internal_mutable_delete_account()->::TW::NEAR::Proto::DeleteAccount::MergeFrom(from._internal_delete_account());
      break;
    }
    case kTokenTransfer: {
      _internal_mutable_token_transfer()->::TW::NEAR::Proto::TokenTransfer::MergeFrom(from._internal_token_transfer());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.Action)
}

inline void Action::SharedCtor() {
clear_has_payload();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:TW.NEAR.Proto.Action)
  switch (payload_case()) {
    case kCreateAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.create_account_;
      }
      break;
    }
    case kDeployContract: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.deploy_contract_;
      }
      break;
    }
    case kFunctionCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.function_call_;
      }
      break;
    }
    case kTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.transfer_;
      }
      break;
    }
    case kStake: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.stake_;
      }
      break;
    }
    case kAddKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.add_key_;
      }
      break;
    }
    case kDeleteKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_key_;
      }
      break;
    }
    case kDeleteAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.delete_account_;
      }
      break;
    }
    case kTokenTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.token_transfer_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.NEAR.Proto.CreateAccount create_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.DeployContract deploy_contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deploy_contract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.FunctionCall function_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.Transfer transfer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.Stake stake = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.AddKey add_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.DeleteKey delete_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.DeleteAccount delete_account = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.NEAR.Proto.TokenTransfer token_transfer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.NEAR.Proto.CreateAccount create_account = 1;
  if (_internal_has_create_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::create_account(this), target, stream);
  }

  // .TW.NEAR.Proto.DeployContract deploy_contract = 2;
  if (_internal_has_deploy_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deploy_contract(this), target, stream);
  }

  // .TW.NEAR.Proto.FunctionCall function_call = 3;
  if (_internal_has_function_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::function_call(this), target, stream);
  }

  // .TW.NEAR.Proto.Transfer transfer = 4;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transfer(this), target, stream);
  }

  // .TW.NEAR.Proto.Stake stake = 5;
  if (_internal_has_stake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stake(this), target, stream);
  }

  // .TW.NEAR.Proto.AddKey add_key = 6;
  if (_internal_has_add_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::add_key(this), target, stream);
  }

  // .TW.NEAR.Proto.DeleteKey delete_key = 7;
  if (_internal_has_delete_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::delete_key(this), target, stream);
  }

  // .TW.NEAR.Proto.DeleteAccount delete_account = 8;
  if (_internal_has_delete_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::delete_account(this), target, stream);
  }

  // .TW.NEAR.Proto.TokenTransfer token_transfer = 13;
  if (_internal_has_token_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::token_transfer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .TW.NEAR.Proto.CreateAccount create_account = 1;
    case kCreateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_account_);
      break;
    }
    // .TW.NEAR.Proto.DeployContract deploy_contract = 2;
    case kDeployContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.deploy_contract_);
      break;
    }
    // .TW.NEAR.Proto.FunctionCall function_call = 3;
    case kFunctionCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.function_call_);
      break;
    }
    // .TW.NEAR.Proto.Transfer transfer = 4;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.transfer_);
      break;
    }
    // .TW.NEAR.Proto.Stake stake = 5;
    case kStake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.stake_);
      break;
    }
    // .TW.NEAR.Proto.AddKey add_key = 6;
    case kAddKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.add_key_);
      break;
    }
    // .TW.NEAR.Proto.DeleteKey delete_key = 7;
    case kDeleteKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_key_);
      break;
    }
    // .TW.NEAR.Proto.DeleteAccount delete_account = 8;
    case kDeleteAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delete_account_);
      break;
    }
    // .TW.NEAR.Proto.TokenTransfer token_transfer = 13;
    case kTokenTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.token_transfer_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kCreateAccount: {
      _internal_mutable_create_account()->::TW::NEAR::Proto::CreateAccount::MergeFrom(from._internal_create_account());
      break;
    }
    case kDeployContract: {
      _internal_mutable_deploy_contract()->::TW::NEAR::Proto::DeployContract::MergeFrom(from._internal_deploy_contract());
      break;
    }
    case kFunctionCall: {
      _internal_mutable_function_call()->::TW::NEAR::Proto::FunctionCall::MergeFrom(from._internal_function_call());
      break;
    }
    case kTransfer: {
      _internal_mutable_transfer()->::TW::NEAR::Proto::Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kStake: {
      _internal_mutable_stake()->::TW::NEAR::Proto::Stake::MergeFrom(from._internal_stake());
      break;
    }
    case kAddKey: {
      _internal_mutable_add_key()->::TW::NEAR::Proto::AddKey::MergeFrom(from._internal_add_key());
      break;
    }
    case kDeleteKey: {
      _internal_mutable_delete_key()->::TW::NEAR::Proto::DeleteKey::MergeFrom(from._internal_delete_key());
      break;
    }
    case kDeleteAccount: {
      _internal_mutable_delete_account()->::TW::NEAR::Proto::DeleteAccount::MergeFrom(from._internal_delete_account());
      break;
    }
    case kTokenTransfer: {
      _internal_mutable_token_transfer()->::TW::NEAR::Proto::TokenTransfer::MergeFrom(from._internal_token_transfer());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[13]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
};

SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer_id().empty()) {
    signer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signer_id(), 
      GetArenaForAllocation());
  }
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_id(), 
      GetArenaForAllocation());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArenaForAllocation());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nonce_ = uint64_t{0u};
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  signer_id_.ClearToEmpty();
  receiver_id_.ClearToEmpty();
  block_hash_.ClearToEmpty();
  private_key_.ClearToEmpty();
  public_key_.ClearToEmpty();
  nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string signer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.SigningInput.signer_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.SigningInput.receiver_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.NEAR.Proto.Action actions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string signer_id = 1;
  if (!this->_internal_signer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signer_id().data(), static_cast<int>(this->_internal_signer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.SigningInput.signer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signer_id(), target);
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // string receiver_id = 3;
  if (!this->_internal_receiver_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.SigningInput.receiver_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiver_id(), target);
  }

  // bytes block_hash = 4;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block_hash(), target);
  }

  // repeated .TW.NEAR.Proto.Action actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_actions(i), target, stream);
  }

  // bytes private_key = 6;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_private_key(), target);
  }

  // bytes public_key = 7;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.NEAR.Proto.Action actions = 5;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string signer_id = 1;
  if (!this->_internal_signer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signer_id());
  }

  // string receiver_id = 3;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  // bytes block_hash = 4;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes private_key = 6;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // bytes public_key = 7;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (!from._internal_signer_id().empty()) {
    _internal_set_signer_id(from._internal_signer_id());
  }
  if (!from._internal_receiver_id().empty()) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
  if (!from._internal_block_hash().empty()) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signer_id_, lhs_arena,
      &other->signer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_id_, lhs_arena,
      &other->receiver_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_hash_, lhs_arena,
      &other->block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[14]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.NEAR.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signed_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signed_transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signed_transaction().empty()) {
    signed_transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signed_transaction(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.NEAR.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
signed_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signed_transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.NEAR.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signed_transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.NEAR.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signed_transaction_.ClearToEmpty();
  error_message_.ClearToEmpty();
  hash_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signed_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signed_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.NEAR.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.NEAR.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signed_transaction = 1;
  if (!this->_internal_signed_transaction().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signed_transaction(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.NEAR.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.NEAR.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.NEAR.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signed_transaction = 1;
  if (!this->_internal_signed_transaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signed_transaction());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.NEAR.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signed_transaction().empty()) {
    _internal_set_signed_transaction(from._internal_signed_transaction());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.NEAR.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signed_transaction_, lhs_arena,
      &other->signed_transaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NEAR_2eproto_getter, &descriptor_table_NEAR_2eproto_once,
      file_level_metadata_NEAR_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace NEAR
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::PublicKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::PublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::FunctionCallPermission* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::FunctionCallPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::FunctionCallPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::FullAccessPermission* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::FullAccessPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::FullAccessPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::AccessKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::AccessKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::AccessKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::CreateAccount* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::CreateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::CreateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::DeployContract* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::DeployContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::DeployContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::FunctionCall* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::FunctionCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::FunctionCall >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::Transfer* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::Stake* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::Stake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::Stake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::AddKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::AddKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::AddKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::DeleteKey* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::DeleteKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::DeleteKey >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::DeleteAccount* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::DeleteAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::DeleteAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::TokenTransfer* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::TokenTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::TokenTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::Action* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::NEAR::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::NEAR::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::NEAR::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
