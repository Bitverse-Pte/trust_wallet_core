// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Solana.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Solana_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Solana_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Solana_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Solana_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Solana_2eproto;
namespace TW {
namespace Solana {
namespace Proto {
class AdvanceNonceAccount;
struct AdvanceNonceAccountDefaultTypeInternal;
extern AdvanceNonceAccountDefaultTypeInternal _AdvanceNonceAccount_default_instance_;
class CreateAndTransferToken;
struct CreateAndTransferTokenDefaultTypeInternal;
extern CreateAndTransferTokenDefaultTypeInternal _CreateAndTransferToken_default_instance_;
class CreateNonceAccount;
struct CreateNonceAccountDefaultTypeInternal;
extern CreateNonceAccountDefaultTypeInternal _CreateNonceAccount_default_instance_;
class CreateTokenAccount;
struct CreateTokenAccountDefaultTypeInternal;
extern CreateTokenAccountDefaultTypeInternal _CreateTokenAccount_default_instance_;
class DeactivateAllStake;
struct DeactivateAllStakeDefaultTypeInternal;
extern DeactivateAllStakeDefaultTypeInternal _DeactivateAllStake_default_instance_;
class DeactivateStake;
struct DeactivateStakeDefaultTypeInternal;
extern DeactivateStakeDefaultTypeInternal _DeactivateStake_default_instance_;
class DelegateStake;
struct DelegateStakeDefaultTypeInternal;
extern DelegateStakeDefaultTypeInternal _DelegateStake_default_instance_;
class PreSigningOutput;
struct PreSigningOutputDefaultTypeInternal;
extern PreSigningOutputDefaultTypeInternal _PreSigningOutput_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class StakeAccountValue;
struct StakeAccountValueDefaultTypeInternal;
extern StakeAccountValueDefaultTypeInternal _StakeAccountValue_default_instance_;
class TokenTransfer;
struct TokenTransferDefaultTypeInternal;
extern TokenTransferDefaultTypeInternal _TokenTransfer_default_instance_;
class Transfer;
struct TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
class WithdrawAllStake;
struct WithdrawAllStakeDefaultTypeInternal;
extern WithdrawAllStakeDefaultTypeInternal _WithdrawAllStake_default_instance_;
class WithdrawNonceAccount;
struct WithdrawNonceAccountDefaultTypeInternal;
extern WithdrawNonceAccountDefaultTypeInternal _WithdrawNonceAccount_default_instance_;
class WithdrawStake;
struct WithdrawStakeDefaultTypeInternal;
extern WithdrawStakeDefaultTypeInternal _WithdrawStake_default_instance_;
}  // namespace Proto
}  // namespace Solana
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Solana::Proto::AdvanceNonceAccount* Arena::CreateMaybeMessage<::TW::Solana::Proto::AdvanceNonceAccount>(Arena*);
template<> ::TW::Solana::Proto::CreateAndTransferToken* Arena::CreateMaybeMessage<::TW::Solana::Proto::CreateAndTransferToken>(Arena*);
template<> ::TW::Solana::Proto::CreateNonceAccount* Arena::CreateMaybeMessage<::TW::Solana::Proto::CreateNonceAccount>(Arena*);
template<> ::TW::Solana::Proto::CreateTokenAccount* Arena::CreateMaybeMessage<::TW::Solana::Proto::CreateTokenAccount>(Arena*);
template<> ::TW::Solana::Proto::DeactivateAllStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::DeactivateAllStake>(Arena*);
template<> ::TW::Solana::Proto::DeactivateStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::DeactivateStake>(Arena*);
template<> ::TW::Solana::Proto::DelegateStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::DelegateStake>(Arena*);
template<> ::TW::Solana::Proto::PreSigningOutput* Arena::CreateMaybeMessage<::TW::Solana::Proto::PreSigningOutput>(Arena*);
template<> ::TW::Solana::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Solana::Proto::SigningInput>(Arena*);
template<> ::TW::Solana::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Solana::Proto::SigningOutput>(Arena*);
template<> ::TW::Solana::Proto::StakeAccountValue* Arena::CreateMaybeMessage<::TW::Solana::Proto::StakeAccountValue>(Arena*);
template<> ::TW::Solana::Proto::TokenTransfer* Arena::CreateMaybeMessage<::TW::Solana::Proto::TokenTransfer>(Arena*);
template<> ::TW::Solana::Proto::Transfer* Arena::CreateMaybeMessage<::TW::Solana::Proto::Transfer>(Arena*);
template<> ::TW::Solana::Proto::WithdrawAllStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::WithdrawAllStake>(Arena*);
template<> ::TW::Solana::Proto::WithdrawNonceAccount* Arena::CreateMaybeMessage<::TW::Solana::Proto::WithdrawNonceAccount>(Arena*);
template<> ::TW::Solana::Proto::WithdrawStake* Arena::CreateMaybeMessage<::TW::Solana::Proto::WithdrawStake>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Solana {
namespace Proto {

// ===================================================================

class Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  ~Transfer() override;
  explicit constexpr Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 4,
    kRecipientFieldNumber = 1,
    kMemoFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // repeated string references = 4;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const char* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // string recipient = 1;
  void clear_recipient();
  const std::string& recipient() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // string memo = 3;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // uint64 value = 2;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class DelegateStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.DelegateStake) */ {
 public:
  inline DelegateStake() : DelegateStake(nullptr) {}
  ~DelegateStake() override;
  explicit constexpr DelegateStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelegateStake(const DelegateStake& from);
  DelegateStake(DelegateStake&& from) noexcept
    : DelegateStake() {
    *this = ::std::move(from);
  }

  inline DelegateStake& operator=(const DelegateStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateStake& operator=(DelegateStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelegateStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelegateStake* internal_default_instance() {
    return reinterpret_cast<const DelegateStake*>(
               &_DelegateStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DelegateStake& a, DelegateStake& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelegateStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelegateStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelegateStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelegateStake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.DelegateStake";
  }
  protected:
  explicit DelegateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorPubkeyFieldNumber = 1,
    kStakeAccountFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string validator_pubkey = 1;
  void clear_validator_pubkey();
  const std::string& validator_pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_pubkey();
  PROTOBUF_NODISCARD std::string* release_validator_pubkey();
  void set_allocated_validator_pubkey(std::string* validator_pubkey);
  private:
  const std::string& _internal_validator_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_pubkey(const std::string& value);
  std::string* _internal_mutable_validator_pubkey();
  public:

  // string stake_account = 3;
  void clear_stake_account();
  const std::string& stake_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stake_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stake_account();
  PROTOBUF_NODISCARD std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // uint64 value = 2;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.DelegateStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class DeactivateStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.DeactivateStake) */ {
 public:
  inline DeactivateStake() : DeactivateStake(nullptr) {}
  ~DeactivateStake() override;
  explicit constexpr DeactivateStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeactivateStake(const DeactivateStake& from);
  DeactivateStake(DeactivateStake&& from) noexcept
    : DeactivateStake() {
    *this = ::std::move(from);
  }

  inline DeactivateStake& operator=(const DeactivateStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeactivateStake& operator=(DeactivateStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeactivateStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeactivateStake* internal_default_instance() {
    return reinterpret_cast<const DeactivateStake*>(
               &_DeactivateStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeactivateStake& a, DeactivateStake& b) {
    a.Swap(&b);
  }
  inline void Swap(DeactivateStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeactivateStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeactivateStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeactivateStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeactivateStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeactivateStake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeactivateStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.DeactivateStake";
  }
  protected:
  explicit DeactivateStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountFieldNumber = 1,
  };
  // string stake_account = 1;
  void clear_stake_account();
  const std::string& stake_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stake_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stake_account();
  PROTOBUF_NODISCARD std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.DeactivateStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class DeactivateAllStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.DeactivateAllStake) */ {
 public:
  inline DeactivateAllStake() : DeactivateAllStake(nullptr) {}
  ~DeactivateAllStake() override;
  explicit constexpr DeactivateAllStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeactivateAllStake(const DeactivateAllStake& from);
  DeactivateAllStake(DeactivateAllStake&& from) noexcept
    : DeactivateAllStake() {
    *this = ::std::move(from);
  }

  inline DeactivateAllStake& operator=(const DeactivateAllStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeactivateAllStake& operator=(DeactivateAllStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeactivateAllStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeactivateAllStake* internal_default_instance() {
    return reinterpret_cast<const DeactivateAllStake*>(
               &_DeactivateAllStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeactivateAllStake& a, DeactivateAllStake& b) {
    a.Swap(&b);
  }
  inline void Swap(DeactivateAllStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeactivateAllStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeactivateAllStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeactivateAllStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeactivateAllStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeactivateAllStake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeactivateAllStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.DeactivateAllStake";
  }
  protected:
  explicit DeactivateAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountsFieldNumber = 1,
  };
  // repeated string stake_accounts = 1;
  int stake_accounts_size() const;
  private:
  int _internal_stake_accounts_size() const;
  public:
  void clear_stake_accounts();
  const std::string& stake_accounts(int index) const;
  std::string* mutable_stake_accounts(int index);
  void set_stake_accounts(int index, const std::string& value);
  void set_stake_accounts(int index, std::string&& value);
  void set_stake_accounts(int index, const char* value);
  void set_stake_accounts(int index, const char* value, size_t size);
  std::string* add_stake_accounts();
  void add_stake_accounts(const std::string& value);
  void add_stake_accounts(std::string&& value);
  void add_stake_accounts(const char* value);
  void add_stake_accounts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stake_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stake_accounts();
  private:
  const std::string& _internal_stake_accounts(int index) const;
  std::string* _internal_add_stake_accounts();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.DeactivateAllStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stake_accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class WithdrawStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.WithdrawStake) */ {
 public:
  inline WithdrawStake() : WithdrawStake(nullptr) {}
  ~WithdrawStake() override;
  explicit constexpr WithdrawStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WithdrawStake(const WithdrawStake& from);
  WithdrawStake(WithdrawStake&& from) noexcept
    : WithdrawStake() {
    *this = ::std::move(from);
  }

  inline WithdrawStake& operator=(const WithdrawStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawStake& operator=(WithdrawStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WithdrawStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const WithdrawStake* internal_default_instance() {
    return reinterpret_cast<const WithdrawStake*>(
               &_WithdrawStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WithdrawStake& a, WithdrawStake& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WithdrawStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WithdrawStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WithdrawStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WithdrawStake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.WithdrawStake";
  }
  protected:
  explicit WithdrawStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string stake_account = 1;
  void clear_stake_account();
  const std::string& stake_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stake_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stake_account();
  PROTOBUF_NODISCARD std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // uint64 value = 2;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.WithdrawStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class StakeAccountValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.StakeAccountValue) */ {
 public:
  inline StakeAccountValue() : StakeAccountValue(nullptr) {}
  ~StakeAccountValue() override;
  explicit constexpr StakeAccountValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StakeAccountValue(const StakeAccountValue& from);
  StakeAccountValue(StakeAccountValue&& from) noexcept
    : StakeAccountValue() {
    *this = ::std::move(from);
  }

  inline StakeAccountValue& operator=(const StakeAccountValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeAccountValue& operator=(StakeAccountValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StakeAccountValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StakeAccountValue* internal_default_instance() {
    return reinterpret_cast<const StakeAccountValue*>(
               &_StakeAccountValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StakeAccountValue& a, StakeAccountValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeAccountValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeAccountValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StakeAccountValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StakeAccountValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StakeAccountValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StakeAccountValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeAccountValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.StakeAccountValue";
  }
  protected:
  explicit StakeAccountValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string stake_account = 1;
  void clear_stake_account();
  const std::string& stake_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stake_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stake_account();
  PROTOBUF_NODISCARD std::string* release_stake_account();
  void set_allocated_stake_account(std::string* stake_account);
  private:
  const std::string& _internal_stake_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stake_account(const std::string& value);
  std::string* _internal_mutable_stake_account();
  public:

  // uint64 value = 2;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.StakeAccountValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stake_account_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class WithdrawAllStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.WithdrawAllStake) */ {
 public:
  inline WithdrawAllStake() : WithdrawAllStake(nullptr) {}
  ~WithdrawAllStake() override;
  explicit constexpr WithdrawAllStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WithdrawAllStake(const WithdrawAllStake& from);
  WithdrawAllStake(WithdrawAllStake&& from) noexcept
    : WithdrawAllStake() {
    *this = ::std::move(from);
  }

  inline WithdrawAllStake& operator=(const WithdrawAllStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawAllStake& operator=(WithdrawAllStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WithdrawAllStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const WithdrawAllStake* internal_default_instance() {
    return reinterpret_cast<const WithdrawAllStake*>(
               &_WithdrawAllStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WithdrawAllStake& a, WithdrawAllStake& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawAllStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawAllStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WithdrawAllStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WithdrawAllStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WithdrawAllStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WithdrawAllStake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawAllStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.WithdrawAllStake";
  }
  protected:
  explicit WithdrawAllStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakeAccountsFieldNumber = 1,
  };
  // repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
  int stake_accounts_size() const;
  private:
  int _internal_stake_accounts_size() const;
  public:
  void clear_stake_accounts();
  ::TW::Solana::Proto::StakeAccountValue* mutable_stake_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >*
      mutable_stake_accounts();
  private:
  const ::TW::Solana::Proto::StakeAccountValue& _internal_stake_accounts(int index) const;
  ::TW::Solana::Proto::StakeAccountValue* _internal_add_stake_accounts();
  public:
  const ::TW::Solana::Proto::StakeAccountValue& stake_accounts(int index) const;
  ::TW::Solana::Proto::StakeAccountValue* add_stake_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >&
      stake_accounts() const;

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.WithdrawAllStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue > stake_accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class CreateTokenAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.CreateTokenAccount) */ {
 public:
  inline CreateTokenAccount() : CreateTokenAccount(nullptr) {}
  ~CreateTokenAccount() override;
  explicit constexpr CreateTokenAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTokenAccount(const CreateTokenAccount& from);
  CreateTokenAccount(CreateTokenAccount&& from) noexcept
    : CreateTokenAccount() {
    *this = ::std::move(from);
  }

  inline CreateTokenAccount& operator=(const CreateTokenAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTokenAccount& operator=(CreateTokenAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTokenAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTokenAccount* internal_default_instance() {
    return reinterpret_cast<const CreateTokenAccount*>(
               &_CreateTokenAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateTokenAccount& a, CreateTokenAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTokenAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTokenAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTokenAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTokenAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTokenAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTokenAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTokenAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.CreateTokenAccount";
  }
  protected:
  explicit CreateTokenAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainAddressFieldNumber = 1,
    kTokenMintAddressFieldNumber = 2,
    kTokenAddressFieldNumber = 3,
  };
  // string main_address = 1;
  void clear_main_address();
  const std::string& main_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_address();
  PROTOBUF_NODISCARD std::string* release_main_address();
  void set_allocated_main_address(std::string* main_address);
  private:
  const std::string& _internal_main_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_address(const std::string& value);
  std::string* _internal_mutable_main_address();
  public:

  // string token_mint_address = 2;
  void clear_token_mint_address();
  const std::string& token_mint_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_mint_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_mint_address();
  PROTOBUF_NODISCARD std::string* release_token_mint_address();
  void set_allocated_token_mint_address(std::string* token_mint_address);
  private:
  const std::string& _internal_token_mint_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_mint_address(const std::string& value);
  std::string* _internal_mutable_token_mint_address();
  public:

  // string token_address = 3;
  void clear_token_address();
  const std::string& token_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_address();
  PROTOBUF_NODISCARD std::string* release_token_address();
  void set_allocated_token_address(std::string* token_address);
  private:
  const std::string& _internal_token_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_address(const std::string& value);
  std::string* _internal_mutable_token_address();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.CreateTokenAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_mint_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class TokenTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.TokenTransfer) */ {
 public:
  inline TokenTransfer() : TokenTransfer(nullptr) {}
  ~TokenTransfer() override;
  explicit constexpr TokenTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenTransfer(const TokenTransfer& from);
  TokenTransfer(TokenTransfer&& from) noexcept
    : TokenTransfer() {
    *this = ::std::move(from);
  }

  inline TokenTransfer& operator=(const TokenTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenTransfer& operator=(TokenTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenTransfer* internal_default_instance() {
    return reinterpret_cast<const TokenTransfer*>(
               &_TokenTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TokenTransfer& a, TokenTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TokenTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.TokenTransfer";
  }
  protected:
  explicit TokenTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 7,
    kTokenMintAddressFieldNumber = 1,
    kSenderTokenAddressFieldNumber = 2,
    kRecipientTokenAddressFieldNumber = 3,
    kMemoFieldNumber = 6,
    kAmountFieldNumber = 4,
    kDecimalsFieldNumber = 5,
  };
  // repeated string references = 7;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const char* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // string token_mint_address = 1;
  void clear_token_mint_address();
  const std::string& token_mint_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_mint_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_mint_address();
  PROTOBUF_NODISCARD std::string* release_token_mint_address();
  void set_allocated_token_mint_address(std::string* token_mint_address);
  private:
  const std::string& _internal_token_mint_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_mint_address(const std::string& value);
  std::string* _internal_mutable_token_mint_address();
  public:

  // string sender_token_address = 2;
  void clear_sender_token_address();
  const std::string& sender_token_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_token_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_token_address();
  PROTOBUF_NODISCARD std::string* release_sender_token_address();
  void set_allocated_sender_token_address(std::string* sender_token_address);
  private:
  const std::string& _internal_sender_token_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_token_address(const std::string& value);
  std::string* _internal_mutable_sender_token_address();
  public:

  // string recipient_token_address = 3;
  void clear_recipient_token_address();
  const std::string& recipient_token_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient_token_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient_token_address();
  PROTOBUF_NODISCARD std::string* release_recipient_token_address();
  void set_allocated_recipient_token_address(std::string* recipient_token_address);
  private:
  const std::string& _internal_recipient_token_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_token_address(const std::string& value);
  std::string* _internal_mutable_recipient_token_address();
  public:

  // string memo = 6;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // uint64 amount = 4;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // uint32 decimals = 5;
  void clear_decimals();
  uint32_t decimals() const;
  void set_decimals(uint32_t value);
  private:
  uint32_t _internal_decimals() const;
  void _internal_set_decimals(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.TokenTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_mint_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  uint64_t amount_;
  uint32_t decimals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class CreateAndTransferToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.CreateAndTransferToken) */ {
 public:
  inline CreateAndTransferToken() : CreateAndTransferToken(nullptr) {}
  ~CreateAndTransferToken() override;
  explicit constexpr CreateAndTransferToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAndTransferToken(const CreateAndTransferToken& from);
  CreateAndTransferToken(CreateAndTransferToken&& from) noexcept
    : CreateAndTransferToken() {
    *this = ::std::move(from);
  }

  inline CreateAndTransferToken& operator=(const CreateAndTransferToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAndTransferToken& operator=(CreateAndTransferToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAndTransferToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAndTransferToken* internal_default_instance() {
    return reinterpret_cast<const CreateAndTransferToken*>(
               &_CreateAndTransferToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateAndTransferToken& a, CreateAndTransferToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAndTransferToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAndTransferToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAndTransferToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAndTransferToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAndTransferToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAndTransferToken& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAndTransferToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.CreateAndTransferToken";
  }
  protected:
  explicit CreateAndTransferToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 8,
    kRecipientMainAddressFieldNumber = 1,
    kTokenMintAddressFieldNumber = 2,
    kRecipientTokenAddressFieldNumber = 3,
    kSenderTokenAddressFieldNumber = 4,
    kMemoFieldNumber = 7,
    kAmountFieldNumber = 5,
    kDecimalsFieldNumber = 6,
  };
  // repeated string references = 8;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const char* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // string recipient_main_address = 1;
  void clear_recipient_main_address();
  const std::string& recipient_main_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient_main_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient_main_address();
  PROTOBUF_NODISCARD std::string* release_recipient_main_address();
  void set_allocated_recipient_main_address(std::string* recipient_main_address);
  private:
  const std::string& _internal_recipient_main_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_main_address(const std::string& value);
  std::string* _internal_mutable_recipient_main_address();
  public:

  // string token_mint_address = 2;
  void clear_token_mint_address();
  const std::string& token_mint_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_mint_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_mint_address();
  PROTOBUF_NODISCARD std::string* release_token_mint_address();
  void set_allocated_token_mint_address(std::string* token_mint_address);
  private:
  const std::string& _internal_token_mint_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_mint_address(const std::string& value);
  std::string* _internal_mutable_token_mint_address();
  public:

  // string recipient_token_address = 3;
  void clear_recipient_token_address();
  const std::string& recipient_token_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient_token_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient_token_address();
  PROTOBUF_NODISCARD std::string* release_recipient_token_address();
  void set_allocated_recipient_token_address(std::string* recipient_token_address);
  private:
  const std::string& _internal_recipient_token_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_token_address(const std::string& value);
  std::string* _internal_mutable_recipient_token_address();
  public:

  // string sender_token_address = 4;
  void clear_sender_token_address();
  const std::string& sender_token_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_token_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_token_address();
  PROTOBUF_NODISCARD std::string* release_sender_token_address();
  void set_allocated_sender_token_address(std::string* sender_token_address);
  private:
  const std::string& _internal_sender_token_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_token_address(const std::string& value);
  std::string* _internal_mutable_sender_token_address();
  public:

  // string memo = 7;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // uint64 amount = 5;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // uint32 decimals = 6;
  void clear_decimals();
  uint32_t decimals() const;
  void set_decimals(uint32_t value);
  private:
  uint32_t _internal_decimals() const;
  void _internal_set_decimals(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.CreateAndTransferToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_main_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_mint_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  uint64_t amount_;
  uint32_t decimals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class CreateNonceAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.CreateNonceAccount) */ {
 public:
  inline CreateNonceAccount() : CreateNonceAccount(nullptr) {}
  ~CreateNonceAccount() override;
  explicit constexpr CreateNonceAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNonceAccount(const CreateNonceAccount& from);
  CreateNonceAccount(CreateNonceAccount&& from) noexcept
    : CreateNonceAccount() {
    *this = ::std::move(from);
  }

  inline CreateNonceAccount& operator=(const CreateNonceAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNonceAccount& operator=(CreateNonceAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNonceAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNonceAccount* internal_default_instance() {
    return reinterpret_cast<const CreateNonceAccount*>(
               &_CreateNonceAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateNonceAccount& a, CreateNonceAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNonceAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNonceAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNonceAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNonceAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNonceAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNonceAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNonceAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.CreateNonceAccount";
  }
  protected:
  explicit CreateNonceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceAccountFieldNumber = 1,
    kNonceAccountPrivateKeyFieldNumber = 3,
    kRentFieldNumber = 2,
  };
  // string nonce_account = 1;
  void clear_nonce_account();
  const std::string& nonce_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce_account();
  PROTOBUF_NODISCARD std::string* release_nonce_account();
  void set_allocated_nonce_account(std::string* nonce_account);
  private:
  const std::string& _internal_nonce_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce_account(const std::string& value);
  std::string* _internal_mutable_nonce_account();
  public:

  // bytes nonce_account_private_key = 3;
  void clear_nonce_account_private_key();
  const std::string& nonce_account_private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce_account_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce_account_private_key();
  PROTOBUF_NODISCARD std::string* release_nonce_account_private_key();
  void set_allocated_nonce_account_private_key(std::string* nonce_account_private_key);
  private:
  const std::string& _internal_nonce_account_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce_account_private_key(const std::string& value);
  std::string* _internal_mutable_nonce_account_private_key();
  public:

  // uint64 rent = 2;
  void clear_rent();
  uint64_t rent() const;
  void set_rent(uint64_t value);
  private:
  uint64_t _internal_rent() const;
  void _internal_set_rent(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.CreateNonceAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_account_private_key_;
  uint64_t rent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class WithdrawNonceAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.WithdrawNonceAccount) */ {
 public:
  inline WithdrawNonceAccount() : WithdrawNonceAccount(nullptr) {}
  ~WithdrawNonceAccount() override;
  explicit constexpr WithdrawNonceAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WithdrawNonceAccount(const WithdrawNonceAccount& from);
  WithdrawNonceAccount(WithdrawNonceAccount&& from) noexcept
    : WithdrawNonceAccount() {
    *this = ::std::move(from);
  }

  inline WithdrawNonceAccount& operator=(const WithdrawNonceAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawNonceAccount& operator=(WithdrawNonceAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WithdrawNonceAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const WithdrawNonceAccount* internal_default_instance() {
    return reinterpret_cast<const WithdrawNonceAccount*>(
               &_WithdrawNonceAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WithdrawNonceAccount& a, WithdrawNonceAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawNonceAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawNonceAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WithdrawNonceAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WithdrawNonceAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WithdrawNonceAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WithdrawNonceAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawNonceAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.WithdrawNonceAccount";
  }
  protected:
  explicit WithdrawNonceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceAccountFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string nonce_account = 1;
  void clear_nonce_account();
  const std::string& nonce_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce_account();
  PROTOBUF_NODISCARD std::string* release_nonce_account();
  void set_allocated_nonce_account(std::string* nonce_account);
  private:
  const std::string& _internal_nonce_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce_account(const std::string& value);
  std::string* _internal_mutable_nonce_account();
  public:

  // string recipient = 2;
  void clear_recipient();
  const std::string& recipient() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // uint64 value = 3;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.WithdrawNonceAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class AdvanceNonceAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.AdvanceNonceAccount) */ {
 public:
  inline AdvanceNonceAccount() : AdvanceNonceAccount(nullptr) {}
  ~AdvanceNonceAccount() override;
  explicit constexpr AdvanceNonceAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdvanceNonceAccount(const AdvanceNonceAccount& from);
  AdvanceNonceAccount(AdvanceNonceAccount&& from) noexcept
    : AdvanceNonceAccount() {
    *this = ::std::move(from);
  }

  inline AdvanceNonceAccount& operator=(const AdvanceNonceAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvanceNonceAccount& operator=(AdvanceNonceAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdvanceNonceAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdvanceNonceAccount* internal_default_instance() {
    return reinterpret_cast<const AdvanceNonceAccount*>(
               &_AdvanceNonceAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AdvanceNonceAccount& a, AdvanceNonceAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvanceNonceAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvanceNonceAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdvanceNonceAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdvanceNonceAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdvanceNonceAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AdvanceNonceAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvanceNonceAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.AdvanceNonceAccount";
  }
  protected:
  explicit AdvanceNonceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceAccountFieldNumber = 1,
  };
  // string nonce_account = 1;
  void clear_nonce_account();
  const std::string& nonce_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce_account();
  PROTOBUF_NODISCARD std::string* release_nonce_account();
  void set_allocated_nonce_account(std::string* nonce_account);
  private:
  const std::string& _internal_nonce_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce_account(const std::string& value);
  std::string* _internal_mutable_nonce_account();
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.AdvanceNonceAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum TransactionTypeCase {
    kTransferTransaction = 4,
    kDelegateStakeTransaction = 5,
    kDeactivateStakeTransaction = 6,
    kDeactivateAllStakeTransaction = 7,
    kWithdrawTransaction = 8,
    kWithdrawAllTransaction = 9,
    kCreateTokenAccountTransaction = 10,
    kTokenTransferTransaction = 11,
    kCreateAndTransferTokenTransaction = 12,
    kCreateNonceAccount = 13,
    kWithdrawNonceAccount = 16,
    kAdvanceNonceAccount = 19,
    TRANSACTION_TYPE_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kRecentBlockhashFieldNumber = 2,
    kSenderFieldNumber = 14,
    kNonceAccountFieldNumber = 15,
    kFeePayerPrivateKeyFieldNumber = 17,
    kFeePayerFieldNumber = 18,
    kV0MsgFieldNumber = 3,
    kTransferTransactionFieldNumber = 4,
    kDelegateStakeTransactionFieldNumber = 5,
    kDeactivateStakeTransactionFieldNumber = 6,
    kDeactivateAllStakeTransactionFieldNumber = 7,
    kWithdrawTransactionFieldNumber = 8,
    kWithdrawAllTransactionFieldNumber = 9,
    kCreateTokenAccountTransactionFieldNumber = 10,
    kTokenTransferTransactionFieldNumber = 11,
    kCreateAndTransferTokenTransactionFieldNumber = 12,
    kCreateNonceAccountFieldNumber = 13,
    kWithdrawNonceAccountFieldNumber = 16,
    kAdvanceNonceAccountFieldNumber = 19,
  };
  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string recent_blockhash = 2;
  void clear_recent_blockhash();
  const std::string& recent_blockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recent_blockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recent_blockhash();
  PROTOBUF_NODISCARD std::string* release_recent_blockhash();
  void set_allocated_recent_blockhash(std::string* recent_blockhash);
  private:
  const std::string& _internal_recent_blockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recent_blockhash(const std::string& value);
  std::string* _internal_mutable_recent_blockhash();
  public:

  // string sender = 14;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string nonce_account = 15;
  void clear_nonce_account();
  const std::string& nonce_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce_account();
  PROTOBUF_NODISCARD std::string* release_nonce_account();
  void set_allocated_nonce_account(std::string* nonce_account);
  private:
  const std::string& _internal_nonce_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce_account(const std::string& value);
  std::string* _internal_mutable_nonce_account();
  public:

  // bytes fee_payer_private_key = 17;
  void clear_fee_payer_private_key();
  const std::string& fee_payer_private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fee_payer_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fee_payer_private_key();
  PROTOBUF_NODISCARD std::string* release_fee_payer_private_key();
  void set_allocated_fee_payer_private_key(std::string* fee_payer_private_key);
  private:
  const std::string& _internal_fee_payer_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fee_payer_private_key(const std::string& value);
  std::string* _internal_mutable_fee_payer_private_key();
  public:

  // string fee_payer = 18;
  void clear_fee_payer();
  const std::string& fee_payer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fee_payer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fee_payer();
  PROTOBUF_NODISCARD std::string* release_fee_payer();
  void set_allocated_fee_payer(std::string* fee_payer);
  private:
  const std::string& _internal_fee_payer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fee_payer(const std::string& value);
  std::string* _internal_mutable_fee_payer();
  public:

  // bool v0_msg = 3;
  void clear_v0_msg();
  bool v0_msg() const;
  void set_v0_msg(bool value);
  private:
  bool _internal_v0_msg() const;
  void _internal_set_v0_msg(bool value);
  public:

  // .TW.Solana.Proto.Transfer transfer_transaction = 4;
  bool has_transfer_transaction() const;
  private:
  bool _internal_has_transfer_transaction() const;
  public:
  void clear_transfer_transaction();
  const ::TW::Solana::Proto::Transfer& transfer_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::Transfer* release_transfer_transaction();
  ::TW::Solana::Proto::Transfer* mutable_transfer_transaction();
  void set_allocated_transfer_transaction(::TW::Solana::Proto::Transfer* transfer_transaction);
  private:
  const ::TW::Solana::Proto::Transfer& _internal_transfer_transaction() const;
  ::TW::Solana::Proto::Transfer* _internal_mutable_transfer_transaction();
  public:
  void unsafe_arena_set_allocated_transfer_transaction(
      ::TW::Solana::Proto::Transfer* transfer_transaction);
  ::TW::Solana::Proto::Transfer* unsafe_arena_release_transfer_transaction();

  // .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 5;
  bool has_delegate_stake_transaction() const;
  private:
  bool _internal_has_delegate_stake_transaction() const;
  public:
  void clear_delegate_stake_transaction();
  const ::TW::Solana::Proto::DelegateStake& delegate_stake_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::DelegateStake* release_delegate_stake_transaction();
  ::TW::Solana::Proto::DelegateStake* mutable_delegate_stake_transaction();
  void set_allocated_delegate_stake_transaction(::TW::Solana::Proto::DelegateStake* delegate_stake_transaction);
  private:
  const ::TW::Solana::Proto::DelegateStake& _internal_delegate_stake_transaction() const;
  ::TW::Solana::Proto::DelegateStake* _internal_mutable_delegate_stake_transaction();
  public:
  void unsafe_arena_set_allocated_delegate_stake_transaction(
      ::TW::Solana::Proto::DelegateStake* delegate_stake_transaction);
  ::TW::Solana::Proto::DelegateStake* unsafe_arena_release_delegate_stake_transaction();

  // .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 6;
  bool has_deactivate_stake_transaction() const;
  private:
  bool _internal_has_deactivate_stake_transaction() const;
  public:
  void clear_deactivate_stake_transaction();
  const ::TW::Solana::Proto::DeactivateStake& deactivate_stake_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::DeactivateStake* release_deactivate_stake_transaction();
  ::TW::Solana::Proto::DeactivateStake* mutable_deactivate_stake_transaction();
  void set_allocated_deactivate_stake_transaction(::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction);
  private:
  const ::TW::Solana::Proto::DeactivateStake& _internal_deactivate_stake_transaction() const;
  ::TW::Solana::Proto::DeactivateStake* _internal_mutable_deactivate_stake_transaction();
  public:
  void unsafe_arena_set_allocated_deactivate_stake_transaction(
      ::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction);
  ::TW::Solana::Proto::DeactivateStake* unsafe_arena_release_deactivate_stake_transaction();

  // .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 7;
  bool has_deactivate_all_stake_transaction() const;
  private:
  bool _internal_has_deactivate_all_stake_transaction() const;
  public:
  void clear_deactivate_all_stake_transaction();
  const ::TW::Solana::Proto::DeactivateAllStake& deactivate_all_stake_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::DeactivateAllStake* release_deactivate_all_stake_transaction();
  ::TW::Solana::Proto::DeactivateAllStake* mutable_deactivate_all_stake_transaction();
  void set_allocated_deactivate_all_stake_transaction(::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction);
  private:
  const ::TW::Solana::Proto::DeactivateAllStake& _internal_deactivate_all_stake_transaction() const;
  ::TW::Solana::Proto::DeactivateAllStake* _internal_mutable_deactivate_all_stake_transaction();
  public:
  void unsafe_arena_set_allocated_deactivate_all_stake_transaction(
      ::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction);
  ::TW::Solana::Proto::DeactivateAllStake* unsafe_arena_release_deactivate_all_stake_transaction();

  // .TW.Solana.Proto.WithdrawStake withdraw_transaction = 8;
  bool has_withdraw_transaction() const;
  private:
  bool _internal_has_withdraw_transaction() const;
  public:
  void clear_withdraw_transaction();
  const ::TW::Solana::Proto::WithdrawStake& withdraw_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::WithdrawStake* release_withdraw_transaction();
  ::TW::Solana::Proto::WithdrawStake* mutable_withdraw_transaction();
  void set_allocated_withdraw_transaction(::TW::Solana::Proto::WithdrawStake* withdraw_transaction);
  private:
  const ::TW::Solana::Proto::WithdrawStake& _internal_withdraw_transaction() const;
  ::TW::Solana::Proto::WithdrawStake* _internal_mutable_withdraw_transaction();
  public:
  void unsafe_arena_set_allocated_withdraw_transaction(
      ::TW::Solana::Proto::WithdrawStake* withdraw_transaction);
  ::TW::Solana::Proto::WithdrawStake* unsafe_arena_release_withdraw_transaction();

  // .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 9;
  bool has_withdraw_all_transaction() const;
  private:
  bool _internal_has_withdraw_all_transaction() const;
  public:
  void clear_withdraw_all_transaction();
  const ::TW::Solana::Proto::WithdrawAllStake& withdraw_all_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::WithdrawAllStake* release_withdraw_all_transaction();
  ::TW::Solana::Proto::WithdrawAllStake* mutable_withdraw_all_transaction();
  void set_allocated_withdraw_all_transaction(::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction);
  private:
  const ::TW::Solana::Proto::WithdrawAllStake& _internal_withdraw_all_transaction() const;
  ::TW::Solana::Proto::WithdrawAllStake* _internal_mutable_withdraw_all_transaction();
  public:
  void unsafe_arena_set_allocated_withdraw_all_transaction(
      ::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction);
  ::TW::Solana::Proto::WithdrawAllStake* unsafe_arena_release_withdraw_all_transaction();

  // .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 10;
  bool has_create_token_account_transaction() const;
  private:
  bool _internal_has_create_token_account_transaction() const;
  public:
  void clear_create_token_account_transaction();
  const ::TW::Solana::Proto::CreateTokenAccount& create_token_account_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::CreateTokenAccount* release_create_token_account_transaction();
  ::TW::Solana::Proto::CreateTokenAccount* mutable_create_token_account_transaction();
  void set_allocated_create_token_account_transaction(::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction);
  private:
  const ::TW::Solana::Proto::CreateTokenAccount& _internal_create_token_account_transaction() const;
  ::TW::Solana::Proto::CreateTokenAccount* _internal_mutable_create_token_account_transaction();
  public:
  void unsafe_arena_set_allocated_create_token_account_transaction(
      ::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction);
  ::TW::Solana::Proto::CreateTokenAccount* unsafe_arena_release_create_token_account_transaction();

  // .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 11;
  bool has_token_transfer_transaction() const;
  private:
  bool _internal_has_token_transfer_transaction() const;
  public:
  void clear_token_transfer_transaction();
  const ::TW::Solana::Proto::TokenTransfer& token_transfer_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::TokenTransfer* release_token_transfer_transaction();
  ::TW::Solana::Proto::TokenTransfer* mutable_token_transfer_transaction();
  void set_allocated_token_transfer_transaction(::TW::Solana::Proto::TokenTransfer* token_transfer_transaction);
  private:
  const ::TW::Solana::Proto::TokenTransfer& _internal_token_transfer_transaction() const;
  ::TW::Solana::Proto::TokenTransfer* _internal_mutable_token_transfer_transaction();
  public:
  void unsafe_arena_set_allocated_token_transfer_transaction(
      ::TW::Solana::Proto::TokenTransfer* token_transfer_transaction);
  ::TW::Solana::Proto::TokenTransfer* unsafe_arena_release_token_transfer_transaction();

  // .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 12;
  bool has_create_and_transfer_token_transaction() const;
  private:
  bool _internal_has_create_and_transfer_token_transaction() const;
  public:
  void clear_create_and_transfer_token_transaction();
  const ::TW::Solana::Proto::CreateAndTransferToken& create_and_transfer_token_transaction() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::CreateAndTransferToken* release_create_and_transfer_token_transaction();
  ::TW::Solana::Proto::CreateAndTransferToken* mutable_create_and_transfer_token_transaction();
  void set_allocated_create_and_transfer_token_transaction(::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction);
  private:
  const ::TW::Solana::Proto::CreateAndTransferToken& _internal_create_and_transfer_token_transaction() const;
  ::TW::Solana::Proto::CreateAndTransferToken* _internal_mutable_create_and_transfer_token_transaction();
  public:
  void unsafe_arena_set_allocated_create_and_transfer_token_transaction(
      ::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction);
  ::TW::Solana::Proto::CreateAndTransferToken* unsafe_arena_release_create_and_transfer_token_transaction();

  // .TW.Solana.Proto.CreateNonceAccount create_nonce_account = 13;
  bool has_create_nonce_account() const;
  private:
  bool _internal_has_create_nonce_account() const;
  public:
  void clear_create_nonce_account();
  const ::TW::Solana::Proto::CreateNonceAccount& create_nonce_account() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::CreateNonceAccount* release_create_nonce_account();
  ::TW::Solana::Proto::CreateNonceAccount* mutable_create_nonce_account();
  void set_allocated_create_nonce_account(::TW::Solana::Proto::CreateNonceAccount* create_nonce_account);
  private:
  const ::TW::Solana::Proto::CreateNonceAccount& _internal_create_nonce_account() const;
  ::TW::Solana::Proto::CreateNonceAccount* _internal_mutable_create_nonce_account();
  public:
  void unsafe_arena_set_allocated_create_nonce_account(
      ::TW::Solana::Proto::CreateNonceAccount* create_nonce_account);
  ::TW::Solana::Proto::CreateNonceAccount* unsafe_arena_release_create_nonce_account();

  // .TW.Solana.Proto.WithdrawNonceAccount withdraw_nonce_account = 16;
  bool has_withdraw_nonce_account() const;
  private:
  bool _internal_has_withdraw_nonce_account() const;
  public:
  void clear_withdraw_nonce_account();
  const ::TW::Solana::Proto::WithdrawNonceAccount& withdraw_nonce_account() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::WithdrawNonceAccount* release_withdraw_nonce_account();
  ::TW::Solana::Proto::WithdrawNonceAccount* mutable_withdraw_nonce_account();
  void set_allocated_withdraw_nonce_account(::TW::Solana::Proto::WithdrawNonceAccount* withdraw_nonce_account);
  private:
  const ::TW::Solana::Proto::WithdrawNonceAccount& _internal_withdraw_nonce_account() const;
  ::TW::Solana::Proto::WithdrawNonceAccount* _internal_mutable_withdraw_nonce_account();
  public:
  void unsafe_arena_set_allocated_withdraw_nonce_account(
      ::TW::Solana::Proto::WithdrawNonceAccount* withdraw_nonce_account);
  ::TW::Solana::Proto::WithdrawNonceAccount* unsafe_arena_release_withdraw_nonce_account();

  // .TW.Solana.Proto.AdvanceNonceAccount advance_nonce_account = 19;
  bool has_advance_nonce_account() const;
  private:
  bool _internal_has_advance_nonce_account() const;
  public:
  void clear_advance_nonce_account();
  const ::TW::Solana::Proto::AdvanceNonceAccount& advance_nonce_account() const;
  PROTOBUF_NODISCARD ::TW::Solana::Proto::AdvanceNonceAccount* release_advance_nonce_account();
  ::TW::Solana::Proto::AdvanceNonceAccount* mutable_advance_nonce_account();
  void set_allocated_advance_nonce_account(::TW::Solana::Proto::AdvanceNonceAccount* advance_nonce_account);
  private:
  const ::TW::Solana::Proto::AdvanceNonceAccount& _internal_advance_nonce_account() const;
  ::TW::Solana::Proto::AdvanceNonceAccount* _internal_mutable_advance_nonce_account();
  public:
  void unsafe_arena_set_allocated_advance_nonce_account(
      ::TW::Solana::Proto::AdvanceNonceAccount* advance_nonce_account);
  ::TW::Solana::Proto::AdvanceNonceAccount* unsafe_arena_release_advance_nonce_account();

  void clear_transaction_type();
  TransactionTypeCase transaction_type_case() const;
  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer_transaction();
  void set_has_delegate_stake_transaction();
  void set_has_deactivate_stake_transaction();
  void set_has_deactivate_all_stake_transaction();
  void set_has_withdraw_transaction();
  void set_has_withdraw_all_transaction();
  void set_has_create_token_account_transaction();
  void set_has_token_transfer_transaction();
  void set_has_create_and_transfer_token_transaction();
  void set_has_create_nonce_account();
  void set_has_withdraw_nonce_account();
  void set_has_advance_nonce_account();

  inline bool has_transaction_type() const;
  inline void clear_has_transaction_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recent_blockhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_payer_private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_payer_;
  bool v0_msg_;
  union TransactionTypeUnion {
    constexpr TransactionTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Solana::Proto::Transfer* transfer_transaction_;
    ::TW::Solana::Proto::DelegateStake* delegate_stake_transaction_;
    ::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction_;
    ::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction_;
    ::TW::Solana::Proto::WithdrawStake* withdraw_transaction_;
    ::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction_;
    ::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction_;
    ::TW::Solana::Proto::TokenTransfer* token_transfer_transaction_;
    ::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction_;
    ::TW::Solana::Proto::CreateNonceAccount* create_nonce_account_;
    ::TW::Solana::Proto::WithdrawNonceAccount* withdraw_nonce_account_;
    ::TW::Solana::Proto::AdvanceNonceAccount* advance_nonce_account_;
  } transaction_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kUnsignedTxFieldNumber = 4,
    kErrorFieldNumber = 2,
  };
  // string encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string unsigned_tx = 4;
  void clear_unsigned_tx();
  const std::string& unsigned_tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unsigned_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unsigned_tx();
  PROTOBUF_NODISCARD std::string* release_unsigned_tx();
  void set_allocated_unsigned_tx(std::string* unsigned_tx);
  private:
  const std::string& _internal_unsigned_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unsigned_tx(const std::string& value);
  std::string* _internal_mutable_unsigned_tx();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unsigned_tx_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// -------------------------------------------------------------------

class PreSigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Solana.Proto.PreSigningOutput) */ {
 public:
  inline PreSigningOutput() : PreSigningOutput(nullptr) {}
  ~PreSigningOutput() override;
  explicit constexpr PreSigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreSigningOutput(const PreSigningOutput& from);
  PreSigningOutput(PreSigningOutput&& from) noexcept
    : PreSigningOutput() {
    *this = ::std::move(from);
  }

  inline PreSigningOutput& operator=(const PreSigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreSigningOutput& operator=(PreSigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreSigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreSigningOutput* internal_default_instance() {
    return reinterpret_cast<const PreSigningOutput*>(
               &_PreSigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PreSigningOutput& a, PreSigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(PreSigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreSigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreSigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreSigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreSigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreSigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreSigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Solana.Proto.PreSigningOutput";
  }
  protected:
  explicit PreSigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignersFieldNumber = 1,
    kDataFieldNumber = 2,
    kErrorMessageFieldNumber = 4,
    kErrorFieldNumber = 3,
  };
  // repeated bytes signers = 1;
  int signers_size() const;
  private:
  int _internal_signers_size() const;
  public:
  void clear_signers();
  const std::string& signers(int index) const;
  std::string* mutable_signers(int index);
  void set_signers(int index, const std::string& value);
  void set_signers(int index, std::string&& value);
  void set_signers(int index, const char* value);
  void set_signers(int index, const void* value, size_t size);
  std::string* add_signers();
  void add_signers(const std::string& value);
  void add_signers(std::string&& value);
  void add_signers(const char* value);
  void add_signers(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signers();
  private:
  const std::string& _internal_signers(int index) const;
  std::string* _internal_add_signers();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 3;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Solana.Proto.PreSigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Solana_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// string recipient = 1;
inline void Transfer::clear_recipient() {
  recipient_.ClearToEmpty();
}
inline const std::string& Transfer::recipient() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.recipient)
  return _internal_recipient();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transfer::set_recipient(ArgT0&& arg0, ArgT... args) {
 
 recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.recipient)
}
inline std::string* Transfer::mutable_recipient() {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Transfer.recipient)
  return _s;
}
inline const std::string& Transfer::_internal_recipient() const {
  return recipient_.Get();
}
inline void Transfer::_internal_set_recipient(const std::string& value) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transfer::_internal_mutable_recipient() {
  
  return recipient_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transfer::release_recipient() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.Transfer.recipient)
  return recipient_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transfer::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recipient_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recipient_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.Transfer.recipient)
}

// uint64 value = 2;
inline void Transfer::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t Transfer::_internal_value() const {
  return value_;
}
inline uint64_t Transfer::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.value)
  return _internal_value();
}
inline void Transfer::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void Transfer::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.value)
}

// string memo = 3;
inline void Transfer::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& Transfer::memo() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transfer::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.memo)
}
inline std::string* Transfer::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Transfer.memo)
  return _s;
}
inline const std::string& Transfer::_internal_memo() const {
  return memo_.Get();
}
inline void Transfer::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transfer::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transfer::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.Transfer.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transfer::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.Transfer.memo)
}

// repeated string references = 4;
inline int Transfer::_internal_references_size() const {
  return references_.size();
}
inline int Transfer::references_size() const {
  return _internal_references_size();
}
inline void Transfer::clear_references() {
  references_.Clear();
}
inline std::string* Transfer::add_references() {
  std::string* _s = _internal_add_references();
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.Transfer.references)
  return _s;
}
inline const std::string& Transfer::_internal_references(int index) const {
  return references_.Get(index);
}
inline const std::string& Transfer::references(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.Transfer.references)
  return _internal_references(index);
}
inline std::string* Transfer::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.Transfer.references)
  return references_.Mutable(index);
}
inline void Transfer::set_references(int index, const std::string& value) {
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::set_references(int index, std::string&& value) {
  references_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::set_references(int index, const char* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.Transfer.references)
}
inline std::string* Transfer::_internal_add_references() {
  return references_.Add();
}
inline void Transfer::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.Transfer.references)
}
inline void Transfer::add_references(const char* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.Transfer.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transfer::references() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.Transfer.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transfer::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.Transfer.references)
  return &references_;
}

// -------------------------------------------------------------------

// DelegateStake

// string validator_pubkey = 1;
inline void DelegateStake::clear_validator_pubkey() {
  validator_pubkey_.ClearToEmpty();
}
inline const std::string& DelegateStake::validator_pubkey() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DelegateStake.validator_pubkey)
  return _internal_validator_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelegateStake::set_validator_pubkey(ArgT0&& arg0, ArgT... args) {
 
 validator_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DelegateStake.validator_pubkey)
}
inline std::string* DelegateStake::mutable_validator_pubkey() {
  std::string* _s = _internal_mutable_validator_pubkey();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DelegateStake.validator_pubkey)
  return _s;
}
inline const std::string& DelegateStake::_internal_validator_pubkey() const {
  return validator_pubkey_.Get();
}
inline void DelegateStake::_internal_set_validator_pubkey(const std::string& value) {
  
  validator_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DelegateStake::_internal_mutable_validator_pubkey() {
  
  return validator_pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DelegateStake::release_validator_pubkey() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.DelegateStake.validator_pubkey)
  return validator_pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DelegateStake::set_allocated_validator_pubkey(std::string* validator_pubkey) {
  if (validator_pubkey != nullptr) {
    
  } else {
    
  }
  validator_pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_pubkey,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_pubkey_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.DelegateStake.validator_pubkey)
}

// uint64 value = 2;
inline void DelegateStake::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t DelegateStake::_internal_value() const {
  return value_;
}
inline uint64_t DelegateStake::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DelegateStake.value)
  return _internal_value();
}
inline void DelegateStake::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void DelegateStake::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DelegateStake.value)
}

// string stake_account = 3;
inline void DelegateStake::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& DelegateStake::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DelegateStake.stake_account)
  return _internal_stake_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelegateStake::set_stake_account(ArgT0&& arg0, ArgT... args) {
 
 stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DelegateStake.stake_account)
}
inline std::string* DelegateStake::mutable_stake_account() {
  std::string* _s = _internal_mutable_stake_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DelegateStake.stake_account)
  return _s;
}
inline const std::string& DelegateStake::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void DelegateStake::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DelegateStake::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DelegateStake::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.DelegateStake.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DelegateStake::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stake_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.DelegateStake.stake_account)
}

// -------------------------------------------------------------------

// DeactivateStake

// string stake_account = 1;
inline void DeactivateStake::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& DeactivateStake::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DeactivateStake.stake_account)
  return _internal_stake_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeactivateStake::set_stake_account(ArgT0&& arg0, ArgT... args) {
 
 stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DeactivateStake.stake_account)
}
inline std::string* DeactivateStake::mutable_stake_account() {
  std::string* _s = _internal_mutable_stake_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DeactivateStake.stake_account)
  return _s;
}
inline const std::string& DeactivateStake::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void DeactivateStake::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeactivateStake::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeactivateStake::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.DeactivateStake.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeactivateStake::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stake_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.DeactivateStake.stake_account)
}

// -------------------------------------------------------------------

// DeactivateAllStake

// repeated string stake_accounts = 1;
inline int DeactivateAllStake::_internal_stake_accounts_size() const {
  return stake_accounts_.size();
}
inline int DeactivateAllStake::stake_accounts_size() const {
  return _internal_stake_accounts_size();
}
inline void DeactivateAllStake::clear_stake_accounts() {
  stake_accounts_.Clear();
}
inline std::string* DeactivateAllStake::add_stake_accounts() {
  std::string* _s = _internal_add_stake_accounts();
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return _s;
}
inline const std::string& DeactivateAllStake::_internal_stake_accounts(int index) const {
  return stake_accounts_.Get(index);
}
inline const std::string& DeactivateAllStake::stake_accounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return _internal_stake_accounts(index);
}
inline std::string* DeactivateAllStake::mutable_stake_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return stake_accounts_.Mutable(index);
}
inline void DeactivateAllStake::set_stake_accounts(int index, const std::string& value) {
  stake_accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::set_stake_accounts(int index, std::string&& value) {
  stake_accounts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::set_stake_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stake_accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::set_stake_accounts(int index, const char* value, size_t size) {
  stake_accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline std::string* DeactivateAllStake::_internal_add_stake_accounts() {
  return stake_accounts_.Add();
}
inline void DeactivateAllStake::add_stake_accounts(const std::string& value) {
  stake_accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::add_stake_accounts(std::string&& value) {
  stake_accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::add_stake_accounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stake_accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline void DeactivateAllStake::add_stake_accounts(const char* value, size_t size) {
  stake_accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeactivateAllStake::stake_accounts() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return stake_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeactivateAllStake::mutable_stake_accounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.DeactivateAllStake.stake_accounts)
  return &stake_accounts_;
}

// -------------------------------------------------------------------

// WithdrawStake

// string stake_account = 1;
inline void WithdrawStake::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& WithdrawStake::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawStake.stake_account)
  return _internal_stake_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WithdrawStake::set_stake_account(ArgT0&& arg0, ArgT... args) {
 
 stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.WithdrawStake.stake_account)
}
inline std::string* WithdrawStake::mutable_stake_account() {
  std::string* _s = _internal_mutable_stake_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.WithdrawStake.stake_account)
  return _s;
}
inline const std::string& WithdrawStake::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void WithdrawStake::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WithdrawStake::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WithdrawStake::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.WithdrawStake.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WithdrawStake::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stake_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.WithdrawStake.stake_account)
}

// uint64 value = 2;
inline void WithdrawStake::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t WithdrawStake::_internal_value() const {
  return value_;
}
inline uint64_t WithdrawStake::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawStake.value)
  return _internal_value();
}
inline void WithdrawStake::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void WithdrawStake::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.WithdrawStake.value)
}

// -------------------------------------------------------------------

// StakeAccountValue

// string stake_account = 1;
inline void StakeAccountValue::clear_stake_account() {
  stake_account_.ClearToEmpty();
}
inline const std::string& StakeAccountValue::stake_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.StakeAccountValue.stake_account)
  return _internal_stake_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StakeAccountValue::set_stake_account(ArgT0&& arg0, ArgT... args) {
 
 stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.StakeAccountValue.stake_account)
}
inline std::string* StakeAccountValue::mutable_stake_account() {
  std::string* _s = _internal_mutable_stake_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.StakeAccountValue.stake_account)
  return _s;
}
inline const std::string& StakeAccountValue::_internal_stake_account() const {
  return stake_account_.Get();
}
inline void StakeAccountValue::_internal_set_stake_account(const std::string& value) {
  
  stake_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StakeAccountValue::_internal_mutable_stake_account() {
  
  return stake_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StakeAccountValue::release_stake_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.StakeAccountValue.stake_account)
  return stake_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StakeAccountValue::set_allocated_stake_account(std::string* stake_account) {
  if (stake_account != nullptr) {
    
  } else {
    
  }
  stake_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stake_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stake_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stake_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.StakeAccountValue.stake_account)
}

// uint64 value = 2;
inline void StakeAccountValue::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t StakeAccountValue::_internal_value() const {
  return value_;
}
inline uint64_t StakeAccountValue::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.StakeAccountValue.value)
  return _internal_value();
}
inline void StakeAccountValue::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void StakeAccountValue::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.StakeAccountValue.value)
}

// -------------------------------------------------------------------

// WithdrawAllStake

// repeated .TW.Solana.Proto.StakeAccountValue stake_accounts = 1;
inline int WithdrawAllStake::_internal_stake_accounts_size() const {
  return stake_accounts_.size();
}
inline int WithdrawAllStake::stake_accounts_size() const {
  return _internal_stake_accounts_size();
}
inline void WithdrawAllStake::clear_stake_accounts() {
  stake_accounts_.Clear();
}
inline ::TW::Solana::Proto::StakeAccountValue* WithdrawAllStake::mutable_stake_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return stake_accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >*
WithdrawAllStake::mutable_stake_accounts() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return &stake_accounts_;
}
inline const ::TW::Solana::Proto::StakeAccountValue& WithdrawAllStake::_internal_stake_accounts(int index) const {
  return stake_accounts_.Get(index);
}
inline const ::TW::Solana::Proto::StakeAccountValue& WithdrawAllStake::stake_accounts(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return _internal_stake_accounts(index);
}
inline ::TW::Solana::Proto::StakeAccountValue* WithdrawAllStake::_internal_add_stake_accounts() {
  return stake_accounts_.Add();
}
inline ::TW::Solana::Proto::StakeAccountValue* WithdrawAllStake::add_stake_accounts() {
  ::TW::Solana::Proto::StakeAccountValue* _add = _internal_add_stake_accounts();
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Solana::Proto::StakeAccountValue >&
WithdrawAllStake::stake_accounts() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.WithdrawAllStake.stake_accounts)
  return stake_accounts_;
}

// -------------------------------------------------------------------

// CreateTokenAccount

// string main_address = 1;
inline void CreateTokenAccount::clear_main_address() {
  main_address_.ClearToEmpty();
}
inline const std::string& CreateTokenAccount::main_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateTokenAccount.main_address)
  return _internal_main_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTokenAccount::set_main_address(ArgT0&& arg0, ArgT... args) {
 
 main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateTokenAccount.main_address)
}
inline std::string* CreateTokenAccount::mutable_main_address() {
  std::string* _s = _internal_mutable_main_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateTokenAccount.main_address)
  return _s;
}
inline const std::string& CreateTokenAccount::_internal_main_address() const {
  return main_address_.Get();
}
inline void CreateTokenAccount::_internal_set_main_address(const std::string& value) {
  
  main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTokenAccount::_internal_mutable_main_address() {
  
  return main_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTokenAccount::release_main_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateTokenAccount.main_address)
  return main_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateTokenAccount::set_allocated_main_address(std::string* main_address) {
  if (main_address != nullptr) {
    
  } else {
    
  }
  main_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (main_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    main_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateTokenAccount.main_address)
}

// string token_mint_address = 2;
inline void CreateTokenAccount::clear_token_mint_address() {
  token_mint_address_.ClearToEmpty();
}
inline const std::string& CreateTokenAccount::token_mint_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
  return _internal_token_mint_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTokenAccount::set_token_mint_address(ArgT0&& arg0, ArgT... args) {
 
 token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
}
inline std::string* CreateTokenAccount::mutable_token_mint_address() {
  std::string* _s = _internal_mutable_token_mint_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
  return _s;
}
inline const std::string& CreateTokenAccount::_internal_token_mint_address() const {
  return token_mint_address_.Get();
}
inline void CreateTokenAccount::_internal_set_token_mint_address(const std::string& value) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTokenAccount::_internal_mutable_token_mint_address() {
  
  return token_mint_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTokenAccount::release_token_mint_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
  return token_mint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateTokenAccount::set_allocated_token_mint_address(std::string* token_mint_address) {
  if (token_mint_address != nullptr) {
    
  } else {
    
  }
  token_mint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_mint_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_mint_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateTokenAccount.token_mint_address)
}

// string token_address = 3;
inline void CreateTokenAccount::clear_token_address() {
  token_address_.ClearToEmpty();
}
inline const std::string& CreateTokenAccount::token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateTokenAccount.token_address)
  return _internal_token_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTokenAccount::set_token_address(ArgT0&& arg0, ArgT... args) {
 
 token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateTokenAccount.token_address)
}
inline std::string* CreateTokenAccount::mutable_token_address() {
  std::string* _s = _internal_mutable_token_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateTokenAccount.token_address)
  return _s;
}
inline const std::string& CreateTokenAccount::_internal_token_address() const {
  return token_address_.Get();
}
inline void CreateTokenAccount::_internal_set_token_address(const std::string& value) {
  
  token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTokenAccount::_internal_mutable_token_address() {
  
  return token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTokenAccount::release_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateTokenAccount.token_address)
  return token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateTokenAccount::set_allocated_token_address(std::string* token_address) {
  if (token_address != nullptr) {
    
  } else {
    
  }
  token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateTokenAccount.token_address)
}

// -------------------------------------------------------------------

// TokenTransfer

// string token_mint_address = 1;
inline void TokenTransfer::clear_token_mint_address() {
  token_mint_address_.ClearToEmpty();
}
inline const std::string& TokenTransfer::token_mint_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.token_mint_address)
  return _internal_token_mint_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenTransfer::set_token_mint_address(ArgT0&& arg0, ArgT... args) {
 
 token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.token_mint_address)
}
inline std::string* TokenTransfer::mutable_token_mint_address() {
  std::string* _s = _internal_mutable_token_mint_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.token_mint_address)
  return _s;
}
inline const std::string& TokenTransfer::_internal_token_mint_address() const {
  return token_mint_address_.Get();
}
inline void TokenTransfer::_internal_set_token_mint_address(const std::string& value) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenTransfer::_internal_mutable_token_mint_address() {
  
  return token_mint_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenTransfer::release_token_mint_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.token_mint_address)
  return token_mint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenTransfer::set_allocated_token_mint_address(std::string* token_mint_address) {
  if (token_mint_address != nullptr) {
    
  } else {
    
  }
  token_mint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_mint_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_mint_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.token_mint_address)
}

// string sender_token_address = 2;
inline void TokenTransfer::clear_sender_token_address() {
  sender_token_address_.ClearToEmpty();
}
inline const std::string& TokenTransfer::sender_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.sender_token_address)
  return _internal_sender_token_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenTransfer::set_sender_token_address(ArgT0&& arg0, ArgT... args) {
 
 sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.sender_token_address)
}
inline std::string* TokenTransfer::mutable_sender_token_address() {
  std::string* _s = _internal_mutable_sender_token_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.sender_token_address)
  return _s;
}
inline const std::string& TokenTransfer::_internal_sender_token_address() const {
  return sender_token_address_.Get();
}
inline void TokenTransfer::_internal_set_sender_token_address(const std::string& value) {
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenTransfer::_internal_mutable_sender_token_address() {
  
  return sender_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenTransfer::release_sender_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.sender_token_address)
  return sender_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenTransfer::set_allocated_sender_token_address(std::string* sender_token_address) {
  if (sender_token_address != nullptr) {
    
  } else {
    
  }
  sender_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_token_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_token_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.sender_token_address)
}

// string recipient_token_address = 3;
inline void TokenTransfer::clear_recipient_token_address() {
  recipient_token_address_.ClearToEmpty();
}
inline const std::string& TokenTransfer::recipient_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.recipient_token_address)
  return _internal_recipient_token_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenTransfer::set_recipient_token_address(ArgT0&& arg0, ArgT... args) {
 
 recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.recipient_token_address)
}
inline std::string* TokenTransfer::mutable_recipient_token_address() {
  std::string* _s = _internal_mutable_recipient_token_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.recipient_token_address)
  return _s;
}
inline const std::string& TokenTransfer::_internal_recipient_token_address() const {
  return recipient_token_address_.Get();
}
inline void TokenTransfer::_internal_set_recipient_token_address(const std::string& value) {
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenTransfer::_internal_mutable_recipient_token_address() {
  
  return recipient_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenTransfer::release_recipient_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.recipient_token_address)
  return recipient_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenTransfer::set_allocated_recipient_token_address(std::string* recipient_token_address) {
  if (recipient_token_address != nullptr) {
    
  } else {
    
  }
  recipient_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_token_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recipient_token_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recipient_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.recipient_token_address)
}

// uint64 amount = 4;
inline void TokenTransfer::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t TokenTransfer::_internal_amount() const {
  return amount_;
}
inline uint64_t TokenTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.amount)
  return _internal_amount();
}
inline void TokenTransfer::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void TokenTransfer::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.amount)
}

// uint32 decimals = 5;
inline void TokenTransfer::clear_decimals() {
  decimals_ = 0u;
}
inline uint32_t TokenTransfer::_internal_decimals() const {
  return decimals_;
}
inline uint32_t TokenTransfer::decimals() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.decimals)
  return _internal_decimals();
}
inline void TokenTransfer::_internal_set_decimals(uint32_t value) {
  
  decimals_ = value;
}
inline void TokenTransfer::set_decimals(uint32_t value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.decimals)
}

// string memo = 6;
inline void TokenTransfer::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& TokenTransfer::memo() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenTransfer::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.memo)
}
inline std::string* TokenTransfer::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.memo)
  return _s;
}
inline const std::string& TokenTransfer::_internal_memo() const {
  return memo_.Get();
}
inline void TokenTransfer::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenTransfer::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenTransfer::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.TokenTransfer.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenTransfer::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.TokenTransfer.memo)
}

// repeated string references = 7;
inline int TokenTransfer::_internal_references_size() const {
  return references_.size();
}
inline int TokenTransfer::references_size() const {
  return _internal_references_size();
}
inline void TokenTransfer::clear_references() {
  references_.Clear();
}
inline std::string* TokenTransfer::add_references() {
  std::string* _s = _internal_add_references();
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.TokenTransfer.references)
  return _s;
}
inline const std::string& TokenTransfer::_internal_references(int index) const {
  return references_.Get(index);
}
inline const std::string& TokenTransfer::references(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.TokenTransfer.references)
  return _internal_references(index);
}
inline std::string* TokenTransfer::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.TokenTransfer.references)
  return references_.Mutable(index);
}
inline void TokenTransfer::set_references(int index, const std::string& value) {
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::set_references(int index, std::string&& value) {
  references_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::set_references(int index, const char* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.TokenTransfer.references)
}
inline std::string* TokenTransfer::_internal_add_references() {
  return references_.Add();
}
inline void TokenTransfer::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.TokenTransfer.references)
}
inline void TokenTransfer::add_references(const char* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.TokenTransfer.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenTransfer::references() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.TokenTransfer.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenTransfer::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.TokenTransfer.references)
  return &references_;
}

// -------------------------------------------------------------------

// CreateAndTransferToken

// string recipient_main_address = 1;
inline void CreateAndTransferToken::clear_recipient_main_address() {
  recipient_main_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::recipient_main_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
  return _internal_recipient_main_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAndTransferToken::set_recipient_main_address(ArgT0&& arg0, ArgT... args) {
 
 recipient_main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
}
inline std::string* CreateAndTransferToken::mutable_recipient_main_address() {
  std::string* _s = _internal_mutable_recipient_main_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
  return _s;
}
inline const std::string& CreateAndTransferToken::_internal_recipient_main_address() const {
  return recipient_main_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_recipient_main_address(const std::string& value) {
  
  recipient_main_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::_internal_mutable_recipient_main_address() {
  
  return recipient_main_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::release_recipient_main_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
  return recipient_main_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAndTransferToken::set_allocated_recipient_main_address(std::string* recipient_main_address) {
  if (recipient_main_address != nullptr) {
    
  } else {
    
  }
  recipient_main_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_main_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recipient_main_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recipient_main_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.recipient_main_address)
}

// string token_mint_address = 2;
inline void CreateAndTransferToken::clear_token_mint_address() {
  token_mint_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::token_mint_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
  return _internal_token_mint_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAndTransferToken::set_token_mint_address(ArgT0&& arg0, ArgT... args) {
 
 token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
}
inline std::string* CreateAndTransferToken::mutable_token_mint_address() {
  std::string* _s = _internal_mutable_token_mint_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
  return _s;
}
inline const std::string& CreateAndTransferToken::_internal_token_mint_address() const {
  return token_mint_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_token_mint_address(const std::string& value) {
  
  token_mint_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::_internal_mutable_token_mint_address() {
  
  return token_mint_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::release_token_mint_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
  return token_mint_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAndTransferToken::set_allocated_token_mint_address(std::string* token_mint_address) {
  if (token_mint_address != nullptr) {
    
  } else {
    
  }
  token_mint_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_mint_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_mint_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_mint_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.token_mint_address)
}

// string recipient_token_address = 3;
inline void CreateAndTransferToken::clear_recipient_token_address() {
  recipient_token_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::recipient_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
  return _internal_recipient_token_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAndTransferToken::set_recipient_token_address(ArgT0&& arg0, ArgT... args) {
 
 recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
}
inline std::string* CreateAndTransferToken::mutable_recipient_token_address() {
  std::string* _s = _internal_mutable_recipient_token_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
  return _s;
}
inline const std::string& CreateAndTransferToken::_internal_recipient_token_address() const {
  return recipient_token_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_recipient_token_address(const std::string& value) {
  
  recipient_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::_internal_mutable_recipient_token_address() {
  
  return recipient_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::release_recipient_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
  return recipient_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAndTransferToken::set_allocated_recipient_token_address(std::string* recipient_token_address) {
  if (recipient_token_address != nullptr) {
    
  } else {
    
  }
  recipient_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_token_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recipient_token_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recipient_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.recipient_token_address)
}

// string sender_token_address = 4;
inline void CreateAndTransferToken::clear_sender_token_address() {
  sender_token_address_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::sender_token_address() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
  return _internal_sender_token_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAndTransferToken::set_sender_token_address(ArgT0&& arg0, ArgT... args) {
 
 sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
}
inline std::string* CreateAndTransferToken::mutable_sender_token_address() {
  std::string* _s = _internal_mutable_sender_token_address();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
  return _s;
}
inline const std::string& CreateAndTransferToken::_internal_sender_token_address() const {
  return sender_token_address_.Get();
}
inline void CreateAndTransferToken::_internal_set_sender_token_address(const std::string& value) {
  
  sender_token_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::_internal_mutable_sender_token_address() {
  
  return sender_token_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::release_sender_token_address() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
  return sender_token_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAndTransferToken::set_allocated_sender_token_address(std::string* sender_token_address) {
  if (sender_token_address != nullptr) {
    
  } else {
    
  }
  sender_token_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_token_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_token_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_token_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.sender_token_address)
}

// uint64 amount = 5;
inline void CreateAndTransferToken::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t CreateAndTransferToken::_internal_amount() const {
  return amount_;
}
inline uint64_t CreateAndTransferToken::amount() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.amount)
  return _internal_amount();
}
inline void CreateAndTransferToken::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void CreateAndTransferToken::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.amount)
}

// uint32 decimals = 6;
inline void CreateAndTransferToken::clear_decimals() {
  decimals_ = 0u;
}
inline uint32_t CreateAndTransferToken::_internal_decimals() const {
  return decimals_;
}
inline uint32_t CreateAndTransferToken::decimals() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.decimals)
  return _internal_decimals();
}
inline void CreateAndTransferToken::_internal_set_decimals(uint32_t value) {
  
  decimals_ = value;
}
inline void CreateAndTransferToken::set_decimals(uint32_t value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.decimals)
}

// string memo = 7;
inline void CreateAndTransferToken::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& CreateAndTransferToken::memo() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAndTransferToken::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.memo)
}
inline std::string* CreateAndTransferToken::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.memo)
  return _s;
}
inline const std::string& CreateAndTransferToken::_internal_memo() const {
  return memo_.Get();
}
inline void CreateAndTransferToken::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAndTransferToken::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateAndTransferToken.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAndTransferToken::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateAndTransferToken.memo)
}

// repeated string references = 8;
inline int CreateAndTransferToken::_internal_references_size() const {
  return references_.size();
}
inline int CreateAndTransferToken::references_size() const {
  return _internal_references_size();
}
inline void CreateAndTransferToken::clear_references() {
  references_.Clear();
}
inline std::string* CreateAndTransferToken::add_references() {
  std::string* _s = _internal_add_references();
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.CreateAndTransferToken.references)
  return _s;
}
inline const std::string& CreateAndTransferToken::_internal_references(int index) const {
  return references_.Get(index);
}
inline const std::string& CreateAndTransferToken::references(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateAndTransferToken.references)
  return _internal_references(index);
}
inline std::string* CreateAndTransferToken::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateAndTransferToken.references)
  return references_.Mutable(index);
}
inline void CreateAndTransferToken::set_references(int index, const std::string& value) {
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::set_references(int index, std::string&& value) {
  references_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::set_references(int index, const char* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline std::string* CreateAndTransferToken::_internal_add_references() {
  return references_.Add();
}
inline void CreateAndTransferToken::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline void CreateAndTransferToken::add_references(const char* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.CreateAndTransferToken.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateAndTransferToken::references() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.CreateAndTransferToken.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateAndTransferToken::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.CreateAndTransferToken.references)
  return &references_;
}

// -------------------------------------------------------------------

// CreateNonceAccount

// string nonce_account = 1;
inline void CreateNonceAccount::clear_nonce_account() {
  nonce_account_.ClearToEmpty();
}
inline const std::string& CreateNonceAccount::nonce_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateNonceAccount.nonce_account)
  return _internal_nonce_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNonceAccount::set_nonce_account(ArgT0&& arg0, ArgT... args) {
 
 nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateNonceAccount.nonce_account)
}
inline std::string* CreateNonceAccount::mutable_nonce_account() {
  std::string* _s = _internal_mutable_nonce_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateNonceAccount.nonce_account)
  return _s;
}
inline const std::string& CreateNonceAccount::_internal_nonce_account() const {
  return nonce_account_.Get();
}
inline void CreateNonceAccount::_internal_set_nonce_account(const std::string& value) {
  
  nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNonceAccount::_internal_mutable_nonce_account() {
  
  return nonce_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNonceAccount::release_nonce_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateNonceAccount.nonce_account)
  return nonce_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNonceAccount::set_allocated_nonce_account(std::string* nonce_account) {
  if (nonce_account != nullptr) {
    
  } else {
    
  }
  nonce_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateNonceAccount.nonce_account)
}

// uint64 rent = 2;
inline void CreateNonceAccount::clear_rent() {
  rent_ = uint64_t{0u};
}
inline uint64_t CreateNonceAccount::_internal_rent() const {
  return rent_;
}
inline uint64_t CreateNonceAccount::rent() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateNonceAccount.rent)
  return _internal_rent();
}
inline void CreateNonceAccount::_internal_set_rent(uint64_t value) {
  
  rent_ = value;
}
inline void CreateNonceAccount::set_rent(uint64_t value) {
  _internal_set_rent(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateNonceAccount.rent)
}

// bytes nonce_account_private_key = 3;
inline void CreateNonceAccount::clear_nonce_account_private_key() {
  nonce_account_private_key_.ClearToEmpty();
}
inline const std::string& CreateNonceAccount::nonce_account_private_key() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.CreateNonceAccount.nonce_account_private_key)
  return _internal_nonce_account_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNonceAccount::set_nonce_account_private_key(ArgT0&& arg0, ArgT... args) {
 
 nonce_account_private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.CreateNonceAccount.nonce_account_private_key)
}
inline std::string* CreateNonceAccount::mutable_nonce_account_private_key() {
  std::string* _s = _internal_mutable_nonce_account_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.CreateNonceAccount.nonce_account_private_key)
  return _s;
}
inline const std::string& CreateNonceAccount::_internal_nonce_account_private_key() const {
  return nonce_account_private_key_.Get();
}
inline void CreateNonceAccount::_internal_set_nonce_account_private_key(const std::string& value) {
  
  nonce_account_private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNonceAccount::_internal_mutable_nonce_account_private_key() {
  
  return nonce_account_private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNonceAccount::release_nonce_account_private_key() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.CreateNonceAccount.nonce_account_private_key)
  return nonce_account_private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNonceAccount::set_allocated_nonce_account_private_key(std::string* nonce_account_private_key) {
  if (nonce_account_private_key != nullptr) {
    
  } else {
    
  }
  nonce_account_private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce_account_private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_account_private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_account_private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.CreateNonceAccount.nonce_account_private_key)
}

// -------------------------------------------------------------------

// WithdrawNonceAccount

// string nonce_account = 1;
inline void WithdrawNonceAccount::clear_nonce_account() {
  nonce_account_.ClearToEmpty();
}
inline const std::string& WithdrawNonceAccount::nonce_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawNonceAccount.nonce_account)
  return _internal_nonce_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WithdrawNonceAccount::set_nonce_account(ArgT0&& arg0, ArgT... args) {
 
 nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.WithdrawNonceAccount.nonce_account)
}
inline std::string* WithdrawNonceAccount::mutable_nonce_account() {
  std::string* _s = _internal_mutable_nonce_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.WithdrawNonceAccount.nonce_account)
  return _s;
}
inline const std::string& WithdrawNonceAccount::_internal_nonce_account() const {
  return nonce_account_.Get();
}
inline void WithdrawNonceAccount::_internal_set_nonce_account(const std::string& value) {
  
  nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WithdrawNonceAccount::_internal_mutable_nonce_account() {
  
  return nonce_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WithdrawNonceAccount::release_nonce_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.WithdrawNonceAccount.nonce_account)
  return nonce_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WithdrawNonceAccount::set_allocated_nonce_account(std::string* nonce_account) {
  if (nonce_account != nullptr) {
    
  } else {
    
  }
  nonce_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.WithdrawNonceAccount.nonce_account)
}

// string recipient = 2;
inline void WithdrawNonceAccount::clear_recipient() {
  recipient_.ClearToEmpty();
}
inline const std::string& WithdrawNonceAccount::recipient() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawNonceAccount.recipient)
  return _internal_recipient();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WithdrawNonceAccount::set_recipient(ArgT0&& arg0, ArgT... args) {
 
 recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.WithdrawNonceAccount.recipient)
}
inline std::string* WithdrawNonceAccount::mutable_recipient() {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.WithdrawNonceAccount.recipient)
  return _s;
}
inline const std::string& WithdrawNonceAccount::_internal_recipient() const {
  return recipient_.Get();
}
inline void WithdrawNonceAccount::_internal_set_recipient(const std::string& value) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WithdrawNonceAccount::_internal_mutable_recipient() {
  
  return recipient_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WithdrawNonceAccount::release_recipient() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.WithdrawNonceAccount.recipient)
  return recipient_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WithdrawNonceAccount::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recipient_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recipient_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.WithdrawNonceAccount.recipient)
}

// uint64 value = 3;
inline void WithdrawNonceAccount::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t WithdrawNonceAccount::_internal_value() const {
  return value_;
}
inline uint64_t WithdrawNonceAccount::value() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.WithdrawNonceAccount.value)
  return _internal_value();
}
inline void WithdrawNonceAccount::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void WithdrawNonceAccount::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.WithdrawNonceAccount.value)
}

// -------------------------------------------------------------------

// AdvanceNonceAccount

// string nonce_account = 1;
inline void AdvanceNonceAccount::clear_nonce_account() {
  nonce_account_.ClearToEmpty();
}
inline const std::string& AdvanceNonceAccount::nonce_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.AdvanceNonceAccount.nonce_account)
  return _internal_nonce_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdvanceNonceAccount::set_nonce_account(ArgT0&& arg0, ArgT... args) {
 
 nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.AdvanceNonceAccount.nonce_account)
}
inline std::string* AdvanceNonceAccount::mutable_nonce_account() {
  std::string* _s = _internal_mutable_nonce_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.AdvanceNonceAccount.nonce_account)
  return _s;
}
inline const std::string& AdvanceNonceAccount::_internal_nonce_account() const {
  return nonce_account_.Get();
}
inline void AdvanceNonceAccount::_internal_set_nonce_account(const std::string& value) {
  
  nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdvanceNonceAccount::_internal_mutable_nonce_account() {
  
  return nonce_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdvanceNonceAccount::release_nonce_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.AdvanceNonceAccount.nonce_account)
  return nonce_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdvanceNonceAccount::set_allocated_nonce_account(std::string* nonce_account) {
  if (nonce_account != nullptr) {
    
  } else {
    
  }
  nonce_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.AdvanceNonceAccount.nonce_account)
}

// -------------------------------------------------------------------

// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.private_key)
}

// string recent_blockhash = 2;
inline void SigningInput::clear_recent_blockhash() {
  recent_blockhash_.ClearToEmpty();
}
inline const std::string& SigningInput::recent_blockhash() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.recent_blockhash)
  return _internal_recent_blockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_recent_blockhash(ArgT0&& arg0, ArgT... args) {
 
 recent_blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.recent_blockhash)
}
inline std::string* SigningInput::mutable_recent_blockhash() {
  std::string* _s = _internal_mutable_recent_blockhash();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.recent_blockhash)
  return _s;
}
inline const std::string& SigningInput::_internal_recent_blockhash() const {
  return recent_blockhash_.Get();
}
inline void SigningInput::_internal_set_recent_blockhash(const std::string& value) {
  
  recent_blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_recent_blockhash() {
  
  return recent_blockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_recent_blockhash() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.recent_blockhash)
  return recent_blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_recent_blockhash(std::string* recent_blockhash) {
  if (recent_blockhash != nullptr) {
    
  } else {
    
  }
  recent_blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recent_blockhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recent_blockhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recent_blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.recent_blockhash)
}

// bool v0_msg = 3;
inline void SigningInput::clear_v0_msg() {
  v0_msg_ = false;
}
inline bool SigningInput::_internal_v0_msg() const {
  return v0_msg_;
}
inline bool SigningInput::v0_msg() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.v0_msg)
  return _internal_v0_msg();
}
inline void SigningInput::_internal_set_v0_msg(bool value) {
  
  v0_msg_ = value;
}
inline void SigningInput::set_v0_msg(bool value) {
  _internal_set_v0_msg(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.v0_msg)
}

// .TW.Solana.Proto.Transfer transfer_transaction = 4;
inline bool SigningInput::_internal_has_transfer_transaction() const {
  return transaction_type_case() == kTransferTransaction;
}
inline bool SigningInput::has_transfer_transaction() const {
  return _internal_has_transfer_transaction();
}
inline void SigningInput::set_has_transfer_transaction() {
  _oneof_case_[0] = kTransferTransaction;
}
inline void SigningInput::clear_transfer_transaction() {
  if (_internal_has_transfer_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.transfer_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::Transfer* SigningInput::release_transfer_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.transfer_transaction)
  if (_internal_has_transfer_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::Transfer* temp = transaction_type_.transfer_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::Transfer& SigningInput::_internal_transfer_transaction() const {
  return _internal_has_transfer_transaction()
      ? *transaction_type_.transfer_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::Transfer&>(::TW::Solana::Proto::_Transfer_default_instance_);
}
inline const ::TW::Solana::Proto::Transfer& SigningInput::transfer_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.transfer_transaction)
  return _internal_transfer_transaction();
}
inline ::TW::Solana::Proto::Transfer* SigningInput::unsafe_arena_release_transfer_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.transfer_transaction)
  if (_internal_has_transfer_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::Transfer* temp = transaction_type_.transfer_transaction_;
    transaction_type_.transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer_transaction(::TW::Solana::Proto::Transfer* transfer_transaction) {
  clear_transaction_type();
  if (transfer_transaction) {
    set_has_transfer_transaction();
    transaction_type_.transfer_transaction_ = transfer_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.transfer_transaction)
}
inline ::TW::Solana::Proto::Transfer* SigningInput::_internal_mutable_transfer_transaction() {
  if (!_internal_has_transfer_transaction()) {
    clear_transaction_type();
    set_has_transfer_transaction();
    transaction_type_.transfer_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::Transfer >(GetArenaForAllocation());
  }
  return transaction_type_.transfer_transaction_;
}
inline ::TW::Solana::Proto::Transfer* SigningInput::mutable_transfer_transaction() {
  ::TW::Solana::Proto::Transfer* _msg = _internal_mutable_transfer_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.transfer_transaction)
  return _msg;
}

// .TW.Solana.Proto.DelegateStake delegate_stake_transaction = 5;
inline bool SigningInput::_internal_has_delegate_stake_transaction() const {
  return transaction_type_case() == kDelegateStakeTransaction;
}
inline bool SigningInput::has_delegate_stake_transaction() const {
  return _internal_has_delegate_stake_transaction();
}
inline void SigningInput::set_has_delegate_stake_transaction() {
  _oneof_case_[0] = kDelegateStakeTransaction;
}
inline void SigningInput::clear_delegate_stake_transaction() {
  if (_internal_has_delegate_stake_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.delegate_stake_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::release_delegate_stake_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  if (_internal_has_delegate_stake_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::DelegateStake* temp = transaction_type_.delegate_stake_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.delegate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::DelegateStake& SigningInput::_internal_delegate_stake_transaction() const {
  return _internal_has_delegate_stake_transaction()
      ? *transaction_type_.delegate_stake_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::DelegateStake&>(::TW::Solana::Proto::_DelegateStake_default_instance_);
}
inline const ::TW::Solana::Proto::DelegateStake& SigningInput::delegate_stake_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  return _internal_delegate_stake_transaction();
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::unsafe_arena_release_delegate_stake_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  if (_internal_has_delegate_stake_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::DelegateStake* temp = transaction_type_.delegate_stake_transaction_;
    transaction_type_.delegate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_delegate_stake_transaction(::TW::Solana::Proto::DelegateStake* delegate_stake_transaction) {
  clear_transaction_type();
  if (delegate_stake_transaction) {
    set_has_delegate_stake_transaction();
    transaction_type_.delegate_stake_transaction_ = delegate_stake_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::_internal_mutable_delegate_stake_transaction() {
  if (!_internal_has_delegate_stake_transaction()) {
    clear_transaction_type();
    set_has_delegate_stake_transaction();
    transaction_type_.delegate_stake_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::DelegateStake >(GetArenaForAllocation());
  }
  return transaction_type_.delegate_stake_transaction_;
}
inline ::TW::Solana::Proto::DelegateStake* SigningInput::mutable_delegate_stake_transaction() {
  ::TW::Solana::Proto::DelegateStake* _msg = _internal_mutable_delegate_stake_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.delegate_stake_transaction)
  return _msg;
}

// .TW.Solana.Proto.DeactivateStake deactivate_stake_transaction = 6;
inline bool SigningInput::_internal_has_deactivate_stake_transaction() const {
  return transaction_type_case() == kDeactivateStakeTransaction;
}
inline bool SigningInput::has_deactivate_stake_transaction() const {
  return _internal_has_deactivate_stake_transaction();
}
inline void SigningInput::set_has_deactivate_stake_transaction() {
  _oneof_case_[0] = kDeactivateStakeTransaction;
}
inline void SigningInput::clear_deactivate_stake_transaction() {
  if (_internal_has_deactivate_stake_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.deactivate_stake_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::release_deactivate_stake_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  if (_internal_has_deactivate_stake_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::DeactivateStake* temp = transaction_type_.deactivate_stake_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.deactivate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::DeactivateStake& SigningInput::_internal_deactivate_stake_transaction() const {
  return _internal_has_deactivate_stake_transaction()
      ? *transaction_type_.deactivate_stake_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::DeactivateStake&>(::TW::Solana::Proto::_DeactivateStake_default_instance_);
}
inline const ::TW::Solana::Proto::DeactivateStake& SigningInput::deactivate_stake_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  return _internal_deactivate_stake_transaction();
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::unsafe_arena_release_deactivate_stake_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  if (_internal_has_deactivate_stake_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::DeactivateStake* temp = transaction_type_.deactivate_stake_transaction_;
    transaction_type_.deactivate_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_deactivate_stake_transaction(::TW::Solana::Proto::DeactivateStake* deactivate_stake_transaction) {
  clear_transaction_type();
  if (deactivate_stake_transaction) {
    set_has_deactivate_stake_transaction();
    transaction_type_.deactivate_stake_transaction_ = deactivate_stake_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::_internal_mutable_deactivate_stake_transaction() {
  if (!_internal_has_deactivate_stake_transaction()) {
    clear_transaction_type();
    set_has_deactivate_stake_transaction();
    transaction_type_.deactivate_stake_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::DeactivateStake >(GetArenaForAllocation());
  }
  return transaction_type_.deactivate_stake_transaction_;
}
inline ::TW::Solana::Proto::DeactivateStake* SigningInput::mutable_deactivate_stake_transaction() {
  ::TW::Solana::Proto::DeactivateStake* _msg = _internal_mutable_deactivate_stake_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.deactivate_stake_transaction)
  return _msg;
}

// .TW.Solana.Proto.DeactivateAllStake deactivate_all_stake_transaction = 7;
inline bool SigningInput::_internal_has_deactivate_all_stake_transaction() const {
  return transaction_type_case() == kDeactivateAllStakeTransaction;
}
inline bool SigningInput::has_deactivate_all_stake_transaction() const {
  return _internal_has_deactivate_all_stake_transaction();
}
inline void SigningInput::set_has_deactivate_all_stake_transaction() {
  _oneof_case_[0] = kDeactivateAllStakeTransaction;
}
inline void SigningInput::clear_deactivate_all_stake_transaction() {
  if (_internal_has_deactivate_all_stake_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.deactivate_all_stake_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::release_deactivate_all_stake_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  if (_internal_has_deactivate_all_stake_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::DeactivateAllStake* temp = transaction_type_.deactivate_all_stake_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.deactivate_all_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::DeactivateAllStake& SigningInput::_internal_deactivate_all_stake_transaction() const {
  return _internal_has_deactivate_all_stake_transaction()
      ? *transaction_type_.deactivate_all_stake_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::DeactivateAllStake&>(::TW::Solana::Proto::_DeactivateAllStake_default_instance_);
}
inline const ::TW::Solana::Proto::DeactivateAllStake& SigningInput::deactivate_all_stake_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  return _internal_deactivate_all_stake_transaction();
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::unsafe_arena_release_deactivate_all_stake_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  if (_internal_has_deactivate_all_stake_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::DeactivateAllStake* temp = transaction_type_.deactivate_all_stake_transaction_;
    transaction_type_.deactivate_all_stake_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_deactivate_all_stake_transaction(::TW::Solana::Proto::DeactivateAllStake* deactivate_all_stake_transaction) {
  clear_transaction_type();
  if (deactivate_all_stake_transaction) {
    set_has_deactivate_all_stake_transaction();
    transaction_type_.deactivate_all_stake_transaction_ = deactivate_all_stake_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::_internal_mutable_deactivate_all_stake_transaction() {
  if (!_internal_has_deactivate_all_stake_transaction()) {
    clear_transaction_type();
    set_has_deactivate_all_stake_transaction();
    transaction_type_.deactivate_all_stake_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::DeactivateAllStake >(GetArenaForAllocation());
  }
  return transaction_type_.deactivate_all_stake_transaction_;
}
inline ::TW::Solana::Proto::DeactivateAllStake* SigningInput::mutable_deactivate_all_stake_transaction() {
  ::TW::Solana::Proto::DeactivateAllStake* _msg = _internal_mutable_deactivate_all_stake_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction)
  return _msg;
}

// .TW.Solana.Proto.WithdrawStake withdraw_transaction = 8;
inline bool SigningInput::_internal_has_withdraw_transaction() const {
  return transaction_type_case() == kWithdrawTransaction;
}
inline bool SigningInput::has_withdraw_transaction() const {
  return _internal_has_withdraw_transaction();
}
inline void SigningInput::set_has_withdraw_transaction() {
  _oneof_case_[0] = kWithdrawTransaction;
}
inline void SigningInput::clear_withdraw_transaction() {
  if (_internal_has_withdraw_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.withdraw_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::release_withdraw_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.withdraw_transaction)
  if (_internal_has_withdraw_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::WithdrawStake* temp = transaction_type_.withdraw_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.withdraw_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::WithdrawStake& SigningInput::_internal_withdraw_transaction() const {
  return _internal_has_withdraw_transaction()
      ? *transaction_type_.withdraw_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::WithdrawStake&>(::TW::Solana::Proto::_WithdrawStake_default_instance_);
}
inline const ::TW::Solana::Proto::WithdrawStake& SigningInput::withdraw_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.withdraw_transaction)
  return _internal_withdraw_transaction();
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::unsafe_arena_release_withdraw_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.withdraw_transaction)
  if (_internal_has_withdraw_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::WithdrawStake* temp = transaction_type_.withdraw_transaction_;
    transaction_type_.withdraw_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_withdraw_transaction(::TW::Solana::Proto::WithdrawStake* withdraw_transaction) {
  clear_transaction_type();
  if (withdraw_transaction) {
    set_has_withdraw_transaction();
    transaction_type_.withdraw_transaction_ = withdraw_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.withdraw_transaction)
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::_internal_mutable_withdraw_transaction() {
  if (!_internal_has_withdraw_transaction()) {
    clear_transaction_type();
    set_has_withdraw_transaction();
    transaction_type_.withdraw_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::WithdrawStake >(GetArenaForAllocation());
  }
  return transaction_type_.withdraw_transaction_;
}
inline ::TW::Solana::Proto::WithdrawStake* SigningInput::mutable_withdraw_transaction() {
  ::TW::Solana::Proto::WithdrawStake* _msg = _internal_mutable_withdraw_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.withdraw_transaction)
  return _msg;
}

// .TW.Solana.Proto.WithdrawAllStake withdraw_all_transaction = 9;
inline bool SigningInput::_internal_has_withdraw_all_transaction() const {
  return transaction_type_case() == kWithdrawAllTransaction;
}
inline bool SigningInput::has_withdraw_all_transaction() const {
  return _internal_has_withdraw_all_transaction();
}
inline void SigningInput::set_has_withdraw_all_transaction() {
  _oneof_case_[0] = kWithdrawAllTransaction;
}
inline void SigningInput::clear_withdraw_all_transaction() {
  if (_internal_has_withdraw_all_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.withdraw_all_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::release_withdraw_all_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  if (_internal_has_withdraw_all_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::WithdrawAllStake* temp = transaction_type_.withdraw_all_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.withdraw_all_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::WithdrawAllStake& SigningInput::_internal_withdraw_all_transaction() const {
  return _internal_has_withdraw_all_transaction()
      ? *transaction_type_.withdraw_all_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::WithdrawAllStake&>(::TW::Solana::Proto::_WithdrawAllStake_default_instance_);
}
inline const ::TW::Solana::Proto::WithdrawAllStake& SigningInput::withdraw_all_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  return _internal_withdraw_all_transaction();
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::unsafe_arena_release_withdraw_all_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  if (_internal_has_withdraw_all_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::WithdrawAllStake* temp = transaction_type_.withdraw_all_transaction_;
    transaction_type_.withdraw_all_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_withdraw_all_transaction(::TW::Solana::Proto::WithdrawAllStake* withdraw_all_transaction) {
  clear_transaction_type();
  if (withdraw_all_transaction) {
    set_has_withdraw_all_transaction();
    transaction_type_.withdraw_all_transaction_ = withdraw_all_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::_internal_mutable_withdraw_all_transaction() {
  if (!_internal_has_withdraw_all_transaction()) {
    clear_transaction_type();
    set_has_withdraw_all_transaction();
    transaction_type_.withdraw_all_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::WithdrawAllStake >(GetArenaForAllocation());
  }
  return transaction_type_.withdraw_all_transaction_;
}
inline ::TW::Solana::Proto::WithdrawAllStake* SigningInput::mutable_withdraw_all_transaction() {
  ::TW::Solana::Proto::WithdrawAllStake* _msg = _internal_mutable_withdraw_all_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.withdraw_all_transaction)
  return _msg;
}

// .TW.Solana.Proto.CreateTokenAccount create_token_account_transaction = 10;
inline bool SigningInput::_internal_has_create_token_account_transaction() const {
  return transaction_type_case() == kCreateTokenAccountTransaction;
}
inline bool SigningInput::has_create_token_account_transaction() const {
  return _internal_has_create_token_account_transaction();
}
inline void SigningInput::set_has_create_token_account_transaction() {
  _oneof_case_[0] = kCreateTokenAccountTransaction;
}
inline void SigningInput::clear_create_token_account_transaction() {
  if (_internal_has_create_token_account_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.create_token_account_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::release_create_token_account_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  if (_internal_has_create_token_account_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::CreateTokenAccount* temp = transaction_type_.create_token_account_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.create_token_account_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::CreateTokenAccount& SigningInput::_internal_create_token_account_transaction() const {
  return _internal_has_create_token_account_transaction()
      ? *transaction_type_.create_token_account_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::CreateTokenAccount&>(::TW::Solana::Proto::_CreateTokenAccount_default_instance_);
}
inline const ::TW::Solana::Proto::CreateTokenAccount& SigningInput::create_token_account_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  return _internal_create_token_account_transaction();
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::unsafe_arena_release_create_token_account_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  if (_internal_has_create_token_account_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::CreateTokenAccount* temp = transaction_type_.create_token_account_transaction_;
    transaction_type_.create_token_account_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_create_token_account_transaction(::TW::Solana::Proto::CreateTokenAccount* create_token_account_transaction) {
  clear_transaction_type();
  if (create_token_account_transaction) {
    set_has_create_token_account_transaction();
    transaction_type_.create_token_account_transaction_ = create_token_account_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.create_token_account_transaction)
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::_internal_mutable_create_token_account_transaction() {
  if (!_internal_has_create_token_account_transaction()) {
    clear_transaction_type();
    set_has_create_token_account_transaction();
    transaction_type_.create_token_account_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::CreateTokenAccount >(GetArenaForAllocation());
  }
  return transaction_type_.create_token_account_transaction_;
}
inline ::TW::Solana::Proto::CreateTokenAccount* SigningInput::mutable_create_token_account_transaction() {
  ::TW::Solana::Proto::CreateTokenAccount* _msg = _internal_mutable_create_token_account_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.create_token_account_transaction)
  return _msg;
}

// .TW.Solana.Proto.TokenTransfer token_transfer_transaction = 11;
inline bool SigningInput::_internal_has_token_transfer_transaction() const {
  return transaction_type_case() == kTokenTransferTransaction;
}
inline bool SigningInput::has_token_transfer_transaction() const {
  return _internal_has_token_transfer_transaction();
}
inline void SigningInput::set_has_token_transfer_transaction() {
  _oneof_case_[0] = kTokenTransferTransaction;
}
inline void SigningInput::clear_token_transfer_transaction() {
  if (_internal_has_token_transfer_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.token_transfer_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::release_token_transfer_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  if (_internal_has_token_transfer_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::TokenTransfer* temp = transaction_type_.token_transfer_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.token_transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::TokenTransfer& SigningInput::_internal_token_transfer_transaction() const {
  return _internal_has_token_transfer_transaction()
      ? *transaction_type_.token_transfer_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::TokenTransfer&>(::TW::Solana::Proto::_TokenTransfer_default_instance_);
}
inline const ::TW::Solana::Proto::TokenTransfer& SigningInput::token_transfer_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  return _internal_token_transfer_transaction();
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::unsafe_arena_release_token_transfer_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  if (_internal_has_token_transfer_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::TokenTransfer* temp = transaction_type_.token_transfer_transaction_;
    transaction_type_.token_transfer_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_token_transfer_transaction(::TW::Solana::Proto::TokenTransfer* token_transfer_transaction) {
  clear_transaction_type();
  if (token_transfer_transaction) {
    set_has_token_transfer_transaction();
    transaction_type_.token_transfer_transaction_ = token_transfer_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.token_transfer_transaction)
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::_internal_mutable_token_transfer_transaction() {
  if (!_internal_has_token_transfer_transaction()) {
    clear_transaction_type();
    set_has_token_transfer_transaction();
    transaction_type_.token_transfer_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::TokenTransfer >(GetArenaForAllocation());
  }
  return transaction_type_.token_transfer_transaction_;
}
inline ::TW::Solana::Proto::TokenTransfer* SigningInput::mutable_token_transfer_transaction() {
  ::TW::Solana::Proto::TokenTransfer* _msg = _internal_mutable_token_transfer_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.token_transfer_transaction)
  return _msg;
}

// .TW.Solana.Proto.CreateAndTransferToken create_and_transfer_token_transaction = 12;
inline bool SigningInput::_internal_has_create_and_transfer_token_transaction() const {
  return transaction_type_case() == kCreateAndTransferTokenTransaction;
}
inline bool SigningInput::has_create_and_transfer_token_transaction() const {
  return _internal_has_create_and_transfer_token_transaction();
}
inline void SigningInput::set_has_create_and_transfer_token_transaction() {
  _oneof_case_[0] = kCreateAndTransferTokenTransaction;
}
inline void SigningInput::clear_create_and_transfer_token_transaction() {
  if (_internal_has_create_and_transfer_token_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.create_and_transfer_token_transaction_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::release_create_and_transfer_token_transaction() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  if (_internal_has_create_and_transfer_token_transaction()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::CreateAndTransferToken* temp = transaction_type_.create_and_transfer_token_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.create_and_transfer_token_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::CreateAndTransferToken& SigningInput::_internal_create_and_transfer_token_transaction() const {
  return _internal_has_create_and_transfer_token_transaction()
      ? *transaction_type_.create_and_transfer_token_transaction_
      : reinterpret_cast< ::TW::Solana::Proto::CreateAndTransferToken&>(::TW::Solana::Proto::_CreateAndTransferToken_default_instance_);
}
inline const ::TW::Solana::Proto::CreateAndTransferToken& SigningInput::create_and_transfer_token_transaction() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  return _internal_create_and_transfer_token_transaction();
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::unsafe_arena_release_create_and_transfer_token_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  if (_internal_has_create_and_transfer_token_transaction()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::CreateAndTransferToken* temp = transaction_type_.create_and_transfer_token_transaction_;
    transaction_type_.create_and_transfer_token_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_create_and_transfer_token_transaction(::TW::Solana::Proto::CreateAndTransferToken* create_and_transfer_token_transaction) {
  clear_transaction_type();
  if (create_and_transfer_token_transaction) {
    set_has_create_and_transfer_token_transaction();
    transaction_type_.create_and_transfer_token_transaction_ = create_and_transfer_token_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::_internal_mutable_create_and_transfer_token_transaction() {
  if (!_internal_has_create_and_transfer_token_transaction()) {
    clear_transaction_type();
    set_has_create_and_transfer_token_transaction();
    transaction_type_.create_and_transfer_token_transaction_ = CreateMaybeMessage< ::TW::Solana::Proto::CreateAndTransferToken >(GetArenaForAllocation());
  }
  return transaction_type_.create_and_transfer_token_transaction_;
}
inline ::TW::Solana::Proto::CreateAndTransferToken* SigningInput::mutable_create_and_transfer_token_transaction() {
  ::TW::Solana::Proto::CreateAndTransferToken* _msg = _internal_mutable_create_and_transfer_token_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction)
  return _msg;
}

// .TW.Solana.Proto.CreateNonceAccount create_nonce_account = 13;
inline bool SigningInput::_internal_has_create_nonce_account() const {
  return transaction_type_case() == kCreateNonceAccount;
}
inline bool SigningInput::has_create_nonce_account() const {
  return _internal_has_create_nonce_account();
}
inline void SigningInput::set_has_create_nonce_account() {
  _oneof_case_[0] = kCreateNonceAccount;
}
inline void SigningInput::clear_create_nonce_account() {
  if (_internal_has_create_nonce_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.create_nonce_account_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::CreateNonceAccount* SigningInput::release_create_nonce_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.create_nonce_account)
  if (_internal_has_create_nonce_account()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::CreateNonceAccount* temp = transaction_type_.create_nonce_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.create_nonce_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::CreateNonceAccount& SigningInput::_internal_create_nonce_account() const {
  return _internal_has_create_nonce_account()
      ? *transaction_type_.create_nonce_account_
      : reinterpret_cast< ::TW::Solana::Proto::CreateNonceAccount&>(::TW::Solana::Proto::_CreateNonceAccount_default_instance_);
}
inline const ::TW::Solana::Proto::CreateNonceAccount& SigningInput::create_nonce_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.create_nonce_account)
  return _internal_create_nonce_account();
}
inline ::TW::Solana::Proto::CreateNonceAccount* SigningInput::unsafe_arena_release_create_nonce_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.create_nonce_account)
  if (_internal_has_create_nonce_account()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::CreateNonceAccount* temp = transaction_type_.create_nonce_account_;
    transaction_type_.create_nonce_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_create_nonce_account(::TW::Solana::Proto::CreateNonceAccount* create_nonce_account) {
  clear_transaction_type();
  if (create_nonce_account) {
    set_has_create_nonce_account();
    transaction_type_.create_nonce_account_ = create_nonce_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.create_nonce_account)
}
inline ::TW::Solana::Proto::CreateNonceAccount* SigningInput::_internal_mutable_create_nonce_account() {
  if (!_internal_has_create_nonce_account()) {
    clear_transaction_type();
    set_has_create_nonce_account();
    transaction_type_.create_nonce_account_ = CreateMaybeMessage< ::TW::Solana::Proto::CreateNonceAccount >(GetArenaForAllocation());
  }
  return transaction_type_.create_nonce_account_;
}
inline ::TW::Solana::Proto::CreateNonceAccount* SigningInput::mutable_create_nonce_account() {
  ::TW::Solana::Proto::CreateNonceAccount* _msg = _internal_mutable_create_nonce_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.create_nonce_account)
  return _msg;
}

// .TW.Solana.Proto.WithdrawNonceAccount withdraw_nonce_account = 16;
inline bool SigningInput::_internal_has_withdraw_nonce_account() const {
  return transaction_type_case() == kWithdrawNonceAccount;
}
inline bool SigningInput::has_withdraw_nonce_account() const {
  return _internal_has_withdraw_nonce_account();
}
inline void SigningInput::set_has_withdraw_nonce_account() {
  _oneof_case_[0] = kWithdrawNonceAccount;
}
inline void SigningInput::clear_withdraw_nonce_account() {
  if (_internal_has_withdraw_nonce_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.withdraw_nonce_account_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::WithdrawNonceAccount* SigningInput::release_withdraw_nonce_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.withdraw_nonce_account)
  if (_internal_has_withdraw_nonce_account()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::WithdrawNonceAccount* temp = transaction_type_.withdraw_nonce_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.withdraw_nonce_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::WithdrawNonceAccount& SigningInput::_internal_withdraw_nonce_account() const {
  return _internal_has_withdraw_nonce_account()
      ? *transaction_type_.withdraw_nonce_account_
      : reinterpret_cast< ::TW::Solana::Proto::WithdrawNonceAccount&>(::TW::Solana::Proto::_WithdrawNonceAccount_default_instance_);
}
inline const ::TW::Solana::Proto::WithdrawNonceAccount& SigningInput::withdraw_nonce_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.withdraw_nonce_account)
  return _internal_withdraw_nonce_account();
}
inline ::TW::Solana::Proto::WithdrawNonceAccount* SigningInput::unsafe_arena_release_withdraw_nonce_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.withdraw_nonce_account)
  if (_internal_has_withdraw_nonce_account()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::WithdrawNonceAccount* temp = transaction_type_.withdraw_nonce_account_;
    transaction_type_.withdraw_nonce_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_withdraw_nonce_account(::TW::Solana::Proto::WithdrawNonceAccount* withdraw_nonce_account) {
  clear_transaction_type();
  if (withdraw_nonce_account) {
    set_has_withdraw_nonce_account();
    transaction_type_.withdraw_nonce_account_ = withdraw_nonce_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.withdraw_nonce_account)
}
inline ::TW::Solana::Proto::WithdrawNonceAccount* SigningInput::_internal_mutable_withdraw_nonce_account() {
  if (!_internal_has_withdraw_nonce_account()) {
    clear_transaction_type();
    set_has_withdraw_nonce_account();
    transaction_type_.withdraw_nonce_account_ = CreateMaybeMessage< ::TW::Solana::Proto::WithdrawNonceAccount >(GetArenaForAllocation());
  }
  return transaction_type_.withdraw_nonce_account_;
}
inline ::TW::Solana::Proto::WithdrawNonceAccount* SigningInput::mutable_withdraw_nonce_account() {
  ::TW::Solana::Proto::WithdrawNonceAccount* _msg = _internal_mutable_withdraw_nonce_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.withdraw_nonce_account)
  return _msg;
}

// .TW.Solana.Proto.AdvanceNonceAccount advance_nonce_account = 19;
inline bool SigningInput::_internal_has_advance_nonce_account() const {
  return transaction_type_case() == kAdvanceNonceAccount;
}
inline bool SigningInput::has_advance_nonce_account() const {
  return _internal_has_advance_nonce_account();
}
inline void SigningInput::set_has_advance_nonce_account() {
  _oneof_case_[0] = kAdvanceNonceAccount;
}
inline void SigningInput::clear_advance_nonce_account() {
  if (_internal_has_advance_nonce_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete transaction_type_.advance_nonce_account_;
    }
    clear_has_transaction_type();
  }
}
inline ::TW::Solana::Proto::AdvanceNonceAccount* SigningInput::release_advance_nonce_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.advance_nonce_account)
  if (_internal_has_advance_nonce_account()) {
    clear_has_transaction_type();
      ::TW::Solana::Proto::AdvanceNonceAccount* temp = transaction_type_.advance_nonce_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_type_.advance_nonce_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Solana::Proto::AdvanceNonceAccount& SigningInput::_internal_advance_nonce_account() const {
  return _internal_has_advance_nonce_account()
      ? *transaction_type_.advance_nonce_account_
      : reinterpret_cast< ::TW::Solana::Proto::AdvanceNonceAccount&>(::TW::Solana::Proto::_AdvanceNonceAccount_default_instance_);
}
inline const ::TW::Solana::Proto::AdvanceNonceAccount& SigningInput::advance_nonce_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.advance_nonce_account)
  return _internal_advance_nonce_account();
}
inline ::TW::Solana::Proto::AdvanceNonceAccount* SigningInput::unsafe_arena_release_advance_nonce_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Solana.Proto.SigningInput.advance_nonce_account)
  if (_internal_has_advance_nonce_account()) {
    clear_has_transaction_type();
    ::TW::Solana::Proto::AdvanceNonceAccount* temp = transaction_type_.advance_nonce_account_;
    transaction_type_.advance_nonce_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_advance_nonce_account(::TW::Solana::Proto::AdvanceNonceAccount* advance_nonce_account) {
  clear_transaction_type();
  if (advance_nonce_account) {
    set_has_advance_nonce_account();
    transaction_type_.advance_nonce_account_ = advance_nonce_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Solana.Proto.SigningInput.advance_nonce_account)
}
inline ::TW::Solana::Proto::AdvanceNonceAccount* SigningInput::_internal_mutable_advance_nonce_account() {
  if (!_internal_has_advance_nonce_account()) {
    clear_transaction_type();
    set_has_advance_nonce_account();
    transaction_type_.advance_nonce_account_ = CreateMaybeMessage< ::TW::Solana::Proto::AdvanceNonceAccount >(GetArenaForAllocation());
  }
  return transaction_type_.advance_nonce_account_;
}
inline ::TW::Solana::Proto::AdvanceNonceAccount* SigningInput::mutable_advance_nonce_account() {
  ::TW::Solana::Proto::AdvanceNonceAccount* _msg = _internal_mutable_advance_nonce_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.advance_nonce_account)
  return _msg;
}

// string sender = 14;
inline void SigningInput::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& SigningInput::sender() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.sender)
}
inline std::string* SigningInput::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.sender)
  return _s;
}
inline const std::string& SigningInput::_internal_sender() const {
  return sender_.Get();
}
inline void SigningInput::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_sender() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.sender)
}

// string nonce_account = 15;
inline void SigningInput::clear_nonce_account() {
  nonce_account_.ClearToEmpty();
}
inline const std::string& SigningInput::nonce_account() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.nonce_account)
  return _internal_nonce_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_nonce_account(ArgT0&& arg0, ArgT... args) {
 
 nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.nonce_account)
}
inline std::string* SigningInput::mutable_nonce_account() {
  std::string* _s = _internal_mutable_nonce_account();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.nonce_account)
  return _s;
}
inline const std::string& SigningInput::_internal_nonce_account() const {
  return nonce_account_.Get();
}
inline void SigningInput::_internal_set_nonce_account(const std::string& value) {
  
  nonce_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_nonce_account() {
  
  return nonce_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_nonce_account() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.nonce_account)
  return nonce_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_nonce_account(std::string* nonce_account) {
  if (nonce_account != nullptr) {
    
  } else {
    
  }
  nonce_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nonce_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nonce_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.nonce_account)
}

// bytes fee_payer_private_key = 17;
inline void SigningInput::clear_fee_payer_private_key() {
  fee_payer_private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::fee_payer_private_key() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.fee_payer_private_key)
  return _internal_fee_payer_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_fee_payer_private_key(ArgT0&& arg0, ArgT... args) {
 
 fee_payer_private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.fee_payer_private_key)
}
inline std::string* SigningInput::mutable_fee_payer_private_key() {
  std::string* _s = _internal_mutable_fee_payer_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.fee_payer_private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_fee_payer_private_key() const {
  return fee_payer_private_key_.Get();
}
inline void SigningInput::_internal_set_fee_payer_private_key(const std::string& value) {
  
  fee_payer_private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_fee_payer_private_key() {
  
  return fee_payer_private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_fee_payer_private_key() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.fee_payer_private_key)
  return fee_payer_private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_fee_payer_private_key(std::string* fee_payer_private_key) {
  if (fee_payer_private_key != nullptr) {
    
  } else {
    
  }
  fee_payer_private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_payer_private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fee_payer_private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fee_payer_private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.fee_payer_private_key)
}

// string fee_payer = 18;
inline void SigningInput::clear_fee_payer() {
  fee_payer_.ClearToEmpty();
}
inline const std::string& SigningInput::fee_payer() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningInput.fee_payer)
  return _internal_fee_payer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_fee_payer(ArgT0&& arg0, ArgT... args) {
 
 fee_payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningInput.fee_payer)
}
inline std::string* SigningInput::mutable_fee_payer() {
  std::string* _s = _internal_mutable_fee_payer();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningInput.fee_payer)
  return _s;
}
inline const std::string& SigningInput::_internal_fee_payer() const {
  return fee_payer_.Get();
}
inline void SigningInput::_internal_set_fee_payer(const std::string& value) {
  
  fee_payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_fee_payer() {
  
  return fee_payer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_fee_payer() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningInput.fee_payer)
  return fee_payer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_fee_payer(std::string* fee_payer) {
  if (fee_payer != nullptr) {
    
  } else {
    
  }
  fee_payer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_payer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fee_payer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fee_payer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningInput.fee_payer)
}

inline bool SigningInput::has_transaction_type() const {
  return transaction_type_case() != TRANSACTION_TYPE_NOT_SET;
}
inline void SigningInput::clear_has_transaction_type() {
  _oneof_case_[0] = TRANSACTION_TYPE_NOT_SET;
}
inline SigningInput::TransactionTypeCase SigningInput::transaction_type_case() const {
  return SigningInput::TransactionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// string encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningOutput.error)
}

// string error_message = 3;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningOutput.error_message)
}

// string unsigned_tx = 4;
inline void SigningOutput::clear_unsigned_tx() {
  unsigned_tx_.ClearToEmpty();
}
inline const std::string& SigningOutput::unsigned_tx() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.SigningOutput.unsigned_tx)
  return _internal_unsigned_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_unsigned_tx(ArgT0&& arg0, ArgT... args) {
 
 unsigned_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.SigningOutput.unsigned_tx)
}
inline std::string* SigningOutput::mutable_unsigned_tx() {
  std::string* _s = _internal_mutable_unsigned_tx();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.SigningOutput.unsigned_tx)
  return _s;
}
inline const std::string& SigningOutput::_internal_unsigned_tx() const {
  return unsigned_tx_.Get();
}
inline void SigningOutput::_internal_set_unsigned_tx(const std::string& value) {
  
  unsigned_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_unsigned_tx() {
  
  return unsigned_tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_unsigned_tx() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.SigningOutput.unsigned_tx)
  return unsigned_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_unsigned_tx(std::string* unsigned_tx) {
  if (unsigned_tx != nullptr) {
    
  } else {
    
  }
  unsigned_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unsigned_tx,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unsigned_tx_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unsigned_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.SigningOutput.unsigned_tx)
}

// -------------------------------------------------------------------

// PreSigningOutput

// repeated bytes signers = 1;
inline int PreSigningOutput::_internal_signers_size() const {
  return signers_.size();
}
inline int PreSigningOutput::signers_size() const {
  return _internal_signers_size();
}
inline void PreSigningOutput::clear_signers() {
  signers_.Clear();
}
inline std::string* PreSigningOutput::add_signers() {
  std::string* _s = _internal_add_signers();
  // @@protoc_insertion_point(field_add_mutable:TW.Solana.Proto.PreSigningOutput.signers)
  return _s;
}
inline const std::string& PreSigningOutput::_internal_signers(int index) const {
  return signers_.Get(index);
}
inline const std::string& PreSigningOutput::signers(int index) const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.PreSigningOutput.signers)
  return _internal_signers(index);
}
inline std::string* PreSigningOutput::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.PreSigningOutput.signers)
  return signers_.Mutable(index);
}
inline void PreSigningOutput::set_signers(int index, const std::string& value) {
  signers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.PreSigningOutput.signers)
}
inline void PreSigningOutput::set_signers(int index, std::string&& value) {
  signers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.PreSigningOutput.signers)
}
inline void PreSigningOutput::set_signers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Solana.Proto.PreSigningOutput.signers)
}
inline void PreSigningOutput::set_signers(int index, const void* value, size_t size) {
  signers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Solana.Proto.PreSigningOutput.signers)
}
inline std::string* PreSigningOutput::_internal_add_signers() {
  return signers_.Add();
}
inline void PreSigningOutput::add_signers(const std::string& value) {
  signers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.PreSigningOutput.signers)
}
inline void PreSigningOutput::add_signers(std::string&& value) {
  signers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Solana.Proto.PreSigningOutput.signers)
}
inline void PreSigningOutput::add_signers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Solana.Proto.PreSigningOutput.signers)
}
inline void PreSigningOutput::add_signers(const void* value, size_t size) {
  signers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Solana.Proto.PreSigningOutput.signers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PreSigningOutput::signers() const {
  // @@protoc_insertion_point(field_list:TW.Solana.Proto.PreSigningOutput.signers)
  return signers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PreSigningOutput::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:TW.Solana.Proto.PreSigningOutput.signers)
  return &signers_;
}

// bytes data = 2;
inline void PreSigningOutput::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PreSigningOutput::data() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.PreSigningOutput.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreSigningOutput::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.PreSigningOutput.data)
}
inline std::string* PreSigningOutput::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.PreSigningOutput.data)
  return _s;
}
inline const std::string& PreSigningOutput::_internal_data() const {
  return data_.Get();
}
inline void PreSigningOutput::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreSigningOutput::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreSigningOutput::release_data() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.PreSigningOutput.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PreSigningOutput::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.PreSigningOutput.data)
}

// .TW.Common.Proto.SigningError error = 3;
inline void PreSigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError PreSigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError PreSigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.PreSigningOutput.error)
  return _internal_error();
}
inline void PreSigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void PreSigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.PreSigningOutput.error)
}

// string error_message = 4;
inline void PreSigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& PreSigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Solana.Proto.PreSigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreSigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Solana.Proto.PreSigningOutput.error_message)
}
inline std::string* PreSigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Solana.Proto.PreSigningOutput.error_message)
  return _s;
}
inline const std::string& PreSigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void PreSigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreSigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreSigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Solana.Proto.PreSigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PreSigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Solana.Proto.PreSigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Solana
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Solana_2eproto
