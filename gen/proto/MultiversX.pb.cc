// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiversX.proto

#include "MultiversX.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace MultiversX {
namespace Proto {
constexpr GenericAction::GenericAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accounts_(nullptr)
  , version_(0u)
  , options_(0u){}
struct GenericActionDefaultTypeInternal {
  constexpr GenericActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericActionDefaultTypeInternal() {}
  union {
    GenericAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericActionDefaultTypeInternal _GenericAction_default_instance_;
constexpr EGLDTransfer::EGLDTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accounts_(nullptr)
  , version_(0u){}
struct EGLDTransferDefaultTypeInternal {
  constexpr EGLDTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EGLDTransferDefaultTypeInternal() {}
  union {
    EGLDTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EGLDTransferDefaultTypeInternal _EGLDTransfer_default_instance_;
constexpr ESDTTransfer::ESDTTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accounts_(nullptr)
  , version_(0u){}
struct ESDTTransferDefaultTypeInternal {
  constexpr ESDTTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESDTTransferDefaultTypeInternal() {}
  union {
    ESDTTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESDTTransferDefaultTypeInternal _ESDTTransfer_default_instance_;
constexpr ESDTNFTTransfer::ESDTNFTTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_collection_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accounts_(nullptr)
  , token_nonce_(uint64_t{0u})
  , version_(0u){}
struct ESDTNFTTransferDefaultTypeInternal {
  constexpr ESDTNFTTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESDTNFTTransferDefaultTypeInternal() {}
  union {
    ESDTNFTTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESDTNFTTransferDefaultTypeInternal _ESDTNFTTransfer_default_instance_;
constexpr Accounts::Accounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guardian_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_nonce_(uint64_t{0u}){}
struct AccountsDefaultTypeInternal {
  constexpr AccountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountsDefaultTypeInternal() {}
  union {
    Accounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountsDefaultTypeInternal _Accounts_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_price_(uint64_t{0u})
  , gas_limit_(uint64_t{0u})
  , _oneof_case_{}{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace MultiversX
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MultiversX_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MultiversX_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MultiversX_2eproto = nullptr;

const uint32_t TableStruct_MultiversX_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::GenericAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::GenericAction, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::GenericAction, value_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::GenericAction, data_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::GenericAction, version_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::GenericAction, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::EGLDTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::EGLDTransfer, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::EGLDTransfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::EGLDTransfer, data_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::EGLDTransfer, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTTransfer, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTTransfer, token_identifier_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTTransfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTTransfer, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTNFTTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTNFTTransfer, accounts_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTNFTTransfer, token_collection_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTNFTTransfer, token_nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTNFTTransfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::ESDTNFTTransfer, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::Accounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::Accounts, sender_nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::Accounts, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::Accounts, sender_username_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::Accounts, receiver_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::Accounts, receiver_username_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::Accounts, guardian_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningInput, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningInput, gas_limit_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningInput, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningOutput, signature_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::MultiversX::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::MultiversX::Proto::GenericAction)},
  { 11, -1, -1, sizeof(::TW::MultiversX::Proto::EGLDTransfer)},
  { 21, -1, -1, sizeof(::TW::MultiversX::Proto::ESDTTransfer)},
  { 31, -1, -1, sizeof(::TW::MultiversX::Proto::ESDTNFTTransfer)},
  { 42, -1, -1, sizeof(::TW::MultiversX::Proto::Accounts)},
  { 54, -1, -1, sizeof(::TW::MultiversX::Proto::SigningInput)},
  { 69, -1, -1, sizeof(::TW::MultiversX::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::MultiversX::Proto::_GenericAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::MultiversX::Proto::_EGLDTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::MultiversX::Proto::_ESDTTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::MultiversX::Proto::_ESDTNFTTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::MultiversX::Proto::_Accounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::MultiversX::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::MultiversX::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_MultiversX_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020MultiversX.proto\022\023TW.MultiversX.Proto\032"
  "\014Common.proto\"\177\n\rGenericAction\022/\n\010accoun"
  "ts\030\001 \001(\0132\035.TW.MultiversX.Proto.Accounts\022"
  "\r\n\005value\030\002 \001(\t\022\014\n\004data\030\003 \001(\t\022\017\n\007version\030"
  "\004 \001(\r\022\017\n\007options\030\005 \001(\r\"n\n\014EGLDTransfer\022/"
  "\n\010accounts\030\001 \001(\0132\035.TW.MultiversX.Proto.A"
  "ccounts\022\016\n\006amount\030\002 \001(\t\022\014\n\004data\030\003 \001(\t\022\017\n"
  "\007version\030\004 \001(\r\"z\n\014ESDTTransfer\022/\n\010accoun"
  "ts\030\001 \001(\0132\035.TW.MultiversX.Proto.Accounts\022"
  "\030\n\020token_identifier\030\002 \001(\t\022\016\n\006amount\030\003 \001("
  "\t\022\017\n\007version\030\004 \001(\r\"\222\001\n\017ESDTNFTTransfer\022/"
  "\n\010accounts\030\001 \001(\0132\035.TW.MultiversX.Proto.A"
  "ccounts\022\030\n\020token_collection\030\002 \001(\t\022\023\n\013tok"
  "en_nonce\030\003 \001(\004\022\016\n\006amount\030\004 \001(\t\022\017\n\007versio"
  "n\030\005 \001(\r\"\210\001\n\010Accounts\022\024\n\014sender_nonce\030\001 \001"
  "(\004\022\016\n\006sender\030\002 \001(\t\022\027\n\017sender_username\030\003 "
  "\001(\t\022\020\n\010receiver\030\004 \001(\t\022\031\n\021receiver_userna"
  "me\030\005 \001(\t\022\020\n\010guardian\030\006 \001(\t\"\344\002\n\014SigningIn"
  "put\022\023\n\013private_key\030\001 \001(\014\022\020\n\010chain_id\030\002 \001"
  "(\t\022\021\n\tgas_price\030\003 \001(\004\022\021\n\tgas_limit\030\004 \001(\004"
  "\022<\n\016generic_action\030\005 \001(\0132\".TW.MultiversX"
  ".Proto.GenericActionH\000\022:\n\regld_transfer\030"
  "\006 \001(\0132!.TW.MultiversX.Proto.EGLDTransfer"
  "H\000\022:\n\resdt_transfer\030\007 \001(\0132!.TW.Multivers"
  "X.Proto.ESDTTransferH\000\022@\n\020esdtnft_transf"
  "er\030\010 \001(\0132$.TW.MultiversX.Proto.ESDTNFTTr"
  "ansferH\000B\017\n\rmessage_oneof\"x\n\rSigningOutp"
  "ut\022\017\n\007encoded\030\001 \001(\t\022\021\n\tsignature\030\002 \001(\t\022,"
  "\n\005error\030\003 \001(\0162\035.TW.Common.Proto.SigningE"
  "rror\022\025\n\rerror_message\030\004 \001(\tB\027\n\025wallet.co"
  "re.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MultiversX_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MultiversX_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MultiversX_2eproto = {
  false, false, 1220, descriptor_table_protodef_MultiversX_2eproto, "MultiversX.proto", 
  &descriptor_table_MultiversX_2eproto_once, descriptor_table_MultiversX_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_MultiversX_2eproto::offsets,
  file_level_metadata_MultiversX_2eproto, file_level_enum_descriptors_MultiversX_2eproto, file_level_service_descriptors_MultiversX_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MultiversX_2eproto_getter() {
  return &descriptor_table_MultiversX_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MultiversX_2eproto(&descriptor_table_MultiversX_2eproto);
namespace TW {
namespace MultiversX {
namespace Proto {

// ===================================================================

class GenericAction::_Internal {
 public:
  static const ::TW::MultiversX::Proto::Accounts& accounts(const GenericAction* msg);
};

const ::TW::MultiversX::Proto::Accounts&
GenericAction::_Internal::accounts(const GenericAction* msg) {
  return *msg->accounts_;
}
GenericAction::GenericAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.MultiversX.Proto.GenericAction)
}
GenericAction::GenericAction(const GenericAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::MultiversX::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&version_)) + sizeof(options_));
  // @@protoc_insertion_point(copy_constructor:TW.MultiversX.Proto.GenericAction)
}

inline void GenericAction::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accounts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&accounts_)) + sizeof(options_));
}

GenericAction::~GenericAction() {
  // @@protoc_insertion_point(destructor:TW.MultiversX.Proto.GenericAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenericAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void GenericAction::ArenaDtor(void* object) {
  GenericAction* _this = reinterpret_cast< GenericAction* >(object);
  (void)_this;
}
void GenericAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericAction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.MultiversX.Proto.GenericAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&version_)) + sizeof(options_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.MultiversX.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.GenericAction.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.GenericAction.data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.MultiversX.Proto.GenericAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.GenericAction.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.GenericAction.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // uint32 options = 5;
  if (this->_internal_options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.MultiversX.Proto.GenericAction)
  return target;
}

size_t GenericAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.MultiversX.Proto.GenericAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint32 options = 5;
  if (this->_internal_options() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_options());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenericAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericAction::GetClassData() const { return &_class_data_; }

void GenericAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenericAction *>(to)->MergeFrom(
      static_cast<const GenericAction &>(from));
}


void GenericAction::MergeFrom(const GenericAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.MultiversX.Proto.GenericAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_accounts()) {
    _internal_mutable_accounts()->::TW::MultiversX::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_options() != 0) {
    _internal_set_options(from._internal_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericAction::CopyFrom(const GenericAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.MultiversX.Proto.GenericAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericAction::IsInitialized() const {
  return true;
}

void GenericAction::InternalSwap(GenericAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericAction, options_)
      + sizeof(GenericAction::options_)
      - PROTOBUF_FIELD_OFFSET(GenericAction, accounts_)>(
          reinterpret_cast<char*>(&accounts_),
          reinterpret_cast<char*>(&other->accounts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MultiversX_2eproto_getter, &descriptor_table_MultiversX_2eproto_once,
      file_level_metadata_MultiversX_2eproto[0]);
}

// ===================================================================

class EGLDTransfer::_Internal {
 public:
  static const ::TW::MultiversX::Proto::Accounts& accounts(const EGLDTransfer* msg);
};

const ::TW::MultiversX::Proto::Accounts&
EGLDTransfer::_Internal::accounts(const EGLDTransfer* msg) {
  return *msg->accounts_;
}
EGLDTransfer::EGLDTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.MultiversX.Proto.EGLDTransfer)
}
EGLDTransfer::EGLDTransfer(const EGLDTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::MultiversX::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:TW.MultiversX.Proto.EGLDTransfer)
}

inline void EGLDTransfer::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accounts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&accounts_)) + sizeof(version_));
}

EGLDTransfer::~EGLDTransfer() {
  // @@protoc_insertion_point(destructor:TW.MultiversX.Proto.EGLDTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EGLDTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void EGLDTransfer::ArenaDtor(void* object) {
  EGLDTransfer* _this = reinterpret_cast< EGLDTransfer* >(object);
  (void)_this;
}
void EGLDTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EGLDTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EGLDTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.MultiversX.Proto.EGLDTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EGLDTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.MultiversX.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.EGLDTransfer.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.EGLDTransfer.data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EGLDTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.MultiversX.Proto.EGLDTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.EGLDTransfer.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.EGLDTransfer.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.MultiversX.Proto.EGLDTransfer)
  return target;
}

size_t EGLDTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.MultiversX.Proto.EGLDTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EGLDTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EGLDTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EGLDTransfer::GetClassData() const { return &_class_data_; }

void EGLDTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EGLDTransfer *>(to)->MergeFrom(
      static_cast<const EGLDTransfer &>(from));
}


void EGLDTransfer::MergeFrom(const EGLDTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.MultiversX.Proto.EGLDTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_accounts()) {
    _internal_mutable_accounts()->::TW::MultiversX::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EGLDTransfer::CopyFrom(const EGLDTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.MultiversX.Proto.EGLDTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EGLDTransfer::IsInitialized() const {
  return true;
}

void EGLDTransfer::InternalSwap(EGLDTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EGLDTransfer, version_)
      + sizeof(EGLDTransfer::version_)
      - PROTOBUF_FIELD_OFFSET(EGLDTransfer, accounts_)>(
          reinterpret_cast<char*>(&accounts_),
          reinterpret_cast<char*>(&other->accounts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EGLDTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MultiversX_2eproto_getter, &descriptor_table_MultiversX_2eproto_once,
      file_level_metadata_MultiversX_2eproto[1]);
}

// ===================================================================

class ESDTTransfer::_Internal {
 public:
  static const ::TW::MultiversX::Proto::Accounts& accounts(const ESDTTransfer* msg);
};

const ::TW::MultiversX::Proto::Accounts&
ESDTTransfer::_Internal::accounts(const ESDTTransfer* msg) {
  return *msg->accounts_;
}
ESDTTransfer::ESDTTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.MultiversX.Proto.ESDTTransfer)
}
ESDTTransfer::ESDTTransfer(const ESDTTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_identifier().empty()) {
    token_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_identifier(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::MultiversX::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:TW.MultiversX.Proto.ESDTTransfer)
}

inline void ESDTTransfer::SharedCtor() {
token_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accounts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&accounts_)) + sizeof(version_));
}

ESDTTransfer::~ESDTTransfer() {
  // @@protoc_insertion_point(destructor:TW.MultiversX.Proto.ESDTTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ESDTTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void ESDTTransfer::ArenaDtor(void* object) {
  ESDTTransfer* _this = reinterpret_cast< ESDTTransfer* >(object);
  (void)_this;
}
void ESDTTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESDTTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESDTTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.MultiversX.Proto.ESDTTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_identifier_.ClearToEmpty();
  amount_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESDTTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.MultiversX.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.ESDTTransfer.token_identifier"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.ESDTTransfer.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ESDTTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.MultiversX.Proto.ESDTTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string token_identifier = 2;
  if (!this->_internal_token_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_identifier().data(), static_cast<int>(this->_internal_token_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.ESDTTransfer.token_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_identifier(), target);
  }

  // string amount = 3;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.ESDTTransfer.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.MultiversX.Proto.ESDTTransfer)
  return target;
}

size_t ESDTTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.MultiversX.Proto.ESDTTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_identifier = 2;
  if (!this->_internal_token_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_identifier());
  }

  // string amount = 3;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ESDTTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ESDTTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ESDTTransfer::GetClassData() const { return &_class_data_; }

void ESDTTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ESDTTransfer *>(to)->MergeFrom(
      static_cast<const ESDTTransfer &>(from));
}


void ESDTTransfer::MergeFrom(const ESDTTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.MultiversX.Proto.ESDTTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_identifier().empty()) {
    _internal_set_token_identifier(from._internal_token_identifier());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_has_accounts()) {
    _internal_mutable_accounts()->::TW::MultiversX::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ESDTTransfer::CopyFrom(const ESDTTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.MultiversX.Proto.ESDTTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESDTTransfer::IsInitialized() const {
  return true;
}

void ESDTTransfer::InternalSwap(ESDTTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_identifier_, lhs_arena,
      &other->token_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESDTTransfer, version_)
      + sizeof(ESDTTransfer::version_)
      - PROTOBUF_FIELD_OFFSET(ESDTTransfer, accounts_)>(
          reinterpret_cast<char*>(&accounts_),
          reinterpret_cast<char*>(&other->accounts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESDTTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MultiversX_2eproto_getter, &descriptor_table_MultiversX_2eproto_once,
      file_level_metadata_MultiversX_2eproto[2]);
}

// ===================================================================

class ESDTNFTTransfer::_Internal {
 public:
  static const ::TW::MultiversX::Proto::Accounts& accounts(const ESDTNFTTransfer* msg);
};

const ::TW::MultiversX::Proto::Accounts&
ESDTNFTTransfer::_Internal::accounts(const ESDTNFTTransfer* msg) {
  return *msg->accounts_;
}
ESDTNFTTransfer::ESDTNFTTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.MultiversX.Proto.ESDTNFTTransfer)
}
ESDTNFTTransfer::ESDTNFTTransfer(const ESDTNFTTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_collection().empty()) {
    token_collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_collection(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::TW::MultiversX::Proto::Accounts(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  ::memcpy(&token_nonce_, &from.token_nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&token_nonce_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:TW.MultiversX.Proto.ESDTNFTTransfer)
}

inline void ESDTNFTTransfer::SharedCtor() {
token_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accounts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&accounts_)) + sizeof(version_));
}

ESDTNFTTransfer::~ESDTNFTTransfer() {
  // @@protoc_insertion_point(destructor:TW.MultiversX.Proto.ESDTNFTTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ESDTNFTTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void ESDTNFTTransfer::ArenaDtor(void* object) {
  ESDTNFTTransfer* _this = reinterpret_cast< ESDTNFTTransfer* >(object);
  (void)_this;
}
void ESDTNFTTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESDTNFTTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESDTNFTTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.MultiversX.Proto.ESDTNFTTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_collection_.ClearToEmpty();
  amount_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  ::memset(&token_nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&token_nonce_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESDTNFTTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.MultiversX.Proto.Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token_collection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.ESDTNFTTransfer.token_collection"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 token_nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          token_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.ESDTNFTTransfer.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ESDTNFTTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.MultiversX.Proto.ESDTNFTTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accounts(this), target, stream);
  }

  // string token_collection = 2;
  if (!this->_internal_token_collection().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_collection().data(), static_cast<int>(this->_internal_token_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.ESDTNFTTransfer.token_collection");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_collection(), target);
  }

  // uint64 token_nonce = 3;
  if (this->_internal_token_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_token_nonce(), target);
  }

  // string amount = 4;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.ESDTNFTTransfer.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.MultiversX.Proto.ESDTNFTTransfer)
  return target;
}

size_t ESDTNFTTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.MultiversX.Proto.ESDTNFTTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_collection = 2;
  if (!this->_internal_token_collection().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_collection());
  }

  // string amount = 4;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  if (this->_internal_has_accounts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  // uint64 token_nonce = 3;
  if (this->_internal_token_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_token_nonce());
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ESDTNFTTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ESDTNFTTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ESDTNFTTransfer::GetClassData() const { return &_class_data_; }

void ESDTNFTTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ESDTNFTTransfer *>(to)->MergeFrom(
      static_cast<const ESDTNFTTransfer &>(from));
}


void ESDTNFTTransfer::MergeFrom(const ESDTNFTTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.MultiversX.Proto.ESDTNFTTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_collection().empty()) {
    _internal_set_token_collection(from._internal_token_collection());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_has_accounts()) {
    _internal_mutable_accounts()->::TW::MultiversX::Proto::Accounts::MergeFrom(from._internal_accounts());
  }
  if (from._internal_token_nonce() != 0) {
    _internal_set_token_nonce(from._internal_token_nonce());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ESDTNFTTransfer::CopyFrom(const ESDTNFTTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.MultiversX.Proto.ESDTNFTTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESDTNFTTransfer::IsInitialized() const {
  return true;
}

void ESDTNFTTransfer::InternalSwap(ESDTNFTTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_collection_, lhs_arena,
      &other->token_collection_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESDTNFTTransfer, version_)
      + sizeof(ESDTNFTTransfer::version_)
      - PROTOBUF_FIELD_OFFSET(ESDTNFTTransfer, accounts_)>(
          reinterpret_cast<char*>(&accounts_),
          reinterpret_cast<char*>(&other->accounts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESDTNFTTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MultiversX_2eproto_getter, &descriptor_table_MultiversX_2eproto_once,
      file_level_metadata_MultiversX_2eproto[3]);
}

// ===================================================================

class Accounts::_Internal {
 public:
};

Accounts::Accounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.MultiversX.Proto.Accounts)
}
Accounts::Accounts(const Accounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  sender_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_username().empty()) {
    sender_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_username(), 
      GetArenaForAllocation());
  }
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArenaForAllocation());
  }
  receiver_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_username().empty()) {
    receiver_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_username(), 
      GetArenaForAllocation());
  }
  guardian_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guardian_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guardian().empty()) {
    guardian_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guardian(), 
      GetArenaForAllocation());
  }
  sender_nonce_ = from.sender_nonce_;
  // @@protoc_insertion_point(copy_constructor:TW.MultiversX.Proto.Accounts)
}

inline void Accounts::SharedCtor() {
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
guardian_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guardian_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_nonce_ = uint64_t{0u};
}

Accounts::~Accounts() {
  // @@protoc_insertion_point(destructor:TW.MultiversX.Proto.Accounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Accounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guardian_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Accounts::ArenaDtor(void* object) {
  Accounts* _this = reinterpret_cast< Accounts* >(object);
  (void)_this;
}
void Accounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Accounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Accounts::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.MultiversX.Proto.Accounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty();
  sender_username_.ClearToEmpty();
  receiver_.ClearToEmpty();
  receiver_username_.ClearToEmpty();
  guardian_.ClearToEmpty();
  sender_nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sender_nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sender_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.Accounts.sender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender_username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.Accounts.sender_username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.Accounts.receiver"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver_username = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_receiver_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.Accounts.receiver_username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string guardian = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_guardian();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.Accounts.guardian"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Accounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.MultiversX.Proto.Accounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sender_nonce = 1;
  if (this->_internal_sender_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sender_nonce(), target);
  }

  // string sender = 2;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.Accounts.sender");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender(), target);
  }

  // string sender_username = 3;
  if (!this->_internal_sender_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_username().data(), static_cast<int>(this->_internal_sender_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.Accounts.sender_username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_username(), target);
  }

  // string receiver = 4;
  if (!this->_internal_receiver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.Accounts.receiver");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_receiver(), target);
  }

  // string receiver_username = 5;
  if (!this->_internal_receiver_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_username().data(), static_cast<int>(this->_internal_receiver_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.Accounts.receiver_username");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_receiver_username(), target);
  }

  // string guardian = 6;
  if (!this->_internal_guardian().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guardian().data(), static_cast<int>(this->_internal_guardian().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.Accounts.guardian");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_guardian(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.MultiversX.Proto.Accounts)
  return target;
}

size_t Accounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.MultiversX.Proto.Accounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 2;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string sender_username = 3;
  if (!this->_internal_sender_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_username());
  }

  // string receiver = 4;
  if (!this->_internal_receiver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string receiver_username = 5;
  if (!this->_internal_receiver_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_username());
  }

  // string guardian = 6;
  if (!this->_internal_guardian().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guardian());
  }

  // uint64 sender_nonce = 1;
  if (this->_internal_sender_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sender_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Accounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Accounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Accounts::GetClassData() const { return &_class_data_; }

void Accounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Accounts *>(to)->MergeFrom(
      static_cast<const Accounts &>(from));
}


void Accounts::MergeFrom(const Accounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.MultiversX.Proto.Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from._internal_sender_username().empty()) {
    _internal_set_sender_username(from._internal_sender_username());
  }
  if (!from._internal_receiver().empty()) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_receiver_username().empty()) {
    _internal_set_receiver_username(from._internal_receiver_username());
  }
  if (!from._internal_guardian().empty()) {
    _internal_set_guardian(from._internal_guardian());
  }
  if (from._internal_sender_nonce() != 0) {
    _internal_set_sender_nonce(from._internal_sender_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Accounts::CopyFrom(const Accounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.MultiversX.Proto.Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accounts::IsInitialized() const {
  return true;
}

void Accounts::InternalSwap(Accounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_username_, lhs_arena,
      &other->sender_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_, lhs_arena,
      &other->receiver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_username_, lhs_arena,
      &other->receiver_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guardian_, lhs_arena,
      &other->guardian_, rhs_arena
  );
  swap(sender_nonce_, other->sender_nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MultiversX_2eproto_getter, &descriptor_table_MultiversX_2eproto_once,
      file_level_metadata_MultiversX_2eproto[4]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::MultiversX::Proto::GenericAction& generic_action(const SigningInput* msg);
  static const ::TW::MultiversX::Proto::EGLDTransfer& egld_transfer(const SigningInput* msg);
  static const ::TW::MultiversX::Proto::ESDTTransfer& esdt_transfer(const SigningInput* msg);
  static const ::TW::MultiversX::Proto::ESDTNFTTransfer& esdtnft_transfer(const SigningInput* msg);
};

const ::TW::MultiversX::Proto::GenericAction&
SigningInput::_Internal::generic_action(const SigningInput* msg) {
  return *msg->message_oneof_.generic_action_;
}
const ::TW::MultiversX::Proto::EGLDTransfer&
SigningInput::_Internal::egld_transfer(const SigningInput* msg) {
  return *msg->message_oneof_.egld_transfer_;
}
const ::TW::MultiversX::Proto::ESDTTransfer&
SigningInput::_Internal::esdt_transfer(const SigningInput* msg) {
  return *msg->message_oneof_.esdt_transfer_;
}
const ::TW::MultiversX::Proto::ESDTNFTTransfer&
SigningInput::_Internal::esdtnft_transfer(const SigningInput* msg) {
  return *msg->message_oneof_.esdtnft_transfer_;
}
void SigningInput::set_allocated_generic_action(::TW::MultiversX::Proto::GenericAction* generic_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (generic_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::GenericAction>::GetOwningArena(generic_action);
    if (message_arena != submessage_arena) {
      generic_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_action, submessage_arena);
    }
    set_has_generic_action();
    message_oneof_.generic_action_ = generic_action;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningInput.generic_action)
}
void SigningInput::set_allocated_egld_transfer(::TW::MultiversX::Proto::EGLDTransfer* egld_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (egld_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::EGLDTransfer>::GetOwningArena(egld_transfer);
    if (message_arena != submessage_arena) {
      egld_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, egld_transfer, submessage_arena);
    }
    set_has_egld_transfer();
    message_oneof_.egld_transfer_ = egld_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningInput.egld_transfer)
}
void SigningInput::set_allocated_esdt_transfer(::TW::MultiversX::Proto::ESDTTransfer* esdt_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (esdt_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::ESDTTransfer>::GetOwningArena(esdt_transfer);
    if (message_arena != submessage_arena) {
      esdt_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esdt_transfer, submessage_arena);
    }
    set_has_esdt_transfer();
    message_oneof_.esdt_transfer_ = esdt_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningInput.esdt_transfer)
}
void SigningInput::set_allocated_esdtnft_transfer(::TW::MultiversX::Proto::ESDTNFTTransfer* esdtnft_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (esdtnft_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::ESDTNFTTransfer>::GetOwningArena(esdtnft_transfer);
    if (message_arena != submessage_arena) {
      esdtnft_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esdtnft_transfer, submessage_arena);
    }
    set_has_esdtnft_transfer();
    message_oneof_.esdtnft_transfer_ = esdtnft_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningInput.esdtnft_transfer)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.MultiversX.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gas_price_, &from.gas_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&gas_limit_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(gas_limit_));
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kGenericAction: {
      _internal_mutable_generic_action()->::TW::MultiversX::Proto::GenericAction::MergeFrom(from._internal_generic_action());
      break;
    }
    case kEgldTransfer: {
      _internal_mutable_egld_transfer()->::TW::MultiversX::Proto::EGLDTransfer::MergeFrom(from._internal_egld_transfer());
      break;
    }
    case kEsdtTransfer: {
      _internal_mutable_esdt_transfer()->::TW::MultiversX::Proto::ESDTTransfer::MergeFrom(from._internal_esdt_transfer());
      break;
    }
    case kEsdtnftTransfer: {
      _internal_mutable_esdtnft_transfer()->::TW::MultiversX::Proto::ESDTNFTTransfer::MergeFrom(from._internal_esdtnft_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.MultiversX.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gas_limit_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(gas_limit_));
clear_has_message_oneof();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.MultiversX.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.MultiversX.Proto.SigningInput)
  switch (message_oneof_case()) {
    case kGenericAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.generic_action_;
      }
      break;
    }
    case kEgldTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.egld_transfer_;
      }
      break;
    }
    case kEsdtTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.esdt_transfer_;
      }
      break;
    }
    case kEsdtnftTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.esdtnft_transfer_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.MultiversX.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  ::memset(&gas_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gas_limit_) -
      reinterpret_cast<char*>(&gas_price_)) + sizeof(gas_limit_));
  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.SigningInput.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.MultiversX.Proto.GenericAction generic_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.MultiversX.Proto.EGLDTransfer egld_transfer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_egld_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.MultiversX.Proto.ESDTTransfer esdt_transfer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_esdt_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.MultiversX.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_esdtnft_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.MultiversX.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.SigningInput.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // uint64 gas_price = 3;
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gas_price(), target);
  }

  // uint64 gas_limit = 4;
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas_limit(), target);
  }

  // .TW.MultiversX.Proto.GenericAction generic_action = 5;
  if (_internal_has_generic_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::generic_action(this), target, stream);
  }

  // .TW.MultiversX.Proto.EGLDTransfer egld_transfer = 6;
  if (_internal_has_egld_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::egld_transfer(this), target, stream);
  }

  // .TW.MultiversX.Proto.ESDTTransfer esdt_transfer = 7;
  if (_internal_has_esdt_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::esdt_transfer(this), target, stream);
  }

  // .TW.MultiversX.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
  if (_internal_has_esdtnft_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::esdtnft_transfer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.MultiversX.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.MultiversX.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // uint64 gas_price = 3;
  if (this->_internal_gas_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_price());
  }

  // uint64 gas_limit = 4;
  if (this->_internal_gas_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_limit());
  }

  switch (message_oneof_case()) {
    // .TW.MultiversX.Proto.GenericAction generic_action = 5;
    case kGenericAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.generic_action_);
      break;
    }
    // .TW.MultiversX.Proto.EGLDTransfer egld_transfer = 6;
    case kEgldTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.egld_transfer_);
      break;
    }
    // .TW.MultiversX.Proto.ESDTTransfer esdt_transfer = 7;
    case kEsdtTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.esdt_transfer_);
      break;
    }
    // .TW.MultiversX.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
    case kEsdtnftTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.esdtnft_transfer_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.MultiversX.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  switch (from.message_oneof_case()) {
    case kGenericAction: {
      _internal_mutable_generic_action()->::TW::MultiversX::Proto::GenericAction::MergeFrom(from._internal_generic_action());
      break;
    }
    case kEgldTransfer: {
      _internal_mutable_egld_transfer()->::TW::MultiversX::Proto::EGLDTransfer::MergeFrom(from._internal_egld_transfer());
      break;
    }
    case kEsdtTransfer: {
      _internal_mutable_esdt_transfer()->::TW::MultiversX::Proto::ESDTTransfer::MergeFrom(from._internal_esdt_transfer());
      break;
    }
    case kEsdtnftTransfer: {
      _internal_mutable_esdtnft_transfer()->::TW::MultiversX::Proto::ESDTNFTTransfer::MergeFrom(from._internal_esdtnft_transfer());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.MultiversX.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, gas_limit_)
      + sizeof(SigningInput::gas_limit_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, gas_price_)>(
          reinterpret_cast<char*>(&gas_price_),
          reinterpret_cast<char*>(&other->gas_price_));
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MultiversX_2eproto_getter, &descriptor_table_MultiversX_2eproto_once,
      file_level_metadata_MultiversX_2eproto[5]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.MultiversX.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.MultiversX.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.MultiversX.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.MultiversX.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  signature_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.SigningOutput.encoded"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.SigningOutput.signature"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.MultiversX.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.MultiversX.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string encoded = 1;
  if (!this->_internal_encoded().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoded().data(), static_cast<int>(this->_internal_encoded().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.SigningOutput.encoded");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // string signature = 2;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.SigningOutput.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.MultiversX.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.MultiversX.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.MultiversX.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoded());
  }

  // string signature = 2;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 3;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.MultiversX.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.MultiversX.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MultiversX_2eproto_getter, &descriptor_table_MultiversX_2eproto_once,
      file_level_metadata_MultiversX_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace MultiversX
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::MultiversX::Proto::GenericAction* Arena::CreateMaybeMessage< ::TW::MultiversX::Proto::GenericAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::MultiversX::Proto::GenericAction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::MultiversX::Proto::EGLDTransfer* Arena::CreateMaybeMessage< ::TW::MultiversX::Proto::EGLDTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::MultiversX::Proto::EGLDTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::MultiversX::Proto::ESDTTransfer* Arena::CreateMaybeMessage< ::TW::MultiversX::Proto::ESDTTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::MultiversX::Proto::ESDTTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::MultiversX::Proto::ESDTNFTTransfer* Arena::CreateMaybeMessage< ::TW::MultiversX::Proto::ESDTNFTTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::MultiversX::Proto::ESDTNFTTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::MultiversX::Proto::Accounts* Arena::CreateMaybeMessage< ::TW::MultiversX::Proto::Accounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::MultiversX::Proto::Accounts >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::MultiversX::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::MultiversX::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::MultiversX::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::MultiversX::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::MultiversX::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::MultiversX::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
