// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FIO.proto

#include "FIO.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace FIO {
namespace Proto {
constexpr PublicAddress::PublicAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coin_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PublicAddressDefaultTypeInternal {
  constexpr PublicAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublicAddressDefaultTypeInternal() {}
  union {
    PublicAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublicAddressDefaultTypeInternal _PublicAddress_default_instance_;
constexpr NewFundsContent::NewFundsContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payee_public_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offline_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NewFundsContentDefaultTypeInternal {
  constexpr NewFundsContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewFundsContentDefaultTypeInternal() {}
  union {
    NewFundsContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewFundsContentDefaultTypeInternal _NewFundsContent_default_instance_;
constexpr Action_RegisterFioAddress::Action_RegisterFioAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fio_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_fio_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_(uint64_t{0u}){}
struct Action_RegisterFioAddressDefaultTypeInternal {
  constexpr Action_RegisterFioAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Action_RegisterFioAddressDefaultTypeInternal() {}
  union {
    Action_RegisterFioAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Action_RegisterFioAddressDefaultTypeInternal _Action_RegisterFioAddress_default_instance_;
constexpr Action_AddPubAddress::Action_AddPubAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_addresses_()
  , fio_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_(uint64_t{0u}){}
struct Action_AddPubAddressDefaultTypeInternal {
  constexpr Action_AddPubAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Action_AddPubAddressDefaultTypeInternal() {}
  union {
    Action_AddPubAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Action_AddPubAddressDefaultTypeInternal _Action_AddPubAddress_default_instance_;
constexpr Action_Transfer::Action_Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payee_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(uint64_t{0u})
  , fee_(uint64_t{0u}){}
struct Action_TransferDefaultTypeInternal {
  constexpr Action_TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Action_TransferDefaultTypeInternal() {}
  union {
    Action_Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Action_TransferDefaultTypeInternal _Action_Transfer_default_instance_;
constexpr Action_RenewFioAddress::Action_RenewFioAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fio_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_fio_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_(uint64_t{0u}){}
struct Action_RenewFioAddressDefaultTypeInternal {
  constexpr Action_RenewFioAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Action_RenewFioAddressDefaultTypeInternal() {}
  union {
    Action_RenewFioAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Action_RenewFioAddressDefaultTypeInternal _Action_RenewFioAddress_default_instance_;
constexpr Action_NewFundsRequest::Action_NewFundsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payer_fio_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payer_fio_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payee_fio_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(nullptr)
  , fee_(uint64_t{0u}){}
struct Action_NewFundsRequestDefaultTypeInternal {
  constexpr Action_NewFundsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Action_NewFundsRequestDefaultTypeInternal() {}
  union {
    Action_NewFundsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Action_NewFundsRequestDefaultTypeInternal _Action_NewFundsRequest_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr ChainParams::ChainParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , head_block_number_(uint64_t{0u})
  , ref_block_prefix_(uint64_t{0u}){}
struct ChainParamsDefaultTypeInternal {
  constexpr ChainParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChainParamsDefaultTypeInternal() {}
  union {
    ChainParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChainParamsDefaultTypeInternal _ChainParams_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tpid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chain_params_(nullptr)
  , action_(nullptr)
  , expiry_(0u){}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace FIO
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FIO_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FIO_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FIO_2eproto = nullptr;

const uint32_t TableStruct_FIO_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::PublicAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::PublicAddress, coin_symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::PublicAddress, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::NewFundsContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::NewFundsContent, payee_public_address_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::NewFundsContent, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::NewFundsContent, coin_symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::NewFundsContent, memo_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::NewFundsContent, hash_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::NewFundsContent, offline_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RegisterFioAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RegisterFioAddress, fio_address_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RegisterFioAddress, owner_fio_public_key_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RegisterFioAddress, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_AddPubAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_AddPubAddress, fio_address_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_AddPubAddress, public_addresses_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_AddPubAddress, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_Transfer, payee_public_key_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_Transfer, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RenewFioAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RenewFioAddress, fio_address_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RenewFioAddress, owner_fio_public_key_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_RenewFioAddress, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_NewFundsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_NewFundsRequest, payer_fio_name_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_NewFundsRequest, payer_fio_address_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_NewFundsRequest, payee_fio_name_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_NewFundsRequest, content_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action_NewFundsRequest, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::Action, message_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::ChainParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::ChainParams, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::ChainParams, head_block_number_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::ChainParams, ref_block_prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningInput, expiry_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningInput, chain_params_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningInput, tpid_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningInput, action_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningInput, owner_public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningOutput, json_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::FIO::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::FIO::Proto::PublicAddress)},
  { 8, -1, -1, sizeof(::TW::FIO::Proto::NewFundsContent)},
  { 20, -1, -1, sizeof(::TW::FIO::Proto::Action_RegisterFioAddress)},
  { 29, -1, -1, sizeof(::TW::FIO::Proto::Action_AddPubAddress)},
  { 38, -1, -1, sizeof(::TW::FIO::Proto::Action_Transfer)},
  { 47, -1, -1, sizeof(::TW::FIO::Proto::Action_RenewFioAddress)},
  { 56, -1, -1, sizeof(::TW::FIO::Proto::Action_NewFundsRequest)},
  { 67, -1, -1, sizeof(::TW::FIO::Proto::Action)},
  { 79, -1, -1, sizeof(::TW::FIO::Proto::ChainParams)},
  { 88, -1, -1, sizeof(::TW::FIO::Proto::SigningInput)},
  { 100, -1, -1, sizeof(::TW::FIO::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_PublicAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_NewFundsContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_Action_RegisterFioAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_Action_AddPubAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_Action_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_Action_RenewFioAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_Action_NewFundsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_ChainParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::FIO::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_FIO_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tFIO.proto\022\014TW.FIO.Proto\032\014Common.proto\""
  "5\n\rPublicAddress\022\023\n\013coin_symbol\030\001 \001(\t\022\017\n"
  "\007address\030\002 \001(\t\"\205\001\n\017NewFundsContent\022\034\n\024pa"
  "yee_public_address\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t"
  "\022\023\n\013coin_symbol\030\003 \001(\t\022\014\n\004memo\030\004 \001(\t\022\014\n\004h"
  "ash\030\005 \001(\t\022\023\n\013offline_url\030\006 \001(\t\"\364\006\n\006Actio"
  "n\022O\n\034register_fio_address_message\030\001 \001(\0132"
  "\'.TW.FIO.Proto.Action.RegisterFioAddress"
  "H\000\022E\n\027add_pub_address_message\030\002 \001(\0132\".TW"
  ".FIO.Proto.Action.AddPubAddressH\000\0229\n\020tra"
  "nsfer_message\030\003 \001(\0132\035.TW.FIO.Proto.Actio"
  "n.TransferH\000\022I\n\031renew_fio_address_messag"
  "e\030\004 \001(\0132$.TW.FIO.Proto.Action.RenewFioAd"
  "dressH\000\022I\n\031new_funds_request_message\030\005 \001"
  "(\0132$.TW.FIO.Proto.Action.NewFundsRequest"
  "H\000\032T\n\022RegisterFioAddress\022\023\n\013fio_address\030"
  "\001 \001(\t\022\034\n\024owner_fio_public_key\030\002 \001(\t\022\013\n\003f"
  "ee\030\003 \001(\004\032h\n\rAddPubAddress\022\023\n\013fio_address"
  "\030\001 \001(\t\0225\n\020public_addresses\030\002 \003(\0132\033.TW.FI"
  "O.Proto.PublicAddress\022\013\n\003fee\030\003 \001(\004\032A\n\010Tr"
  "ansfer\022\030\n\020payee_public_key\030\001 \001(\t\022\016\n\006amou"
  "nt\030\002 \001(\004\022\013\n\003fee\030\003 \001(\004\032Q\n\017RenewFioAddress"
  "\022\023\n\013fio_address\030\001 \001(\t\022\034\n\024owner_fio_publi"
  "c_key\030\002 \001(\t\022\013\n\003fee\030\003 \001(\004\032\231\001\n\017NewFundsReq"
  "uest\022\026\n\016payer_fio_name\030\001 \001(\t\022\031\n\021payer_fi"
  "o_address\030\002 \001(\t\022\026\n\016payee_fio_name\030\003 \001(\t\022"
  ".\n\007content\030\004 \001(\0132\035.TW.FIO.Proto.NewFunds"
  "Content\022\013\n\003fee\030\005 \001(\004B\017\n\rmessage_oneof\"T\n"
  "\013ChainParams\022\020\n\010chain_id\030\001 \001(\014\022\031\n\021head_b"
  "lock_number\030\002 \001(\004\022\030\n\020ref_block_prefix\030\003 "
  "\001(\004\"\262\001\n\014SigningInput\022\016\n\006expiry\030\001 \001(\r\022/\n\014"
  "chain_params\030\002 \001(\0132\031.TW.FIO.Proto.ChainP"
  "arams\022\023\n\013private_key\030\003 \001(\014\022\014\n\004tpid\030\004 \001(\t"
  "\022$\n\006action\030\005 \001(\0132\024.TW.FIO.Proto.Action\022\030"
  "\n\020owner_public_key\030\006 \001(\t\"b\n\rSigningOutpu"
  "t\022\014\n\004json\030\001 \001(\t\022,\n\005error\030\002 \001(\0162\035.TW.Comm"
  "on.Proto.SigningError\022\025\n\rerror_message\030\003"
  " \001(\tB\027\n\025wallet.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FIO_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FIO_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FIO_2eproto = {
  false, false, 1517, descriptor_table_protodef_FIO_2eproto, "FIO.proto", 
  &descriptor_table_FIO_2eproto_once, descriptor_table_FIO_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_FIO_2eproto::offsets,
  file_level_metadata_FIO_2eproto, file_level_enum_descriptors_FIO_2eproto, file_level_service_descriptors_FIO_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_FIO_2eproto_getter() {
  return &descriptor_table_FIO_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FIO_2eproto(&descriptor_table_FIO_2eproto);
namespace TW {
namespace FIO {
namespace Proto {

// ===================================================================

class PublicAddress::_Internal {
 public:
};

PublicAddress::PublicAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.PublicAddress)
}
PublicAddress::PublicAddress(const PublicAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coin_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    coin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coin_symbol().empty()) {
    coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_coin_symbol(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.PublicAddress)
}

inline void PublicAddress::SharedCtor() {
coin_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  coin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicAddress::~PublicAddress() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.PublicAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublicAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  coin_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicAddress::ArenaDtor(void* object) {
  PublicAddress* _this = reinterpret_cast< PublicAddress* >(object);
  (void)_this;
}
void PublicAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublicAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.PublicAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coin_symbol_.ClearToEmpty();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string coin_symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_coin_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.PublicAddress.coin_symbol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.PublicAddress.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.PublicAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string coin_symbol = 1;
  if (!this->_internal_coin_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_symbol().data(), static_cast<int>(this->_internal_coin_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.PublicAddress.coin_symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_coin_symbol(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.PublicAddress.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.PublicAddress)
  return target;
}

size_t PublicAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.PublicAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string coin_symbol = 1;
  if (!this->_internal_coin_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coin_symbol());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublicAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicAddress::GetClassData() const { return &_class_data_; }

void PublicAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublicAddress *>(to)->MergeFrom(
      static_cast<const PublicAddress &>(from));
}


void PublicAddress::MergeFrom(const PublicAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.PublicAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_coin_symbol().empty()) {
    _internal_set_coin_symbol(from._internal_coin_symbol());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicAddress::CopyFrom(const PublicAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.PublicAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicAddress::IsInitialized() const {
  return true;
}

void PublicAddress::InternalSwap(PublicAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &coin_symbol_, lhs_arena,
      &other->coin_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[0]);
}

// ===================================================================

class NewFundsContent::_Internal {
 public:
};

NewFundsContent::NewFundsContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.NewFundsContent)
}
NewFundsContent::NewFundsContent(const NewFundsContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payee_public_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payee_public_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payee_public_address().empty()) {
    payee_public_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payee_public_address(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  coin_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    coin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coin_symbol().empty()) {
    coin_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_coin_symbol(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  offline_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offline_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offline_url().empty()) {
    offline_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_offline_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.NewFundsContent)
}

inline void NewFundsContent::SharedCtor() {
payee_public_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payee_public_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
coin_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  coin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offline_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offline_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewFundsContent::~NewFundsContent() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.NewFundsContent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewFundsContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payee_public_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coin_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offline_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewFundsContent::ArenaDtor(void* object) {
  NewFundsContent* _this = reinterpret_cast< NewFundsContent* >(object);
  (void)_this;
}
void NewFundsContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewFundsContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewFundsContent::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.NewFundsContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payee_public_address_.ClearToEmpty();
  amount_.ClearToEmpty();
  coin_symbol_.ClearToEmpty();
  memo_.ClearToEmpty();
  hash_.ClearToEmpty();
  offline_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewFundsContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payee_public_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payee_public_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.NewFundsContent.payee_public_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.NewFundsContent.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string coin_symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_coin_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.NewFundsContent.coin_symbol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.NewFundsContent.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.NewFundsContent.hash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string offline_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_offline_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.NewFundsContent.offline_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewFundsContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.NewFundsContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payee_public_address = 1;
  if (!this->_internal_payee_public_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payee_public_address().data(), static_cast<int>(this->_internal_payee_public_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.NewFundsContent.payee_public_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payee_public_address(), target);
  }

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.NewFundsContent.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // string coin_symbol = 3;
  if (!this->_internal_coin_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_symbol().data(), static_cast<int>(this->_internal_coin_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.NewFundsContent.coin_symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_coin_symbol(), target);
  }

  // string memo = 4;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.NewFundsContent.memo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_memo(), target);
  }

  // string hash = 5;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.NewFundsContent.hash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hash(), target);
  }

  // string offline_url = 6;
  if (!this->_internal_offline_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offline_url().data(), static_cast<int>(this->_internal_offline_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.NewFundsContent.offline_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_offline_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.NewFundsContent)
  return target;
}

size_t NewFundsContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.NewFundsContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payee_public_address = 1;
  if (!this->_internal_payee_public_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payee_public_address());
  }

  // string amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string coin_symbol = 3;
  if (!this->_internal_coin_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coin_symbol());
  }

  // string memo = 4;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // string hash = 5;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string offline_url = 6;
  if (!this->_internal_offline_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offline_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewFundsContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewFundsContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewFundsContent::GetClassData() const { return &_class_data_; }

void NewFundsContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewFundsContent *>(to)->MergeFrom(
      static_cast<const NewFundsContent &>(from));
}


void NewFundsContent::MergeFrom(const NewFundsContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.NewFundsContent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payee_public_address().empty()) {
    _internal_set_payee_public_address(from._internal_payee_public_address());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_coin_symbol().empty()) {
    _internal_set_coin_symbol(from._internal_coin_symbol());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (!from._internal_offline_url().empty()) {
    _internal_set_offline_url(from._internal_offline_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewFundsContent::CopyFrom(const NewFundsContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.NewFundsContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFundsContent::IsInitialized() const {
  return true;
}

void NewFundsContent::InternalSwap(NewFundsContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payee_public_address_, lhs_arena,
      &other->payee_public_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &coin_symbol_, lhs_arena,
      &other->coin_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &offline_url_, lhs_arena,
      &other->offline_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewFundsContent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[1]);
}

// ===================================================================

class Action_RegisterFioAddress::_Internal {
 public:
};

Action_RegisterFioAddress::Action_RegisterFioAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.Action.RegisterFioAddress)
}
Action_RegisterFioAddress::Action_RegisterFioAddress(const Action_RegisterFioAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fio_address().empty()) {
    fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fio_address(), 
      GetArenaForAllocation());
  }
  owner_fio_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_fio_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_fio_public_key().empty()) {
    owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_fio_public_key(), 
      GetArenaForAllocation());
  }
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.Action.RegisterFioAddress)
}

inline void Action_RegisterFioAddress::SharedCtor() {
fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owner_fio_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_fio_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fee_ = uint64_t{0u};
}

Action_RegisterFioAddress::~Action_RegisterFioAddress() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.Action.RegisterFioAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action_RegisterFioAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fio_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_fio_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action_RegisterFioAddress::ArenaDtor(void* object) {
  Action_RegisterFioAddress* _this = reinterpret_cast< Action_RegisterFioAddress* >(object);
  (void)_this;
}
void Action_RegisterFioAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action_RegisterFioAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action_RegisterFioAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.Action.RegisterFioAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fio_address_.ClearToEmpty();
  owner_fio_public_key_.ClearToEmpty();
  fee_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action_RegisterFioAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fio_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fio_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.RegisterFioAddress.fio_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner_fio_public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_fio_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action_RegisterFioAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.Action.RegisterFioAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fio_address = 1;
  if (!this->_internal_fio_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fio_address().data(), static_cast<int>(this->_internal_fio_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.RegisterFioAddress.fio_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fio_address(), target);
  }

  // string owner_fio_public_key = 2;
  if (!this->_internal_owner_fio_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_fio_public_key().data(), static_cast<int>(this->_internal_owner_fio_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.RegisterFioAddress.owner_fio_public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_fio_public_key(), target);
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.Action.RegisterFioAddress)
  return target;
}

size_t Action_RegisterFioAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.Action.RegisterFioAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fio_address = 1;
  if (!this->_internal_fio_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fio_address());
  }

  // string owner_fio_public_key = 2;
  if (!this->_internal_owner_fio_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_fio_public_key());
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action_RegisterFioAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action_RegisterFioAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action_RegisterFioAddress::GetClassData() const { return &_class_data_; }

void Action_RegisterFioAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action_RegisterFioAddress *>(to)->MergeFrom(
      static_cast<const Action_RegisterFioAddress &>(from));
}


void Action_RegisterFioAddress::MergeFrom(const Action_RegisterFioAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.Action.RegisterFioAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fio_address().empty()) {
    _internal_set_fio_address(from._internal_fio_address());
  }
  if (!from._internal_owner_fio_public_key().empty()) {
    _internal_set_owner_fio_public_key(from._internal_owner_fio_public_key());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action_RegisterFioAddress::CopyFrom(const Action_RegisterFioAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.Action.RegisterFioAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_RegisterFioAddress::IsInitialized() const {
  return true;
}

void Action_RegisterFioAddress::InternalSwap(Action_RegisterFioAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fio_address_, lhs_arena,
      &other->fio_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_fio_public_key_, lhs_arena,
      &other->owner_fio_public_key_, rhs_arena
  );
  swap(fee_, other->fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_RegisterFioAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[2]);
}

// ===================================================================

class Action_AddPubAddress::_Internal {
 public:
};

Action_AddPubAddress::Action_AddPubAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  public_addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.Action.AddPubAddress)
}
Action_AddPubAddress::Action_AddPubAddress(const Action_AddPubAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_addresses_(from.public_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fio_address().empty()) {
    fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fio_address(), 
      GetArenaForAllocation());
  }
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.Action.AddPubAddress)
}

inline void Action_AddPubAddress::SharedCtor() {
fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fee_ = uint64_t{0u};
}

Action_AddPubAddress::~Action_AddPubAddress() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.Action.AddPubAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action_AddPubAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fio_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action_AddPubAddress::ArenaDtor(void* object) {
  Action_AddPubAddress* _this = reinterpret_cast< Action_AddPubAddress* >(object);
  (void)_this;
}
void Action_AddPubAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action_AddPubAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action_AddPubAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.Action.AddPubAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_addresses_.Clear();
  fio_address_.ClearToEmpty();
  fee_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action_AddPubAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fio_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fio_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.AddPubAddress.fio_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.FIO.Proto.PublicAddress public_addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action_AddPubAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.Action.AddPubAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fio_address = 1;
  if (!this->_internal_fio_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fio_address().data(), static_cast<int>(this->_internal_fio_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.AddPubAddress.fio_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fio_address(), target);
  }

  // repeated .TW.FIO.Proto.PublicAddress public_addresses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_public_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_public_addresses(i), target, stream);
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.Action.AddPubAddress)
  return target;
}

size_t Action_AddPubAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.Action.AddPubAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.FIO.Proto.PublicAddress public_addresses = 2;
  total_size += 1UL * this->_internal_public_addresses_size();
  for (const auto& msg : this->public_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fio_address = 1;
  if (!this->_internal_fio_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fio_address());
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action_AddPubAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action_AddPubAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action_AddPubAddress::GetClassData() const { return &_class_data_; }

void Action_AddPubAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action_AddPubAddress *>(to)->MergeFrom(
      static_cast<const Action_AddPubAddress &>(from));
}


void Action_AddPubAddress::MergeFrom(const Action_AddPubAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.Action.AddPubAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  public_addresses_.MergeFrom(from.public_addresses_);
  if (!from._internal_fio_address().empty()) {
    _internal_set_fio_address(from._internal_fio_address());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action_AddPubAddress::CopyFrom(const Action_AddPubAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.Action.AddPubAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_AddPubAddress::IsInitialized() const {
  return true;
}

void Action_AddPubAddress::InternalSwap(Action_AddPubAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  public_addresses_.InternalSwap(&other->public_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fio_address_, lhs_arena,
      &other->fio_address_, rhs_arena
  );
  swap(fee_, other->fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_AddPubAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[3]);
}

// ===================================================================

class Action_Transfer::_Internal {
 public:
};

Action_Transfer::Action_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.Action.Transfer)
}
Action_Transfer::Action_Transfer(const Action_Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payee_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payee_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payee_public_key().empty()) {
    payee_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payee_public_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(fee_));
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.Action.Transfer)
}

inline void Action_Transfer::SharedCtor() {
payee_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payee_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(fee_));
}

Action_Transfer::~Action_Transfer() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.Action.Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action_Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payee_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action_Transfer::ArenaDtor(void* object) {
  Action_Transfer* _this = reinterpret_cast< Action_Transfer* >(object);
  (void)_this;
}
void Action_Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action_Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action_Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.Action.Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payee_public_key_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(fee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action_Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payee_public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payee_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.Transfer.payee_public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action_Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.Action.Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payee_public_key = 1;
  if (!this->_internal_payee_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payee_public_key().data(), static_cast<int>(this->_internal_payee_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.Transfer.payee_public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payee_public_key(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.Action.Transfer)
  return target;
}

size_t Action_Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.Action.Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payee_public_key = 1;
  if (!this->_internal_payee_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payee_public_key());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action_Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action_Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action_Transfer::GetClassData() const { return &_class_data_; }

void Action_Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action_Transfer *>(to)->MergeFrom(
      static_cast<const Action_Transfer &>(from));
}


void Action_Transfer::MergeFrom(const Action_Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.Action.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payee_public_key().empty()) {
    _internal_set_payee_public_key(from._internal_payee_public_key());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action_Transfer::CopyFrom(const Action_Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.Action.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Transfer::IsInitialized() const {
  return true;
}

void Action_Transfer::InternalSwap(Action_Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payee_public_key_, lhs_arena,
      &other->payee_public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action_Transfer, fee_)
      + sizeof(Action_Transfer::fee_)
      - PROTOBUF_FIELD_OFFSET(Action_Transfer, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[4]);
}

// ===================================================================

class Action_RenewFioAddress::_Internal {
 public:
};

Action_RenewFioAddress::Action_RenewFioAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.Action.RenewFioAddress)
}
Action_RenewFioAddress::Action_RenewFioAddress(const Action_RenewFioAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fio_address().empty()) {
    fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fio_address(), 
      GetArenaForAllocation());
  }
  owner_fio_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_fio_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_fio_public_key().empty()) {
    owner_fio_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_fio_public_key(), 
      GetArenaForAllocation());
  }
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.Action.RenewFioAddress)
}

inline void Action_RenewFioAddress::SharedCtor() {
fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owner_fio_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_fio_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fee_ = uint64_t{0u};
}

Action_RenewFioAddress::~Action_RenewFioAddress() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.Action.RenewFioAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action_RenewFioAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fio_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_fio_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action_RenewFioAddress::ArenaDtor(void* object) {
  Action_RenewFioAddress* _this = reinterpret_cast< Action_RenewFioAddress* >(object);
  (void)_this;
}
void Action_RenewFioAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action_RenewFioAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action_RenewFioAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.Action.RenewFioAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fio_address_.ClearToEmpty();
  owner_fio_public_key_.ClearToEmpty();
  fee_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action_RenewFioAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fio_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fio_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.RenewFioAddress.fio_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner_fio_public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_fio_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action_RenewFioAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.Action.RenewFioAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fio_address = 1;
  if (!this->_internal_fio_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fio_address().data(), static_cast<int>(this->_internal_fio_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.RenewFioAddress.fio_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fio_address(), target);
  }

  // string owner_fio_public_key = 2;
  if (!this->_internal_owner_fio_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_fio_public_key().data(), static_cast<int>(this->_internal_owner_fio_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.RenewFioAddress.owner_fio_public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_fio_public_key(), target);
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.Action.RenewFioAddress)
  return target;
}

size_t Action_RenewFioAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.Action.RenewFioAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fio_address = 1;
  if (!this->_internal_fio_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fio_address());
  }

  // string owner_fio_public_key = 2;
  if (!this->_internal_owner_fio_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_fio_public_key());
  }

  // uint64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action_RenewFioAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action_RenewFioAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action_RenewFioAddress::GetClassData() const { return &_class_data_; }

void Action_RenewFioAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action_RenewFioAddress *>(to)->MergeFrom(
      static_cast<const Action_RenewFioAddress &>(from));
}


void Action_RenewFioAddress::MergeFrom(const Action_RenewFioAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.Action.RenewFioAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fio_address().empty()) {
    _internal_set_fio_address(from._internal_fio_address());
  }
  if (!from._internal_owner_fio_public_key().empty()) {
    _internal_set_owner_fio_public_key(from._internal_owner_fio_public_key());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action_RenewFioAddress::CopyFrom(const Action_RenewFioAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.Action.RenewFioAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_RenewFioAddress::IsInitialized() const {
  return true;
}

void Action_RenewFioAddress::InternalSwap(Action_RenewFioAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fio_address_, lhs_arena,
      &other->fio_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_fio_public_key_, lhs_arena,
      &other->owner_fio_public_key_, rhs_arena
  );
  swap(fee_, other->fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_RenewFioAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[5]);
}

// ===================================================================

class Action_NewFundsRequest::_Internal {
 public:
  static const ::TW::FIO::Proto::NewFundsContent& content(const Action_NewFundsRequest* msg);
};

const ::TW::FIO::Proto::NewFundsContent&
Action_NewFundsRequest::_Internal::content(const Action_NewFundsRequest* msg) {
  return *msg->content_;
}
Action_NewFundsRequest::Action_NewFundsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.Action.NewFundsRequest)
}
Action_NewFundsRequest::Action_NewFundsRequest(const Action_NewFundsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payer_fio_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payer_fio_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payer_fio_name().empty()) {
    payer_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer_fio_name(), 
      GetArenaForAllocation());
  }
  payer_fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payer_fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payer_fio_address().empty()) {
    payer_fio_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer_fio_address(), 
      GetArenaForAllocation());
  }
  payee_fio_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payee_fio_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payee_fio_name().empty()) {
    payee_fio_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payee_fio_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_content()) {
    content_ = new ::TW::FIO::Proto::NewFundsContent(*from.content_);
  } else {
    content_ = nullptr;
  }
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.Action.NewFundsRequest)
}

inline void Action_NewFundsRequest::SharedCtor() {
payer_fio_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payer_fio_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payer_fio_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payer_fio_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payee_fio_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payee_fio_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&content_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&content_)) + sizeof(fee_));
}

Action_NewFundsRequest::~Action_NewFundsRequest() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.Action.NewFundsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action_NewFundsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payer_fio_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_fio_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payee_fio_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
}

void Action_NewFundsRequest::ArenaDtor(void* object) {
  Action_NewFundsRequest* _this = reinterpret_cast< Action_NewFundsRequest* >(object);
  (void)_this;
}
void Action_NewFundsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action_NewFundsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action_NewFundsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.Action.NewFundsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payer_fio_name_.ClearToEmpty();
  payer_fio_address_.ClearToEmpty();
  payee_fio_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  fee_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action_NewFundsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payer_fio_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payer_fio_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payer_fio_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payer_fio_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payee_fio_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payee_fio_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.FIO.Proto.NewFundsContent content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fee = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action_NewFundsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.Action.NewFundsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payer_fio_name = 1;
  if (!this->_internal_payer_fio_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payer_fio_name().data(), static_cast<int>(this->_internal_payer_fio_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.NewFundsRequest.payer_fio_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payer_fio_name(), target);
  }

  // string payer_fio_address = 2;
  if (!this->_internal_payer_fio_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payer_fio_address().data(), static_cast<int>(this->_internal_payer_fio_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.NewFundsRequest.payer_fio_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payer_fio_address(), target);
  }

  // string payee_fio_name = 3;
  if (!this->_internal_payee_fio_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payee_fio_name().data(), static_cast<int>(this->_internal_payee_fio_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.Action.NewFundsRequest.payee_fio_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payee_fio_name(), target);
  }

  // .TW.FIO.Proto.NewFundsContent content = 4;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::content(this), target, stream);
  }

  // uint64 fee = 5;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.Action.NewFundsRequest)
  return target;
}

size_t Action_NewFundsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.Action.NewFundsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payer_fio_name = 1;
  if (!this->_internal_payer_fio_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payer_fio_name());
  }

  // string payer_fio_address = 2;
  if (!this->_internal_payer_fio_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payer_fio_address());
  }

  // string payee_fio_name = 3;
  if (!this->_internal_payee_fio_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payee_fio_name());
  }

  // .TW.FIO.Proto.NewFundsContent content = 4;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // uint64 fee = 5;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action_NewFundsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action_NewFundsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action_NewFundsRequest::GetClassData() const { return &_class_data_; }

void Action_NewFundsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action_NewFundsRequest *>(to)->MergeFrom(
      static_cast<const Action_NewFundsRequest &>(from));
}


void Action_NewFundsRequest::MergeFrom(const Action_NewFundsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.Action.NewFundsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payer_fio_name().empty()) {
    _internal_set_payer_fio_name(from._internal_payer_fio_name());
  }
  if (!from._internal_payer_fio_address().empty()) {
    _internal_set_payer_fio_address(from._internal_payer_fio_address());
  }
  if (!from._internal_payee_fio_name().empty()) {
    _internal_set_payee_fio_name(from._internal_payee_fio_name());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::TW::FIO::Proto::NewFundsContent::MergeFrom(from._internal_content());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action_NewFundsRequest::CopyFrom(const Action_NewFundsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.Action.NewFundsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_NewFundsRequest::IsInitialized() const {
  return true;
}

void Action_NewFundsRequest::InternalSwap(Action_NewFundsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payer_fio_name_, lhs_arena,
      &other->payer_fio_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payer_fio_address_, lhs_arena,
      &other->payer_fio_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payee_fio_name_, lhs_arena,
      &other->payee_fio_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action_NewFundsRequest, fee_)
      + sizeof(Action_NewFundsRequest::fee_)
      - PROTOBUF_FIELD_OFFSET(Action_NewFundsRequest, content_)>(
          reinterpret_cast<char*>(&content_),
          reinterpret_cast<char*>(&other->content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_NewFundsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[6]);
}

// ===================================================================

class Action::_Internal {
 public:
  static const ::TW::FIO::Proto::Action_RegisterFioAddress& register_fio_address_message(const Action* msg);
  static const ::TW::FIO::Proto::Action_AddPubAddress& add_pub_address_message(const Action* msg);
  static const ::TW::FIO::Proto::Action_Transfer& transfer_message(const Action* msg);
  static const ::TW::FIO::Proto::Action_RenewFioAddress& renew_fio_address_message(const Action* msg);
  static const ::TW::FIO::Proto::Action_NewFundsRequest& new_funds_request_message(const Action* msg);
};

const ::TW::FIO::Proto::Action_RegisterFioAddress&
Action::_Internal::register_fio_address_message(const Action* msg) {
  return *msg->message_oneof_.register_fio_address_message_;
}
const ::TW::FIO::Proto::Action_AddPubAddress&
Action::_Internal::add_pub_address_message(const Action* msg) {
  return *msg->message_oneof_.add_pub_address_message_;
}
const ::TW::FIO::Proto::Action_Transfer&
Action::_Internal::transfer_message(const Action* msg) {
  return *msg->message_oneof_.transfer_message_;
}
const ::TW::FIO::Proto::Action_RenewFioAddress&
Action::_Internal::renew_fio_address_message(const Action* msg) {
  return *msg->message_oneof_.renew_fio_address_message_;
}
const ::TW::FIO::Proto::Action_NewFundsRequest&
Action::_Internal::new_funds_request_message(const Action* msg) {
  return *msg->message_oneof_.new_funds_request_message_;
}
void Action::set_allocated_register_fio_address_message(::TW::FIO::Proto::Action_RegisterFioAddress* register_fio_address_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (register_fio_address_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::FIO::Proto::Action_RegisterFioAddress>::GetOwningArena(register_fio_address_message);
    if (message_arena != submessage_arena) {
      register_fio_address_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_fio_address_message, submessage_arena);
    }
    set_has_register_fio_address_message();
    message_oneof_.register_fio_address_message_ = register_fio_address_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.register_fio_address_message)
}
void Action::set_allocated_add_pub_address_message(::TW::FIO::Proto::Action_AddPubAddress* add_pub_address_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (add_pub_address_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::FIO::Proto::Action_AddPubAddress>::GetOwningArena(add_pub_address_message);
    if (message_arena != submessage_arena) {
      add_pub_address_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_pub_address_message, submessage_arena);
    }
    set_has_add_pub_address_message();
    message_oneof_.add_pub_address_message_ = add_pub_address_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.add_pub_address_message)
}
void Action::set_allocated_transfer_message(::TW::FIO::Proto::Action_Transfer* transfer_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (transfer_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::FIO::Proto::Action_Transfer>::GetOwningArena(transfer_message);
    if (message_arena != submessage_arena) {
      transfer_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_message, submessage_arena);
    }
    set_has_transfer_message();
    message_oneof_.transfer_message_ = transfer_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.transfer_message)
}
void Action::set_allocated_renew_fio_address_message(::TW::FIO::Proto::Action_RenewFioAddress* renew_fio_address_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (renew_fio_address_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::FIO::Proto::Action_RenewFioAddress>::GetOwningArena(renew_fio_address_message);
    if (message_arena != submessage_arena) {
      renew_fio_address_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renew_fio_address_message, submessage_arena);
    }
    set_has_renew_fio_address_message();
    message_oneof_.renew_fio_address_message_ = renew_fio_address_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.renew_fio_address_message)
}
void Action::set_allocated_new_funds_request_message(::TW::FIO::Proto::Action_NewFundsRequest* new_funds_request_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_oneof();
  if (new_funds_request_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::FIO::Proto::Action_NewFundsRequest>::GetOwningArena(new_funds_request_message);
    if (message_arena != submessage_arena) {
      new_funds_request_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_funds_request_message, submessage_arena);
    }
    set_has_new_funds_request_message();
    message_oneof_.new_funds_request_message_ = new_funds_request_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.FIO.Proto.Action.new_funds_request_message)
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_oneof();
  switch (from.message_oneof_case()) {
    case kRegisterFioAddressMessage: {
      _internal_mutable_register_fio_address_message()->::TW::FIO::Proto::Action_RegisterFioAddress::MergeFrom(from._internal_register_fio_address_message());
      break;
    }
    case kAddPubAddressMessage: {
      _internal_mutable_add_pub_address_message()->::TW::FIO::Proto::Action_AddPubAddress::MergeFrom(from._internal_add_pub_address_message());
      break;
    }
    case kTransferMessage: {
      _internal_mutable_transfer_message()->::TW::FIO::Proto::Action_Transfer::MergeFrom(from._internal_transfer_message());
      break;
    }
    case kRenewFioAddressMessage: {
      _internal_mutable_renew_fio_address_message()->::TW::FIO::Proto::Action_RenewFioAddress::MergeFrom(from._internal_renew_fio_address_message());
      break;
    }
    case kNewFundsRequestMessage: {
      _internal_mutable_new_funds_request_message()->::TW::FIO::Proto::Action_NewFundsRequest::MergeFrom(from._internal_new_funds_request_message());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.Action)
}

inline void Action::SharedCtor() {
clear_has_message_oneof();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_oneof()) {
    clear_message_oneof();
  }
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::clear_message_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.FIO.Proto.Action)
  switch (message_oneof_case()) {
    case kRegisterFioAddressMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.register_fio_address_message_;
      }
      break;
    }
    case kAddPubAddressMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.add_pub_address_message_;
      }
      break;
    }
    case kTransferMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.transfer_message_;
      }
      break;
    }
    case kRenewFioAddressMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.renew_fio_address_message_;
      }
      break;
    }
    case kNewFundsRequestMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_oneof_.new_funds_request_message_;
      }
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.FIO.Proto.Action.RegisterFioAddress register_fio_address_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_fio_address_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.FIO.Proto.Action.AddPubAddress add_pub_address_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_pub_address_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.FIO.Proto.Action.Transfer transfer_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.FIO.Proto.Action.RenewFioAddress renew_fio_address_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_renew_fio_address_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.FIO.Proto.Action.NewFundsRequest new_funds_request_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_funds_request_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.FIO.Proto.Action.RegisterFioAddress register_fio_address_message = 1;
  if (_internal_has_register_fio_address_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::register_fio_address_message(this), target, stream);
  }

  // .TW.FIO.Proto.Action.AddPubAddress add_pub_address_message = 2;
  if (_internal_has_add_pub_address_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_pub_address_message(this), target, stream);
  }

  // .TW.FIO.Proto.Action.Transfer transfer_message = 3;
  if (_internal_has_transfer_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transfer_message(this), target, stream);
  }

  // .TW.FIO.Proto.Action.RenewFioAddress renew_fio_address_message = 4;
  if (_internal_has_renew_fio_address_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::renew_fio_address_message(this), target, stream);
  }

  // .TW.FIO.Proto.Action.NewFundsRequest new_funds_request_message = 5;
  if (_internal_has_new_funds_request_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::new_funds_request_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_oneof_case()) {
    // .TW.FIO.Proto.Action.RegisterFioAddress register_fio_address_message = 1;
    case kRegisterFioAddressMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.register_fio_address_message_);
      break;
    }
    // .TW.FIO.Proto.Action.AddPubAddress add_pub_address_message = 2;
    case kAddPubAddressMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.add_pub_address_message_);
      break;
    }
    // .TW.FIO.Proto.Action.Transfer transfer_message = 3;
    case kTransferMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.transfer_message_);
      break;
    }
    // .TW.FIO.Proto.Action.RenewFioAddress renew_fio_address_message = 4;
    case kRenewFioAddressMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.renew_fio_address_message_);
      break;
    }
    // .TW.FIO.Proto.Action.NewFundsRequest new_funds_request_message = 5;
    case kNewFundsRequestMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_oneof_.new_funds_request_message_);
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_oneof_case()) {
    case kRegisterFioAddressMessage: {
      _internal_mutable_register_fio_address_message()->::TW::FIO::Proto::Action_RegisterFioAddress::MergeFrom(from._internal_register_fio_address_message());
      break;
    }
    case kAddPubAddressMessage: {
      _internal_mutable_add_pub_address_message()->::TW::FIO::Proto::Action_AddPubAddress::MergeFrom(from._internal_add_pub_address_message());
      break;
    }
    case kTransferMessage: {
      _internal_mutable_transfer_message()->::TW::FIO::Proto::Action_Transfer::MergeFrom(from._internal_transfer_message());
      break;
    }
    case kRenewFioAddressMessage: {
      _internal_mutable_renew_fio_address_message()->::TW::FIO::Proto::Action_RenewFioAddress::MergeFrom(from._internal_renew_fio_address_message());
      break;
    }
    case kNewFundsRequestMessage: {
      _internal_mutable_new_funds_request_message()->::TW::FIO::Proto::Action_NewFundsRequest::MergeFrom(from._internal_new_funds_request_message());
      break;
    }
    case MESSAGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_oneof_, other->message_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[7]);
}

// ===================================================================

class ChainParams::_Internal {
 public:
};

ChainParams::ChainParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.ChainParams)
}
ChainParams::ChainParams(const ChainParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&head_block_number_, &from.head_block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_block_prefix_) -
    reinterpret_cast<char*>(&head_block_number_)) + sizeof(ref_block_prefix_));
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.ChainParams)
}

inline void ChainParams::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_block_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ref_block_prefix_) -
    reinterpret_cast<char*>(&head_block_number_)) + sizeof(ref_block_prefix_));
}

ChainParams::~ChainParams() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.ChainParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChainParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChainParams::ArenaDtor(void* object) {
  ChainParams* _this = reinterpret_cast< ChainParams* >(object);
  (void)_this;
}
void ChainParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChainParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChainParams::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.ChainParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  ::memset(&head_block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_block_prefix_) -
      reinterpret_cast<char*>(&head_block_number_)) + sizeof(ref_block_prefix_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChainParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 head_block_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          head_block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ref_block_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ref_block_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChainParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.ChainParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  // uint64 head_block_number = 2;
  if (this->_internal_head_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_head_block_number(), target);
  }

  // uint64 ref_block_prefix = 3;
  if (this->_internal_ref_block_prefix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ref_block_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.ChainParams)
  return target;
}

size_t ChainParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.ChainParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_id());
  }

  // uint64 head_block_number = 2;
  if (this->_internal_head_block_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_head_block_number());
  }

  // uint64 ref_block_prefix = 3;
  if (this->_internal_ref_block_prefix() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ref_block_prefix());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChainParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChainParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChainParams::GetClassData() const { return &_class_data_; }

void ChainParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChainParams *>(to)->MergeFrom(
      static_cast<const ChainParams &>(from));
}


void ChainParams::MergeFrom(const ChainParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.ChainParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_head_block_number() != 0) {
    _internal_set_head_block_number(from._internal_head_block_number());
  }
  if (from._internal_ref_block_prefix() != 0) {
    _internal_set_ref_block_prefix(from._internal_ref_block_prefix());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChainParams::CopyFrom(const ChainParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.ChainParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainParams::IsInitialized() const {
  return true;
}

void ChainParams::InternalSwap(ChainParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChainParams, ref_block_prefix_)
      + sizeof(ChainParams::ref_block_prefix_)
      - PROTOBUF_FIELD_OFFSET(ChainParams, head_block_number_)>(
          reinterpret_cast<char*>(&head_block_number_),
          reinterpret_cast<char*>(&other->head_block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[8]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::FIO::Proto::ChainParams& chain_params(const SigningInput* msg);
  static const ::TW::FIO::Proto::Action& action(const SigningInput* msg);
};

const ::TW::FIO::Proto::ChainParams&
SigningInput::_Internal::chain_params(const SigningInput* msg) {
  return *msg->chain_params_;
}
const ::TW::FIO::Proto::Action&
SigningInput::_Internal::action(const SigningInput* msg) {
  return *msg->action_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  tpid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tpid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tpid().empty()) {
    tpid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tpid(), 
      GetArenaForAllocation());
  }
  owner_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_public_key().empty()) {
    owner_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_public_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chain_params()) {
    chain_params_ = new ::TW::FIO::Proto::ChainParams(*from.chain_params_);
  } else {
    chain_params_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::TW::FIO::Proto::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  expiry_ = from.expiry_;
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tpid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tpid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owner_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chain_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
    reinterpret_cast<char*>(&chain_params_)) + sizeof(expiry_));
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tpid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chain_params_;
  if (this != internal_default_instance()) delete action_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmpty();
  tpid_.ClearToEmpty();
  owner_public_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && chain_params_ != nullptr) {
    delete chain_params_;
  }
  chain_params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  expiry_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.FIO.Proto.ChainParams chain_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chain_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tpid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tpid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.SigningInput.tpid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.FIO.Proto.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner_public_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_owner_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.SigningInput.owner_public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 expiry = 1;
  if (this->_internal_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_expiry(), target);
  }

  // .TW.FIO.Proto.ChainParams chain_params = 2;
  if (this->_internal_has_chain_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chain_params(this), target, stream);
  }

  // bytes private_key = 3;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_private_key(), target);
  }

  // string tpid = 4;
  if (!this->_internal_tpid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tpid().data(), static_cast<int>(this->_internal_tpid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.SigningInput.tpid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tpid(), target);
  }

  // .TW.FIO.Proto.Action action = 5;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::action(this), target, stream);
  }

  // string owner_public_key = 6;
  if (!this->_internal_owner_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_public_key().data(), static_cast<int>(this->_internal_owner_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.SigningInput.owner_public_key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_owner_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 3;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string tpid = 4;
  if (!this->_internal_tpid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tpid());
  }

  // string owner_public_key = 6;
  if (!this->_internal_owner_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_public_key());
  }

  // .TW.FIO.Proto.ChainParams chain_params = 2;
  if (this->_internal_has_chain_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chain_params_);
  }

  // .TW.FIO.Proto.Action action = 5;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // uint32 expiry = 1;
  if (this->_internal_expiry() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_expiry());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_tpid().empty()) {
    _internal_set_tpid(from._internal_tpid());
  }
  if (!from._internal_owner_public_key().empty()) {
    _internal_set_owner_public_key(from._internal_owner_public_key());
  }
  if (from._internal_has_chain_params()) {
    _internal_mutable_chain_params()->::TW::FIO::Proto::ChainParams::MergeFrom(from._internal_chain_params());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::TW::FIO::Proto::Action::MergeFrom(from._internal_action());
  }
  if (from._internal_expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tpid_, lhs_arena,
      &other->tpid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_public_key_, lhs_arena,
      &other->owner_public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, expiry_)
      + sizeof(SigningInput::expiry_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, chain_params_)>(
          reinterpret_cast<char*>(&chain_params_),
          reinterpret_cast<char*>(&other->chain_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[9]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.FIO.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_json().empty()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.FIO.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.FIO.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.FIO.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.SigningOutput.json"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.FIO.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.FIO.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (!this->_internal_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.SigningOutput.json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.FIO.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.FIO.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.FIO.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json = 1;
  if (!this->_internal_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.FIO.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_json().empty()) {
    _internal_set_json(from._internal_json());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.FIO.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_, lhs_arena,
      &other->json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FIO_2eproto_getter, &descriptor_table_FIO_2eproto_once,
      file_level_metadata_FIO_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace FIO
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::PublicAddress* Arena::CreateMaybeMessage< ::TW::FIO::Proto::PublicAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::PublicAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::NewFundsContent* Arena::CreateMaybeMessage< ::TW::FIO::Proto::NewFundsContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::NewFundsContent >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::Action_RegisterFioAddress* Arena::CreateMaybeMessage< ::TW::FIO::Proto::Action_RegisterFioAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::Action_RegisterFioAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::Action_AddPubAddress* Arena::CreateMaybeMessage< ::TW::FIO::Proto::Action_AddPubAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::Action_AddPubAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::Action_Transfer* Arena::CreateMaybeMessage< ::TW::FIO::Proto::Action_Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::Action_Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::Action_RenewFioAddress* Arena::CreateMaybeMessage< ::TW::FIO::Proto::Action_RenewFioAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::Action_RenewFioAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::Action_NewFundsRequest* Arena::CreateMaybeMessage< ::TW::FIO::Proto::Action_NewFundsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::Action_NewFundsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::Action* Arena::CreateMaybeMessage< ::TW::FIO::Proto::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::ChainParams* Arena::CreateMaybeMessage< ::TW::FIO::Proto::ChainParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::ChainParams >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::FIO::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::FIO::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::FIO::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::FIO::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
