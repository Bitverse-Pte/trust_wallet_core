// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: THORChainSwap.proto

#include "THORChainSwap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace THORChainSwap {
namespace Proto {
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
{}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
constexpr Asset::Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chain_(0)
{}
struct AssetDefaultTypeInternal {
  constexpr AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetDefaultTypeInternal _Asset_default_instance_;
constexpr StreamParams::StreamParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quantity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StreamParamsDefaultTypeInternal {
  constexpr StreamParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamParamsDefaultTypeInternal() {}
  union {
    StreamParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamParamsDefaultTypeInternal _StreamParams_default_instance_;
constexpr SwapInput::SwapInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vault_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , router_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_amount_limit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , affiliate_fee_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , affiliate_fee_rate_bp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_asset_(nullptr)
  , to_asset_(nullptr)
  , stream_params_(nullptr)
  , expiration_time_(uint64_t{0u}){}
struct SwapInputDefaultTypeInternal {
  constexpr SwapInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwapInputDefaultTypeInternal() {}
  union {
    SwapInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwapInputDefaultTypeInternal _SwapInput_default_instance_;
constexpr SwapOutput::SwapOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(nullptr)
  , from_chain_(0)

  , to_chain_(0)

  , _oneof_case_{}{}
struct SwapOutputDefaultTypeInternal {
  constexpr SwapOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwapOutputDefaultTypeInternal() {}
  union {
    SwapOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwapOutputDefaultTypeInternal _SwapOutput_default_instance_;
}  // namespace Proto
}  // namespace THORChainSwap
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_THORChainSwap_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_THORChainSwap_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_THORChainSwap_2eproto = nullptr;

const uint32_t TableStruct_THORChainSwap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Error, code_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Error, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, chain_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, symbol_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::Asset, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::StreamParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::StreamParams, interval_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::StreamParams, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, from_asset_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, from_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, to_asset_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, vault_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, router_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, from_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, to_amount_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, affiliate_fee_address_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, affiliate_fee_rate_bp_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, extra_memo_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapInput, stream_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, from_chain_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, to_chain_),
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, error_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::THORChainSwap::Proto::SwapOutput, signing_input_oneof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::THORChainSwap::Proto::Error)},
  { 8, -1, -1, sizeof(::TW::THORChainSwap::Proto::Asset)},
  { 17, -1, -1, sizeof(::TW::THORChainSwap::Proto::StreamParams)},
  { 25, -1, -1, sizeof(::TW::THORChainSwap::Proto::SwapInput)},
  { 44, -1, -1, sizeof(::TW::THORChainSwap::Proto::SwapOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_StreamParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_SwapInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::THORChainSwap::Proto::_SwapOutput_default_instance_),
};

const char descriptor_table_protodef_THORChainSwap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023THORChainSwap.proto\022\026TW.THORChainSwap."
  "Proto\032\rBitcoin.proto\032\016Ethereum.proto\032\rBi"
  "nance.proto\032\014Cosmos.proto\"I\n\005Error\022/\n\004co"
  "de\030\001 \001(\0162!.TW.THORChainSwap.Proto.ErrorC"
  "ode\022\017\n\007message\030\002 \001(\t\"W\n\005Asset\022,\n\005chain\030\001"
  " \001(\0162\035.TW.THORChainSwap.Proto.Chain\022\016\n\006s"
  "ymbol\030\002 \001(\t\022\020\n\010token_id\030\003 \001(\t\"2\n\014StreamP"
  "arams\022\020\n\010interval\030\001 \001(\t\022\020\n\010quantity\030\002 \001("
  "\t\"\236\003\n\tSwapInput\0221\n\nfrom_asset\030\001 \001(\0132\035.TW"
  ".THORChainSwap.Proto.Asset\022\024\n\014from_addre"
  "ss\030\002 \001(\t\022/\n\010to_asset\030\003 \001(\0132\035.TW.THORChai"
  "nSwap.Proto.Asset\022\022\n\nto_address\030\004 \001(\t\022\025\n"
  "\rvault_address\030\005 \001(\t\022\026\n\016router_address\030\006"
  " \001(\t\022\023\n\013from_amount\030\007 \001(\t\022\027\n\017to_amount_l"
  "imit\030\010 \001(\t\022\035\n\025affiliate_fee_address\030\t \001("
  "\t\022\035\n\025affiliate_fee_rate_bp\030\n \001(\t\022\022\n\nextr"
  "a_memo\030\013 \001(\t\022\027\n\017expiration_time\030\014 \001(\004\022;\n"
  "\rstream_params\030\r \001(\0132$.TW.THORChainSwap."
  "Proto.StreamParams\"\201\003\n\nSwapOutput\0221\n\nfro"
  "m_chain\030\001 \001(\0162\035.TW.THORChainSwap.Proto.C"
  "hain\022/\n\010to_chain\030\002 \001(\0162\035.TW.THORChainSwa"
  "p.Proto.Chain\022,\n\005error\030\003 \001(\0132\035.TW.THORCh"
  "ainSwap.Proto.Error\0221\n\007bitcoin\030\004 \001(\0132\036.T"
  "W.Bitcoin.Proto.SigningInputH\000\0223\n\010ethere"
  "um\030\005 \001(\0132\037.TW.Ethereum.Proto.SigningInpu"
  "tH\000\0221\n\007binance\030\006 \001(\0132\036.TW.Binance.Proto."
  "SigningInputH\000\022/\n\006cosmos\030\007 \001(\0132\035.TW.Cosm"
  "os.Proto.SigningInputH\000B\025\n\023signing_input"
  "_oneof*\\\n\005Chain\022\010\n\004THOR\020\000\022\007\n\003BTC\020\001\022\007\n\003ET"
  "H\020\002\022\007\n\003BNB\020\003\022\010\n\004DOGE\020\004\022\007\n\003BCH\020\005\022\007\n\003LTC\020\006"
  "\022\010\n\004ATOM\020\007\022\010\n\004AVAX\020\010*\220\002\n\tErrorCode\022\006\n\002OK"
  "\020\000\022\021\n\rError_general\020\001\022%\n!Error_Input_pro"
  "to_deserialization\020\002\022 \n\034Error_Unsupporte"
  "d_from_chain\020\r\022\036\n\032Error_Unsupported_to_c"
  "hain\020\016\022\036\n\032Error_Invalid_from_address\020\017\022\034"
  "\n\030Error_Invalid_to_address\020\020\022\037\n\033Error_In"
  "valid_vault_address\020\025\022 \n\034Error_Invalid_r"
  "outer_address\020\026B\027\n\025wallet.core.jni.proto"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_THORChainSwap_2eproto_deps[4] = {
  &::descriptor_table_Binance_2eproto,
  &::descriptor_table_Bitcoin_2eproto,
  &::descriptor_table_Cosmos_2eproto,
  &::descriptor_table_Ethereum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_THORChainSwap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_THORChainSwap_2eproto = {
  false, false, 1528, descriptor_table_protodef_THORChainSwap_2eproto, "THORChainSwap.proto", 
  &descriptor_table_THORChainSwap_2eproto_once, descriptor_table_THORChainSwap_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_THORChainSwap_2eproto::offsets,
  file_level_metadata_THORChainSwap_2eproto, file_level_enum_descriptors_THORChainSwap_2eproto, file_level_service_descriptors_THORChainSwap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_THORChainSwap_2eproto_getter() {
  return &descriptor_table_THORChainSwap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_THORChainSwap_2eproto(&descriptor_table_THORChainSwap_2eproto);
namespace TW {
namespace THORChainSwap {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_THORChainSwap_2eproto);
  return file_level_enum_descriptors_THORChainSwap_2eproto[0];
}
bool Chain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_THORChainSwap_2eproto);
  return file_level_enum_descriptors_THORChainSwap_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 13:
    case 14:
    case 15:
    case 16:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.Error)
}

inline void Error::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::TW::THORChainSwap::Proto::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.Error.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.ErrorCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .TW.THORChainSwap.Proto.ErrorCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_THORChainSwap_2eproto_getter, &descriptor_table_THORChainSwap_2eproto_once,
      file_level_metadata_THORChainSwap_2eproto[0]);
}

// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  chain_ = from.chain_;
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.Asset)
}

inline void Asset::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chain_ = 0;
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.Asset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.Asset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  token_id_.ClearToEmpty();
  chain_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.Chain chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chain(static_cast<::TW::THORChainSwap::Proto::Chain>(val));
        } else
          goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.Asset.symbol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.Asset.token_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Asset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.Asset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Chain chain = 1;
  if (this->_internal_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chain(), target);
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.Asset.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string token_id = 3;
  if (!this->_internal_token_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_id().data(), static_cast<int>(this->_internal_token_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.Asset.token_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.Asset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string token_id = 3;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_id());
  }

  // .TW.THORChainSwap.Proto.Chain chain = 1;
  if (this->_internal_chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chain());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }

void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Asset *>(to)->MergeFrom(
      static_cast<const Asset &>(from));
}


void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (from._internal_chain() != 0) {
    _internal_set_chain(from._internal_chain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, lhs_arena,
      &other->symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, lhs_arena,
      &other->token_id_, rhs_arena
  );
  swap(chain_, other->chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_THORChainSwap_2eproto_getter, &descriptor_table_THORChainSwap_2eproto_once,
      file_level_metadata_THORChainSwap_2eproto[1]);
}

// ===================================================================

class StreamParams::_Internal {
 public:
};

StreamParams::StreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.StreamParams)
}
StreamParams::StreamParams(const StreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interval().empty()) {
    interval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interval(), 
      GetArenaForAllocation());
  }
  quantity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quantity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    quantity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quantity(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.StreamParams)
}

inline void StreamParams::SharedCtor() {
interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quantity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quantity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamParams::~StreamParams() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.StreamParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  interval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamParams::ArenaDtor(void* object) {
  StreamParams* _this = reinterpret_cast< StreamParams* >(object);
  (void)_this;
}
void StreamParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.StreamParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interval_.ClearToEmpty();
  quantity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.StreamParams.interval"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.StreamParams.quantity"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.StreamParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interval = 1;
  if (!this->_internal_interval().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interval().data(), static_cast<int>(this->_internal_interval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.StreamParams.interval");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interval(), target);
  }

  // string quantity = 2;
  if (!this->_internal_quantity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quantity().data(), static_cast<int>(this->_internal_quantity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.StreamParams.quantity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.StreamParams)
  return target;
}

size_t StreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.StreamParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interval = 1;
  if (!this->_internal_interval().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interval());
  }

  // string quantity = 2;
  if (!this->_internal_quantity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamParams::GetClassData() const { return &_class_data_; }

void StreamParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamParams *>(to)->MergeFrom(
      static_cast<const StreamParams &>(from));
}


void StreamParams::MergeFrom(const StreamParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.StreamParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interval().empty()) {
    _internal_set_interval(from._internal_interval());
  }
  if (!from._internal_quantity().empty()) {
    _internal_set_quantity(from._internal_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamParams::CopyFrom(const StreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.StreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamParams::IsInitialized() const {
  return true;
}

void StreamParams::InternalSwap(StreamParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &interval_, lhs_arena,
      &other->interval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quantity_, lhs_arena,
      &other->quantity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_THORChainSwap_2eproto_getter, &descriptor_table_THORChainSwap_2eproto_once,
      file_level_metadata_THORChainSwap_2eproto[2]);
}

// ===================================================================

class SwapInput::_Internal {
 public:
  static const ::TW::THORChainSwap::Proto::Asset& from_asset(const SwapInput* msg);
  static const ::TW::THORChainSwap::Proto::Asset& to_asset(const SwapInput* msg);
  static const ::TW::THORChainSwap::Proto::StreamParams& stream_params(const SwapInput* msg);
};

const ::TW::THORChainSwap::Proto::Asset&
SwapInput::_Internal::from_asset(const SwapInput* msg) {
  return *msg->from_asset_;
}
const ::TW::THORChainSwap::Proto::Asset&
SwapInput::_Internal::to_asset(const SwapInput* msg) {
  return *msg->to_asset_;
}
const ::TW::THORChainSwap::Proto::StreamParams&
SwapInput::_Internal::stream_params(const SwapInput* msg) {
  return *msg->stream_params_;
}
SwapInput::SwapInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.SwapInput)
}
SwapInput::SwapInput(const SwapInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_address().empty()) {
    from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_address(), 
      GetArenaForAllocation());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  vault_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vault_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vault_address().empty()) {
    vault_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vault_address(), 
      GetArenaForAllocation());
  }
  router_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    router_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_router_address().empty()) {
    router_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_router_address(), 
      GetArenaForAllocation());
  }
  from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_amount().empty()) {
    from_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_amount(), 
      GetArenaForAllocation());
  }
  to_amount_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_amount_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_amount_limit().empty()) {
    to_amount_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_amount_limit(), 
      GetArenaForAllocation());
  }
  affiliate_fee_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    affiliate_fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_affiliate_fee_address().empty()) {
    affiliate_fee_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affiliate_fee_address(), 
      GetArenaForAllocation());
  }
  affiliate_fee_rate_bp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    affiliate_fee_rate_bp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_affiliate_fee_rate_bp().empty()) {
    affiliate_fee_rate_bp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affiliate_fee_rate_bp(), 
      GetArenaForAllocation());
  }
  extra_memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra_memo().empty()) {
    extra_memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_memo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_from_asset()) {
    from_asset_ = new ::TW::THORChainSwap::Proto::Asset(*from.from_asset_);
  } else {
    from_asset_ = nullptr;
  }
  if (from._internal_has_to_asset()) {
    to_asset_ = new ::TW::THORChainSwap::Proto::Asset(*from.to_asset_);
  } else {
    to_asset_ = nullptr;
  }
  if (from._internal_has_stream_params()) {
    stream_params_ = new ::TW::THORChainSwap::Proto::StreamParams(*from.stream_params_);
  } else {
    stream_params_ = nullptr;
  }
  expiration_time_ = from.expiration_time_;
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.SwapInput)
}

inline void SwapInput::SharedCtor() {
from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vault_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vault_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
router_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  router_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_amount_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_amount_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
affiliate_fee_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  affiliate_fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
affiliate_fee_rate_bp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  affiliate_fee_rate_bp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_asset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&from_asset_)) + sizeof(expiration_time_));
}

SwapInput::~SwapInput() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.SwapInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SwapInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vault_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_amount_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliate_fee_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliate_fee_rate_bp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_asset_;
  if (this != internal_default_instance()) delete to_asset_;
  if (this != internal_default_instance()) delete stream_params_;
}

void SwapInput::ArenaDtor(void* object) {
  SwapInput* _this = reinterpret_cast< SwapInput* >(object);
  (void)_this;
}
void SwapInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwapInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.SwapInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  vault_address_.ClearToEmpty();
  router_address_.ClearToEmpty();
  from_amount_.ClearToEmpty();
  to_amount_limit_.ClearToEmpty();
  affiliate_fee_address_.ClearToEmpty();
  affiliate_fee_rate_bp_.ClearToEmpty();
  extra_memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && from_asset_ != nullptr) {
    delete from_asset_;
  }
  from_asset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_asset_ != nullptr) {
    delete to_asset_;
  }
  to_asset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stream_params_ != nullptr) {
    delete stream_params_;
  }
  stream_params_ = nullptr;
  expiration_time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.Asset from_asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.from_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.THORChainSwap.Proto.Asset to_asset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_asset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vault_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_vault_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.vault_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string router_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_router_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.router_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_from_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.from_amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_amount_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_to_amount_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.to_amount_limit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string affiliate_fee_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_affiliate_fee_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.affiliate_fee_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string affiliate_fee_rate_bp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_affiliate_fee_rate_bp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.affiliate_fee_rate_bp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extra_memo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_extra_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.THORChainSwap.Proto.SwapInput.extra_memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 expiration_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.THORChainSwap.Proto.StreamParams stream_params = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwapInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.SwapInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Asset from_asset = 1;
  if (this->_internal_has_from_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from_asset(this), target, stream);
  }

  // string from_address = 2;
  if (!this->_internal_from_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // .TW.THORChainSwap.Proto.Asset to_asset = 3;
  if (this->_internal_has_to_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::to_asset(this), target, stream);
  }

  // string to_address = 4;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // string vault_address = 5;
  if (!this->_internal_vault_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vault_address().data(), static_cast<int>(this->_internal_vault_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.vault_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vault_address(), target);
  }

  // string router_address = 6;
  if (!this->_internal_router_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_router_address().data(), static_cast<int>(this->_internal_router_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.router_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_router_address(), target);
  }

  // string from_amount = 7;
  if (!this->_internal_from_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_amount().data(), static_cast<int>(this->_internal_from_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.from_amount");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_from_amount(), target);
  }

  // string to_amount_limit = 8;
  if (!this->_internal_to_amount_limit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_amount_limit().data(), static_cast<int>(this->_internal_to_amount_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.to_amount_limit");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_to_amount_limit(), target);
  }

  // string affiliate_fee_address = 9;
  if (!this->_internal_affiliate_fee_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_affiliate_fee_address().data(), static_cast<int>(this->_internal_affiliate_fee_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.affiliate_fee_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_affiliate_fee_address(), target);
  }

  // string affiliate_fee_rate_bp = 10;
  if (!this->_internal_affiliate_fee_rate_bp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_affiliate_fee_rate_bp().data(), static_cast<int>(this->_internal_affiliate_fee_rate_bp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.affiliate_fee_rate_bp");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_affiliate_fee_rate_bp(), target);
  }

  // string extra_memo = 11;
  if (!this->_internal_extra_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra_memo().data(), static_cast<int>(this->_internal_extra_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.THORChainSwap.Proto.SwapInput.extra_memo");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_extra_memo(), target);
  }

  // uint64 expiration_time = 12;
  if (this->_internal_expiration_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_expiration_time(), target);
  }

  // .TW.THORChainSwap.Proto.StreamParams stream_params = 13;
  if (this->_internal_has_stream_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::stream_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.SwapInput)
  return target;
}

size_t SwapInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.SwapInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_address = 2;
  if (!this->_internal_from_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_address());
  }

  // string to_address = 4;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // string vault_address = 5;
  if (!this->_internal_vault_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vault_address());
  }

  // string router_address = 6;
  if (!this->_internal_router_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_router_address());
  }

  // string from_amount = 7;
  if (!this->_internal_from_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_amount());
  }

  // string to_amount_limit = 8;
  if (!this->_internal_to_amount_limit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_amount_limit());
  }

  // string affiliate_fee_address = 9;
  if (!this->_internal_affiliate_fee_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_affiliate_fee_address());
  }

  // string affiliate_fee_rate_bp = 10;
  if (!this->_internal_affiliate_fee_rate_bp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_affiliate_fee_rate_bp());
  }

  // string extra_memo = 11;
  if (!this->_internal_extra_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra_memo());
  }

  // .TW.THORChainSwap.Proto.Asset from_asset = 1;
  if (this->_internal_has_from_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_asset_);
  }

  // .TW.THORChainSwap.Proto.Asset to_asset = 3;
  if (this->_internal_has_to_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_asset_);
  }

  // .TW.THORChainSwap.Proto.StreamParams stream_params = 13;
  if (this->_internal_has_stream_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_params_);
  }

  // uint64 expiration_time = 12;
  if (this->_internal_expiration_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_expiration_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwapInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapInput::GetClassData() const { return &_class_data_; }

void SwapInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SwapInput *>(to)->MergeFrom(
      static_cast<const SwapInput &>(from));
}


void SwapInput::MergeFrom(const SwapInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.SwapInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from_address().empty()) {
    _internal_set_from_address(from._internal_from_address());
  }
  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (!from._internal_vault_address().empty()) {
    _internal_set_vault_address(from._internal_vault_address());
  }
  if (!from._internal_router_address().empty()) {
    _internal_set_router_address(from._internal_router_address());
  }
  if (!from._internal_from_amount().empty()) {
    _internal_set_from_amount(from._internal_from_amount());
  }
  if (!from._internal_to_amount_limit().empty()) {
    _internal_set_to_amount_limit(from._internal_to_amount_limit());
  }
  if (!from._internal_affiliate_fee_address().empty()) {
    _internal_set_affiliate_fee_address(from._internal_affiliate_fee_address());
  }
  if (!from._internal_affiliate_fee_rate_bp().empty()) {
    _internal_set_affiliate_fee_rate_bp(from._internal_affiliate_fee_rate_bp());
  }
  if (!from._internal_extra_memo().empty()) {
    _internal_set_extra_memo(from._internal_extra_memo());
  }
  if (from._internal_has_from_asset()) {
    _internal_mutable_from_asset()->::TW::THORChainSwap::Proto::Asset::MergeFrom(from._internal_from_asset());
  }
  if (from._internal_has_to_asset()) {
    _internal_mutable_to_asset()->::TW::THORChainSwap::Proto::Asset::MergeFrom(from._internal_to_asset());
  }
  if (from._internal_has_stream_params()) {
    _internal_mutable_stream_params()->::TW::THORChainSwap::Proto::StreamParams::MergeFrom(from._internal_stream_params());
  }
  if (from._internal_expiration_time() != 0) {
    _internal_set_expiration_time(from._internal_expiration_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapInput::CopyFrom(const SwapInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.SwapInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapInput::IsInitialized() const {
  return true;
}

void SwapInput::InternalSwap(SwapInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_address_, lhs_arena,
      &other->from_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vault_address_, lhs_arena,
      &other->vault_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &router_address_, lhs_arena,
      &other->router_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_amount_, lhs_arena,
      &other->from_amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_amount_limit_, lhs_arena,
      &other->to_amount_limit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affiliate_fee_address_, lhs_arena,
      &other->affiliate_fee_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affiliate_fee_rate_bp_, lhs_arena,
      &other->affiliate_fee_rate_bp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_memo_, lhs_arena,
      &other->extra_memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapInput, expiration_time_)
      + sizeof(SwapInput::expiration_time_)
      - PROTOBUF_FIELD_OFFSET(SwapInput, from_asset_)>(
          reinterpret_cast<char*>(&from_asset_),
          reinterpret_cast<char*>(&other->from_asset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_THORChainSwap_2eproto_getter, &descriptor_table_THORChainSwap_2eproto_once,
      file_level_metadata_THORChainSwap_2eproto[3]);
}

// ===================================================================

class SwapOutput::_Internal {
 public:
  static const ::TW::THORChainSwap::Proto::Error& error(const SwapOutput* msg);
  static const ::TW::Bitcoin::Proto::SigningInput& bitcoin(const SwapOutput* msg);
  static const ::TW::Ethereum::Proto::SigningInput& ethereum(const SwapOutput* msg);
  static const ::TW::Binance::Proto::SigningInput& binance(const SwapOutput* msg);
  static const ::TW::Cosmos::Proto::SigningInput& cosmos(const SwapOutput* msg);
};

const ::TW::THORChainSwap::Proto::Error&
SwapOutput::_Internal::error(const SwapOutput* msg) {
  return *msg->error_;
}
const ::TW::Bitcoin::Proto::SigningInput&
SwapOutput::_Internal::bitcoin(const SwapOutput* msg) {
  return *msg->signing_input_oneof_.bitcoin_;
}
const ::TW::Ethereum::Proto::SigningInput&
SwapOutput::_Internal::ethereum(const SwapOutput* msg) {
  return *msg->signing_input_oneof_.ethereum_;
}
const ::TW::Binance::Proto::SigningInput&
SwapOutput::_Internal::binance(const SwapOutput* msg) {
  return *msg->signing_input_oneof_.binance_;
}
const ::TW::Cosmos::Proto::SigningInput&
SwapOutput::_Internal::cosmos(const SwapOutput* msg) {
  return *msg->signing_input_oneof_.cosmos_;
}
void SwapOutput::set_allocated_bitcoin(::TW::Bitcoin::Proto::SigningInput* bitcoin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_signing_input_oneof();
  if (bitcoin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitcoin));
    if (message_arena != submessage_arena) {
      bitcoin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitcoin, submessage_arena);
    }
    set_has_bitcoin();
    signing_input_oneof_.bitcoin_ = bitcoin;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.bitcoin)
}
void SwapOutput::clear_bitcoin() {
  if (_internal_has_bitcoin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete signing_input_oneof_.bitcoin_;
    }
    clear_has_signing_input_oneof();
  }
}
void SwapOutput::set_allocated_ethereum(::TW::Ethereum::Proto::SigningInput* ethereum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_signing_input_oneof();
  if (ethereum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ethereum));
    if (message_arena != submessage_arena) {
      ethereum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethereum, submessage_arena);
    }
    set_has_ethereum();
    signing_input_oneof_.ethereum_ = ethereum;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.ethereum)
}
void SwapOutput::clear_ethereum() {
  if (_internal_has_ethereum()) {
    if (GetArenaForAllocation() == nullptr) {
      delete signing_input_oneof_.ethereum_;
    }
    clear_has_signing_input_oneof();
  }
}
void SwapOutput::set_allocated_binance(::TW::Binance::Proto::SigningInput* binance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_signing_input_oneof();
  if (binance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binance));
    if (message_arena != submessage_arena) {
      binance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binance, submessage_arena);
    }
    set_has_binance();
    signing_input_oneof_.binance_ = binance;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.binance)
}
void SwapOutput::clear_binance() {
  if (_internal_has_binance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete signing_input_oneof_.binance_;
    }
    clear_has_signing_input_oneof();
  }
}
void SwapOutput::set_allocated_cosmos(::TW::Cosmos::Proto::SigningInput* cosmos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_signing_input_oneof();
  if (cosmos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cosmos));
    if (message_arena != submessage_arena) {
      cosmos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cosmos, submessage_arena);
    }
    set_has_cosmos();
    signing_input_oneof_.cosmos_ = cosmos;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.THORChainSwap.Proto.SwapOutput.cosmos)
}
void SwapOutput::clear_cosmos() {
  if (_internal_has_cosmos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete signing_input_oneof_.cosmos_;
    }
    clear_has_signing_input_oneof();
  }
}
SwapOutput::SwapOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.THORChainSwap.Proto.SwapOutput)
}
SwapOutput::SwapOutput(const SwapOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::TW::THORChainSwap::Proto::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  ::memcpy(&from_chain_, &from.from_chain_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_chain_) -
    reinterpret_cast<char*>(&from_chain_)) + sizeof(to_chain_));
  clear_has_signing_input_oneof();
  switch (from.signing_input_oneof_case()) {
    case kBitcoin: {
      _internal_mutable_bitcoin()->::TW::Bitcoin::Proto::SigningInput::MergeFrom(from._internal_bitcoin());
      break;
    }
    case kEthereum: {
      _internal_mutable_ethereum()->::TW::Ethereum::Proto::SigningInput::MergeFrom(from._internal_ethereum());
      break;
    }
    case kBinance: {
      _internal_mutable_binance()->::TW::Binance::Proto::SigningInput::MergeFrom(from._internal_binance());
      break;
    }
    case kCosmos: {
      _internal_mutable_cosmos()->::TW::Cosmos::Proto::SigningInput::MergeFrom(from._internal_cosmos());
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.THORChainSwap.Proto.SwapOutput)
}

inline void SwapOutput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_chain_) -
    reinterpret_cast<char*>(&error_)) + sizeof(to_chain_));
clear_has_signing_input_oneof();
}

SwapOutput::~SwapOutput() {
  // @@protoc_insertion_point(destructor:TW.THORChainSwap.Proto.SwapOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SwapOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
  if (has_signing_input_oneof()) {
    clear_signing_input_oneof();
  }
}

void SwapOutput::ArenaDtor(void* object) {
  SwapOutput* _this = reinterpret_cast< SwapOutput* >(object);
  (void)_this;
}
void SwapOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwapOutput::clear_signing_input_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.THORChainSwap.Proto.SwapOutput)
  switch (signing_input_oneof_case()) {
    case kBitcoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete signing_input_oneof_.bitcoin_;
      }
      break;
    }
    case kEthereum: {
      if (GetArenaForAllocation() == nullptr) {
        delete signing_input_oneof_.ethereum_;
      }
      break;
    }
    case kBinance: {
      if (GetArenaForAllocation() == nullptr) {
        delete signing_input_oneof_.binance_;
      }
      break;
    }
    case kCosmos: {
      if (GetArenaForAllocation() == nullptr) {
        delete signing_input_oneof_.cosmos_;
      }
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGNING_INPUT_ONEOF_NOT_SET;
}


void SwapOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.THORChainSwap.Proto.SwapOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  ::memset(&from_chain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_chain_) -
      reinterpret_cast<char*>(&from_chain_)) + sizeof(to_chain_));
  clear_signing_input_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.THORChainSwap.Proto.Chain from_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_from_chain(static_cast<::TW::THORChainSwap::Proto::Chain>(val));
        } else
          goto handle_unusual;
        continue;
      // .TW.THORChainSwap.Proto.Chain to_chain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_to_chain(static_cast<::TW::THORChainSwap::Proto::Chain>(val));
        } else
          goto handle_unusual;
        continue;
      // .TW.THORChainSwap.Proto.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitcoin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.SigningInput ethereum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethereum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Binance.Proto.SigningInput binance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_binance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Cosmos.Proto.SigningInput cosmos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cosmos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwapOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.THORChainSwap.Proto.SwapOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Chain from_chain = 1;
  if (this->_internal_from_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_from_chain(), target);
  }

  // .TW.THORChainSwap.Proto.Chain to_chain = 2;
  if (this->_internal_to_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_to_chain(), target);
  }

  // .TW.THORChainSwap.Proto.Error error = 3;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
  if (_internal_has_bitcoin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bitcoin(this), target, stream);
  }

  // .TW.Ethereum.Proto.SigningInput ethereum = 5;
  if (_internal_has_ethereum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ethereum(this), target, stream);
  }

  // .TW.Binance.Proto.SigningInput binance = 6;
  if (_internal_has_binance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::binance(this), target, stream);
  }

  // .TW.Cosmos.Proto.SigningInput cosmos = 7;
  if (_internal_has_cosmos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cosmos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.THORChainSwap.Proto.SwapOutput)
  return target;
}

size_t SwapOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.THORChainSwap.Proto.SwapOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.THORChainSwap.Proto.Error error = 3;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .TW.THORChainSwap.Proto.Chain from_chain = 1;
  if (this->_internal_from_chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from_chain());
  }

  // .TW.THORChainSwap.Proto.Chain to_chain = 2;
  if (this->_internal_to_chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_to_chain());
  }

  switch (signing_input_oneof_case()) {
    // .TW.Bitcoin.Proto.SigningInput bitcoin = 4;
    case kBitcoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.bitcoin_);
      break;
    }
    // .TW.Ethereum.Proto.SigningInput ethereum = 5;
    case kEthereum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.ethereum_);
      break;
    }
    // .TW.Binance.Proto.SigningInput binance = 6;
    case kBinance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.binance_);
      break;
    }
    // .TW.Cosmos.Proto.SigningInput cosmos = 7;
    case kCosmos: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_input_oneof_.cosmos_);
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwapOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapOutput::GetClassData() const { return &_class_data_; }

void SwapOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SwapOutput *>(to)->MergeFrom(
      static_cast<const SwapOutput &>(from));
}


void SwapOutput::MergeFrom(const SwapOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.THORChainSwap.Proto.SwapOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_mutable_error()->::TW::THORChainSwap::Proto::Error::MergeFrom(from._internal_error());
  }
  if (from._internal_from_chain() != 0) {
    _internal_set_from_chain(from._internal_from_chain());
  }
  if (from._internal_to_chain() != 0) {
    _internal_set_to_chain(from._internal_to_chain());
  }
  switch (from.signing_input_oneof_case()) {
    case kBitcoin: {
      _internal_mutable_bitcoin()->::TW::Bitcoin::Proto::SigningInput::MergeFrom(from._internal_bitcoin());
      break;
    }
    case kEthereum: {
      _internal_mutable_ethereum()->::TW::Ethereum::Proto::SigningInput::MergeFrom(from._internal_ethereum());
      break;
    }
    case kBinance: {
      _internal_mutable_binance()->::TW::Binance::Proto::SigningInput::MergeFrom(from._internal_binance());
      break;
    }
    case kCosmos: {
      _internal_mutable_cosmos()->::TW::Cosmos::Proto::SigningInput::MergeFrom(from._internal_cosmos());
      break;
    }
    case SIGNING_INPUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapOutput::CopyFrom(const SwapOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.THORChainSwap.Proto.SwapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapOutput::IsInitialized() const {
  return true;
}

void SwapOutput::InternalSwap(SwapOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapOutput, to_chain_)
      + sizeof(SwapOutput::to_chain_)
      - PROTOBUF_FIELD_OFFSET(SwapOutput, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
  swap(signing_input_oneof_, other->signing_input_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_THORChainSwap_2eproto_getter, &descriptor_table_THORChainSwap_2eproto_once,
      file_level_metadata_THORChainSwap_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace THORChainSwap
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::Error* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::Asset* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::StreamParams* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::StreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::StreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::SwapInput* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::SwapInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::SwapInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::THORChainSwap::Proto::SwapOutput* Arena::CreateMaybeMessage< ::TW::THORChainSwap::Proto::SwapOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::THORChainSwap::Proto::SwapOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
