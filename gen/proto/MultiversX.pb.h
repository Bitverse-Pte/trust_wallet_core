// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiversX.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MultiversX_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MultiversX_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MultiversX_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MultiversX_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MultiversX_2eproto;
namespace TW {
namespace MultiversX {
namespace Proto {
class Accounts;
struct AccountsDefaultTypeInternal;
extern AccountsDefaultTypeInternal _Accounts_default_instance_;
class EGLDTransfer;
struct EGLDTransferDefaultTypeInternal;
extern EGLDTransferDefaultTypeInternal _EGLDTransfer_default_instance_;
class ESDTNFTTransfer;
struct ESDTNFTTransferDefaultTypeInternal;
extern ESDTNFTTransferDefaultTypeInternal _ESDTNFTTransfer_default_instance_;
class ESDTTransfer;
struct ESDTTransferDefaultTypeInternal;
extern ESDTTransferDefaultTypeInternal _ESDTTransfer_default_instance_;
class GenericAction;
struct GenericActionDefaultTypeInternal;
extern GenericActionDefaultTypeInternal _GenericAction_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace MultiversX
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::MultiversX::Proto::Accounts* Arena::CreateMaybeMessage<::TW::MultiversX::Proto::Accounts>(Arena*);
template<> ::TW::MultiversX::Proto::EGLDTransfer* Arena::CreateMaybeMessage<::TW::MultiversX::Proto::EGLDTransfer>(Arena*);
template<> ::TW::MultiversX::Proto::ESDTNFTTransfer* Arena::CreateMaybeMessage<::TW::MultiversX::Proto::ESDTNFTTransfer>(Arena*);
template<> ::TW::MultiversX::Proto::ESDTTransfer* Arena::CreateMaybeMessage<::TW::MultiversX::Proto::ESDTTransfer>(Arena*);
template<> ::TW::MultiversX::Proto::GenericAction* Arena::CreateMaybeMessage<::TW::MultiversX::Proto::GenericAction>(Arena*);
template<> ::TW::MultiversX::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::MultiversX::Proto::SigningInput>(Arena*);
template<> ::TW::MultiversX::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::MultiversX::Proto::SigningOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace MultiversX {
namespace Proto {

// ===================================================================

class GenericAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.MultiversX.Proto.GenericAction) */ {
 public:
  inline GenericAction() : GenericAction(nullptr) {}
  ~GenericAction() override;
  explicit constexpr GenericAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericAction(const GenericAction& from);
  GenericAction(GenericAction&& from) noexcept
    : GenericAction() {
    *this = ::std::move(from);
  }

  inline GenericAction& operator=(const GenericAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericAction& operator=(GenericAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericAction* internal_default_instance() {
    return reinterpret_cast<const GenericAction*>(
               &_GenericAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericAction& a, GenericAction& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericAction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.MultiversX.Proto.GenericAction";
  }
  protected:
  explicit GenericAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kDataFieldNumber = 3,
    kAccountsFieldNumber = 1,
    kVersionFieldNumber = 4,
    kOptionsFieldNumber = 5,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  bool has_accounts() const;
  private:
  bool _internal_has_accounts() const;
  public:
  void clear_accounts();
  const ::TW::MultiversX::Proto::Accounts& accounts() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::Accounts* release_accounts();
  ::TW::MultiversX::Proto::Accounts* mutable_accounts();
  void set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts);
  private:
  const ::TW::MultiversX::Proto::Accounts& _internal_accounts() const;
  ::TW::MultiversX::Proto::Accounts* _internal_mutable_accounts();
  public:
  void unsafe_arena_set_allocated_accounts(
      ::TW::MultiversX::Proto::Accounts* accounts);
  ::TW::MultiversX::Proto::Accounts* unsafe_arena_release_accounts();

  // uint32 version = 4;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint32 options = 5;
  void clear_options();
  uint32_t options() const;
  void set_options(uint32_t value);
  private:
  uint32_t _internal_options() const;
  void _internal_set_options(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.MultiversX.Proto.GenericAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::TW::MultiversX::Proto::Accounts* accounts_;
  uint32_t version_;
  uint32_t options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MultiversX_2eproto;
};
// -------------------------------------------------------------------

class EGLDTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.MultiversX.Proto.EGLDTransfer) */ {
 public:
  inline EGLDTransfer() : EGLDTransfer(nullptr) {}
  ~EGLDTransfer() override;
  explicit constexpr EGLDTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EGLDTransfer(const EGLDTransfer& from);
  EGLDTransfer(EGLDTransfer&& from) noexcept
    : EGLDTransfer() {
    *this = ::std::move(from);
  }

  inline EGLDTransfer& operator=(const EGLDTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline EGLDTransfer& operator=(EGLDTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EGLDTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const EGLDTransfer* internal_default_instance() {
    return reinterpret_cast<const EGLDTransfer*>(
               &_EGLDTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EGLDTransfer& a, EGLDTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(EGLDTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EGLDTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EGLDTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EGLDTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EGLDTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EGLDTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EGLDTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.MultiversX.Proto.EGLDTransfer";
  }
  protected:
  explicit EGLDTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kDataFieldNumber = 3,
    kAccountsFieldNumber = 1,
    kVersionFieldNumber = 4,
  };
  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  bool has_accounts() const;
  private:
  bool _internal_has_accounts() const;
  public:
  void clear_accounts();
  const ::TW::MultiversX::Proto::Accounts& accounts() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::Accounts* release_accounts();
  ::TW::MultiversX::Proto::Accounts* mutable_accounts();
  void set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts);
  private:
  const ::TW::MultiversX::Proto::Accounts& _internal_accounts() const;
  ::TW::MultiversX::Proto::Accounts* _internal_mutable_accounts();
  public:
  void unsafe_arena_set_allocated_accounts(
      ::TW::MultiversX::Proto::Accounts* accounts);
  ::TW::MultiversX::Proto::Accounts* unsafe_arena_release_accounts();

  // uint32 version = 4;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.MultiversX.Proto.EGLDTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::TW::MultiversX::Proto::Accounts* accounts_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MultiversX_2eproto;
};
// -------------------------------------------------------------------

class ESDTTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.MultiversX.Proto.ESDTTransfer) */ {
 public:
  inline ESDTTransfer() : ESDTTransfer(nullptr) {}
  ~ESDTTransfer() override;
  explicit constexpr ESDTTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESDTTransfer(const ESDTTransfer& from);
  ESDTTransfer(ESDTTransfer&& from) noexcept
    : ESDTTransfer() {
    *this = ::std::move(from);
  }

  inline ESDTTransfer& operator=(const ESDTTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESDTTransfer& operator=(ESDTTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ESDTTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESDTTransfer* internal_default_instance() {
    return reinterpret_cast<const ESDTTransfer*>(
               &_ESDTTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ESDTTransfer& a, ESDTTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(ESDTTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESDTTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ESDTTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ESDTTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ESDTTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ESDTTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESDTTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.MultiversX.Proto.ESDTTransfer";
  }
  protected:
  explicit ESDTTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdentifierFieldNumber = 2,
    kAmountFieldNumber = 3,
    kAccountsFieldNumber = 1,
    kVersionFieldNumber = 4,
  };
  // string token_identifier = 2;
  void clear_token_identifier();
  const std::string& token_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_identifier();
  PROTOBUF_NODISCARD std::string* release_token_identifier();
  void set_allocated_token_identifier(std::string* token_identifier);
  private:
  const std::string& _internal_token_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_identifier(const std::string& value);
  std::string* _internal_mutable_token_identifier();
  public:

  // string amount = 3;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  bool has_accounts() const;
  private:
  bool _internal_has_accounts() const;
  public:
  void clear_accounts();
  const ::TW::MultiversX::Proto::Accounts& accounts() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::Accounts* release_accounts();
  ::TW::MultiversX::Proto::Accounts* mutable_accounts();
  void set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts);
  private:
  const ::TW::MultiversX::Proto::Accounts& _internal_accounts() const;
  ::TW::MultiversX::Proto::Accounts* _internal_mutable_accounts();
  public:
  void unsafe_arena_set_allocated_accounts(
      ::TW::MultiversX::Proto::Accounts* accounts);
  ::TW::MultiversX::Proto::Accounts* unsafe_arena_release_accounts();

  // uint32 version = 4;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.MultiversX.Proto.ESDTTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::TW::MultiversX::Proto::Accounts* accounts_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MultiversX_2eproto;
};
// -------------------------------------------------------------------

class ESDTNFTTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.MultiversX.Proto.ESDTNFTTransfer) */ {
 public:
  inline ESDTNFTTransfer() : ESDTNFTTransfer(nullptr) {}
  ~ESDTNFTTransfer() override;
  explicit constexpr ESDTNFTTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESDTNFTTransfer(const ESDTNFTTransfer& from);
  ESDTNFTTransfer(ESDTNFTTransfer&& from) noexcept
    : ESDTNFTTransfer() {
    *this = ::std::move(from);
  }

  inline ESDTNFTTransfer& operator=(const ESDTNFTTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESDTNFTTransfer& operator=(ESDTNFTTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ESDTNFTTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESDTNFTTransfer* internal_default_instance() {
    return reinterpret_cast<const ESDTNFTTransfer*>(
               &_ESDTNFTTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ESDTNFTTransfer& a, ESDTNFTTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(ESDTNFTTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESDTNFTTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ESDTNFTTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ESDTNFTTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ESDTNFTTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ESDTNFTTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESDTNFTTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.MultiversX.Proto.ESDTNFTTransfer";
  }
  protected:
  explicit ESDTNFTTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenCollectionFieldNumber = 2,
    kAmountFieldNumber = 4,
    kAccountsFieldNumber = 1,
    kTokenNonceFieldNumber = 3,
    kVersionFieldNumber = 5,
  };
  // string token_collection = 2;
  void clear_token_collection();
  const std::string& token_collection() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_collection(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_collection();
  PROTOBUF_NODISCARD std::string* release_token_collection();
  void set_allocated_token_collection(std::string* token_collection);
  private:
  const std::string& _internal_token_collection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_collection(const std::string& value);
  std::string* _internal_mutable_token_collection();
  public:

  // string amount = 4;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // .TW.MultiversX.Proto.Accounts accounts = 1;
  bool has_accounts() const;
  private:
  bool _internal_has_accounts() const;
  public:
  void clear_accounts();
  const ::TW::MultiversX::Proto::Accounts& accounts() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::Accounts* release_accounts();
  ::TW::MultiversX::Proto::Accounts* mutable_accounts();
  void set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts);
  private:
  const ::TW::MultiversX::Proto::Accounts& _internal_accounts() const;
  ::TW::MultiversX::Proto::Accounts* _internal_mutable_accounts();
  public:
  void unsafe_arena_set_allocated_accounts(
      ::TW::MultiversX::Proto::Accounts* accounts);
  ::TW::MultiversX::Proto::Accounts* unsafe_arena_release_accounts();

  // uint64 token_nonce = 3;
  void clear_token_nonce();
  uint64_t token_nonce() const;
  void set_token_nonce(uint64_t value);
  private:
  uint64_t _internal_token_nonce() const;
  void _internal_set_token_nonce(uint64_t value);
  public:

  // uint32 version = 5;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.MultiversX.Proto.ESDTNFTTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::TW::MultiversX::Proto::Accounts* accounts_;
  uint64_t token_nonce_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MultiversX_2eproto;
};
// -------------------------------------------------------------------

class Accounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.MultiversX.Proto.Accounts) */ {
 public:
  inline Accounts() : Accounts(nullptr) {}
  ~Accounts() override;
  explicit constexpr Accounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Accounts(const Accounts& from);
  Accounts(Accounts&& from) noexcept
    : Accounts() {
    *this = ::std::move(from);
  }

  inline Accounts& operator=(const Accounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accounts& operator=(Accounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Accounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const Accounts* internal_default_instance() {
    return reinterpret_cast<const Accounts*>(
               &_Accounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Accounts& a, Accounts& b) {
    a.Swap(&b);
  }
  inline void Swap(Accounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Accounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Accounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Accounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Accounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.MultiversX.Proto.Accounts";
  }
  protected:
  explicit Accounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 2,
    kSenderUsernameFieldNumber = 3,
    kReceiverFieldNumber = 4,
    kReceiverUsernameFieldNumber = 5,
    kGuardianFieldNumber = 6,
    kSenderNonceFieldNumber = 1,
  };
  // string sender = 2;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string sender_username = 3;
  void clear_sender_username();
  const std::string& sender_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_username();
  PROTOBUF_NODISCARD std::string* release_sender_username();
  void set_allocated_sender_username(std::string* sender_username);
  private:
  const std::string& _internal_sender_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_username(const std::string& value);
  std::string* _internal_mutable_sender_username();
  public:

  // string receiver = 4;
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // string receiver_username = 5;
  void clear_receiver_username();
  const std::string& receiver_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_username();
  PROTOBUF_NODISCARD std::string* release_receiver_username();
  void set_allocated_receiver_username(std::string* receiver_username);
  private:
  const std::string& _internal_receiver_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_username(const std::string& value);
  std::string* _internal_mutable_receiver_username();
  public:

  // string guardian = 6;
  void clear_guardian();
  const std::string& guardian() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guardian(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guardian();
  PROTOBUF_NODISCARD std::string* release_guardian();
  void set_allocated_guardian(std::string* guardian);
  private:
  const std::string& _internal_guardian() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guardian(const std::string& value);
  std::string* _internal_mutable_guardian();
  public:

  // uint64 sender_nonce = 1;
  void clear_sender_nonce();
  uint64_t sender_nonce() const;
  void set_sender_nonce(uint64_t value);
  private:
  uint64_t _internal_sender_nonce() const;
  void _internal_set_sender_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.MultiversX.Proto.Accounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guardian_;
  uint64_t sender_nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MultiversX_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.MultiversX.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kGenericAction = 5,
    kEgldTransfer = 6,
    kEsdtTransfer = 7,
    kEsdtnftTransfer = 8,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.MultiversX.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kChainIdFieldNumber = 2,
    kGasPriceFieldNumber = 3,
    kGasLimitFieldNumber = 4,
    kGenericActionFieldNumber = 5,
    kEgldTransferFieldNumber = 6,
    kEsdtTransferFieldNumber = 7,
    kEsdtnftTransferFieldNumber = 8,
  };
  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string chain_id = 2;
  void clear_chain_id();
  const std::string& chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // uint64 gas_price = 3;
  void clear_gas_price();
  uint64_t gas_price() const;
  void set_gas_price(uint64_t value);
  private:
  uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(uint64_t value);
  public:

  // uint64 gas_limit = 4;
  void clear_gas_limit();
  uint64_t gas_limit() const;
  void set_gas_limit(uint64_t value);
  private:
  uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(uint64_t value);
  public:

  // .TW.MultiversX.Proto.GenericAction generic_action = 5;
  bool has_generic_action() const;
  private:
  bool _internal_has_generic_action() const;
  public:
  void clear_generic_action();
  const ::TW::MultiversX::Proto::GenericAction& generic_action() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::GenericAction* release_generic_action();
  ::TW::MultiversX::Proto::GenericAction* mutable_generic_action();
  void set_allocated_generic_action(::TW::MultiversX::Proto::GenericAction* generic_action);
  private:
  const ::TW::MultiversX::Proto::GenericAction& _internal_generic_action() const;
  ::TW::MultiversX::Proto::GenericAction* _internal_mutable_generic_action();
  public:
  void unsafe_arena_set_allocated_generic_action(
      ::TW::MultiversX::Proto::GenericAction* generic_action);
  ::TW::MultiversX::Proto::GenericAction* unsafe_arena_release_generic_action();

  // .TW.MultiversX.Proto.EGLDTransfer egld_transfer = 6;
  bool has_egld_transfer() const;
  private:
  bool _internal_has_egld_transfer() const;
  public:
  void clear_egld_transfer();
  const ::TW::MultiversX::Proto::EGLDTransfer& egld_transfer() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::EGLDTransfer* release_egld_transfer();
  ::TW::MultiversX::Proto::EGLDTransfer* mutable_egld_transfer();
  void set_allocated_egld_transfer(::TW::MultiversX::Proto::EGLDTransfer* egld_transfer);
  private:
  const ::TW::MultiversX::Proto::EGLDTransfer& _internal_egld_transfer() const;
  ::TW::MultiversX::Proto::EGLDTransfer* _internal_mutable_egld_transfer();
  public:
  void unsafe_arena_set_allocated_egld_transfer(
      ::TW::MultiversX::Proto::EGLDTransfer* egld_transfer);
  ::TW::MultiversX::Proto::EGLDTransfer* unsafe_arena_release_egld_transfer();

  // .TW.MultiversX.Proto.ESDTTransfer esdt_transfer = 7;
  bool has_esdt_transfer() const;
  private:
  bool _internal_has_esdt_transfer() const;
  public:
  void clear_esdt_transfer();
  const ::TW::MultiversX::Proto::ESDTTransfer& esdt_transfer() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::ESDTTransfer* release_esdt_transfer();
  ::TW::MultiversX::Proto::ESDTTransfer* mutable_esdt_transfer();
  void set_allocated_esdt_transfer(::TW::MultiversX::Proto::ESDTTransfer* esdt_transfer);
  private:
  const ::TW::MultiversX::Proto::ESDTTransfer& _internal_esdt_transfer() const;
  ::TW::MultiversX::Proto::ESDTTransfer* _internal_mutable_esdt_transfer();
  public:
  void unsafe_arena_set_allocated_esdt_transfer(
      ::TW::MultiversX::Proto::ESDTTransfer* esdt_transfer);
  ::TW::MultiversX::Proto::ESDTTransfer* unsafe_arena_release_esdt_transfer();

  // .TW.MultiversX.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
  bool has_esdtnft_transfer() const;
  private:
  bool _internal_has_esdtnft_transfer() const;
  public:
  void clear_esdtnft_transfer();
  const ::TW::MultiversX::Proto::ESDTNFTTransfer& esdtnft_transfer() const;
  PROTOBUF_NODISCARD ::TW::MultiversX::Proto::ESDTNFTTransfer* release_esdtnft_transfer();
  ::TW::MultiversX::Proto::ESDTNFTTransfer* mutable_esdtnft_transfer();
  void set_allocated_esdtnft_transfer(::TW::MultiversX::Proto::ESDTNFTTransfer* esdtnft_transfer);
  private:
  const ::TW::MultiversX::Proto::ESDTNFTTransfer& _internal_esdtnft_transfer() const;
  ::TW::MultiversX::Proto::ESDTNFTTransfer* _internal_mutable_esdtnft_transfer();
  public:
  void unsafe_arena_set_allocated_esdtnft_transfer(
      ::TW::MultiversX::Proto::ESDTNFTTransfer* esdtnft_transfer);
  ::TW::MultiversX::Proto::ESDTNFTTransfer* unsafe_arena_release_esdtnft_transfer();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.MultiversX.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_generic_action();
  void set_has_egld_transfer();
  void set_has_esdt_transfer();
  void set_has_esdtnft_transfer();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  uint64_t gas_price_;
  uint64_t gas_limit_;
  union MessageOneofUnion {
    constexpr MessageOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::MultiversX::Proto::GenericAction* generic_action_;
    ::TW::MultiversX::Proto::EGLDTransfer* egld_transfer_;
    ::TW::MultiversX::Proto::ESDTTransfer* esdt_transfer_;
    ::TW::MultiversX::Proto::ESDTNFTTransfer* esdtnft_transfer_;
  } message_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_MultiversX_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.MultiversX.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.MultiversX.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kErrorMessageFieldNumber = 4,
    kErrorFieldNumber = 3,
  };
  // string encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 3;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.MultiversX.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MultiversX_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericAction

// .TW.MultiversX.Proto.Accounts accounts = 1;
inline bool GenericAction::_internal_has_accounts() const {
  return this != internal_default_instance() && accounts_ != nullptr;
}
inline bool GenericAction::has_accounts() const {
  return _internal_has_accounts();
}
inline void GenericAction::clear_accounts() {
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
}
inline const ::TW::MultiversX::Proto::Accounts& GenericAction::_internal_accounts() const {
  const ::TW::MultiversX::Proto::Accounts* p = accounts_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::MultiversX::Proto::Accounts&>(
      ::TW::MultiversX::Proto::_Accounts_default_instance_);
}
inline const ::TW::MultiversX::Proto::Accounts& GenericAction::accounts() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.GenericAction.accounts)
  return _internal_accounts();
}
inline void GenericAction::unsafe_arena_set_allocated_accounts(
    ::TW::MultiversX::Proto::Accounts* accounts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accounts_);
  }
  accounts_ = accounts;
  if (accounts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.GenericAction.accounts)
}
inline ::TW::MultiversX::Proto::Accounts* GenericAction::release_accounts() {
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* GenericAction::unsafe_arena_release_accounts() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.GenericAction.accounts)
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* GenericAction::_internal_mutable_accounts() {
  
  if (accounts_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::MultiversX::Proto::Accounts>(GetArenaForAllocation());
    accounts_ = p;
  }
  return accounts_;
}
inline ::TW::MultiversX::Proto::Accounts* GenericAction::mutable_accounts() {
  ::TW::MultiversX::Proto::Accounts* _msg = _internal_mutable_accounts();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.GenericAction.accounts)
  return _msg;
}
inline void GenericAction::set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accounts_;
  }
  if (accounts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::Accounts>::GetOwningArena(accounts);
    if (message_arena != submessage_arena) {
      accounts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accounts, submessage_arena);
    }
    
  } else {
    
  }
  accounts_ = accounts;
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.GenericAction.accounts)
}

// string value = 2;
inline void GenericAction::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GenericAction::value() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.GenericAction.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericAction::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.GenericAction.value)
}
inline std::string* GenericAction::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.GenericAction.value)
  return _s;
}
inline const std::string& GenericAction::_internal_value() const {
  return value_.Get();
}
inline void GenericAction::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericAction::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericAction::release_value() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.GenericAction.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericAction::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.GenericAction.value)
}

// string data = 3;
inline void GenericAction::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& GenericAction::data() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.GenericAction.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericAction::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.GenericAction.data)
}
inline std::string* GenericAction::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.GenericAction.data)
  return _s;
}
inline const std::string& GenericAction::_internal_data() const {
  return data_.Get();
}
inline void GenericAction::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericAction::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericAction::release_data() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.GenericAction.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericAction::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.GenericAction.data)
}

// uint32 version = 4;
inline void GenericAction::clear_version() {
  version_ = 0u;
}
inline uint32_t GenericAction::_internal_version() const {
  return version_;
}
inline uint32_t GenericAction::version() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.GenericAction.version)
  return _internal_version();
}
inline void GenericAction::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void GenericAction::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.GenericAction.version)
}

// uint32 options = 5;
inline void GenericAction::clear_options() {
  options_ = 0u;
}
inline uint32_t GenericAction::_internal_options() const {
  return options_;
}
inline uint32_t GenericAction::options() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.GenericAction.options)
  return _internal_options();
}
inline void GenericAction::_internal_set_options(uint32_t value) {
  
  options_ = value;
}
inline void GenericAction::set_options(uint32_t value) {
  _internal_set_options(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.GenericAction.options)
}

// -------------------------------------------------------------------

// EGLDTransfer

// .TW.MultiversX.Proto.Accounts accounts = 1;
inline bool EGLDTransfer::_internal_has_accounts() const {
  return this != internal_default_instance() && accounts_ != nullptr;
}
inline bool EGLDTransfer::has_accounts() const {
  return _internal_has_accounts();
}
inline void EGLDTransfer::clear_accounts() {
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
}
inline const ::TW::MultiversX::Proto::Accounts& EGLDTransfer::_internal_accounts() const {
  const ::TW::MultiversX::Proto::Accounts* p = accounts_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::MultiversX::Proto::Accounts&>(
      ::TW::MultiversX::Proto::_Accounts_default_instance_);
}
inline const ::TW::MultiversX::Proto::Accounts& EGLDTransfer::accounts() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.EGLDTransfer.accounts)
  return _internal_accounts();
}
inline void EGLDTransfer::unsafe_arena_set_allocated_accounts(
    ::TW::MultiversX::Proto::Accounts* accounts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accounts_);
  }
  accounts_ = accounts;
  if (accounts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.EGLDTransfer.accounts)
}
inline ::TW::MultiversX::Proto::Accounts* EGLDTransfer::release_accounts() {
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* EGLDTransfer::unsafe_arena_release_accounts() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.EGLDTransfer.accounts)
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* EGLDTransfer::_internal_mutable_accounts() {
  
  if (accounts_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::MultiversX::Proto::Accounts>(GetArenaForAllocation());
    accounts_ = p;
  }
  return accounts_;
}
inline ::TW::MultiversX::Proto::Accounts* EGLDTransfer::mutable_accounts() {
  ::TW::MultiversX::Proto::Accounts* _msg = _internal_mutable_accounts();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.EGLDTransfer.accounts)
  return _msg;
}
inline void EGLDTransfer::set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accounts_;
  }
  if (accounts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::Accounts>::GetOwningArena(accounts);
    if (message_arena != submessage_arena) {
      accounts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accounts, submessage_arena);
    }
    
  } else {
    
  }
  accounts_ = accounts;
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.EGLDTransfer.accounts)
}

// string amount = 2;
inline void EGLDTransfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& EGLDTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.EGLDTransfer.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EGLDTransfer::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.EGLDTransfer.amount)
}
inline std::string* EGLDTransfer::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.EGLDTransfer.amount)
  return _s;
}
inline const std::string& EGLDTransfer::_internal_amount() const {
  return amount_.Get();
}
inline void EGLDTransfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EGLDTransfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EGLDTransfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.EGLDTransfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EGLDTransfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.EGLDTransfer.amount)
}

// string data = 3;
inline void EGLDTransfer::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& EGLDTransfer::data() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.EGLDTransfer.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EGLDTransfer::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.EGLDTransfer.data)
}
inline std::string* EGLDTransfer::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.EGLDTransfer.data)
  return _s;
}
inline const std::string& EGLDTransfer::_internal_data() const {
  return data_.Get();
}
inline void EGLDTransfer::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EGLDTransfer::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EGLDTransfer::release_data() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.EGLDTransfer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EGLDTransfer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.EGLDTransfer.data)
}

// uint32 version = 4;
inline void EGLDTransfer::clear_version() {
  version_ = 0u;
}
inline uint32_t EGLDTransfer::_internal_version() const {
  return version_;
}
inline uint32_t EGLDTransfer::version() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.EGLDTransfer.version)
  return _internal_version();
}
inline void EGLDTransfer::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void EGLDTransfer::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.EGLDTransfer.version)
}

// -------------------------------------------------------------------

// ESDTTransfer

// .TW.MultiversX.Proto.Accounts accounts = 1;
inline bool ESDTTransfer::_internal_has_accounts() const {
  return this != internal_default_instance() && accounts_ != nullptr;
}
inline bool ESDTTransfer::has_accounts() const {
  return _internal_has_accounts();
}
inline void ESDTTransfer::clear_accounts() {
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
}
inline const ::TW::MultiversX::Proto::Accounts& ESDTTransfer::_internal_accounts() const {
  const ::TW::MultiversX::Proto::Accounts* p = accounts_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::MultiversX::Proto::Accounts&>(
      ::TW::MultiversX::Proto::_Accounts_default_instance_);
}
inline const ::TW::MultiversX::Proto::Accounts& ESDTTransfer::accounts() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTTransfer.accounts)
  return _internal_accounts();
}
inline void ESDTTransfer::unsafe_arena_set_allocated_accounts(
    ::TW::MultiversX::Proto::Accounts* accounts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accounts_);
  }
  accounts_ = accounts;
  if (accounts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.ESDTTransfer.accounts)
}
inline ::TW::MultiversX::Proto::Accounts* ESDTTransfer::release_accounts() {
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* ESDTTransfer::unsafe_arena_release_accounts() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.ESDTTransfer.accounts)
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* ESDTTransfer::_internal_mutable_accounts() {
  
  if (accounts_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::MultiversX::Proto::Accounts>(GetArenaForAllocation());
    accounts_ = p;
  }
  return accounts_;
}
inline ::TW::MultiversX::Proto::Accounts* ESDTTransfer::mutable_accounts() {
  ::TW::MultiversX::Proto::Accounts* _msg = _internal_mutable_accounts();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.ESDTTransfer.accounts)
  return _msg;
}
inline void ESDTTransfer::set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accounts_;
  }
  if (accounts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::Accounts>::GetOwningArena(accounts);
    if (message_arena != submessage_arena) {
      accounts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accounts, submessage_arena);
    }
    
  } else {
    
  }
  accounts_ = accounts;
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.ESDTTransfer.accounts)
}

// string token_identifier = 2;
inline void ESDTTransfer::clear_token_identifier() {
  token_identifier_.ClearToEmpty();
}
inline const std::string& ESDTTransfer::token_identifier() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTTransfer.token_identifier)
  return _internal_token_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ESDTTransfer::set_token_identifier(ArgT0&& arg0, ArgT... args) {
 
 token_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.ESDTTransfer.token_identifier)
}
inline std::string* ESDTTransfer::mutable_token_identifier() {
  std::string* _s = _internal_mutable_token_identifier();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.ESDTTransfer.token_identifier)
  return _s;
}
inline const std::string& ESDTTransfer::_internal_token_identifier() const {
  return token_identifier_.Get();
}
inline void ESDTTransfer::_internal_set_token_identifier(const std::string& value) {
  
  token_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ESDTTransfer::_internal_mutable_token_identifier() {
  
  return token_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ESDTTransfer::release_token_identifier() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.ESDTTransfer.token_identifier)
  return token_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ESDTTransfer::set_allocated_token_identifier(std::string* token_identifier) {
  if (token_identifier != nullptr) {
    
  } else {
    
  }
  token_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.ESDTTransfer.token_identifier)
}

// string amount = 3;
inline void ESDTTransfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& ESDTTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTTransfer.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ESDTTransfer::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.ESDTTransfer.amount)
}
inline std::string* ESDTTransfer::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.ESDTTransfer.amount)
  return _s;
}
inline const std::string& ESDTTransfer::_internal_amount() const {
  return amount_.Get();
}
inline void ESDTTransfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ESDTTransfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ESDTTransfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.ESDTTransfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ESDTTransfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.ESDTTransfer.amount)
}

// uint32 version = 4;
inline void ESDTTransfer::clear_version() {
  version_ = 0u;
}
inline uint32_t ESDTTransfer::_internal_version() const {
  return version_;
}
inline uint32_t ESDTTransfer::version() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTTransfer.version)
  return _internal_version();
}
inline void ESDTTransfer::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void ESDTTransfer::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.ESDTTransfer.version)
}

// -------------------------------------------------------------------

// ESDTNFTTransfer

// .TW.MultiversX.Proto.Accounts accounts = 1;
inline bool ESDTNFTTransfer::_internal_has_accounts() const {
  return this != internal_default_instance() && accounts_ != nullptr;
}
inline bool ESDTNFTTransfer::has_accounts() const {
  return _internal_has_accounts();
}
inline void ESDTNFTTransfer::clear_accounts() {
  if (GetArenaForAllocation() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
}
inline const ::TW::MultiversX::Proto::Accounts& ESDTNFTTransfer::_internal_accounts() const {
  const ::TW::MultiversX::Proto::Accounts* p = accounts_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::MultiversX::Proto::Accounts&>(
      ::TW::MultiversX::Proto::_Accounts_default_instance_);
}
inline const ::TW::MultiversX::Proto::Accounts& ESDTNFTTransfer::accounts() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTNFTTransfer.accounts)
  return _internal_accounts();
}
inline void ESDTNFTTransfer::unsafe_arena_set_allocated_accounts(
    ::TW::MultiversX::Proto::Accounts* accounts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accounts_);
  }
  accounts_ = accounts;
  if (accounts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.ESDTNFTTransfer.accounts)
}
inline ::TW::MultiversX::Proto::Accounts* ESDTNFTTransfer::release_accounts() {
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* ESDTNFTTransfer::unsafe_arena_release_accounts() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.ESDTNFTTransfer.accounts)
  
  ::TW::MultiversX::Proto::Accounts* temp = accounts_;
  accounts_ = nullptr;
  return temp;
}
inline ::TW::MultiversX::Proto::Accounts* ESDTNFTTransfer::_internal_mutable_accounts() {
  
  if (accounts_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::MultiversX::Proto::Accounts>(GetArenaForAllocation());
    accounts_ = p;
  }
  return accounts_;
}
inline ::TW::MultiversX::Proto::Accounts* ESDTNFTTransfer::mutable_accounts() {
  ::TW::MultiversX::Proto::Accounts* _msg = _internal_mutable_accounts();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.ESDTNFTTransfer.accounts)
  return _msg;
}
inline void ESDTNFTTransfer::set_allocated_accounts(::TW::MultiversX::Proto::Accounts* accounts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accounts_;
  }
  if (accounts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::MultiversX::Proto::Accounts>::GetOwningArena(accounts);
    if (message_arena != submessage_arena) {
      accounts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accounts, submessage_arena);
    }
    
  } else {
    
  }
  accounts_ = accounts;
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.ESDTNFTTransfer.accounts)
}

// string token_collection = 2;
inline void ESDTNFTTransfer::clear_token_collection() {
  token_collection_.ClearToEmpty();
}
inline const std::string& ESDTNFTTransfer::token_collection() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTNFTTransfer.token_collection)
  return _internal_token_collection();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ESDTNFTTransfer::set_token_collection(ArgT0&& arg0, ArgT... args) {
 
 token_collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.ESDTNFTTransfer.token_collection)
}
inline std::string* ESDTNFTTransfer::mutable_token_collection() {
  std::string* _s = _internal_mutable_token_collection();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.ESDTNFTTransfer.token_collection)
  return _s;
}
inline const std::string& ESDTNFTTransfer::_internal_token_collection() const {
  return token_collection_.Get();
}
inline void ESDTNFTTransfer::_internal_set_token_collection(const std::string& value) {
  
  token_collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ESDTNFTTransfer::_internal_mutable_token_collection() {
  
  return token_collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ESDTNFTTransfer::release_token_collection() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.ESDTNFTTransfer.token_collection)
  return token_collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ESDTNFTTransfer::set_allocated_token_collection(std::string* token_collection) {
  if (token_collection != nullptr) {
    
  } else {
    
  }
  token_collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_collection,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_collection_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.ESDTNFTTransfer.token_collection)
}

// uint64 token_nonce = 3;
inline void ESDTNFTTransfer::clear_token_nonce() {
  token_nonce_ = uint64_t{0u};
}
inline uint64_t ESDTNFTTransfer::_internal_token_nonce() const {
  return token_nonce_;
}
inline uint64_t ESDTNFTTransfer::token_nonce() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTNFTTransfer.token_nonce)
  return _internal_token_nonce();
}
inline void ESDTNFTTransfer::_internal_set_token_nonce(uint64_t value) {
  
  token_nonce_ = value;
}
inline void ESDTNFTTransfer::set_token_nonce(uint64_t value) {
  _internal_set_token_nonce(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.ESDTNFTTransfer.token_nonce)
}

// string amount = 4;
inline void ESDTNFTTransfer::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& ESDTNFTTransfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTNFTTransfer.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ESDTNFTTransfer::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.ESDTNFTTransfer.amount)
}
inline std::string* ESDTNFTTransfer::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.ESDTNFTTransfer.amount)
  return _s;
}
inline const std::string& ESDTNFTTransfer::_internal_amount() const {
  return amount_.Get();
}
inline void ESDTNFTTransfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ESDTNFTTransfer::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ESDTNFTTransfer::release_amount() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.ESDTNFTTransfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ESDTNFTTransfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.ESDTNFTTransfer.amount)
}

// uint32 version = 5;
inline void ESDTNFTTransfer::clear_version() {
  version_ = 0u;
}
inline uint32_t ESDTNFTTransfer::_internal_version() const {
  return version_;
}
inline uint32_t ESDTNFTTransfer::version() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.ESDTNFTTransfer.version)
  return _internal_version();
}
inline void ESDTNFTTransfer::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void ESDTNFTTransfer::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.ESDTNFTTransfer.version)
}

// -------------------------------------------------------------------

// Accounts

// uint64 sender_nonce = 1;
inline void Accounts::clear_sender_nonce() {
  sender_nonce_ = uint64_t{0u};
}
inline uint64_t Accounts::_internal_sender_nonce() const {
  return sender_nonce_;
}
inline uint64_t Accounts::sender_nonce() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.Accounts.sender_nonce)
  return _internal_sender_nonce();
}
inline void Accounts::_internal_set_sender_nonce(uint64_t value) {
  
  sender_nonce_ = value;
}
inline void Accounts::set_sender_nonce(uint64_t value) {
  _internal_set_sender_nonce(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.Accounts.sender_nonce)
}

// string sender = 2;
inline void Accounts::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& Accounts::sender() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.Accounts.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Accounts::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.Accounts.sender)
}
inline std::string* Accounts::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.Accounts.sender)
  return _s;
}
inline const std::string& Accounts::_internal_sender() const {
  return sender_.Get();
}
inline void Accounts::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Accounts::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Accounts::release_sender() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.Accounts.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Accounts::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.Accounts.sender)
}

// string sender_username = 3;
inline void Accounts::clear_sender_username() {
  sender_username_.ClearToEmpty();
}
inline const std::string& Accounts::sender_username() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.Accounts.sender_username)
  return _internal_sender_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Accounts::set_sender_username(ArgT0&& arg0, ArgT... args) {
 
 sender_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.Accounts.sender_username)
}
inline std::string* Accounts::mutable_sender_username() {
  std::string* _s = _internal_mutable_sender_username();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.Accounts.sender_username)
  return _s;
}
inline const std::string& Accounts::_internal_sender_username() const {
  return sender_username_.Get();
}
inline void Accounts::_internal_set_sender_username(const std::string& value) {
  
  sender_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Accounts::_internal_mutable_sender_username() {
  
  return sender_username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Accounts::release_sender_username() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.Accounts.sender_username)
  return sender_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Accounts::set_allocated_sender_username(std::string* sender_username) {
  if (sender_username != nullptr) {
    
  } else {
    
  }
  sender_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.Accounts.sender_username)
}

// string receiver = 4;
inline void Accounts::clear_receiver() {
  receiver_.ClearToEmpty();
}
inline const std::string& Accounts::receiver() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.Accounts.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Accounts::set_receiver(ArgT0&& arg0, ArgT... args) {
 
 receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.Accounts.receiver)
}
inline std::string* Accounts::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.Accounts.receiver)
  return _s;
}
inline const std::string& Accounts::_internal_receiver() const {
  return receiver_.Get();
}
inline void Accounts::_internal_set_receiver(const std::string& value) {
  
  receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Accounts::_internal_mutable_receiver() {
  
  return receiver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Accounts::release_receiver() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.Accounts.receiver)
  return receiver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Accounts::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.Accounts.receiver)
}

// string receiver_username = 5;
inline void Accounts::clear_receiver_username() {
  receiver_username_.ClearToEmpty();
}
inline const std::string& Accounts::receiver_username() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.Accounts.receiver_username)
  return _internal_receiver_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Accounts::set_receiver_username(ArgT0&& arg0, ArgT... args) {
 
 receiver_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.Accounts.receiver_username)
}
inline std::string* Accounts::mutable_receiver_username() {
  std::string* _s = _internal_mutable_receiver_username();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.Accounts.receiver_username)
  return _s;
}
inline const std::string& Accounts::_internal_receiver_username() const {
  return receiver_username_.Get();
}
inline void Accounts::_internal_set_receiver_username(const std::string& value) {
  
  receiver_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Accounts::_internal_mutable_receiver_username() {
  
  return receiver_username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Accounts::release_receiver_username() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.Accounts.receiver_username)
  return receiver_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Accounts::set_allocated_receiver_username(std::string* receiver_username) {
  if (receiver_username != nullptr) {
    
  } else {
    
  }
  receiver_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.Accounts.receiver_username)
}

// string guardian = 6;
inline void Accounts::clear_guardian() {
  guardian_.ClearToEmpty();
}
inline const std::string& Accounts::guardian() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.Accounts.guardian)
  return _internal_guardian();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Accounts::set_guardian(ArgT0&& arg0, ArgT... args) {
 
 guardian_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.Accounts.guardian)
}
inline std::string* Accounts::mutable_guardian() {
  std::string* _s = _internal_mutable_guardian();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.Accounts.guardian)
  return _s;
}
inline const std::string& Accounts::_internal_guardian() const {
  return guardian_.Get();
}
inline void Accounts::_internal_set_guardian(const std::string& value) {
  
  guardian_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Accounts::_internal_mutable_guardian() {
  
  return guardian_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Accounts::release_guardian() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.Accounts.guardian)
  return guardian_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Accounts::set_allocated_guardian(std::string* guardian) {
  if (guardian != nullptr) {
    
  } else {
    
  }
  guardian_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guardian,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guardian_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guardian_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.Accounts.guardian)
}

// -------------------------------------------------------------------

// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningInput.private_key)
}

// string chain_id = 2;
inline void SigningInput::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& SigningInput::chain_id() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.chain_id)
  return _internal_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_chain_id(ArgT0&& arg0, ArgT... args) {
 
 chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningInput.chain_id)
}
inline std::string* SigningInput::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningInput.chain_id)
  return _s;
}
inline const std::string& SigningInput::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void SigningInput::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningInput.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chain_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningInput.chain_id)
}

// uint64 gas_price = 3;
inline void SigningInput::clear_gas_price() {
  gas_price_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_gas_price() const {
  return gas_price_;
}
inline uint64_t SigningInput::gas_price() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.gas_price)
  return _internal_gas_price();
}
inline void SigningInput::_internal_set_gas_price(uint64_t value) {
  
  gas_price_ = value;
}
inline void SigningInput::set_gas_price(uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningInput.gas_price)
}

// uint64 gas_limit = 4;
inline void SigningInput::clear_gas_limit() {
  gas_limit_ = uint64_t{0u};
}
inline uint64_t SigningInput::_internal_gas_limit() const {
  return gas_limit_;
}
inline uint64_t SigningInput::gas_limit() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.gas_limit)
  return _internal_gas_limit();
}
inline void SigningInput::_internal_set_gas_limit(uint64_t value) {
  
  gas_limit_ = value;
}
inline void SigningInput::set_gas_limit(uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningInput.gas_limit)
}

// .TW.MultiversX.Proto.GenericAction generic_action = 5;
inline bool SigningInput::_internal_has_generic_action() const {
  return message_oneof_case() == kGenericAction;
}
inline bool SigningInput::has_generic_action() const {
  return _internal_has_generic_action();
}
inline void SigningInput::set_has_generic_action() {
  _oneof_case_[0] = kGenericAction;
}
inline void SigningInput::clear_generic_action() {
  if (_internal_has_generic_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.generic_action_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::MultiversX::Proto::GenericAction* SigningInput::release_generic_action() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningInput.generic_action)
  if (_internal_has_generic_action()) {
    clear_has_message_oneof();
      ::TW::MultiversX::Proto::GenericAction* temp = message_oneof_.generic_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.generic_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::MultiversX::Proto::GenericAction& SigningInput::_internal_generic_action() const {
  return _internal_has_generic_action()
      ? *message_oneof_.generic_action_
      : reinterpret_cast< ::TW::MultiversX::Proto::GenericAction&>(::TW::MultiversX::Proto::_GenericAction_default_instance_);
}
inline const ::TW::MultiversX::Proto::GenericAction& SigningInput::generic_action() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.generic_action)
  return _internal_generic_action();
}
inline ::TW::MultiversX::Proto::GenericAction* SigningInput::unsafe_arena_release_generic_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.MultiversX.Proto.SigningInput.generic_action)
  if (_internal_has_generic_action()) {
    clear_has_message_oneof();
    ::TW::MultiversX::Proto::GenericAction* temp = message_oneof_.generic_action_;
    message_oneof_.generic_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_generic_action(::TW::MultiversX::Proto::GenericAction* generic_action) {
  clear_message_oneof();
  if (generic_action) {
    set_has_generic_action();
    message_oneof_.generic_action_ = generic_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.SigningInput.generic_action)
}
inline ::TW::MultiversX::Proto::GenericAction* SigningInput::_internal_mutable_generic_action() {
  if (!_internal_has_generic_action()) {
    clear_message_oneof();
    set_has_generic_action();
    message_oneof_.generic_action_ = CreateMaybeMessage< ::TW::MultiversX::Proto::GenericAction >(GetArenaForAllocation());
  }
  return message_oneof_.generic_action_;
}
inline ::TW::MultiversX::Proto::GenericAction* SigningInput::mutable_generic_action() {
  ::TW::MultiversX::Proto::GenericAction* _msg = _internal_mutable_generic_action();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningInput.generic_action)
  return _msg;
}

// .TW.MultiversX.Proto.EGLDTransfer egld_transfer = 6;
inline bool SigningInput::_internal_has_egld_transfer() const {
  return message_oneof_case() == kEgldTransfer;
}
inline bool SigningInput::has_egld_transfer() const {
  return _internal_has_egld_transfer();
}
inline void SigningInput::set_has_egld_transfer() {
  _oneof_case_[0] = kEgldTransfer;
}
inline void SigningInput::clear_egld_transfer() {
  if (_internal_has_egld_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.egld_transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::MultiversX::Proto::EGLDTransfer* SigningInput::release_egld_transfer() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningInput.egld_transfer)
  if (_internal_has_egld_transfer()) {
    clear_has_message_oneof();
      ::TW::MultiversX::Proto::EGLDTransfer* temp = message_oneof_.egld_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.egld_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::MultiversX::Proto::EGLDTransfer& SigningInput::_internal_egld_transfer() const {
  return _internal_has_egld_transfer()
      ? *message_oneof_.egld_transfer_
      : reinterpret_cast< ::TW::MultiversX::Proto::EGLDTransfer&>(::TW::MultiversX::Proto::_EGLDTransfer_default_instance_);
}
inline const ::TW::MultiversX::Proto::EGLDTransfer& SigningInput::egld_transfer() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.egld_transfer)
  return _internal_egld_transfer();
}
inline ::TW::MultiversX::Proto::EGLDTransfer* SigningInput::unsafe_arena_release_egld_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.MultiversX.Proto.SigningInput.egld_transfer)
  if (_internal_has_egld_transfer()) {
    clear_has_message_oneof();
    ::TW::MultiversX::Proto::EGLDTransfer* temp = message_oneof_.egld_transfer_;
    message_oneof_.egld_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_egld_transfer(::TW::MultiversX::Proto::EGLDTransfer* egld_transfer) {
  clear_message_oneof();
  if (egld_transfer) {
    set_has_egld_transfer();
    message_oneof_.egld_transfer_ = egld_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.SigningInput.egld_transfer)
}
inline ::TW::MultiversX::Proto::EGLDTransfer* SigningInput::_internal_mutable_egld_transfer() {
  if (!_internal_has_egld_transfer()) {
    clear_message_oneof();
    set_has_egld_transfer();
    message_oneof_.egld_transfer_ = CreateMaybeMessage< ::TW::MultiversX::Proto::EGLDTransfer >(GetArenaForAllocation());
  }
  return message_oneof_.egld_transfer_;
}
inline ::TW::MultiversX::Proto::EGLDTransfer* SigningInput::mutable_egld_transfer() {
  ::TW::MultiversX::Proto::EGLDTransfer* _msg = _internal_mutable_egld_transfer();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningInput.egld_transfer)
  return _msg;
}

// .TW.MultiversX.Proto.ESDTTransfer esdt_transfer = 7;
inline bool SigningInput::_internal_has_esdt_transfer() const {
  return message_oneof_case() == kEsdtTransfer;
}
inline bool SigningInput::has_esdt_transfer() const {
  return _internal_has_esdt_transfer();
}
inline void SigningInput::set_has_esdt_transfer() {
  _oneof_case_[0] = kEsdtTransfer;
}
inline void SigningInput::clear_esdt_transfer() {
  if (_internal_has_esdt_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.esdt_transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::MultiversX::Proto::ESDTTransfer* SigningInput::release_esdt_transfer() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningInput.esdt_transfer)
  if (_internal_has_esdt_transfer()) {
    clear_has_message_oneof();
      ::TW::MultiversX::Proto::ESDTTransfer* temp = message_oneof_.esdt_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.esdt_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::MultiversX::Proto::ESDTTransfer& SigningInput::_internal_esdt_transfer() const {
  return _internal_has_esdt_transfer()
      ? *message_oneof_.esdt_transfer_
      : reinterpret_cast< ::TW::MultiversX::Proto::ESDTTransfer&>(::TW::MultiversX::Proto::_ESDTTransfer_default_instance_);
}
inline const ::TW::MultiversX::Proto::ESDTTransfer& SigningInput::esdt_transfer() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.esdt_transfer)
  return _internal_esdt_transfer();
}
inline ::TW::MultiversX::Proto::ESDTTransfer* SigningInput::unsafe_arena_release_esdt_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.MultiversX.Proto.SigningInput.esdt_transfer)
  if (_internal_has_esdt_transfer()) {
    clear_has_message_oneof();
    ::TW::MultiversX::Proto::ESDTTransfer* temp = message_oneof_.esdt_transfer_;
    message_oneof_.esdt_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_esdt_transfer(::TW::MultiversX::Proto::ESDTTransfer* esdt_transfer) {
  clear_message_oneof();
  if (esdt_transfer) {
    set_has_esdt_transfer();
    message_oneof_.esdt_transfer_ = esdt_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.SigningInput.esdt_transfer)
}
inline ::TW::MultiversX::Proto::ESDTTransfer* SigningInput::_internal_mutable_esdt_transfer() {
  if (!_internal_has_esdt_transfer()) {
    clear_message_oneof();
    set_has_esdt_transfer();
    message_oneof_.esdt_transfer_ = CreateMaybeMessage< ::TW::MultiversX::Proto::ESDTTransfer >(GetArenaForAllocation());
  }
  return message_oneof_.esdt_transfer_;
}
inline ::TW::MultiversX::Proto::ESDTTransfer* SigningInput::mutable_esdt_transfer() {
  ::TW::MultiversX::Proto::ESDTTransfer* _msg = _internal_mutable_esdt_transfer();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningInput.esdt_transfer)
  return _msg;
}

// .TW.MultiversX.Proto.ESDTNFTTransfer esdtnft_transfer = 8;
inline bool SigningInput::_internal_has_esdtnft_transfer() const {
  return message_oneof_case() == kEsdtnftTransfer;
}
inline bool SigningInput::has_esdtnft_transfer() const {
  return _internal_has_esdtnft_transfer();
}
inline void SigningInput::set_has_esdtnft_transfer() {
  _oneof_case_[0] = kEsdtnftTransfer;
}
inline void SigningInput::clear_esdtnft_transfer() {
  if (_internal_has_esdtnft_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_oneof_.esdtnft_transfer_;
    }
    clear_has_message_oneof();
  }
}
inline ::TW::MultiversX::Proto::ESDTNFTTransfer* SigningInput::release_esdtnft_transfer() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningInput.esdtnft_transfer)
  if (_internal_has_esdtnft_transfer()) {
    clear_has_message_oneof();
      ::TW::MultiversX::Proto::ESDTNFTTransfer* temp = message_oneof_.esdtnft_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_oneof_.esdtnft_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::MultiversX::Proto::ESDTNFTTransfer& SigningInput::_internal_esdtnft_transfer() const {
  return _internal_has_esdtnft_transfer()
      ? *message_oneof_.esdtnft_transfer_
      : reinterpret_cast< ::TW::MultiversX::Proto::ESDTNFTTransfer&>(::TW::MultiversX::Proto::_ESDTNFTTransfer_default_instance_);
}
inline const ::TW::MultiversX::Proto::ESDTNFTTransfer& SigningInput::esdtnft_transfer() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningInput.esdtnft_transfer)
  return _internal_esdtnft_transfer();
}
inline ::TW::MultiversX::Proto::ESDTNFTTransfer* SigningInput::unsafe_arena_release_esdtnft_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.MultiversX.Proto.SigningInput.esdtnft_transfer)
  if (_internal_has_esdtnft_transfer()) {
    clear_has_message_oneof();
    ::TW::MultiversX::Proto::ESDTNFTTransfer* temp = message_oneof_.esdtnft_transfer_;
    message_oneof_.esdtnft_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_esdtnft_transfer(::TW::MultiversX::Proto::ESDTNFTTransfer* esdtnft_transfer) {
  clear_message_oneof();
  if (esdtnft_transfer) {
    set_has_esdtnft_transfer();
    message_oneof_.esdtnft_transfer_ = esdtnft_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.MultiversX.Proto.SigningInput.esdtnft_transfer)
}
inline ::TW::MultiversX::Proto::ESDTNFTTransfer* SigningInput::_internal_mutable_esdtnft_transfer() {
  if (!_internal_has_esdtnft_transfer()) {
    clear_message_oneof();
    set_has_esdtnft_transfer();
    message_oneof_.esdtnft_transfer_ = CreateMaybeMessage< ::TW::MultiversX::Proto::ESDTNFTTransfer >(GetArenaForAllocation());
  }
  return message_oneof_.esdtnft_transfer_;
}
inline ::TW::MultiversX::Proto::ESDTNFTTransfer* SigningInput::mutable_esdtnft_transfer() {
  ::TW::MultiversX::Proto::ESDTNFTTransfer* _msg = _internal_mutable_esdtnft_transfer();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningInput.esdtnft_transfer)
  return _msg;
}

inline bool SigningInput::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_message_oneof() {
  _oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline SigningInput::MessageOneofCase SigningInput::message_oneof_case() const {
  return SigningInput::MessageOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// string encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningOutput.encoded)
}

// string signature = 2;
inline void SigningOutput::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigningOutput::signature() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningOutput.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningOutput.signature)
}
inline std::string* SigningOutput::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningOutput.signature)
  return _s;
}
inline const std::string& SigningOutput::_internal_signature() const {
  return signature_.Get();
}
inline void SigningOutput::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_signature() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningOutput.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningOutput.signature)
}

// .TW.Common.Proto.SigningError error = 3;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningOutput.error)
}

// string error_message = 4;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.MultiversX.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.MultiversX.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.MultiversX.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.MultiversX.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.MultiversX.Proto.SigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace MultiversX
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MultiversX_2eproto
