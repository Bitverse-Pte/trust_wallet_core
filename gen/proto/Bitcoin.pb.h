// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bitcoin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Bitcoin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Bitcoin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Bitcoin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Bitcoin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Bitcoin_2eproto;
namespace TW {
namespace Bitcoin {
namespace Proto {
class HashPublicKey;
struct HashPublicKeyDefaultTypeInternal;
extern HashPublicKeyDefaultTypeInternal _HashPublicKey_default_instance_;
class OutPoint;
struct OutPointDefaultTypeInternal;
extern OutPointDefaultTypeInternal _OutPoint_default_instance_;
class OutputAddress;
struct OutputAddressDefaultTypeInternal;
extern OutputAddressDefaultTypeInternal _OutputAddress_default_instance_;
class PreSigningOutput;
struct PreSigningOutputDefaultTypeInternal;
extern PreSigningOutputDefaultTypeInternal _PreSigningOutput_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningInput_ScriptsEntry_DoNotUse;
struct SigningInput_ScriptsEntry_DoNotUseDefaultTypeInternal;
extern SigningInput_ScriptsEntry_DoNotUseDefaultTypeInternal _SigningInput_ScriptsEntry_DoNotUse_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionInput;
struct TransactionInputDefaultTypeInternal;
extern TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
class TransactionOutput;
struct TransactionOutputDefaultTypeInternal;
extern TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
class TransactionPlan;
struct TransactionPlanDefaultTypeInternal;
extern TransactionPlanDefaultTypeInternal _TransactionPlan_default_instance_;
class UnspentTransaction;
struct UnspentTransactionDefaultTypeInternal;
extern UnspentTransactionDefaultTypeInternal _UnspentTransaction_default_instance_;
}  // namespace Proto
}  // namespace Bitcoin
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Bitcoin::Proto::HashPublicKey* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::HashPublicKey>(Arena*);
template<> ::TW::Bitcoin::Proto::OutPoint* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::OutPoint>(Arena*);
template<> ::TW::Bitcoin::Proto::OutputAddress* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::OutputAddress>(Arena*);
template<> ::TW::Bitcoin::Proto::PreSigningOutput* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::PreSigningOutput>(Arena*);
template<> ::TW::Bitcoin::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::SigningInput>(Arena*);
template<> ::TW::Bitcoin::Proto::SigningInput_ScriptsEntry_DoNotUse* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::SigningInput_ScriptsEntry_DoNotUse>(Arena*);
template<> ::TW::Bitcoin::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::SigningOutput>(Arena*);
template<> ::TW::Bitcoin::Proto::Transaction* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::Transaction>(Arena*);
template<> ::TW::Bitcoin::Proto::TransactionInput* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::TransactionInput>(Arena*);
template<> ::TW::Bitcoin::Proto::TransactionOutput* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::TransactionOutput>(Arena*);
template<> ::TW::Bitcoin::Proto::TransactionPlan* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::TransactionPlan>(Arena*);
template<> ::TW::Bitcoin::Proto::UnspentTransaction* Arena::CreateMaybeMessage<::TW::Bitcoin::Proto::UnspentTransaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Bitcoin {
namespace Proto {

enum TransactionVariant : int {
  P2PKH = 0,
  P2WPKH = 1,
  P2TRKEYPATH = 2,
  BRC20TRANSFER = 3,
  NFTINSCRIPTION = 4,
  TransactionVariant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransactionVariant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransactionVariant_IsValid(int value);
constexpr TransactionVariant TransactionVariant_MIN = P2PKH;
constexpr TransactionVariant TransactionVariant_MAX = NFTINSCRIPTION;
constexpr int TransactionVariant_ARRAYSIZE = TransactionVariant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionVariant_descriptor();
template<typename T>
inline const std::string& TransactionVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionVariant_descriptor(), enum_t_value);
}
inline bool TransactionVariant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionVariant>(
    TransactionVariant_descriptor(), name, value);
}
// ===================================================================

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kVersionFieldNumber = 1,
    kLockTimeFieldNumber = 2,
  };
  // repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::Bitcoin::Proto::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionInput >*
      mutable_inputs();
  private:
  const ::TW::Bitcoin::Proto::TransactionInput& _internal_inputs(int index) const;
  ::TW::Bitcoin::Proto::TransactionInput* _internal_add_inputs();
  public:
  const ::TW::Bitcoin::Proto::TransactionInput& inputs(int index) const;
  ::TW::Bitcoin::Proto::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionInput >&
      inputs() const;

  // repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::Bitcoin::Proto::TransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionOutput >*
      mutable_outputs();
  private:
  const ::TW::Bitcoin::Proto::TransactionOutput& _internal_outputs(int index) const;
  ::TW::Bitcoin::Proto::TransactionOutput* _internal_add_outputs();
  public:
  const ::TW::Bitcoin::Proto::TransactionOutput& outputs(int index) const;
  ::TW::Bitcoin::Proto::TransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionOutput >&
      outputs() const;

  // sint32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // uint32 lockTime = 2;
  void clear_locktime();
  uint32_t locktime() const;
  void set_locktime(uint32_t value);
  private:
  uint32_t _internal_locktime() const;
  void _internal_set_locktime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionOutput > outputs_;
  int32_t version_;
  uint32_t locktime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class TransactionInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.TransactionInput) */ {
 public:
  inline TransactionInput() : TransactionInput(nullptr) {}
  ~TransactionInput() override;
  explicit constexpr TransactionInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionInput(const TransactionInput& from);
  TransactionInput(TransactionInput&& from) noexcept
    : TransactionInput() {
    *this = ::std::move(from);
  }

  inline TransactionInput& operator=(const TransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInput& operator=(TransactionInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionInput* internal_default_instance() {
    return reinterpret_cast<const TransactionInput*>(
               &_TransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionInput& a, TransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.TransactionInput";
  }
  protected:
  explicit TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 3,
    kPreviousOutputFieldNumber = 1,
    kSequenceFieldNumber = 2,
  };
  // bytes script = 3;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // .TW.Bitcoin.Proto.OutPoint previousOutput = 1;
  bool has_previousoutput() const;
  private:
  bool _internal_has_previousoutput() const;
  public:
  void clear_previousoutput();
  const ::TW::Bitcoin::Proto::OutPoint& previousoutput() const;
  PROTOBUF_NODISCARD ::TW::Bitcoin::Proto::OutPoint* release_previousoutput();
  ::TW::Bitcoin::Proto::OutPoint* mutable_previousoutput();
  void set_allocated_previousoutput(::TW::Bitcoin::Proto::OutPoint* previousoutput);
  private:
  const ::TW::Bitcoin::Proto::OutPoint& _internal_previousoutput() const;
  ::TW::Bitcoin::Proto::OutPoint* _internal_mutable_previousoutput();
  public:
  void unsafe_arena_set_allocated_previousoutput(
      ::TW::Bitcoin::Proto::OutPoint* previousoutput);
  ::TW::Bitcoin::Proto::OutPoint* unsafe_arena_release_previousoutput();

  // uint32 sequence = 2;
  void clear_sequence();
  uint32_t sequence() const;
  void set_sequence(uint32_t value);
  private:
  uint32_t _internal_sequence() const;
  void _internal_set_sequence(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.TransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  ::TW::Bitcoin::Proto::OutPoint* previousoutput_;
  uint32_t sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class OutPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.OutPoint) */ {
 public:
  inline OutPoint() : OutPoint(nullptr) {}
  ~OutPoint() override;
  explicit constexpr OutPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutPoint(const OutPoint& from);
  OutPoint(OutPoint&& from) noexcept
    : OutPoint() {
    *this = ::std::move(from);
  }

  inline OutPoint& operator=(const OutPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutPoint& operator=(OutPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutPoint* internal_default_instance() {
    return reinterpret_cast<const OutPoint*>(
               &_OutPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OutPoint& a, OutPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(OutPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.OutPoint";
  }
  protected:
  explicit OutPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kIndexFieldNumber = 2,
    kSequenceFieldNumber = 3,
    kTreeFieldNumber = 4,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 sequence = 3;
  void clear_sequence();
  uint32_t sequence() const;
  void set_sequence(uint32_t value);
  private:
  uint32_t _internal_sequence() const;
  void _internal_set_sequence(uint32_t value);
  public:

  // int32 tree = 4;
  void clear_tree();
  int32_t tree() const;
  void set_tree(int32_t value);
  private:
  int32_t _internal_tree() const;
  void _internal_set_tree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.OutPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  uint32_t index_;
  uint32_t sequence_;
  int32_t tree_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.TransactionOutput) */ {
 public:
  inline TransactionOutput() : TransactionOutput(nullptr) {}
  ~TransactionOutput() override;
  explicit constexpr TransactionOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOutput(const TransactionOutput& from);
  TransactionOutput(TransactionOutput&& from) noexcept
    : TransactionOutput() {
    *this = ::std::move(from);
  }

  inline TransactionOutput& operator=(const TransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutput& operator=(TransactionOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOutput* internal_default_instance() {
    return reinterpret_cast<const TransactionOutput*>(
               &_TransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionOutput& a, TransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.TransactionOutput";
  }
  protected:
  explicit TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 2,
    kSpendingScriptFieldNumber = 5,
    kValueFieldNumber = 1,
  };
  // bytes script = 2;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // bytes spendingScript = 5;
  void clear_spendingscript();
  const std::string& spendingscript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spendingscript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spendingscript();
  PROTOBUF_NODISCARD std::string* release_spendingscript();
  void set_allocated_spendingscript(std::string* spendingscript);
  private:
  const std::string& _internal_spendingscript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spendingscript(const std::string& value);
  std::string* _internal_mutable_spendingscript();
  public:

  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.TransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spendingscript_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class UnspentTransaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.UnspentTransaction) */ {
 public:
  inline UnspentTransaction() : UnspentTransaction(nullptr) {}
  ~UnspentTransaction() override;
  explicit constexpr UnspentTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnspentTransaction(const UnspentTransaction& from);
  UnspentTransaction(UnspentTransaction&& from) noexcept
    : UnspentTransaction() {
    *this = ::std::move(from);
  }

  inline UnspentTransaction& operator=(const UnspentTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnspentTransaction& operator=(UnspentTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnspentTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnspentTransaction* internal_default_instance() {
    return reinterpret_cast<const UnspentTransaction*>(
               &_UnspentTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnspentTransaction& a, UnspentTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(UnspentTransaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnspentTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnspentTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnspentTransaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnspentTransaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnspentTransaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnspentTransaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.UnspentTransaction";
  }
  protected:
  explicit UnspentTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 2,
    kSpendingScriptFieldNumber = 5,
    kOutPointFieldNumber = 1,
    kAmountFieldNumber = 3,
    kVariantFieldNumber = 4,
  };
  // bytes script = 2;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // bytes spendingScript = 5;
  void clear_spendingscript();
  const std::string& spendingscript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spendingscript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spendingscript();
  PROTOBUF_NODISCARD std::string* release_spendingscript();
  void set_allocated_spendingscript(std::string* spendingscript);
  private:
  const std::string& _internal_spendingscript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spendingscript(const std::string& value);
  std::string* _internal_mutable_spendingscript();
  public:

  // .TW.Bitcoin.Proto.OutPoint out_point = 1;
  bool has_out_point() const;
  private:
  bool _internal_has_out_point() const;
  public:
  void clear_out_point();
  const ::TW::Bitcoin::Proto::OutPoint& out_point() const;
  PROTOBUF_NODISCARD ::TW::Bitcoin::Proto::OutPoint* release_out_point();
  ::TW::Bitcoin::Proto::OutPoint* mutable_out_point();
  void set_allocated_out_point(::TW::Bitcoin::Proto::OutPoint* out_point);
  private:
  const ::TW::Bitcoin::Proto::OutPoint& _internal_out_point() const;
  ::TW::Bitcoin::Proto::OutPoint* _internal_mutable_out_point();
  public:
  void unsafe_arena_set_allocated_out_point(
      ::TW::Bitcoin::Proto::OutPoint* out_point);
  ::TW::Bitcoin::Proto::OutPoint* unsafe_arena_release_out_point();

  // int64 amount = 3;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // .TW.Bitcoin.Proto.TransactionVariant variant = 4;
  void clear_variant();
  ::TW::Bitcoin::Proto::TransactionVariant variant() const;
  void set_variant(::TW::Bitcoin::Proto::TransactionVariant value);
  private:
  ::TW::Bitcoin::Proto::TransactionVariant _internal_variant() const;
  void _internal_set_variant(::TW::Bitcoin::Proto::TransactionVariant value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.UnspentTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spendingscript_;
  ::TW::Bitcoin::Proto::OutPoint* out_point_;
  int64_t amount_;
  int variant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class OutputAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.OutputAddress) */ {
 public:
  inline OutputAddress() : OutputAddress(nullptr) {}
  ~OutputAddress() override;
  explicit constexpr OutputAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputAddress(const OutputAddress& from);
  OutputAddress(OutputAddress&& from) noexcept
    : OutputAddress() {
    *this = ::std::move(from);
  }

  inline OutputAddress& operator=(const OutputAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputAddress& operator=(OutputAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputAddress* internal_default_instance() {
    return reinterpret_cast<const OutputAddress*>(
               &_OutputAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OutputAddress& a, OutputAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.OutputAddress";
  }
  protected:
  explicit OutputAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string to_address = 1;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // int64 amount = 2;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.OutputAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  int64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class SigningInput_ScriptsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SigningInput_ScriptsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SigningInput_ScriptsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  SigningInput_ScriptsEntry_DoNotUse();
  explicit constexpr SigningInput_ScriptsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SigningInput_ScriptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SigningInput_ScriptsEntry_DoNotUse& other);
  static const SigningInput_ScriptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SigningInput_ScriptsEntry_DoNotUse*>(&_SigningInput_ScriptsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TW.Bitcoin.Proto.SigningInput.ScriptsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 6,
    kScriptsFieldNumber = 7,
    kUtxoFieldNumber = 8,
    kExtraOutputsFieldNumber = 14,
    kToAddressFieldNumber = 4,
    kChangeAddressFieldNumber = 5,
    kOutputOpReturnFieldNumber = 13,
    kPlanFieldNumber = 11,
    kAmountFieldNumber = 2,
    kByteFeeFieldNumber = 3,
    kHashTypeFieldNumber = 1,
    kCoinTypeFieldNumber = 10,
    kLockTimeFieldNumber = 12,
    kUseMaxAmountFieldNumber = 9,
    kUseMaxUtxoFieldNumber = 15,
    kDisableDustFilterFieldNumber = 16,
    kIsItBrcOperationFieldNumber = 18,
    kTimeFieldNumber = 17,
  };
  // repeated bytes private_key = 6;
  int private_key_size() const;
  private:
  int _internal_private_key_size() const;
  public:
  void clear_private_key();
  const std::string& private_key(int index) const;
  std::string* mutable_private_key(int index);
  void set_private_key(int index, const std::string& value);
  void set_private_key(int index, std::string&& value);
  void set_private_key(int index, const char* value);
  void set_private_key(int index, const void* value, size_t size);
  std::string* add_private_key();
  void add_private_key(const std::string& value);
  void add_private_key(std::string&& value);
  void add_private_key(const char* value);
  void add_private_key(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& private_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_private_key();
  private:
  const std::string& _internal_private_key(int index) const;
  std::string* _internal_add_private_key();
  public:

  // map<string, bytes> scripts = 7;
  int scripts_size() const;
  private:
  int _internal_scripts_size() const;
  public:
  void clear_scripts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_scripts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_scripts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      scripts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_scripts();

  // repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;
  int utxo_size() const;
  private:
  int _internal_utxo_size() const;
  public:
  void clear_utxo();
  ::TW::Bitcoin::Proto::UnspentTransaction* mutable_utxo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >*
      mutable_utxo();
  private:
  const ::TW::Bitcoin::Proto::UnspentTransaction& _internal_utxo(int index) const;
  ::TW::Bitcoin::Proto::UnspentTransaction* _internal_add_utxo();
  public:
  const ::TW::Bitcoin::Proto::UnspentTransaction& utxo(int index) const;
  ::TW::Bitcoin::Proto::UnspentTransaction* add_utxo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >&
      utxo() const;

  // repeated .TW.Bitcoin.Proto.OutputAddress extra_outputs = 14;
  int extra_outputs_size() const;
  private:
  int _internal_extra_outputs_size() const;
  public:
  void clear_extra_outputs();
  ::TW::Bitcoin::Proto::OutputAddress* mutable_extra_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::OutputAddress >*
      mutable_extra_outputs();
  private:
  const ::TW::Bitcoin::Proto::OutputAddress& _internal_extra_outputs(int index) const;
  ::TW::Bitcoin::Proto::OutputAddress* _internal_add_extra_outputs();
  public:
  const ::TW::Bitcoin::Proto::OutputAddress& extra_outputs(int index) const;
  ::TW::Bitcoin::Proto::OutputAddress* add_extra_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::OutputAddress >&
      extra_outputs() const;

  // string to_address = 4;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // string change_address = 5;
  void clear_change_address();
  const std::string& change_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_change_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_change_address();
  PROTOBUF_NODISCARD std::string* release_change_address();
  void set_allocated_change_address(std::string* change_address);
  private:
  const std::string& _internal_change_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_address(const std::string& value);
  std::string* _internal_mutable_change_address();
  public:

  // bytes output_op_return = 13;
  void clear_output_op_return();
  const std::string& output_op_return() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_op_return(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_op_return();
  PROTOBUF_NODISCARD std::string* release_output_op_return();
  void set_allocated_output_op_return(std::string* output_op_return);
  private:
  const std::string& _internal_output_op_return() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_op_return(const std::string& value);
  std::string* _internal_mutable_output_op_return();
  public:

  // .TW.Bitcoin.Proto.TransactionPlan plan = 11;
  bool has_plan() const;
  private:
  bool _internal_has_plan() const;
  public:
  void clear_plan();
  const ::TW::Bitcoin::Proto::TransactionPlan& plan() const;
  PROTOBUF_NODISCARD ::TW::Bitcoin::Proto::TransactionPlan* release_plan();
  ::TW::Bitcoin::Proto::TransactionPlan* mutable_plan();
  void set_allocated_plan(::TW::Bitcoin::Proto::TransactionPlan* plan);
  private:
  const ::TW::Bitcoin::Proto::TransactionPlan& _internal_plan() const;
  ::TW::Bitcoin::Proto::TransactionPlan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::TW::Bitcoin::Proto::TransactionPlan* plan);
  ::TW::Bitcoin::Proto::TransactionPlan* unsafe_arena_release_plan();

  // int64 amount = 2;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // int64 byte_fee = 3;
  void clear_byte_fee();
  int64_t byte_fee() const;
  void set_byte_fee(int64_t value);
  private:
  int64_t _internal_byte_fee() const;
  void _internal_set_byte_fee(int64_t value);
  public:

  // uint32 hash_type = 1;
  void clear_hash_type();
  uint32_t hash_type() const;
  void set_hash_type(uint32_t value);
  private:
  uint32_t _internal_hash_type() const;
  void _internal_set_hash_type(uint32_t value);
  public:

  // uint32 coin_type = 10;
  void clear_coin_type();
  uint32_t coin_type() const;
  void set_coin_type(uint32_t value);
  private:
  uint32_t _internal_coin_type() const;
  void _internal_set_coin_type(uint32_t value);
  public:

  // uint32 lock_time = 12;
  void clear_lock_time();
  uint32_t lock_time() const;
  void set_lock_time(uint32_t value);
  private:
  uint32_t _internal_lock_time() const;
  void _internal_set_lock_time(uint32_t value);
  public:

  // bool use_max_amount = 9;
  void clear_use_max_amount();
  bool use_max_amount() const;
  void set_use_max_amount(bool value);
  private:
  bool _internal_use_max_amount() const;
  void _internal_set_use_max_amount(bool value);
  public:

  // bool use_max_utxo = 15;
  void clear_use_max_utxo();
  bool use_max_utxo() const;
  void set_use_max_utxo(bool value);
  private:
  bool _internal_use_max_utxo() const;
  void _internal_set_use_max_utxo(bool value);
  public:

  // bool disable_dust_filter = 16;
  void clear_disable_dust_filter();
  bool disable_dust_filter() const;
  void set_disable_dust_filter(bool value);
  private:
  bool _internal_disable_dust_filter() const;
  void _internal_set_disable_dust_filter(bool value);
  public:

  // bool is_it_brc_operation = 18;
  void clear_is_it_brc_operation();
  bool is_it_brc_operation() const;
  void set_is_it_brc_operation(bool value);
  private:
  bool _internal_is_it_brc_operation() const;
  void _internal_set_is_it_brc_operation(bool value);
  public:

  // uint32 time = 17;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SigningInput_ScriptsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> scripts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction > utxo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::OutputAddress > extra_outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_op_return_;
  ::TW::Bitcoin::Proto::TransactionPlan* plan_;
  int64_t amount_;
  int64_t byte_fee_;
  uint32_t hash_type_;
  uint32_t coin_type_;
  uint32_t lock_time_;
  bool use_max_amount_;
  bool use_max_utxo_;
  bool disable_dust_filter_;
  bool is_it_brc_operation_;
  uint32_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class TransactionPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.TransactionPlan) */ {
 public:
  inline TransactionPlan() : TransactionPlan(nullptr) {}
  ~TransactionPlan() override;
  explicit constexpr TransactionPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionPlan(const TransactionPlan& from);
  TransactionPlan(TransactionPlan&& from) noexcept
    : TransactionPlan() {
    *this = ::std::move(from);
  }

  inline TransactionPlan& operator=(const TransactionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionPlan& operator=(TransactionPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionPlan* internal_default_instance() {
    return reinterpret_cast<const TransactionPlan*>(
               &_TransactionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransactionPlan& a, TransactionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionPlan& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.TransactionPlan";
  }
  protected:
  explicit TransactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtxosFieldNumber = 5,
    kBranchIdFieldNumber = 6,
    kOutputOpReturnFieldNumber = 8,
    kPreblockhashFieldNumber = 9,
    kAmountFieldNumber = 1,
    kAvailableAmountFieldNumber = 2,
    kFeeFieldNumber = 3,
    kChangeFieldNumber = 4,
    kPreblockheightFieldNumber = 10,
    kErrorFieldNumber = 7,
  };
  // repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;
  int utxos_size() const;
  private:
  int _internal_utxos_size() const;
  public:
  void clear_utxos();
  ::TW::Bitcoin::Proto::UnspentTransaction* mutable_utxos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >*
      mutable_utxos();
  private:
  const ::TW::Bitcoin::Proto::UnspentTransaction& _internal_utxos(int index) const;
  ::TW::Bitcoin::Proto::UnspentTransaction* _internal_add_utxos();
  public:
  const ::TW::Bitcoin::Proto::UnspentTransaction& utxos(int index) const;
  ::TW::Bitcoin::Proto::UnspentTransaction* add_utxos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >&
      utxos() const;

  // bytes branch_id = 6;
  void clear_branch_id();
  const std::string& branch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_branch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_branch_id();
  PROTOBUF_NODISCARD std::string* release_branch_id();
  void set_allocated_branch_id(std::string* branch_id);
  private:
  const std::string& _internal_branch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_branch_id(const std::string& value);
  std::string* _internal_mutable_branch_id();
  public:

  // bytes output_op_return = 8;
  void clear_output_op_return();
  const std::string& output_op_return() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_op_return(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_op_return();
  PROTOBUF_NODISCARD std::string* release_output_op_return();
  void set_allocated_output_op_return(std::string* output_op_return);
  private:
  const std::string& _internal_output_op_return() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_op_return(const std::string& value);
  std::string* _internal_mutable_output_op_return();
  public:

  // bytes preblockhash = 9;
  void clear_preblockhash();
  const std::string& preblockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preblockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preblockhash();
  PROTOBUF_NODISCARD std::string* release_preblockhash();
  void set_allocated_preblockhash(std::string* preblockhash);
  private:
  const std::string& _internal_preblockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preblockhash(const std::string& value);
  std::string* _internal_mutable_preblockhash();
  public:

  // int64 amount = 1;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // int64 available_amount = 2;
  void clear_available_amount();
  int64_t available_amount() const;
  void set_available_amount(int64_t value);
  private:
  int64_t _internal_available_amount() const;
  void _internal_set_available_amount(int64_t value);
  public:

  // int64 fee = 3;
  void clear_fee();
  int64_t fee() const;
  void set_fee(int64_t value);
  private:
  int64_t _internal_fee() const;
  void _internal_set_fee(int64_t value);
  public:

  // int64 change = 4;
  void clear_change();
  int64_t change() const;
  void set_change(int64_t value);
  private:
  int64_t _internal_change() const;
  void _internal_set_change(int64_t value);
  public:

  // int64 preblockheight = 10;
  void clear_preblockheight();
  int64_t preblockheight() const;
  void set_preblockheight(int64_t value);
  private:
  int64_t _internal_preblockheight() const;
  void _internal_set_preblockheight(int64_t value);
  public:

  // .TW.Common.Proto.SigningError error = 7;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.TransactionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction > utxos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_op_return_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preblockhash_;
  int64_t amount_;
  int64_t available_amount_;
  int64_t fee_;
  int64_t change_;
  int64_t preblockheight_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kErrorMessageFieldNumber = 5,
    kTransactionFieldNumber = 1,
    kErrorFieldNumber = 4,
  };
  // bytes encoded = 2;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string transaction_id = 3;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // string error_message = 5;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Bitcoin.Proto.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::Bitcoin::Proto::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::TW::Bitcoin::Proto::Transaction* release_transaction();
  ::TW::Bitcoin::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::Bitcoin::Proto::Transaction* transaction);
  private:
  const ::TW::Bitcoin::Proto::Transaction& _internal_transaction() const;
  ::TW::Bitcoin::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::Bitcoin::Proto::Transaction* transaction);
  ::TW::Bitcoin::Proto::Transaction* unsafe_arena_release_transaction();

  // .TW.Common.Proto.SigningError error = 4;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::TW::Bitcoin::Proto::Transaction* transaction_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class HashPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.HashPublicKey) */ {
 public:
  inline HashPublicKey() : HashPublicKey(nullptr) {}
  ~HashPublicKey() override;
  explicit constexpr HashPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashPublicKey(const HashPublicKey& from);
  HashPublicKey(HashPublicKey&& from) noexcept
    : HashPublicKey() {
    *this = ::std::move(from);
  }

  inline HashPublicKey& operator=(const HashPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashPublicKey& operator=(HashPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashPublicKey* internal_default_instance() {
    return reinterpret_cast<const HashPublicKey*>(
               &_HashPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HashPublicKey& a, HashPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(HashPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashPublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashPublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HashPublicKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.HashPublicKey";
  }
  protected:
  explicit HashPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataHashFieldNumber = 1,
    kPublicKeyHashFieldNumber = 2,
  };
  // bytes data_hash = 1;
  void clear_data_hash();
  const std::string& data_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_hash();
  PROTOBUF_NODISCARD std::string* release_data_hash();
  void set_allocated_data_hash(std::string* data_hash);
  private:
  const std::string& _internal_data_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_hash(const std::string& value);
  std::string* _internal_mutable_data_hash();
  public:

  // bytes public_key_hash = 2;
  void clear_public_key_hash();
  const std::string& public_key_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key_hash();
  PROTOBUF_NODISCARD std::string* release_public_key_hash();
  void set_allocated_public_key_hash(std::string* public_key_hash);
  private:
  const std::string& _internal_public_key_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key_hash(const std::string& value);
  std::string* _internal_mutable_public_key_hash();
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.HashPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// -------------------------------------------------------------------

class PreSigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Bitcoin.Proto.PreSigningOutput) */ {
 public:
  inline PreSigningOutput() : PreSigningOutput(nullptr) {}
  ~PreSigningOutput() override;
  explicit constexpr PreSigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreSigningOutput(const PreSigningOutput& from);
  PreSigningOutput(PreSigningOutput&& from) noexcept
    : PreSigningOutput() {
    *this = ::std::move(from);
  }

  inline PreSigningOutput& operator=(const PreSigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreSigningOutput& operator=(PreSigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreSigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreSigningOutput* internal_default_instance() {
    return reinterpret_cast<const PreSigningOutput*>(
               &_PreSigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PreSigningOutput& a, PreSigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(PreSigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreSigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreSigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreSigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreSigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreSigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreSigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Bitcoin.Proto.PreSigningOutput";
  }
  protected:
  explicit PreSigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashPublicKeysFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kErrorFieldNumber = 2,
  };
  // repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;
  int hash_public_keys_size() const;
  private:
  int _internal_hash_public_keys_size() const;
  public:
  void clear_hash_public_keys();
  ::TW::Bitcoin::Proto::HashPublicKey* mutable_hash_public_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::HashPublicKey >*
      mutable_hash_public_keys();
  private:
  const ::TW::Bitcoin::Proto::HashPublicKey& _internal_hash_public_keys(int index) const;
  ::TW::Bitcoin::Proto::HashPublicKey* _internal_add_hash_public_keys();
  public:
  const ::TW::Bitcoin::Proto::HashPublicKey& hash_public_keys(int index) const;
  ::TW::Bitcoin::Proto::HashPublicKey* add_hash_public_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::HashPublicKey >&
      hash_public_keys() const;

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.PreSigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::HashPublicKey > hash_public_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bitcoin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// sint32 version = 1;
inline void Transaction::clear_version() {
  version_ = 0;
}
inline int32_t Transaction::_internal_version() const {
  return version_;
}
inline int32_t Transaction::version() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.Transaction.version)
  return _internal_version();
}
inline void Transaction::_internal_set_version(int32_t value) {
  
  version_ = value;
}
inline void Transaction::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.Transaction.version)
}

// uint32 lockTime = 2;
inline void Transaction::clear_locktime() {
  locktime_ = 0u;
}
inline uint32_t Transaction::_internal_locktime() const {
  return locktime_;
}
inline uint32_t Transaction::locktime() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.Transaction.lockTime)
  return _internal_locktime();
}
inline void Transaction::_internal_set_locktime(uint32_t value) {
  
  locktime_ = value;
}
inline void Transaction::set_locktime(uint32_t value) {
  _internal_set_locktime(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.Transaction.lockTime)
}

// repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;
inline int Transaction::_internal_inputs_size() const {
  return inputs_.size();
}
inline int Transaction::inputs_size() const {
  return _internal_inputs_size();
}
inline void Transaction::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::Bitcoin::Proto::TransactionInput* Transaction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.Transaction.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionInput >*
Transaction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Bitcoin.Proto.Transaction.inputs)
  return &inputs_;
}
inline const ::TW::Bitcoin::Proto::TransactionInput& Transaction::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::Bitcoin::Proto::TransactionInput& Transaction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.Transaction.inputs)
  return _internal_inputs(index);
}
inline ::TW::Bitcoin::Proto::TransactionInput* Transaction::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::Bitcoin::Proto::TransactionInput* Transaction::add_inputs() {
  ::TW::Bitcoin::Proto::TransactionInput* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.Transaction.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionInput >&
Transaction::inputs() const {
  // @@protoc_insertion_point(field_list:TW.Bitcoin.Proto.Transaction.inputs)
  return inputs_;
}

// repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;
inline int Transaction::_internal_outputs_size() const {
  return outputs_.size();
}
inline int Transaction::outputs_size() const {
  return _internal_outputs_size();
}
inline void Transaction::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::Bitcoin::Proto::TransactionOutput* Transaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.Transaction.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionOutput >*
Transaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Bitcoin.Proto.Transaction.outputs)
  return &outputs_;
}
inline const ::TW::Bitcoin::Proto::TransactionOutput& Transaction::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::Bitcoin::Proto::TransactionOutput& Transaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.Transaction.outputs)
  return _internal_outputs(index);
}
inline ::TW::Bitcoin::Proto::TransactionOutput* Transaction::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::Bitcoin::Proto::TransactionOutput* Transaction::add_outputs() {
  ::TW::Bitcoin::Proto::TransactionOutput* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.Transaction.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::TransactionOutput >&
Transaction::outputs() const {
  // @@protoc_insertion_point(field_list:TW.Bitcoin.Proto.Transaction.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// TransactionInput

// .TW.Bitcoin.Proto.OutPoint previousOutput = 1;
inline bool TransactionInput::_internal_has_previousoutput() const {
  return this != internal_default_instance() && previousoutput_ != nullptr;
}
inline bool TransactionInput::has_previousoutput() const {
  return _internal_has_previousoutput();
}
inline void TransactionInput::clear_previousoutput() {
  if (GetArenaForAllocation() == nullptr && previousoutput_ != nullptr) {
    delete previousoutput_;
  }
  previousoutput_ = nullptr;
}
inline const ::TW::Bitcoin::Proto::OutPoint& TransactionInput::_internal_previousoutput() const {
  const ::TW::Bitcoin::Proto::OutPoint* p = previousoutput_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Bitcoin::Proto::OutPoint&>(
      ::TW::Bitcoin::Proto::_OutPoint_default_instance_);
}
inline const ::TW::Bitcoin::Proto::OutPoint& TransactionInput::previousoutput() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionInput.previousOutput)
  return _internal_previousoutput();
}
inline void TransactionInput::unsafe_arena_set_allocated_previousoutput(
    ::TW::Bitcoin::Proto::OutPoint* previousoutput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousoutput_);
  }
  previousoutput_ = previousoutput;
  if (previousoutput) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Bitcoin.Proto.TransactionInput.previousOutput)
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::release_previousoutput() {
  
  ::TW::Bitcoin::Proto::OutPoint* temp = previousoutput_;
  previousoutput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::unsafe_arena_release_previousoutput() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.TransactionInput.previousOutput)
  
  ::TW::Bitcoin::Proto::OutPoint* temp = previousoutput_;
  previousoutput_ = nullptr;
  return temp;
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::_internal_mutable_previousoutput() {
  
  if (previousoutput_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Bitcoin::Proto::OutPoint>(GetArenaForAllocation());
    previousoutput_ = p;
  }
  return previousoutput_;
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::mutable_previousoutput() {
  ::TW::Bitcoin::Proto::OutPoint* _msg = _internal_mutable_previousoutput();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionInput.previousOutput)
  return _msg;
}
inline void TransactionInput::set_allocated_previousoutput(::TW::Bitcoin::Proto::OutPoint* previousoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete previousoutput_;
  }
  if (previousoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Bitcoin::Proto::OutPoint>::GetOwningArena(previousoutput);
    if (message_arena != submessage_arena) {
      previousoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previousoutput, submessage_arena);
    }
    
  } else {
    
  }
  previousoutput_ = previousoutput;
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.TransactionInput.previousOutput)
}

// uint32 sequence = 2;
inline void TransactionInput::clear_sequence() {
  sequence_ = 0u;
}
inline uint32_t TransactionInput::_internal_sequence() const {
  return sequence_;
}
inline uint32_t TransactionInput::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionInput.sequence)
  return _internal_sequence();
}
inline void TransactionInput::_internal_set_sequence(uint32_t value) {
  
  sequence_ = value;
}
inline void TransactionInput::set_sequence(uint32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionInput.sequence)
}

// bytes script = 3;
inline void TransactionInput::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& TransactionInput::script() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionInput.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInput::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionInput.script)
}
inline std::string* TransactionInput::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionInput.script)
  return _s;
}
inline const std::string& TransactionInput::_internal_script() const {
  return script_.Get();
}
inline void TransactionInput::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionInput::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionInput::release_script() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.TransactionInput.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionInput::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.TransactionInput.script)
}

// -------------------------------------------------------------------

// OutPoint

// bytes hash = 1;
inline void OutPoint::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& OutPoint::hash() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.OutPoint.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutPoint::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.OutPoint.hash)
}
inline std::string* OutPoint::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.OutPoint.hash)
  return _s;
}
inline const std::string& OutPoint::_internal_hash() const {
  return hash_.Get();
}
inline void OutPoint::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OutPoint::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OutPoint::release_hash() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.OutPoint.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OutPoint::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.OutPoint.hash)
}

// uint32 index = 2;
inline void OutPoint::clear_index() {
  index_ = 0u;
}
inline uint32_t OutPoint::_internal_index() const {
  return index_;
}
inline uint32_t OutPoint::index() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.OutPoint.index)
  return _internal_index();
}
inline void OutPoint::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void OutPoint::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.OutPoint.index)
}

// uint32 sequence = 3;
inline void OutPoint::clear_sequence() {
  sequence_ = 0u;
}
inline uint32_t OutPoint::_internal_sequence() const {
  return sequence_;
}
inline uint32_t OutPoint::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.OutPoint.sequence)
  return _internal_sequence();
}
inline void OutPoint::_internal_set_sequence(uint32_t value) {
  
  sequence_ = value;
}
inline void OutPoint::set_sequence(uint32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.OutPoint.sequence)
}

// int32 tree = 4;
inline void OutPoint::clear_tree() {
  tree_ = 0;
}
inline int32_t OutPoint::_internal_tree() const {
  return tree_;
}
inline int32_t OutPoint::tree() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.OutPoint.tree)
  return _internal_tree();
}
inline void OutPoint::_internal_set_tree(int32_t value) {
  
  tree_ = value;
}
inline void OutPoint::set_tree(int32_t value) {
  _internal_set_tree(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.OutPoint.tree)
}

// -------------------------------------------------------------------

// TransactionOutput

// int64 value = 1;
inline void TransactionOutput::clear_value() {
  value_ = int64_t{0};
}
inline int64_t TransactionOutput::_internal_value() const {
  return value_;
}
inline int64_t TransactionOutput::value() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionOutput.value)
  return _internal_value();
}
inline void TransactionOutput::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void TransactionOutput::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionOutput.value)
}

// bytes script = 2;
inline void TransactionOutput::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& TransactionOutput::script() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionOutput.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutput::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionOutput.script)
}
inline std::string* TransactionOutput::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionOutput.script)
  return _s;
}
inline const std::string& TransactionOutput::_internal_script() const {
  return script_.Get();
}
inline void TransactionOutput::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutput::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutput::release_script() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.TransactionOutput.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutput::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.TransactionOutput.script)
}

// bytes spendingScript = 5;
inline void TransactionOutput::clear_spendingscript() {
  spendingscript_.ClearToEmpty();
}
inline const std::string& TransactionOutput::spendingscript() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionOutput.spendingScript)
  return _internal_spendingscript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutput::set_spendingscript(ArgT0&& arg0, ArgT... args) {
 
 spendingscript_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionOutput.spendingScript)
}
inline std::string* TransactionOutput::mutable_spendingscript() {
  std::string* _s = _internal_mutable_spendingscript();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionOutput.spendingScript)
  return _s;
}
inline const std::string& TransactionOutput::_internal_spendingscript() const {
  return spendingscript_.Get();
}
inline void TransactionOutput::_internal_set_spendingscript(const std::string& value) {
  
  spendingscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutput::_internal_mutable_spendingscript() {
  
  return spendingscript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutput::release_spendingscript() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.TransactionOutput.spendingScript)
  return spendingscript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutput::set_allocated_spendingscript(std::string* spendingscript) {
  if (spendingscript != nullptr) {
    
  } else {
    
  }
  spendingscript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spendingscript,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spendingscript_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spendingscript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.TransactionOutput.spendingScript)
}

// -------------------------------------------------------------------

// UnspentTransaction

// .TW.Bitcoin.Proto.OutPoint out_point = 1;
inline bool UnspentTransaction::_internal_has_out_point() const {
  return this != internal_default_instance() && out_point_ != nullptr;
}
inline bool UnspentTransaction::has_out_point() const {
  return _internal_has_out_point();
}
inline void UnspentTransaction::clear_out_point() {
  if (GetArenaForAllocation() == nullptr && out_point_ != nullptr) {
    delete out_point_;
  }
  out_point_ = nullptr;
}
inline const ::TW::Bitcoin::Proto::OutPoint& UnspentTransaction::_internal_out_point() const {
  const ::TW::Bitcoin::Proto::OutPoint* p = out_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Bitcoin::Proto::OutPoint&>(
      ::TW::Bitcoin::Proto::_OutPoint_default_instance_);
}
inline const ::TW::Bitcoin::Proto::OutPoint& UnspentTransaction::out_point() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.UnspentTransaction.out_point)
  return _internal_out_point();
}
inline void UnspentTransaction::unsafe_arena_set_allocated_out_point(
    ::TW::Bitcoin::Proto::OutPoint* out_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_point_);
  }
  out_point_ = out_point;
  if (out_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Bitcoin.Proto.UnspentTransaction.out_point)
}
inline ::TW::Bitcoin::Proto::OutPoint* UnspentTransaction::release_out_point() {
  
  ::TW::Bitcoin::Proto::OutPoint* temp = out_point_;
  out_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Bitcoin::Proto::OutPoint* UnspentTransaction::unsafe_arena_release_out_point() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.UnspentTransaction.out_point)
  
  ::TW::Bitcoin::Proto::OutPoint* temp = out_point_;
  out_point_ = nullptr;
  return temp;
}
inline ::TW::Bitcoin::Proto::OutPoint* UnspentTransaction::_internal_mutable_out_point() {
  
  if (out_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Bitcoin::Proto::OutPoint>(GetArenaForAllocation());
    out_point_ = p;
  }
  return out_point_;
}
inline ::TW::Bitcoin::Proto::OutPoint* UnspentTransaction::mutable_out_point() {
  ::TW::Bitcoin::Proto::OutPoint* _msg = _internal_mutable_out_point();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.UnspentTransaction.out_point)
  return _msg;
}
inline void UnspentTransaction::set_allocated_out_point(::TW::Bitcoin::Proto::OutPoint* out_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete out_point_;
  }
  if (out_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Bitcoin::Proto::OutPoint>::GetOwningArena(out_point);
    if (message_arena != submessage_arena) {
      out_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out_point, submessage_arena);
    }
    
  } else {
    
  }
  out_point_ = out_point;
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.UnspentTransaction.out_point)
}

// bytes script = 2;
inline void UnspentTransaction::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& UnspentTransaction::script() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.UnspentTransaction.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnspentTransaction::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.UnspentTransaction.script)
}
inline std::string* UnspentTransaction::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.UnspentTransaction.script)
  return _s;
}
inline const std::string& UnspentTransaction::_internal_script() const {
  return script_.Get();
}
inline void UnspentTransaction::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnspentTransaction::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnspentTransaction::release_script() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.UnspentTransaction.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnspentTransaction::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.UnspentTransaction.script)
}

// int64 amount = 3;
inline void UnspentTransaction::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t UnspentTransaction::_internal_amount() const {
  return amount_;
}
inline int64_t UnspentTransaction::amount() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.UnspentTransaction.amount)
  return _internal_amount();
}
inline void UnspentTransaction::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void UnspentTransaction::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.UnspentTransaction.amount)
}

// .TW.Bitcoin.Proto.TransactionVariant variant = 4;
inline void UnspentTransaction::clear_variant() {
  variant_ = 0;
}
inline ::TW::Bitcoin::Proto::TransactionVariant UnspentTransaction::_internal_variant() const {
  return static_cast< ::TW::Bitcoin::Proto::TransactionVariant >(variant_);
}
inline ::TW::Bitcoin::Proto::TransactionVariant UnspentTransaction::variant() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.UnspentTransaction.variant)
  return _internal_variant();
}
inline void UnspentTransaction::_internal_set_variant(::TW::Bitcoin::Proto::TransactionVariant value) {
  
  variant_ = value;
}
inline void UnspentTransaction::set_variant(::TW::Bitcoin::Proto::TransactionVariant value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.UnspentTransaction.variant)
}

// bytes spendingScript = 5;
inline void UnspentTransaction::clear_spendingscript() {
  spendingscript_.ClearToEmpty();
}
inline const std::string& UnspentTransaction::spendingscript() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.UnspentTransaction.spendingScript)
  return _internal_spendingscript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnspentTransaction::set_spendingscript(ArgT0&& arg0, ArgT... args) {
 
 spendingscript_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.UnspentTransaction.spendingScript)
}
inline std::string* UnspentTransaction::mutable_spendingscript() {
  std::string* _s = _internal_mutable_spendingscript();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.UnspentTransaction.spendingScript)
  return _s;
}
inline const std::string& UnspentTransaction::_internal_spendingscript() const {
  return spendingscript_.Get();
}
inline void UnspentTransaction::_internal_set_spendingscript(const std::string& value) {
  
  spendingscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnspentTransaction::_internal_mutable_spendingscript() {
  
  return spendingscript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnspentTransaction::release_spendingscript() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.UnspentTransaction.spendingScript)
  return spendingscript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnspentTransaction::set_allocated_spendingscript(std::string* spendingscript) {
  if (spendingscript != nullptr) {
    
  } else {
    
  }
  spendingscript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spendingscript,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spendingscript_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spendingscript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.UnspentTransaction.spendingScript)
}

// -------------------------------------------------------------------

// OutputAddress

// string to_address = 1;
inline void OutputAddress::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& OutputAddress::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.OutputAddress.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputAddress::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.OutputAddress.to_address)
}
inline std::string* OutputAddress::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.OutputAddress.to_address)
  return _s;
}
inline const std::string& OutputAddress::_internal_to_address() const {
  return to_address_.Get();
}
inline void OutputAddress::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OutputAddress::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OutputAddress::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.OutputAddress.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OutputAddress::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.OutputAddress.to_address)
}

// int64 amount = 2;
inline void OutputAddress::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t OutputAddress::_internal_amount() const {
  return amount_;
}
inline int64_t OutputAddress::amount() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.OutputAddress.amount)
  return _internal_amount();
}
inline void OutputAddress::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void OutputAddress::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.OutputAddress.amount)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SigningInput

// uint32 hash_type = 1;
inline void SigningInput::clear_hash_type() {
  hash_type_ = 0u;
}
inline uint32_t SigningInput::_internal_hash_type() const {
  return hash_type_;
}
inline uint32_t SigningInput::hash_type() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.hash_type)
  return _internal_hash_type();
}
inline void SigningInput::_internal_set_hash_type(uint32_t value) {
  
  hash_type_ = value;
}
inline void SigningInput::set_hash_type(uint32_t value) {
  _internal_set_hash_type(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.hash_type)
}

// int64 amount = 2;
inline void SigningInput::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t SigningInput::_internal_amount() const {
  return amount_;
}
inline int64_t SigningInput::amount() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.amount)
  return _internal_amount();
}
inline void SigningInput::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void SigningInput::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.amount)
}

// int64 byte_fee = 3;
inline void SigningInput::clear_byte_fee() {
  byte_fee_ = int64_t{0};
}
inline int64_t SigningInput::_internal_byte_fee() const {
  return byte_fee_;
}
inline int64_t SigningInput::byte_fee() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.byte_fee)
  return _internal_byte_fee();
}
inline void SigningInput::_internal_set_byte_fee(int64_t value) {
  
  byte_fee_ = value;
}
inline void SigningInput::set_byte_fee(int64_t value) {
  _internal_set_byte_fee(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.byte_fee)
}

// string to_address = 4;
inline void SigningInput::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& SigningInput::to_address() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.to_address)
}
inline std::string* SigningInput::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningInput.to_address)
  return _s;
}
inline const std::string& SigningInput::_internal_to_address() const {
  return to_address_.Get();
}
inline void SigningInput::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_to_address() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningInput.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningInput.to_address)
}

// string change_address = 5;
inline void SigningInput::clear_change_address() {
  change_address_.ClearToEmpty();
}
inline const std::string& SigningInput::change_address() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.change_address)
  return _internal_change_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_change_address(ArgT0&& arg0, ArgT... args) {
 
 change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.change_address)
}
inline std::string* SigningInput::mutable_change_address() {
  std::string* _s = _internal_mutable_change_address();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningInput.change_address)
  return _s;
}
inline const std::string& SigningInput::_internal_change_address() const {
  return change_address_.Get();
}
inline void SigningInput::_internal_set_change_address(const std::string& value) {
  
  change_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_change_address() {
  
  return change_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_change_address() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningInput.change_address)
  return change_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_change_address(std::string* change_address) {
  if (change_address != nullptr) {
    
  } else {
    
  }
  change_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    change_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningInput.change_address)
}

// repeated bytes private_key = 6;
inline int SigningInput::_internal_private_key_size() const {
  return private_key_.size();
}
inline int SigningInput::private_key_size() const {
  return _internal_private_key_size();
}
inline void SigningInput::clear_private_key() {
  private_key_.Clear();
}
inline std::string* SigningInput::add_private_key() {
  std::string* _s = _internal_add_private_key();
  // @@protoc_insertion_point(field_add_mutable:TW.Bitcoin.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key(int index) const {
  return private_key_.Get(index);
}
inline const std::string& SigningInput::private_key(int index) const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.private_key)
  return _internal_private_key(index);
}
inline std::string* SigningInput::mutable_private_key(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningInput.private_key)
  return private_key_.Mutable(index);
}
inline void SigningInput::set_private_key(int index, const std::string& value) {
  private_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(int index, std::string&& value) {
  private_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  private_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline void SigningInput::set_private_key(int index, const void* value, size_t size) {
  private_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::_internal_add_private_key() {
  return private_key_.Add();
}
inline void SigningInput::add_private_key(const std::string& value) {
  private_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline void SigningInput::add_private_key(std::string&& value) {
  private_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline void SigningInput::add_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  private_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline void SigningInput::add_private_key(const void* value, size_t size) {
  private_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TW.Bitcoin.Proto.SigningInput.private_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SigningInput::private_key() const {
  // @@protoc_insertion_point(field_list:TW.Bitcoin.Proto.SigningInput.private_key)
  return private_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SigningInput::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable_list:TW.Bitcoin.Proto.SigningInput.private_key)
  return &private_key_;
}

// map<string, bytes> scripts = 7;
inline int SigningInput::_internal_scripts_size() const {
  return scripts_.size();
}
inline int SigningInput::scripts_size() const {
  return _internal_scripts_size();
}
inline void SigningInput::clear_scripts() {
  scripts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SigningInput::_internal_scripts() const {
  return scripts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SigningInput::scripts() const {
  // @@protoc_insertion_point(field_map:TW.Bitcoin.Proto.SigningInput.scripts)
  return _internal_scripts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SigningInput::_internal_mutable_scripts() {
  return scripts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SigningInput::mutable_scripts() {
  // @@protoc_insertion_point(field_mutable_map:TW.Bitcoin.Proto.SigningInput.scripts)
  return _internal_mutable_scripts();
}

// repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;
inline int SigningInput::_internal_utxo_size() const {
  return utxo_.size();
}
inline int SigningInput::utxo_size() const {
  return _internal_utxo_size();
}
inline void SigningInput::clear_utxo() {
  utxo_.Clear();
}
inline ::TW::Bitcoin::Proto::UnspentTransaction* SigningInput::mutable_utxo(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningInput.utxo)
  return utxo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >*
SigningInput::mutable_utxo() {
  // @@protoc_insertion_point(field_mutable_list:TW.Bitcoin.Proto.SigningInput.utxo)
  return &utxo_;
}
inline const ::TW::Bitcoin::Proto::UnspentTransaction& SigningInput::_internal_utxo(int index) const {
  return utxo_.Get(index);
}
inline const ::TW::Bitcoin::Proto::UnspentTransaction& SigningInput::utxo(int index) const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.utxo)
  return _internal_utxo(index);
}
inline ::TW::Bitcoin::Proto::UnspentTransaction* SigningInput::_internal_add_utxo() {
  return utxo_.Add();
}
inline ::TW::Bitcoin::Proto::UnspentTransaction* SigningInput::add_utxo() {
  ::TW::Bitcoin::Proto::UnspentTransaction* _add = _internal_add_utxo();
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.SigningInput.utxo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >&
SigningInput::utxo() const {
  // @@protoc_insertion_point(field_list:TW.Bitcoin.Proto.SigningInput.utxo)
  return utxo_;
}

// bool use_max_amount = 9;
inline void SigningInput::clear_use_max_amount() {
  use_max_amount_ = false;
}
inline bool SigningInput::_internal_use_max_amount() const {
  return use_max_amount_;
}
inline bool SigningInput::use_max_amount() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.use_max_amount)
  return _internal_use_max_amount();
}
inline void SigningInput::_internal_set_use_max_amount(bool value) {
  
  use_max_amount_ = value;
}
inline void SigningInput::set_use_max_amount(bool value) {
  _internal_set_use_max_amount(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.use_max_amount)
}

// uint32 coin_type = 10;
inline void SigningInput::clear_coin_type() {
  coin_type_ = 0u;
}
inline uint32_t SigningInput::_internal_coin_type() const {
  return coin_type_;
}
inline uint32_t SigningInput::coin_type() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.coin_type)
  return _internal_coin_type();
}
inline void SigningInput::_internal_set_coin_type(uint32_t value) {
  
  coin_type_ = value;
}
inline void SigningInput::set_coin_type(uint32_t value) {
  _internal_set_coin_type(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.coin_type)
}

// .TW.Bitcoin.Proto.TransactionPlan plan = 11;
inline bool SigningInput::_internal_has_plan() const {
  return this != internal_default_instance() && plan_ != nullptr;
}
inline bool SigningInput::has_plan() const {
  return _internal_has_plan();
}
inline void SigningInput::clear_plan() {
  if (GetArenaForAllocation() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
}
inline const ::TW::Bitcoin::Proto::TransactionPlan& SigningInput::_internal_plan() const {
  const ::TW::Bitcoin::Proto::TransactionPlan* p = plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Bitcoin::Proto::TransactionPlan&>(
      ::TW::Bitcoin::Proto::_TransactionPlan_default_instance_);
}
inline const ::TW::Bitcoin::Proto::TransactionPlan& SigningInput::plan() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.plan)
  return _internal_plan();
}
inline void SigningInput::unsafe_arena_set_allocated_plan(
    ::TW::Bitcoin::Proto::TransactionPlan* plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_);
  }
  plan_ = plan;
  if (plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Bitcoin.Proto.SigningInput.plan)
}
inline ::TW::Bitcoin::Proto::TransactionPlan* SigningInput::release_plan() {
  
  ::TW::Bitcoin::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Bitcoin::Proto::TransactionPlan* SigningInput::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningInput.plan)
  
  ::TW::Bitcoin::Proto::TransactionPlan* temp = plan_;
  plan_ = nullptr;
  return temp;
}
inline ::TW::Bitcoin::Proto::TransactionPlan* SigningInput::_internal_mutable_plan() {
  
  if (plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Bitcoin::Proto::TransactionPlan>(GetArenaForAllocation());
    plan_ = p;
  }
  return plan_;
}
inline ::TW::Bitcoin::Proto::TransactionPlan* SigningInput::mutable_plan() {
  ::TW::Bitcoin::Proto::TransactionPlan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningInput.plan)
  return _msg;
}
inline void SigningInput::set_allocated_plan(::TW::Bitcoin::Proto::TransactionPlan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete plan_;
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Bitcoin::Proto::TransactionPlan>::GetOwningArena(plan);
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningInput.plan)
}

// uint32 lock_time = 12;
inline void SigningInput::clear_lock_time() {
  lock_time_ = 0u;
}
inline uint32_t SigningInput::_internal_lock_time() const {
  return lock_time_;
}
inline uint32_t SigningInput::lock_time() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.lock_time)
  return _internal_lock_time();
}
inline void SigningInput::_internal_set_lock_time(uint32_t value) {
  
  lock_time_ = value;
}
inline void SigningInput::set_lock_time(uint32_t value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.lock_time)
}

// bytes output_op_return = 13;
inline void SigningInput::clear_output_op_return() {
  output_op_return_.ClearToEmpty();
}
inline const std::string& SigningInput::output_op_return() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.output_op_return)
  return _internal_output_op_return();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_output_op_return(ArgT0&& arg0, ArgT... args) {
 
 output_op_return_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.output_op_return)
}
inline std::string* SigningInput::mutable_output_op_return() {
  std::string* _s = _internal_mutable_output_op_return();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningInput.output_op_return)
  return _s;
}
inline const std::string& SigningInput::_internal_output_op_return() const {
  return output_op_return_.Get();
}
inline void SigningInput::_internal_set_output_op_return(const std::string& value) {
  
  output_op_return_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_output_op_return() {
  
  return output_op_return_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_output_op_return() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningInput.output_op_return)
  return output_op_return_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_output_op_return(std::string* output_op_return) {
  if (output_op_return != nullptr) {
    
  } else {
    
  }
  output_op_return_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_op_return,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_op_return_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_op_return_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningInput.output_op_return)
}

// repeated .TW.Bitcoin.Proto.OutputAddress extra_outputs = 14;
inline int SigningInput::_internal_extra_outputs_size() const {
  return extra_outputs_.size();
}
inline int SigningInput::extra_outputs_size() const {
  return _internal_extra_outputs_size();
}
inline void SigningInput::clear_extra_outputs() {
  extra_outputs_.Clear();
}
inline ::TW::Bitcoin::Proto::OutputAddress* SigningInput::mutable_extra_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningInput.extra_outputs)
  return extra_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::OutputAddress >*
SigningInput::mutable_extra_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Bitcoin.Proto.SigningInput.extra_outputs)
  return &extra_outputs_;
}
inline const ::TW::Bitcoin::Proto::OutputAddress& SigningInput::_internal_extra_outputs(int index) const {
  return extra_outputs_.Get(index);
}
inline const ::TW::Bitcoin::Proto::OutputAddress& SigningInput::extra_outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.extra_outputs)
  return _internal_extra_outputs(index);
}
inline ::TW::Bitcoin::Proto::OutputAddress* SigningInput::_internal_add_extra_outputs() {
  return extra_outputs_.Add();
}
inline ::TW::Bitcoin::Proto::OutputAddress* SigningInput::add_extra_outputs() {
  ::TW::Bitcoin::Proto::OutputAddress* _add = _internal_add_extra_outputs();
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.SigningInput.extra_outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::OutputAddress >&
SigningInput::extra_outputs() const {
  // @@protoc_insertion_point(field_list:TW.Bitcoin.Proto.SigningInput.extra_outputs)
  return extra_outputs_;
}

// bool use_max_utxo = 15;
inline void SigningInput::clear_use_max_utxo() {
  use_max_utxo_ = false;
}
inline bool SigningInput::_internal_use_max_utxo() const {
  return use_max_utxo_;
}
inline bool SigningInput::use_max_utxo() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.use_max_utxo)
  return _internal_use_max_utxo();
}
inline void SigningInput::_internal_set_use_max_utxo(bool value) {
  
  use_max_utxo_ = value;
}
inline void SigningInput::set_use_max_utxo(bool value) {
  _internal_set_use_max_utxo(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.use_max_utxo)
}

// bool disable_dust_filter = 16;
inline void SigningInput::clear_disable_dust_filter() {
  disable_dust_filter_ = false;
}
inline bool SigningInput::_internal_disable_dust_filter() const {
  return disable_dust_filter_;
}
inline bool SigningInput::disable_dust_filter() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.disable_dust_filter)
  return _internal_disable_dust_filter();
}
inline void SigningInput::_internal_set_disable_dust_filter(bool value) {
  
  disable_dust_filter_ = value;
}
inline void SigningInput::set_disable_dust_filter(bool value) {
  _internal_set_disable_dust_filter(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.disable_dust_filter)
}

// uint32 time = 17;
inline void SigningInput::clear_time() {
  time_ = 0u;
}
inline uint32_t SigningInput::_internal_time() const {
  return time_;
}
inline uint32_t SigningInput::time() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.time)
  return _internal_time();
}
inline void SigningInput::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void SigningInput::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.time)
}

// bool is_it_brc_operation = 18;
inline void SigningInput::clear_is_it_brc_operation() {
  is_it_brc_operation_ = false;
}
inline bool SigningInput::_internal_is_it_brc_operation() const {
  return is_it_brc_operation_;
}
inline bool SigningInput::is_it_brc_operation() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningInput.is_it_brc_operation)
  return _internal_is_it_brc_operation();
}
inline void SigningInput::_internal_set_is_it_brc_operation(bool value) {
  
  is_it_brc_operation_ = value;
}
inline void SigningInput::set_is_it_brc_operation(bool value) {
  _internal_set_is_it_brc_operation(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningInput.is_it_brc_operation)
}

// -------------------------------------------------------------------

// TransactionPlan

// int64 amount = 1;
inline void TransactionPlan::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t TransactionPlan::_internal_amount() const {
  return amount_;
}
inline int64_t TransactionPlan::amount() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.amount)
  return _internal_amount();
}
inline void TransactionPlan::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void TransactionPlan::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.amount)
}

// int64 available_amount = 2;
inline void TransactionPlan::clear_available_amount() {
  available_amount_ = int64_t{0};
}
inline int64_t TransactionPlan::_internal_available_amount() const {
  return available_amount_;
}
inline int64_t TransactionPlan::available_amount() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.available_amount)
  return _internal_available_amount();
}
inline void TransactionPlan::_internal_set_available_amount(int64_t value) {
  
  available_amount_ = value;
}
inline void TransactionPlan::set_available_amount(int64_t value) {
  _internal_set_available_amount(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.available_amount)
}

// int64 fee = 3;
inline void TransactionPlan::clear_fee() {
  fee_ = int64_t{0};
}
inline int64_t TransactionPlan::_internal_fee() const {
  return fee_;
}
inline int64_t TransactionPlan::fee() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.fee)
  return _internal_fee();
}
inline void TransactionPlan::_internal_set_fee(int64_t value) {
  
  fee_ = value;
}
inline void TransactionPlan::set_fee(int64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.fee)
}

// int64 change = 4;
inline void TransactionPlan::clear_change() {
  change_ = int64_t{0};
}
inline int64_t TransactionPlan::_internal_change() const {
  return change_;
}
inline int64_t TransactionPlan::change() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.change)
  return _internal_change();
}
inline void TransactionPlan::_internal_set_change(int64_t value) {
  
  change_ = value;
}
inline void TransactionPlan::set_change(int64_t value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.change)
}

// repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;
inline int TransactionPlan::_internal_utxos_size() const {
  return utxos_.size();
}
inline int TransactionPlan::utxos_size() const {
  return _internal_utxos_size();
}
inline void TransactionPlan::clear_utxos() {
  utxos_.Clear();
}
inline ::TW::Bitcoin::Proto::UnspentTransaction* TransactionPlan::mutable_utxos(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionPlan.utxos)
  return utxos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >*
TransactionPlan::mutable_utxos() {
  // @@protoc_insertion_point(field_mutable_list:TW.Bitcoin.Proto.TransactionPlan.utxos)
  return &utxos_;
}
inline const ::TW::Bitcoin::Proto::UnspentTransaction& TransactionPlan::_internal_utxos(int index) const {
  return utxos_.Get(index);
}
inline const ::TW::Bitcoin::Proto::UnspentTransaction& TransactionPlan::utxos(int index) const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.utxos)
  return _internal_utxos(index);
}
inline ::TW::Bitcoin::Proto::UnspentTransaction* TransactionPlan::_internal_add_utxos() {
  return utxos_.Add();
}
inline ::TW::Bitcoin::Proto::UnspentTransaction* TransactionPlan::add_utxos() {
  ::TW::Bitcoin::Proto::UnspentTransaction* _add = _internal_add_utxos();
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.TransactionPlan.utxos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::UnspentTransaction >&
TransactionPlan::utxos() const {
  // @@protoc_insertion_point(field_list:TW.Bitcoin.Proto.TransactionPlan.utxos)
  return utxos_;
}

// bytes branch_id = 6;
inline void TransactionPlan::clear_branch_id() {
  branch_id_.ClearToEmpty();
}
inline const std::string& TransactionPlan::branch_id() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.branch_id)
  return _internal_branch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionPlan::set_branch_id(ArgT0&& arg0, ArgT... args) {
 
 branch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.branch_id)
}
inline std::string* TransactionPlan::mutable_branch_id() {
  std::string* _s = _internal_mutable_branch_id();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionPlan.branch_id)
  return _s;
}
inline const std::string& TransactionPlan::_internal_branch_id() const {
  return branch_id_.Get();
}
inline void TransactionPlan::_internal_set_branch_id(const std::string& value) {
  
  branch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionPlan::_internal_mutable_branch_id() {
  
  return branch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionPlan::release_branch_id() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.TransactionPlan.branch_id)
  return branch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionPlan::set_allocated_branch_id(std::string* branch_id) {
  if (branch_id != nullptr) {
    
  } else {
    
  }
  branch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (branch_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    branch_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.TransactionPlan.branch_id)
}

// .TW.Common.Proto.SigningError error = 7;
inline void TransactionPlan::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError TransactionPlan::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError TransactionPlan::error() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.error)
  return _internal_error();
}
inline void TransactionPlan::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void TransactionPlan::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.error)
}

// bytes output_op_return = 8;
inline void TransactionPlan::clear_output_op_return() {
  output_op_return_.ClearToEmpty();
}
inline const std::string& TransactionPlan::output_op_return() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.output_op_return)
  return _internal_output_op_return();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionPlan::set_output_op_return(ArgT0&& arg0, ArgT... args) {
 
 output_op_return_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.output_op_return)
}
inline std::string* TransactionPlan::mutable_output_op_return() {
  std::string* _s = _internal_mutable_output_op_return();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionPlan.output_op_return)
  return _s;
}
inline const std::string& TransactionPlan::_internal_output_op_return() const {
  return output_op_return_.Get();
}
inline void TransactionPlan::_internal_set_output_op_return(const std::string& value) {
  
  output_op_return_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionPlan::_internal_mutable_output_op_return() {
  
  return output_op_return_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionPlan::release_output_op_return() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.TransactionPlan.output_op_return)
  return output_op_return_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionPlan::set_allocated_output_op_return(std::string* output_op_return) {
  if (output_op_return != nullptr) {
    
  } else {
    
  }
  output_op_return_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_op_return,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_op_return_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_op_return_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.TransactionPlan.output_op_return)
}

// bytes preblockhash = 9;
inline void TransactionPlan::clear_preblockhash() {
  preblockhash_.ClearToEmpty();
}
inline const std::string& TransactionPlan::preblockhash() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.preblockhash)
  return _internal_preblockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionPlan::set_preblockhash(ArgT0&& arg0, ArgT... args) {
 
 preblockhash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.preblockhash)
}
inline std::string* TransactionPlan::mutable_preblockhash() {
  std::string* _s = _internal_mutable_preblockhash();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.TransactionPlan.preblockhash)
  return _s;
}
inline const std::string& TransactionPlan::_internal_preblockhash() const {
  return preblockhash_.Get();
}
inline void TransactionPlan::_internal_set_preblockhash(const std::string& value) {
  
  preblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionPlan::_internal_mutable_preblockhash() {
  
  return preblockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionPlan::release_preblockhash() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.TransactionPlan.preblockhash)
  return preblockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionPlan::set_allocated_preblockhash(std::string* preblockhash) {
  if (preblockhash != nullptr) {
    
  } else {
    
  }
  preblockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preblockhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preblockhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preblockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.TransactionPlan.preblockhash)
}

// int64 preblockheight = 10;
inline void TransactionPlan::clear_preblockheight() {
  preblockheight_ = int64_t{0};
}
inline int64_t TransactionPlan::_internal_preblockheight() const {
  return preblockheight_;
}
inline int64_t TransactionPlan::preblockheight() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.TransactionPlan.preblockheight)
  return _internal_preblockheight();
}
inline void TransactionPlan::_internal_set_preblockheight(int64_t value) {
  
  preblockheight_ = value;
}
inline void TransactionPlan::set_preblockheight(int64_t value) {
  _internal_set_preblockheight(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.TransactionPlan.preblockheight)
}

// -------------------------------------------------------------------

// SigningOutput

// .TW.Bitcoin.Proto.Transaction transaction = 1;
inline bool SigningOutput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningOutput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningOutput::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::Bitcoin::Proto::Transaction& SigningOutput::_internal_transaction() const {
  const ::TW::Bitcoin::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Bitcoin::Proto::Transaction&>(
      ::TW::Bitcoin::Proto::_Transaction_default_instance_);
}
inline const ::TW::Bitcoin::Proto::Transaction& SigningOutput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningOutput.transaction)
  return _internal_transaction();
}
inline void SigningOutput::unsafe_arena_set_allocated_transaction(
    ::TW::Bitcoin::Proto::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Bitcoin.Proto.SigningOutput.transaction)
}
inline ::TW::Bitcoin::Proto::Transaction* SigningOutput::release_transaction() {
  
  ::TW::Bitcoin::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Bitcoin::Proto::Transaction* SigningOutput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningOutput.transaction)
  
  ::TW::Bitcoin::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::Bitcoin::Proto::Transaction* SigningOutput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Bitcoin::Proto::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::Bitcoin::Proto::Transaction* SigningOutput::mutable_transaction() {
  ::TW::Bitcoin::Proto::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningOutput.transaction)
  return _msg;
}
inline void SigningOutput::set_allocated_transaction(::TW::Bitcoin::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Bitcoin::Proto::Transaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningOutput.transaction)
}

// bytes encoded = 2;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningOutput.encoded)
}

// string transaction_id = 3;
inline void SigningOutput::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& SigningOutput::transaction_id() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningOutput.transaction_id)
  return _internal_transaction_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_transaction_id(ArgT0&& arg0, ArgT... args) {
 
 transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningOutput.transaction_id)
}
inline std::string* SigningOutput::mutable_transaction_id() {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningOutput.transaction_id)
  return _s;
}
inline const std::string& SigningOutput::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void SigningOutput::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_transaction_id() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningOutput.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transaction_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningOutput.transaction_id)
}

// .TW.Common.Proto.SigningError error = 4;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningOutput.error)
}

// string error_message = 5;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.SigningOutput.error_message)
}

// -------------------------------------------------------------------

// HashPublicKey

// bytes data_hash = 1;
inline void HashPublicKey::clear_data_hash() {
  data_hash_.ClearToEmpty();
}
inline const std::string& HashPublicKey::data_hash() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.HashPublicKey.data_hash)
  return _internal_data_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashPublicKey::set_data_hash(ArgT0&& arg0, ArgT... args) {
 
 data_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.HashPublicKey.data_hash)
}
inline std::string* HashPublicKey::mutable_data_hash() {
  std::string* _s = _internal_mutable_data_hash();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.HashPublicKey.data_hash)
  return _s;
}
inline const std::string& HashPublicKey::_internal_data_hash() const {
  return data_hash_.Get();
}
inline void HashPublicKey::_internal_set_data_hash(const std::string& value) {
  
  data_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashPublicKey::_internal_mutable_data_hash() {
  
  return data_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashPublicKey::release_data_hash() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.HashPublicKey.data_hash)
  return data_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashPublicKey::set_allocated_data_hash(std::string* data_hash) {
  if (data_hash != nullptr) {
    
  } else {
    
  }
  data_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.HashPublicKey.data_hash)
}

// bytes public_key_hash = 2;
inline void HashPublicKey::clear_public_key_hash() {
  public_key_hash_.ClearToEmpty();
}
inline const std::string& HashPublicKey::public_key_hash() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.HashPublicKey.public_key_hash)
  return _internal_public_key_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashPublicKey::set_public_key_hash(ArgT0&& arg0, ArgT... args) {
 
 public_key_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.HashPublicKey.public_key_hash)
}
inline std::string* HashPublicKey::mutable_public_key_hash() {
  std::string* _s = _internal_mutable_public_key_hash();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.HashPublicKey.public_key_hash)
  return _s;
}
inline const std::string& HashPublicKey::_internal_public_key_hash() const {
  return public_key_hash_.Get();
}
inline void HashPublicKey::_internal_set_public_key_hash(const std::string& value) {
  
  public_key_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashPublicKey::_internal_mutable_public_key_hash() {
  
  return public_key_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashPublicKey::release_public_key_hash() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.HashPublicKey.public_key_hash)
  return public_key_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashPublicKey::set_allocated_public_key_hash(std::string* public_key_hash) {
  if (public_key_hash != nullptr) {
    
  } else {
    
  }
  public_key_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.HashPublicKey.public_key_hash)
}

// -------------------------------------------------------------------

// PreSigningOutput

// repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;
inline int PreSigningOutput::_internal_hash_public_keys_size() const {
  return hash_public_keys_.size();
}
inline int PreSigningOutput::hash_public_keys_size() const {
  return _internal_hash_public_keys_size();
}
inline void PreSigningOutput::clear_hash_public_keys() {
  hash_public_keys_.Clear();
}
inline ::TW::Bitcoin::Proto::HashPublicKey* PreSigningOutput::mutable_hash_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.PreSigningOutput.hash_public_keys)
  return hash_public_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::HashPublicKey >*
PreSigningOutput::mutable_hash_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:TW.Bitcoin.Proto.PreSigningOutput.hash_public_keys)
  return &hash_public_keys_;
}
inline const ::TW::Bitcoin::Proto::HashPublicKey& PreSigningOutput::_internal_hash_public_keys(int index) const {
  return hash_public_keys_.Get(index);
}
inline const ::TW::Bitcoin::Proto::HashPublicKey& PreSigningOutput::hash_public_keys(int index) const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.PreSigningOutput.hash_public_keys)
  return _internal_hash_public_keys(index);
}
inline ::TW::Bitcoin::Proto::HashPublicKey* PreSigningOutput::_internal_add_hash_public_keys() {
  return hash_public_keys_.Add();
}
inline ::TW::Bitcoin::Proto::HashPublicKey* PreSigningOutput::add_hash_public_keys() {
  ::TW::Bitcoin::Proto::HashPublicKey* _add = _internal_add_hash_public_keys();
  // @@protoc_insertion_point(field_add:TW.Bitcoin.Proto.PreSigningOutput.hash_public_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Bitcoin::Proto::HashPublicKey >&
PreSigningOutput::hash_public_keys() const {
  // @@protoc_insertion_point(field_list:TW.Bitcoin.Proto.PreSigningOutput.hash_public_keys)
  return hash_public_keys_;
}

// .TW.Common.Proto.SigningError error = 2;
inline void PreSigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError PreSigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError PreSigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.PreSigningOutput.error)
  return _internal_error();
}
inline void PreSigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void PreSigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.PreSigningOutput.error)
}

// string error_message = 3;
inline void PreSigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& PreSigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Bitcoin.Proto.PreSigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreSigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Bitcoin.Proto.PreSigningOutput.error_message)
}
inline std::string* PreSigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Bitcoin.Proto.PreSigningOutput.error_message)
  return _s;
}
inline const std::string& PreSigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void PreSigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreSigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreSigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Bitcoin.Proto.PreSigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PreSigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Bitcoin.Proto.PreSigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Bitcoin
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::Bitcoin::Proto::TransactionVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::Bitcoin::Proto::TransactionVariant>() {
  return ::TW::Bitcoin::Proto::TransactionVariant_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Bitcoin_2eproto
