// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hedera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Hedera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Hedera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Hedera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Hedera_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Hedera_2eproto;
namespace TW {
namespace Hedera {
namespace Proto {
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class TransactionBody;
struct TransactionBodyDefaultTypeInternal;
extern TransactionBodyDefaultTypeInternal _TransactionBody_default_instance_;
class TransactionID;
struct TransactionIDDefaultTypeInternal;
extern TransactionIDDefaultTypeInternal _TransactionID_default_instance_;
class TransferMessage;
struct TransferMessageDefaultTypeInternal;
extern TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
}  // namespace Proto
}  // namespace Hedera
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Hedera::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::Hedera::Proto::SigningInput>(Arena*);
template<> ::TW::Hedera::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Hedera::Proto::SigningOutput>(Arena*);
template<> ::TW::Hedera::Proto::Timestamp* Arena::CreateMaybeMessage<::TW::Hedera::Proto::Timestamp>(Arena*);
template<> ::TW::Hedera::Proto::TransactionBody* Arena::CreateMaybeMessage<::TW::Hedera::Proto::TransactionBody>(Arena*);
template<> ::TW::Hedera::Proto::TransactionID* Arena::CreateMaybeMessage<::TW::Hedera::Proto::TransactionID>(Arena*);
template<> ::TW::Hedera::Proto::TransferMessage* Arena::CreateMaybeMessage<::TW::Hedera::Proto::TransferMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Hedera {
namespace Proto {

// ===================================================================

class Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Hedera.Proto.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  explicit constexpr Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Timestamp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Hedera.Proto.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // int32 nanos = 2;
  void clear_nanos();
  int32_t nanos() const;
  void set_nanos(int32_t value);
  private:
  int32_t _internal_nanos() const;
  void _internal_set_nanos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Hedera.Proto.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t seconds_;
  int32_t nanos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hedera_2eproto;
};
// -------------------------------------------------------------------

class TransactionID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Hedera.Proto.TransactionID) */ {
 public:
  inline TransactionID() : TransactionID(nullptr) {}
  ~TransactionID() override;
  explicit constexpr TransactionID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionID(const TransactionID& from);
  TransactionID(TransactionID&& from) noexcept
    : TransactionID() {
    *this = ::std::move(from);
  }

  inline TransactionID& operator=(const TransactionID& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionID& operator=(TransactionID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionID& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionID* internal_default_instance() {
    return reinterpret_cast<const TransactionID*>(
               &_TransactionID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionID& a, TransactionID& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Hedera.Proto.TransactionID";
  }
  protected:
  explicit TransactionID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 2,
    kTransactionValidStartFieldNumber = 1,
    kScheduledFieldNumber = 3,
    kNonceFieldNumber = 4,
  };
  // string accountID = 2;
  void clear_accountid();
  const std::string& accountid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accountid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accountid();
  PROTOBUF_NODISCARD std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // .TW.Hedera.Proto.Timestamp transactionValidStart = 1;
  bool has_transactionvalidstart() const;
  private:
  bool _internal_has_transactionvalidstart() const;
  public:
  void clear_transactionvalidstart();
  const ::TW::Hedera::Proto::Timestamp& transactionvalidstart() const;
  PROTOBUF_NODISCARD ::TW::Hedera::Proto::Timestamp* release_transactionvalidstart();
  ::TW::Hedera::Proto::Timestamp* mutable_transactionvalidstart();
  void set_allocated_transactionvalidstart(::TW::Hedera::Proto::Timestamp* transactionvalidstart);
  private:
  const ::TW::Hedera::Proto::Timestamp& _internal_transactionvalidstart() const;
  ::TW::Hedera::Proto::Timestamp* _internal_mutable_transactionvalidstart();
  public:
  void unsafe_arena_set_allocated_transactionvalidstart(
      ::TW::Hedera::Proto::Timestamp* transactionvalidstart);
  ::TW::Hedera::Proto::Timestamp* unsafe_arena_release_transactionvalidstart();

  // bool scheduled = 3;
  void clear_scheduled();
  bool scheduled() const;
  void set_scheduled(bool value);
  private:
  bool _internal_scheduled() const;
  void _internal_set_scheduled(bool value);
  public:

  // int32 nonce = 4;
  void clear_nonce();
  int32_t nonce() const;
  void set_nonce(int32_t value);
  private:
  int32_t _internal_nonce() const;
  void _internal_set_nonce(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Hedera.Proto.TransactionID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::TW::Hedera::Proto::Timestamp* transactionvalidstart_;
  bool scheduled_;
  int32_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hedera_2eproto;
};
// -------------------------------------------------------------------

class TransferMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Hedera.Proto.TransferMessage) */ {
 public:
  inline TransferMessage() : TransferMessage(nullptr) {}
  ~TransferMessage() override;
  explicit constexpr TransferMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferMessage(const TransferMessage& from);
  TransferMessage(TransferMessage&& from) noexcept
    : TransferMessage() {
    *this = ::std::move(from);
  }

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferMessage& operator=(TransferMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferMessage* internal_default_instance() {
    return reinterpret_cast<const TransferMessage*>(
               &_TransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransferMessage& a, TransferMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Hedera.Proto.TransferMessage";
  }
  protected:
  explicit TransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // sint64 amount = 3;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Hedera.Proto.TransferMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  int64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hedera_2eproto;
};
// -------------------------------------------------------------------

class TransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Hedera.Proto.TransactionBody) */ {
 public:
  inline TransactionBody() : TransactionBody(nullptr) {}
  ~TransactionBody() override;
  explicit constexpr TransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionBody(const TransactionBody& from);
  TransactionBody(TransactionBody&& from) noexcept
    : TransactionBody() {
    *this = ::std::move(from);
  }

  inline TransactionBody& operator=(const TransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionBody& operator=(TransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionBody& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kTransfer = 6,
    DATA_NOT_SET = 0,
  };

  static inline const TransactionBody* internal_default_instance() {
    return reinterpret_cast<const TransactionBody*>(
               &_TransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionBody& a, TransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Hedera.Proto.TransactionBody";
  }
  protected:
  explicit TransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeAccountIDFieldNumber = 2,
    kMemoFieldNumber = 5,
    kTransactionIDFieldNumber = 1,
    kTransactionFeeFieldNumber = 3,
    kTransactionValidDurationFieldNumber = 4,
    kTransferFieldNumber = 6,
  };
  // string nodeAccountID = 2;
  void clear_nodeaccountid();
  const std::string& nodeaccountid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodeaccountid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodeaccountid();
  PROTOBUF_NODISCARD std::string* release_nodeaccountid();
  void set_allocated_nodeaccountid(std::string* nodeaccountid);
  private:
  const std::string& _internal_nodeaccountid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeaccountid(const std::string& value);
  std::string* _internal_mutable_nodeaccountid();
  public:

  // string memo = 5;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .TW.Hedera.Proto.TransactionID transactionID = 1;
  bool has_transactionid() const;
  private:
  bool _internal_has_transactionid() const;
  public:
  void clear_transactionid();
  const ::TW::Hedera::Proto::TransactionID& transactionid() const;
  PROTOBUF_NODISCARD ::TW::Hedera::Proto::TransactionID* release_transactionid();
  ::TW::Hedera::Proto::TransactionID* mutable_transactionid();
  void set_allocated_transactionid(::TW::Hedera::Proto::TransactionID* transactionid);
  private:
  const ::TW::Hedera::Proto::TransactionID& _internal_transactionid() const;
  ::TW::Hedera::Proto::TransactionID* _internal_mutable_transactionid();
  public:
  void unsafe_arena_set_allocated_transactionid(
      ::TW::Hedera::Proto::TransactionID* transactionid);
  ::TW::Hedera::Proto::TransactionID* unsafe_arena_release_transactionid();

  // uint64 transactionFee = 3;
  void clear_transactionfee();
  uint64_t transactionfee() const;
  void set_transactionfee(uint64_t value);
  private:
  uint64_t _internal_transactionfee() const;
  void _internal_set_transactionfee(uint64_t value);
  public:

  // int64 transactionValidDuration = 4;
  void clear_transactionvalidduration();
  int64_t transactionvalidduration() const;
  void set_transactionvalidduration(int64_t value);
  private:
  int64_t _internal_transactionvalidduration() const;
  void _internal_set_transactionvalidduration(int64_t value);
  public:

  // .TW.Hedera.Proto.TransferMessage transfer = 6;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::Hedera::Proto::TransferMessage& transfer() const;
  PROTOBUF_NODISCARD ::TW::Hedera::Proto::TransferMessage* release_transfer();
  ::TW::Hedera::Proto::TransferMessage* mutable_transfer();
  void set_allocated_transfer(::TW::Hedera::Proto::TransferMessage* transfer);
  private:
  const ::TW::Hedera::Proto::TransferMessage& _internal_transfer() const;
  ::TW::Hedera::Proto::TransferMessage* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::Hedera::Proto::TransferMessage* transfer);
  ::TW::Hedera::Proto::TransferMessage* unsafe_arena_release_transfer();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:TW.Hedera.Proto.TransactionBody)
 private:
  class _Internal;
  void set_has_transfer();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeaccountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::TW::Hedera::Proto::TransactionID* transactionid_;
  uint64_t transactionfee_;
  int64_t transactionvalidduration_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::Hedera::Proto::TransferMessage* transfer_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Hedera_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Hedera.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Hedera.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.Hedera.Proto.TransactionBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::TW::Hedera::Proto::TransactionBody& body() const;
  PROTOBUF_NODISCARD ::TW::Hedera::Proto::TransactionBody* release_body();
  ::TW::Hedera::Proto::TransactionBody* mutable_body();
  void set_allocated_body(::TW::Hedera::Proto::TransactionBody* body);
  private:
  const ::TW::Hedera::Proto::TransactionBody& _internal_body() const;
  ::TW::Hedera::Proto::TransactionBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::TW::Hedera::Proto::TransactionBody* body);
  ::TW::Hedera::Proto::TransactionBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:TW.Hedera.Proto.SigningInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::TW::Hedera::Proto::TransactionBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hedera_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Hedera.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Hedera.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // bytes encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // @@protoc_insertion_point(class_scope:TW.Hedera.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hedera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Timestamp

// int64 seconds = 1;
inline void Timestamp::clear_seconds() {
  seconds_ = int64_t{0};
}
inline int64_t Timestamp::_internal_seconds() const {
  return seconds_;
}
inline int64_t Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::_internal_set_seconds(int64_t value) {
  
  seconds_ = value;
}
inline void Timestamp::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.Timestamp.seconds)
}

// int32 nanos = 2;
inline void Timestamp::clear_nanos() {
  nanos_ = 0;
}
inline int32_t Timestamp::_internal_nanos() const {
  return nanos_;
}
inline int32_t Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.Timestamp.nanos)
  return _internal_nanos();
}
inline void Timestamp::_internal_set_nanos(int32_t value) {
  
  nanos_ = value;
}
inline void Timestamp::set_nanos(int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.Timestamp.nanos)
}

// -------------------------------------------------------------------

// TransactionID

// .TW.Hedera.Proto.Timestamp transactionValidStart = 1;
inline bool TransactionID::_internal_has_transactionvalidstart() const {
  return this != internal_default_instance() && transactionvalidstart_ != nullptr;
}
inline bool TransactionID::has_transactionvalidstart() const {
  return _internal_has_transactionvalidstart();
}
inline void TransactionID::clear_transactionvalidstart() {
  if (GetArenaForAllocation() == nullptr && transactionvalidstart_ != nullptr) {
    delete transactionvalidstart_;
  }
  transactionvalidstart_ = nullptr;
}
inline const ::TW::Hedera::Proto::Timestamp& TransactionID::_internal_transactionvalidstart() const {
  const ::TW::Hedera::Proto::Timestamp* p = transactionvalidstart_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Hedera::Proto::Timestamp&>(
      ::TW::Hedera::Proto::_Timestamp_default_instance_);
}
inline const ::TW::Hedera::Proto::Timestamp& TransactionID::transactionvalidstart() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionID.transactionValidStart)
  return _internal_transactionvalidstart();
}
inline void TransactionID::unsafe_arena_set_allocated_transactionvalidstart(
    ::TW::Hedera::Proto::Timestamp* transactionvalidstart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionvalidstart_);
  }
  transactionvalidstart_ = transactionvalidstart;
  if (transactionvalidstart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Hedera.Proto.TransactionID.transactionValidStart)
}
inline ::TW::Hedera::Proto::Timestamp* TransactionID::release_transactionvalidstart() {
  
  ::TW::Hedera::Proto::Timestamp* temp = transactionvalidstart_;
  transactionvalidstart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Hedera::Proto::Timestamp* TransactionID::unsafe_arena_release_transactionvalidstart() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransactionID.transactionValidStart)
  
  ::TW::Hedera::Proto::Timestamp* temp = transactionvalidstart_;
  transactionvalidstart_ = nullptr;
  return temp;
}
inline ::TW::Hedera::Proto::Timestamp* TransactionID::_internal_mutable_transactionvalidstart() {
  
  if (transactionvalidstart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Hedera::Proto::Timestamp>(GetArenaForAllocation());
    transactionvalidstart_ = p;
  }
  return transactionvalidstart_;
}
inline ::TW::Hedera::Proto::Timestamp* TransactionID::mutable_transactionvalidstart() {
  ::TW::Hedera::Proto::Timestamp* _msg = _internal_mutable_transactionvalidstart();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransactionID.transactionValidStart)
  return _msg;
}
inline void TransactionID::set_allocated_transactionvalidstart(::TW::Hedera::Proto::Timestamp* transactionvalidstart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transactionvalidstart_;
  }
  if (transactionvalidstart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Hedera::Proto::Timestamp>::GetOwningArena(transactionvalidstart);
    if (message_arena != submessage_arena) {
      transactionvalidstart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionvalidstart, submessage_arena);
    }
    
  } else {
    
  }
  transactionvalidstart_ = transactionvalidstart;
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.TransactionID.transactionValidStart)
}

// string accountID = 2;
inline void TransactionID::clear_accountid() {
  accountid_.ClearToEmpty();
}
inline const std::string& TransactionID::accountid() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionID.accountID)
  return _internal_accountid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionID::set_accountid(ArgT0&& arg0, ArgT... args) {
 
 accountid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransactionID.accountID)
}
inline std::string* TransactionID::mutable_accountid() {
  std::string* _s = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransactionID.accountID)
  return _s;
}
inline const std::string& TransactionID::_internal_accountid() const {
  return accountid_.Get();
}
inline void TransactionID::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionID::_internal_mutable_accountid() {
  
  return accountid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionID::release_accountid() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransactionID.accountID)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionID::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accountid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.TransactionID.accountID)
}

// bool scheduled = 3;
inline void TransactionID::clear_scheduled() {
  scheduled_ = false;
}
inline bool TransactionID::_internal_scheduled() const {
  return scheduled_;
}
inline bool TransactionID::scheduled() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionID.scheduled)
  return _internal_scheduled();
}
inline void TransactionID::_internal_set_scheduled(bool value) {
  
  scheduled_ = value;
}
inline void TransactionID::set_scheduled(bool value) {
  _internal_set_scheduled(value);
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransactionID.scheduled)
}

// int32 nonce = 4;
inline void TransactionID::clear_nonce() {
  nonce_ = 0;
}
inline int32_t TransactionID::_internal_nonce() const {
  return nonce_;
}
inline int32_t TransactionID::nonce() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionID.nonce)
  return _internal_nonce();
}
inline void TransactionID::_internal_set_nonce(int32_t value) {
  
  nonce_ = value;
}
inline void TransactionID::set_nonce(int32_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransactionID.nonce)
}

// -------------------------------------------------------------------

// TransferMessage

// string from = 1;
inline void TransferMessage::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TransferMessage::from() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransferMessage.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransferMessage.from)
}
inline std::string* TransferMessage::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransferMessage.from)
  return _s;
}
inline const std::string& TransferMessage::_internal_from() const {
  return from_.Get();
}
inline void TransferMessage::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_from() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransferMessage.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.TransferMessage.from)
}

// string to = 2;
inline void TransferMessage::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& TransferMessage::to() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransferMessage.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferMessage::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransferMessage.to)
}
inline std::string* TransferMessage::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransferMessage.to)
  return _s;
}
inline const std::string& TransferMessage::_internal_to() const {
  return to_.Get();
}
inline void TransferMessage::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferMessage::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferMessage::release_to() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransferMessage.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferMessage::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.TransferMessage.to)
}

// sint64 amount = 3;
inline void TransferMessage::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t TransferMessage::_internal_amount() const {
  return amount_;
}
inline int64_t TransferMessage::amount() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransferMessage.amount)
  return _internal_amount();
}
inline void TransferMessage::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void TransferMessage::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransferMessage.amount)
}

// -------------------------------------------------------------------

// TransactionBody

// .TW.Hedera.Proto.TransactionID transactionID = 1;
inline bool TransactionBody::_internal_has_transactionid() const {
  return this != internal_default_instance() && transactionid_ != nullptr;
}
inline bool TransactionBody::has_transactionid() const {
  return _internal_has_transactionid();
}
inline void TransactionBody::clear_transactionid() {
  if (GetArenaForAllocation() == nullptr && transactionid_ != nullptr) {
    delete transactionid_;
  }
  transactionid_ = nullptr;
}
inline const ::TW::Hedera::Proto::TransactionID& TransactionBody::_internal_transactionid() const {
  const ::TW::Hedera::Proto::TransactionID* p = transactionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Hedera::Proto::TransactionID&>(
      ::TW::Hedera::Proto::_TransactionID_default_instance_);
}
inline const ::TW::Hedera::Proto::TransactionID& TransactionBody::transactionid() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionBody.transactionID)
  return _internal_transactionid();
}
inline void TransactionBody::unsafe_arena_set_allocated_transactionid(
    ::TW::Hedera::Proto::TransactionID* transactionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionid_);
  }
  transactionid_ = transactionid;
  if (transactionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Hedera.Proto.TransactionBody.transactionID)
}
inline ::TW::Hedera::Proto::TransactionID* TransactionBody::release_transactionid() {
  
  ::TW::Hedera::Proto::TransactionID* temp = transactionid_;
  transactionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Hedera::Proto::TransactionID* TransactionBody::unsafe_arena_release_transactionid() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransactionBody.transactionID)
  
  ::TW::Hedera::Proto::TransactionID* temp = transactionid_;
  transactionid_ = nullptr;
  return temp;
}
inline ::TW::Hedera::Proto::TransactionID* TransactionBody::_internal_mutable_transactionid() {
  
  if (transactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Hedera::Proto::TransactionID>(GetArenaForAllocation());
    transactionid_ = p;
  }
  return transactionid_;
}
inline ::TW::Hedera::Proto::TransactionID* TransactionBody::mutable_transactionid() {
  ::TW::Hedera::Proto::TransactionID* _msg = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransactionBody.transactionID)
  return _msg;
}
inline void TransactionBody::set_allocated_transactionid(::TW::Hedera::Proto::TransactionID* transactionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transactionid_;
  }
  if (transactionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Hedera::Proto::TransactionID>::GetOwningArena(transactionid);
    if (message_arena != submessage_arena) {
      transactionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionid, submessage_arena);
    }
    
  } else {
    
  }
  transactionid_ = transactionid;
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.TransactionBody.transactionID)
}

// string nodeAccountID = 2;
inline void TransactionBody::clear_nodeaccountid() {
  nodeaccountid_.ClearToEmpty();
}
inline const std::string& TransactionBody::nodeaccountid() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionBody.nodeAccountID)
  return _internal_nodeaccountid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionBody::set_nodeaccountid(ArgT0&& arg0, ArgT... args) {
 
 nodeaccountid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransactionBody.nodeAccountID)
}
inline std::string* TransactionBody::mutable_nodeaccountid() {
  std::string* _s = _internal_mutable_nodeaccountid();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransactionBody.nodeAccountID)
  return _s;
}
inline const std::string& TransactionBody::_internal_nodeaccountid() const {
  return nodeaccountid_.Get();
}
inline void TransactionBody::_internal_set_nodeaccountid(const std::string& value) {
  
  nodeaccountid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionBody::_internal_mutable_nodeaccountid() {
  
  return nodeaccountid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionBody::release_nodeaccountid() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransactionBody.nodeAccountID)
  return nodeaccountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionBody::set_allocated_nodeaccountid(std::string* nodeaccountid) {
  if (nodeaccountid != nullptr) {
    
  } else {
    
  }
  nodeaccountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeaccountid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nodeaccountid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nodeaccountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.TransactionBody.nodeAccountID)
}

// uint64 transactionFee = 3;
inline void TransactionBody::clear_transactionfee() {
  transactionfee_ = uint64_t{0u};
}
inline uint64_t TransactionBody::_internal_transactionfee() const {
  return transactionfee_;
}
inline uint64_t TransactionBody::transactionfee() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionBody.transactionFee)
  return _internal_transactionfee();
}
inline void TransactionBody::_internal_set_transactionfee(uint64_t value) {
  
  transactionfee_ = value;
}
inline void TransactionBody::set_transactionfee(uint64_t value) {
  _internal_set_transactionfee(value);
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransactionBody.transactionFee)
}

// int64 transactionValidDuration = 4;
inline void TransactionBody::clear_transactionvalidduration() {
  transactionvalidduration_ = int64_t{0};
}
inline int64_t TransactionBody::_internal_transactionvalidduration() const {
  return transactionvalidduration_;
}
inline int64_t TransactionBody::transactionvalidduration() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionBody.transactionValidDuration)
  return _internal_transactionvalidduration();
}
inline void TransactionBody::_internal_set_transactionvalidduration(int64_t value) {
  
  transactionvalidduration_ = value;
}
inline void TransactionBody::set_transactionvalidduration(int64_t value) {
  _internal_set_transactionvalidduration(value);
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransactionBody.transactionValidDuration)
}

// string memo = 5;
inline void TransactionBody::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& TransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionBody.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionBody::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.TransactionBody.memo)
}
inline std::string* TransactionBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransactionBody.memo)
  return _s;
}
inline const std::string& TransactionBody::_internal_memo() const {
  return memo_.Get();
}
inline void TransactionBody::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionBody::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionBody::release_memo() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransactionBody.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionBody::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.TransactionBody.memo)
}

// .TW.Hedera.Proto.TransferMessage transfer = 6;
inline bool TransactionBody::_internal_has_transfer() const {
  return data_case() == kTransfer;
}
inline bool TransactionBody::has_transfer() const {
  return _internal_has_transfer();
}
inline void TransactionBody::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void TransactionBody::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.transfer_;
    }
    clear_has_data();
  }
}
inline ::TW::Hedera::Proto::TransferMessage* TransactionBody::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.TransactionBody.transfer)
  if (_internal_has_transfer()) {
    clear_has_data();
      ::TW::Hedera::Proto::TransferMessage* temp = data_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::Hedera::Proto::TransferMessage& TransactionBody::_internal_transfer() const {
  return _internal_has_transfer()
      ? *data_.transfer_
      : reinterpret_cast< ::TW::Hedera::Proto::TransferMessage&>(::TW::Hedera::Proto::_TransferMessage_default_instance_);
}
inline const ::TW::Hedera::Proto::TransferMessage& TransactionBody::transfer() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.TransactionBody.transfer)
  return _internal_transfer();
}
inline ::TW::Hedera::Proto::TransferMessage* TransactionBody::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.Hedera.Proto.TransactionBody.transfer)
  if (_internal_has_transfer()) {
    clear_has_data();
    ::TW::Hedera::Proto::TransferMessage* temp = data_.transfer_;
    data_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionBody::unsafe_arena_set_allocated_transfer(::TW::Hedera::Proto::TransferMessage* transfer) {
  clear_data();
  if (transfer) {
    set_has_transfer();
    data_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Hedera.Proto.TransactionBody.transfer)
}
inline ::TW::Hedera::Proto::TransferMessage* TransactionBody::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_data();
    set_has_transfer();
    data_.transfer_ = CreateMaybeMessage< ::TW::Hedera::Proto::TransferMessage >(GetArenaForAllocation());
  }
  return data_.transfer_;
}
inline ::TW::Hedera::Proto::TransferMessage* TransactionBody::mutable_transfer() {
  ::TW::Hedera::Proto::TransferMessage* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.TransactionBody.transfer)
  return _msg;
}

inline bool TransactionBody::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void TransactionBody::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline TransactionBody::DataCase TransactionBody::data_case() const {
  return TransactionBody::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.SigningInput.private_key)
}

// .TW.Hedera.Proto.TransactionBody body = 2;
inline bool SigningInput::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool SigningInput::has_body() const {
  return _internal_has_body();
}
inline void SigningInput::clear_body() {
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::TW::Hedera::Proto::TransactionBody& SigningInput::_internal_body() const {
  const ::TW::Hedera::Proto::TransactionBody* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Hedera::Proto::TransactionBody&>(
      ::TW::Hedera::Proto::_TransactionBody_default_instance_);
}
inline const ::TW::Hedera::Proto::TransactionBody& SigningInput::body() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.SigningInput.body)
  return _internal_body();
}
inline void SigningInput::unsafe_arena_set_allocated_body(
    ::TW::Hedera::Proto::TransactionBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Hedera.Proto.SigningInput.body)
}
inline ::TW::Hedera::Proto::TransactionBody* SigningInput::release_body() {
  
  ::TW::Hedera::Proto::TransactionBody* temp = body_;
  body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Hedera::Proto::TransactionBody* SigningInput::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.SigningInput.body)
  
  ::TW::Hedera::Proto::TransactionBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::TW::Hedera::Proto::TransactionBody* SigningInput::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Hedera::Proto::TransactionBody>(GetArenaForAllocation());
    body_ = p;
  }
  return body_;
}
inline ::TW::Hedera::Proto::TransactionBody* SigningInput::mutable_body() {
  ::TW::Hedera::Proto::TransactionBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.SigningInput.body)
  return _msg;
}
inline void SigningInput::set_allocated_body(::TW::Hedera::Proto::TransactionBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Hedera::Proto::TransactionBody>::GetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.SigningInput.body)
}

// -------------------------------------------------------------------

// SigningOutput

// bytes encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Hedera.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Hedera.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Hedera.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Hedera.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Hedera.Proto.SigningOutput.encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Hedera
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Hedera_2eproto
