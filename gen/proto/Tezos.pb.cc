// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tezos.proto

#include "Tezos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Tezos {
namespace Proto {
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_operations_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operation_list_(nullptr){}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
constexpr OperationList::OperationList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operations_()
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OperationListDefaultTypeInternal {
  constexpr OperationListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationListDefaultTypeInternal() {}
  union {
    OperationList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationListDefaultTypeInternal _OperationList_default_instance_;
constexpr Operation::Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , counter_(int64_t{0})
  , fee_(int64_t{0})
  , gas_limit_(int64_t{0})
  , storage_limit_(int64_t{0})
  , kind_(0)

  , _oneof_case_{}{}
struct OperationDefaultTypeInternal {
  constexpr OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationDefaultTypeInternal _Operation_default_instance_;
constexpr FA12Parameters::FA12Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entrypoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FA12ParametersDefaultTypeInternal {
  constexpr FA12ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FA12ParametersDefaultTypeInternal() {}
  union {
    FA12Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FA12ParametersDefaultTypeInternal _FA12Parameters_default_instance_;
constexpr Txs::Txs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TxsDefaultTypeInternal {
  constexpr TxsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxsDefaultTypeInternal() {}
  union {
    Txs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxsDefaultTypeInternal _Txs_default_instance_;
constexpr TxObject::TxObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txs_()
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TxObjectDefaultTypeInternal {
  constexpr TxObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxObjectDefaultTypeInternal() {}
  union {
    TxObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxObjectDefaultTypeInternal _TxObject_default_instance_;
constexpr FA2Parameters::FA2Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txs_object_()
  , entrypoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FA2ParametersDefaultTypeInternal {
  constexpr FA2ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FA2ParametersDefaultTypeInternal() {}
  union {
    FA2Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FA2ParametersDefaultTypeInternal _FA2Parameters_default_instance_;
constexpr OperationParameters::OperationParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct OperationParametersDefaultTypeInternal {
  constexpr OperationParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationParametersDefaultTypeInternal() {}
  union {
    OperationParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationParametersDefaultTypeInternal _OperationParameters_default_instance_;
constexpr TransactionOperationData::TransactionOperationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoded_parameter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parameters_(nullptr)
  , amount_(int64_t{0}){}
struct TransactionOperationDataDefaultTypeInternal {
  constexpr TransactionOperationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionOperationDataDefaultTypeInternal() {}
  union {
    TransactionOperationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionOperationDataDefaultTypeInternal _TransactionOperationData_default_instance_;
constexpr RevealOperationData::RevealOperationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RevealOperationDataDefaultTypeInternal {
  constexpr RevealOperationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RevealOperationDataDefaultTypeInternal() {}
  union {
    RevealOperationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RevealOperationDataDefaultTypeInternal _RevealOperationData_default_instance_;
constexpr DelegationOperationData::DelegationOperationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delegate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DelegationOperationDataDefaultTypeInternal {
  constexpr DelegationOperationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegationOperationDataDefaultTypeInternal() {}
  union {
    DelegationOperationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegationOperationDataDefaultTypeInternal _DelegationOperationData_default_instance_;
}  // namespace Proto
}  // namespace Tezos
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Tezos_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Tezos_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Tezos_2eproto = nullptr;

const uint32_t TableStruct_Tezos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningInput, operation_list_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningInput, encoded_operations_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningInput, private_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::SigningOutput, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationList, branch_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationList, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, counter_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, source_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, fee_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, storage_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, kind_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Operation, operation_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA12Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA12Parameters, entrypoint_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA12Parameters, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA12Parameters, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA12Parameters, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Txs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Txs, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Txs, token_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::Txs, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TxObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TxObject, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TxObject, txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA2Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA2Parameters, entrypoint_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::FA2Parameters, txs_object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationParameters, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::OperationParameters, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, destination_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, encoded_parameter_),
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::TransactionOperationData, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::RevealOperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::RevealOperationData, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::DelegationOperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Tezos::Proto::DelegationOperationData, delegate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Tezos::Proto::SigningInput)},
  { 9, -1, -1, sizeof(::TW::Tezos::Proto::SigningOutput)},
  { 18, -1, -1, sizeof(::TW::Tezos::Proto::OperationList)},
  { 26, -1, -1, sizeof(::TW::Tezos::Proto::Operation)},
  { 42, -1, -1, sizeof(::TW::Tezos::Proto::FA12Parameters)},
  { 52, -1, -1, sizeof(::TW::Tezos::Proto::Txs)},
  { 61, -1, -1, sizeof(::TW::Tezos::Proto::TxObject)},
  { 69, -1, -1, sizeof(::TW::Tezos::Proto::FA2Parameters)},
  { 77, -1, -1, sizeof(::TW::Tezos::Proto::OperationParameters)},
  { 86, -1, -1, sizeof(::TW::Tezos::Proto::TransactionOperationData)},
  { 96, -1, -1, sizeof(::TW::Tezos::Proto::RevealOperationData)},
  { 103, -1, -1, sizeof(::TW::Tezos::Proto::DelegationOperationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_SigningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_OperationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_FA12Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_Txs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_TxObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_FA2Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_OperationParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_TransactionOperationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_RevealOperationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Tezos::Proto::_DelegationOperationData_default_instance_),
};

const char descriptor_table_protodef_Tezos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Tezos.proto\022\016TW.Tezos.Proto\032\014Common.pr"
  "oto\"v\n\014SigningInput\0225\n\016operation_list\030\001 "
  "\001(\0132\035.TW.Tezos.Proto.OperationList\022\032\n\022en"
  "coded_operations\030\002 \001(\014\022\023\n\013private_key\030\003 "
  "\001(\014\"e\n\rSigningOutput\022\017\n\007encoded\030\001 \001(\014\022,\n"
  "\005error\030\002 \001(\0162\035.TW.Common.Proto.SigningEr"
  "ror\022\025\n\rerror_message\030\003 \001(\t\"N\n\rOperationL"
  "ist\022\016\n\006branch\030\001 \001(\t\022-\n\noperations\030\002 \003(\0132"
  "\031.TW.Tezos.Proto.Operation\"\337\003\n\tOperation"
  "\022\017\n\007counter\030\001 \001(\003\022\016\n\006source\030\002 \001(\t\022\013\n\003fee"
  "\030\003 \001(\003\022\021\n\tgas_limit\030\004 \001(\003\022\025\n\rstorage_lim"
  "it\030\005 \001(\003\0225\n\004kind\030\007 \001(\0162\'.TW.Tezos.Proto."
  "Operation.OperationKind\022D\n\025reveal_operat"
  "ion_data\030\010 \001(\0132#.TW.Tezos.Proto.RevealOp"
  "erationDataH\000\022N\n\032transaction_operation_d"
  "ata\030\t \001(\0132(.TW.Tezos.Proto.TransactionOp"
  "erationDataH\000\022L\n\031delegation_operation_da"
  "ta\030\013 \001(\0132\'.TW.Tezos.Proto.DelegationOper"
  "ationDataH\000\"M\n\rOperationKind\022\017\n\013ENDORSEM"
  "ENT\020\000\022\n\n\006REVEAL\020k\022\017\n\013TRANSACTION\020l\022\016\n\nDE"
  "LEGATION\020nB\020\n\016operation_data\"M\n\016FA12Para"
  "meters\022\022\n\nentrypoint\030\001 \001(\t\022\014\n\004from\030\002 \001(\t"
  "\022\n\n\002to\030\003 \001(\t\022\r\n\005value\030\004 \001(\t\"3\n\003Txs\022\n\n\002to"
  "\030\001 \001(\t\022\020\n\010token_id\030\002 \001(\t\022\016\n\006amount\030\003 \001(\t"
  "\":\n\010TxObject\022\014\n\004from\030\001 \001(\t\022 \n\003txs\030\002 \003(\0132"
  "\023.TW.Tezos.Proto.Txs\"Q\n\rFA2Parameters\022\022\n"
  "\nentrypoint\030\001 \001(\t\022,\n\ntxs_object\030\002 \003(\0132\030."
  "TW.Tezos.Proto.TxObject\"\227\001\n\023OperationPar"
  "ameters\0229\n\017fa12_parameters\030\001 \001(\0132\036.TW.Te"
  "zos.Proto.FA12ParametersH\000\0227\n\016fa2_parame"
  "ters\030\002 \001(\0132\035.TW.Tezos.Proto.FA2Parameter"
  "sH\000B\014\n\nparameters\"\223\001\n\030TransactionOperati"
  "onData\022\023\n\013destination\030\001 \001(\t\022\016\n\006amount\030\002 "
  "\001(\003\022\031\n\021encoded_parameter\030\003 \001(\014\0227\n\nparame"
  "ters\030\004 \001(\0132#.TW.Tezos.Proto.OperationPar"
  "ameters\")\n\023RevealOperationData\022\022\n\npublic"
  "_key\030\001 \001(\014\"+\n\027DelegationOperationData\022\020\n"
  "\010delegate\030\001 \001(\tB\027\n\025wallet.core.jni.proto"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Tezos_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Tezos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Tezos_2eproto = {
  false, false, 1528, descriptor_table_protodef_Tezos_2eproto, "Tezos.proto", 
  &descriptor_table_Tezos_2eproto_once, descriptor_table_Tezos_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_Tezos_2eproto::offsets,
  file_level_metadata_Tezos_2eproto, file_level_enum_descriptors_Tezos_2eproto, file_level_service_descriptors_Tezos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Tezos_2eproto_getter() {
  return &descriptor_table_Tezos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Tezos_2eproto(&descriptor_table_Tezos_2eproto);
namespace TW {
namespace Tezos {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Tezos_2eproto);
  return file_level_enum_descriptors_Tezos_2eproto[0];
}
bool Operation_OperationKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 107:
    case 108:
    case 110:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Operation_OperationKind Operation::ENDORSEMENT;
constexpr Operation_OperationKind Operation::REVEAL;
constexpr Operation_OperationKind Operation::TRANSACTION;
constexpr Operation_OperationKind Operation::DELEGATION;
constexpr Operation_OperationKind Operation::OperationKind_MIN;
constexpr Operation_OperationKind Operation::OperationKind_MAX;
constexpr int Operation::OperationKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Tezos::Proto::OperationList& operation_list(const SigningInput* msg);
};

const ::TW::Tezos::Proto::OperationList&
SigningInput::_Internal::operation_list(const SigningInput* msg) {
  return *msg->operation_list_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_operations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_operations_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_operations().empty()) {
    encoded_operations_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_operations(), 
      GetArenaForAllocation());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_operation_list()) {
    operation_list_ = new ::TW::Tezos::Proto::OperationList(*from.operation_list_);
  } else {
    operation_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
encoded_operations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_operations_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
operation_list_ = nullptr;
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_operations_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete operation_list_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_operations_.ClearToEmpty();
  private_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && operation_list_ != nullptr) {
    delete operation_list_;
  }
  operation_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Tezos.Proto.OperationList operation_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded_operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encoded_operations();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Tezos.Proto.OperationList operation_list = 1;
  if (this->_internal_has_operation_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::operation_list(this), target, stream);
  }

  // bytes encoded_operations = 2;
  if (!this->_internal_encoded_operations().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encoded_operations(), target);
  }

  // bytes private_key = 3;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_operations = 2;
  if (!this->_internal_encoded_operations().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_operations());
  }

  // bytes private_key = 3;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // .TW.Tezos.Proto.OperationList operation_list = 1;
  if (this->_internal_has_operation_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded_operations().empty()) {
    _internal_set_encoded_operations(from._internal_encoded_operations());
  }
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from._internal_has_operation_list()) {
    _internal_mutable_operation_list()->::TW::Tezos::Proto::OperationList::MergeFrom(from._internal_operation_list());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_operations_, lhs_arena,
      &other->encoded_operations_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  swap(operation_list_, other->operation_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[0]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  error_message_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Common.Proto.SigningError error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[1]);
}

// ===================================================================

class OperationList::_Internal {
 public:
};

OperationList::OperationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.OperationList)
}
OperationList::OperationList(const OperationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_branch().empty()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.OperationList)
}

inline void OperationList::SharedCtor() {
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationList::~OperationList() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.OperationList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationList::ArenaDtor(void* object) {
  OperationList* _this = reinterpret_cast< OperationList* >(object);
  (void)_this;
}
void OperationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationList::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.OperationList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  branch_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string branch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.OperationList.branch"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Tezos.Proto.Operation operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.OperationList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string branch = 1;
  if (!this->_internal_branch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.OperationList.branch");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_branch(), target);
  }

  // repeated .TW.Tezos.Proto.Operation operations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.OperationList)
  return target;
}

size_t OperationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.OperationList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Tezos.Proto.Operation operations = 2;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string branch = 1;
  if (!this->_internal_branch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationList::GetClassData() const { return &_class_data_; }

void OperationList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationList *>(to)->MergeFrom(
      static_cast<const OperationList &>(from));
}


void OperationList::MergeFrom(const OperationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.OperationList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (!from._internal_branch().empty()) {
    _internal_set_branch(from._internal_branch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationList::CopyFrom(const OperationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.OperationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationList::IsInitialized() const {
  return true;
}

void OperationList::InternalSwap(OperationList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operations_.InternalSwap(&other->operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, lhs_arena,
      &other->branch_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[2]);
}

// ===================================================================

class Operation::_Internal {
 public:
  static const ::TW::Tezos::Proto::RevealOperationData& reveal_operation_data(const Operation* msg);
  static const ::TW::Tezos::Proto::TransactionOperationData& transaction_operation_data(const Operation* msg);
  static const ::TW::Tezos::Proto::DelegationOperationData& delegation_operation_data(const Operation* msg);
};

const ::TW::Tezos::Proto::RevealOperationData&
Operation::_Internal::reveal_operation_data(const Operation* msg) {
  return *msg->operation_data_.reveal_operation_data_;
}
const ::TW::Tezos::Proto::TransactionOperationData&
Operation::_Internal::transaction_operation_data(const Operation* msg) {
  return *msg->operation_data_.transaction_operation_data_;
}
const ::TW::Tezos::Proto::DelegationOperationData&
Operation::_Internal::delegation_operation_data(const Operation* msg) {
  return *msg->operation_data_.delegation_operation_data_;
}
void Operation::set_allocated_reveal_operation_data(::TW::Tezos::Proto::RevealOperationData* reveal_operation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_data();
  if (reveal_operation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Tezos::Proto::RevealOperationData>::GetOwningArena(reveal_operation_data);
    if (message_arena != submessage_arena) {
      reveal_operation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reveal_operation_data, submessage_arena);
    }
    set_has_reveal_operation_data();
    operation_data_.reveal_operation_data_ = reveal_operation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Operation.reveal_operation_data)
}
void Operation::set_allocated_transaction_operation_data(::TW::Tezos::Proto::TransactionOperationData* transaction_operation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_data();
  if (transaction_operation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Tezos::Proto::TransactionOperationData>::GetOwningArena(transaction_operation_data);
    if (message_arena != submessage_arena) {
      transaction_operation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_operation_data, submessage_arena);
    }
    set_has_transaction_operation_data();
    operation_data_.transaction_operation_data_ = transaction_operation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Operation.transaction_operation_data)
}
void Operation::set_allocated_delegation_operation_data(::TW::Tezos::Proto::DelegationOperationData* delegation_operation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation_data();
  if (delegation_operation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Tezos::Proto::DelegationOperationData>::GetOwningArena(delegation_operation_data);
    if (message_arena != submessage_arena) {
      delegation_operation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegation_operation_data, submessage_arena);
    }
    set_has_delegation_operation_data();
    operation_data_.delegation_operation_data_ = delegation_operation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.Operation.delegation_operation_data)
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&counter_, &from.counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&counter_)) + sizeof(kind_));
  clear_has_operation_data();
  switch (from.operation_data_case()) {
    case kRevealOperationData: {
      _internal_mutable_reveal_operation_data()->::TW::Tezos::Proto::RevealOperationData::MergeFrom(from._internal_reveal_operation_data());
      break;
    }
    case kTransactionOperationData: {
      _internal_mutable_transaction_operation_data()->::TW::Tezos::Proto::TransactionOperationData::MergeFrom(from._internal_transaction_operation_data());
      break;
    }
    case kDelegationOperationData: {
      _internal_mutable_delegation_operation_data()->::TW::Tezos::Proto::DelegationOperationData::MergeFrom(from._internal_delegation_operation_data());
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.Operation)
}

inline void Operation::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&counter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&counter_)) + sizeof(kind_));
clear_has_operation_data();
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.Operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_operation_data()) {
    clear_operation_data();
  }
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Operation::clear_operation_data() {
// @@protoc_insertion_point(one_of_clear_start:TW.Tezos.Proto.Operation)
  switch (operation_data_case()) {
    case kRevealOperationData: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_data_.reveal_operation_data_;
      }
      break;
    }
    case kTransactionOperationData: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_data_.transaction_operation_data_;
      }
      break;
    }
    case kDelegationOperationData: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_data_.delegation_operation_data_;
      }
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_DATA_NOT_SET;
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.Operation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmpty();
  ::memset(&counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&counter_)) + sizeof(kind_));
  clear_operation_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.Operation.source"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 storage_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          storage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.Operation.OperationKind kind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::TW::Tezos::Proto::Operation_OperationKind>(val));
        } else
          goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reveal_operation_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_operation_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegation_operation_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.Operation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 counter = 1;
  if (this->_internal_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_counter(), target);
  }

  // string source = 2;
  if (!this->_internal_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.Operation.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // int64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee(), target);
  }

  // int64 gas_limit = 4;
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gas_limit(), target);
  }

  // int64 storage_limit = 5;
  if (this->_internal_storage_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_storage_limit(), target);
  }

  // .TW.Tezos.Proto.Operation.OperationKind kind = 7;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_kind(), target);
  }

  // .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
  if (_internal_has_reveal_operation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reveal_operation_data(this), target, stream);
  }

  // .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
  if (_internal_has_transaction_operation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::transaction_operation_data(this), target, stream);
  }

  // .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
  if (_internal_has_delegation_operation_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::delegation_operation_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.Operation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 2;
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // int64 counter = 1;
  if (this->_internal_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_counter());
  }

  // int64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fee());
  }

  // int64 gas_limit = 4;
  if (this->_internal_gas_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gas_limit());
  }

  // int64 storage_limit = 5;
  if (this->_internal_storage_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_storage_limit());
  }

  // .TW.Tezos.Proto.Operation.OperationKind kind = 7;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  switch (operation_data_case()) {
    // .TW.Tezos.Proto.RevealOperationData reveal_operation_data = 8;
    case kRevealOperationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_data_.reveal_operation_data_);
      break;
    }
    // .TW.Tezos.Proto.TransactionOperationData transaction_operation_data = 9;
    case kTransactionOperationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_data_.transaction_operation_data_);
      break;
    }
    // .TW.Tezos.Proto.DelegationOperationData delegation_operation_data = 11;
    case kDelegationOperationData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_data_.delegation_operation_data_);
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }

void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Operation *>(to)->MergeFrom(
      static_cast<const Operation &>(from));
}


void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source().empty()) {
    _internal_set_source(from._internal_source());
  }
  if (from._internal_counter() != 0) {
    _internal_set_counter(from._internal_counter());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from._internal_storage_limit() != 0) {
    _internal_set_storage_limit(from._internal_storage_limit());
  }
  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  switch (from.operation_data_case()) {
    case kRevealOperationData: {
      _internal_mutable_reveal_operation_data()->::TW::Tezos::Proto::RevealOperationData::MergeFrom(from._internal_reveal_operation_data());
      break;
    }
    case kTransactionOperationData: {
      _internal_mutable_transaction_operation_data()->::TW::Tezos::Proto::TransactionOperationData::MergeFrom(from._internal_transaction_operation_data());
      break;
    }
    case kDelegationOperationData: {
      _internal_mutable_delegation_operation_data()->::TW::Tezos::Proto::DelegationOperationData::MergeFrom(from._internal_delegation_operation_data());
      break;
    }
    case OPERATION_DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, kind_)
      + sizeof(Operation::kind_)
      - PROTOBUF_FIELD_OFFSET(Operation, counter_)>(
          reinterpret_cast<char*>(&counter_),
          reinterpret_cast<char*>(&other->counter_));
  swap(operation_data_, other->operation_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[3]);
}

// ===================================================================

class FA12Parameters::_Internal {
 public:
};

FA12Parameters::FA12Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.FA12Parameters)
}
FA12Parameters::FA12Parameters(const FA12Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entrypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entrypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entrypoint().empty()) {
    entrypoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entrypoint(), 
      GetArenaForAllocation());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.FA12Parameters)
}

inline void FA12Parameters::SharedCtor() {
entrypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entrypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FA12Parameters::~FA12Parameters() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.FA12Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FA12Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entrypoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FA12Parameters::ArenaDtor(void* object) {
  FA12Parameters* _this = reinterpret_cast< FA12Parameters* >(object);
  (void)_this;
}
void FA12Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FA12Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FA12Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.FA12Parameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrypoint_.ClearToEmpty();
  from_.ClearToEmpty();
  to_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FA12Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entrypoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entrypoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.FA12Parameters.entrypoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.FA12Parameters.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.FA12Parameters.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.FA12Parameters.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FA12Parameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.FA12Parameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entrypoint = 1;
  if (!this->_internal_entrypoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entrypoint().data(), static_cast<int>(this->_internal_entrypoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.FA12Parameters.entrypoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entrypoint(), target);
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.FA12Parameters.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.FA12Parameters.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // string value = 4;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.FA12Parameters.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.FA12Parameters)
  return target;
}

size_t FA12Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.FA12Parameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entrypoint = 1;
  if (!this->_internal_entrypoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entrypoint());
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FA12Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FA12Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FA12Parameters::GetClassData() const { return &_class_data_; }

void FA12Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FA12Parameters *>(to)->MergeFrom(
      static_cast<const FA12Parameters &>(from));
}


void FA12Parameters::MergeFrom(const FA12Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.FA12Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entrypoint().empty()) {
    _internal_set_entrypoint(from._internal_entrypoint());
  }
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FA12Parameters::CopyFrom(const FA12Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.FA12Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FA12Parameters::IsInitialized() const {
  return true;
}

void FA12Parameters::InternalSwap(FA12Parameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entrypoint_, lhs_arena,
      &other->entrypoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FA12Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[4]);
}

// ===================================================================

class Txs::_Internal {
 public:
};

Txs::Txs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.Txs)
}
Txs::Txs(const Txs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.Txs)
}

inline void Txs::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Txs::~Txs() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.Txs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Txs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Txs::ArenaDtor(void* object) {
  Txs* _this = reinterpret_cast< Txs* >(object);
  (void)_this;
}
void Txs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Txs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Txs::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.Txs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Txs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.Txs.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.Txs.token_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.Txs.amount"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Txs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.Txs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.Txs.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // string token_id = 2;
  if (!this->_internal_token_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_id().data(), static_cast<int>(this->_internal_token_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.Txs.token_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_id(), target);
  }

  // string amount = 3;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.Txs.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.Txs)
  return target;
}

size_t Txs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.Txs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string token_id = 2;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_id());
  }

  // string amount = 3;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Txs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Txs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Txs::GetClassData() const { return &_class_data_; }

void Txs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Txs *>(to)->MergeFrom(
      static_cast<const Txs &>(from));
}


void Txs::MergeFrom(const Txs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.Txs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Txs::CopyFrom(const Txs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.Txs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Txs::IsInitialized() const {
  return true;
}

void Txs::InternalSwap(Txs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, lhs_arena,
      &other->token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Txs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[5]);
}

// ===================================================================

class TxObject::_Internal {
 public:
};

TxObject::TxObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.TxObject)
}
TxObject::TxObject(const TxObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.TxObject)
}

inline void TxObject::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxObject::~TxObject() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.TxObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxObject::ArenaDtor(void* object) {
  TxObject* _this = reinterpret_cast< TxObject* >(object);
  (void)_this;
}
void TxObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxObject::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.TxObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  from_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.TxObject.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Tezos.Proto.Txs txs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.TxObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.TxObject.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated .TW.Tezos.Proto.Txs txs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_txs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.TxObject)
  return target;
}

size_t TxObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.TxObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Tezos.Proto.Txs txs = 2;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxObject::GetClassData() const { return &_class_data_; }

void TxObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxObject *>(to)->MergeFrom(
      static_cast<const TxObject &>(from));
}


void TxObject::MergeFrom(const TxObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.TxObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxObject::CopyFrom(const TxObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.TxObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxObject::IsInitialized() const {
  return true;
}

void TxObject::InternalSwap(TxObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txs_.InternalSwap(&other->txs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[6]);
}

// ===================================================================

class FA2Parameters::_Internal {
 public:
};

FA2Parameters::FA2Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txs_object_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.FA2Parameters)
}
FA2Parameters::FA2Parameters(const FA2Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txs_object_(from.txs_object_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entrypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entrypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entrypoint().empty()) {
    entrypoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entrypoint(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.FA2Parameters)
}

inline void FA2Parameters::SharedCtor() {
entrypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entrypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FA2Parameters::~FA2Parameters() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.FA2Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FA2Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entrypoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FA2Parameters::ArenaDtor(void* object) {
  FA2Parameters* _this = reinterpret_cast< FA2Parameters* >(object);
  (void)_this;
}
void FA2Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FA2Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FA2Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.FA2Parameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_object_.Clear();
  entrypoint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FA2Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entrypoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entrypoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.FA2Parameters.entrypoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TW.Tezos.Proto.TxObject txs_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FA2Parameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.FA2Parameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entrypoint = 1;
  if (!this->_internal_entrypoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entrypoint().data(), static_cast<int>(this->_internal_entrypoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.FA2Parameters.entrypoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entrypoint(), target);
  }

  // repeated .TW.Tezos.Proto.TxObject txs_object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txs_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_txs_object(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.FA2Parameters)
  return target;
}

size_t FA2Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.FA2Parameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Tezos.Proto.TxObject txs_object = 2;
  total_size += 1UL * this->_internal_txs_object_size();
  for (const auto& msg : this->txs_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string entrypoint = 1;
  if (!this->_internal_entrypoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entrypoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FA2Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FA2Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FA2Parameters::GetClassData() const { return &_class_data_; }

void FA2Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FA2Parameters *>(to)->MergeFrom(
      static_cast<const FA2Parameters &>(from));
}


void FA2Parameters::MergeFrom(const FA2Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.FA2Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txs_object_.MergeFrom(from.txs_object_);
  if (!from._internal_entrypoint().empty()) {
    _internal_set_entrypoint(from._internal_entrypoint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FA2Parameters::CopyFrom(const FA2Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.FA2Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FA2Parameters::IsInitialized() const {
  return true;
}

void FA2Parameters::InternalSwap(FA2Parameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txs_object_.InternalSwap(&other->txs_object_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entrypoint_, lhs_arena,
      &other->entrypoint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FA2Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[7]);
}

// ===================================================================

class OperationParameters::_Internal {
 public:
  static const ::TW::Tezos::Proto::FA12Parameters& fa12_parameters(const OperationParameters* msg);
  static const ::TW::Tezos::Proto::FA2Parameters& fa2_parameters(const OperationParameters* msg);
};

const ::TW::Tezos::Proto::FA12Parameters&
OperationParameters::_Internal::fa12_parameters(const OperationParameters* msg) {
  return *msg->parameters_.fa12_parameters_;
}
const ::TW::Tezos::Proto::FA2Parameters&
OperationParameters::_Internal::fa2_parameters(const OperationParameters* msg) {
  return *msg->parameters_.fa2_parameters_;
}
void OperationParameters::set_allocated_fa12_parameters(::TW::Tezos::Proto::FA12Parameters* fa12_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (fa12_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Tezos::Proto::FA12Parameters>::GetOwningArena(fa12_parameters);
    if (message_arena != submessage_arena) {
      fa12_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fa12_parameters, submessage_arena);
    }
    set_has_fa12_parameters();
    parameters_.fa12_parameters_ = fa12_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.OperationParameters.fa12_parameters)
}
void OperationParameters::set_allocated_fa2_parameters(::TW::Tezos::Proto::FA2Parameters* fa2_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (fa2_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Tezos::Proto::FA2Parameters>::GetOwningArena(fa2_parameters);
    if (message_arena != submessage_arena) {
      fa2_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fa2_parameters, submessage_arena);
    }
    set_has_fa2_parameters();
    parameters_.fa2_parameters_ = fa2_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Tezos.Proto.OperationParameters.fa2_parameters)
}
OperationParameters::OperationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.OperationParameters)
}
OperationParameters::OperationParameters(const OperationParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_parameters();
  switch (from.parameters_case()) {
    case kFa12Parameters: {
      _internal_mutable_fa12_parameters()->::TW::Tezos::Proto::FA12Parameters::MergeFrom(from._internal_fa12_parameters());
      break;
    }
    case kFa2Parameters: {
      _internal_mutable_fa2_parameters()->::TW::Tezos::Proto::FA2Parameters::MergeFrom(from._internal_fa2_parameters());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.OperationParameters)
}

inline void OperationParameters::SharedCtor() {
clear_has_parameters();
}

OperationParameters::~OperationParameters() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.OperationParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_parameters()) {
    clear_parameters();
  }
}

void OperationParameters::ArenaDtor(void* object) {
  OperationParameters* _this = reinterpret_cast< OperationParameters* >(object);
  (void)_this;
}
void OperationParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationParameters::clear_parameters() {
// @@protoc_insertion_point(one_of_clear_start:TW.Tezos.Proto.OperationParameters)
  switch (parameters_case()) {
    case kFa12Parameters: {
      if (GetArenaForAllocation() == nullptr) {
        delete parameters_.fa12_parameters_;
      }
      break;
    }
    case kFa2Parameters: {
      if (GetArenaForAllocation() == nullptr) {
        delete parameters_.fa2_parameters_;
      }
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}


void OperationParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.OperationParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_parameters();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Tezos.Proto.FA12Parameters fa12_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fa12_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.FA2Parameters fa2_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fa2_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.OperationParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Tezos.Proto.FA12Parameters fa12_parameters = 1;
  if (_internal_has_fa12_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fa12_parameters(this), target, stream);
  }

  // .TW.Tezos.Proto.FA2Parameters fa2_parameters = 2;
  if (_internal_has_fa2_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fa2_parameters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.OperationParameters)
  return target;
}

size_t OperationParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.OperationParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (parameters_case()) {
    // .TW.Tezos.Proto.FA12Parameters fa12_parameters = 1;
    case kFa12Parameters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.fa12_parameters_);
      break;
    }
    // .TW.Tezos.Proto.FA2Parameters fa2_parameters = 2;
    case kFa2Parameters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.fa2_parameters_);
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationParameters::GetClassData() const { return &_class_data_; }

void OperationParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperationParameters *>(to)->MergeFrom(
      static_cast<const OperationParameters &>(from));
}


void OperationParameters::MergeFrom(const OperationParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.OperationParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.parameters_case()) {
    case kFa12Parameters: {
      _internal_mutable_fa12_parameters()->::TW::Tezos::Proto::FA12Parameters::MergeFrom(from._internal_fa12_parameters());
      break;
    }
    case kFa2Parameters: {
      _internal_mutable_fa2_parameters()->::TW::Tezos::Proto::FA2Parameters::MergeFrom(from._internal_fa2_parameters());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationParameters::CopyFrom(const OperationParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.OperationParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationParameters::IsInitialized() const {
  return true;
}

void OperationParameters::InternalSwap(OperationParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(parameters_, other->parameters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[8]);
}

// ===================================================================

class TransactionOperationData::_Internal {
 public:
  static const ::TW::Tezos::Proto::OperationParameters& parameters(const TransactionOperationData* msg);
};

const ::TW::Tezos::Proto::OperationParameters&
TransactionOperationData::_Internal::parameters(const TransactionOperationData* msg) {
  return *msg->parameters_;
}
TransactionOperationData::TransactionOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.TransactionOperationData)
}
TransactionOperationData::TransactionOperationData(const TransactionOperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArenaForAllocation());
  }
  encoded_parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_parameter().empty()) {
    encoded_parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_parameter(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parameters()) {
    parameters_ = new ::TW::Tezos::Proto::OperationParameters(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.TransactionOperationData)
}

inline void TransactionOperationData::SharedCtor() {
destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encoded_parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&parameters_)) + sizeof(amount_));
}

TransactionOperationData::~TransactionOperationData() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.TransactionOperationData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionOperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameters_;
}

void TransactionOperationData::ArenaDtor(void* object) {
  TransactionOperationData* _this = reinterpret_cast< TransactionOperationData* >(object);
  (void)_this;
}
void TransactionOperationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOperationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionOperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.TransactionOperationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmpty();
  encoded_parameter_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOperationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.TransactionOperationData.destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded_parameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encoded_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Tezos.Proto.OperationParameters parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOperationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.TransactionOperationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.TransactionOperationData.destination");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination(), target);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // bytes encoded_parameter = 3;
  if (!this->_internal_encoded_parameter().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_encoded_parameter(), target);
  }

  // .TW.Tezos.Proto.OperationParameters parameters = 4;
  if (this->_internal_has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::parameters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.TransactionOperationData)
  return target;
}

size_t TransactionOperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.TransactionOperationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // bytes encoded_parameter = 3;
  if (!this->_internal_encoded_parameter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_parameter());
  }

  // .TW.Tezos.Proto.OperationParameters parameters = 4;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOperationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionOperationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOperationData::GetClassData() const { return &_class_data_; }

void TransactionOperationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionOperationData *>(to)->MergeFrom(
      static_cast<const TransactionOperationData &>(from));
}


void TransactionOperationData::MergeFrom(const TransactionOperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.TransactionOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _internal_set_destination(from._internal_destination());
  }
  if (!from._internal_encoded_parameter().empty()) {
    _internal_set_encoded_parameter(from._internal_encoded_parameter());
  }
  if (from._internal_has_parameters()) {
    _internal_mutable_parameters()->::TW::Tezos::Proto::OperationParameters::MergeFrom(from._internal_parameters());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOperationData::CopyFrom(const TransactionOperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.TransactionOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOperationData::IsInitialized() const {
  return true;
}

void TransactionOperationData::InternalSwap(TransactionOperationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_, lhs_arena,
      &other->destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_parameter_, lhs_arena,
      &other->encoded_parameter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOperationData, amount_)
      + sizeof(TransactionOperationData::amount_)
      - PROTOBUF_FIELD_OFFSET(TransactionOperationData, parameters_)>(
          reinterpret_cast<char*>(&parameters_),
          reinterpret_cast<char*>(&other->parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOperationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[9]);
}

// ===================================================================

class RevealOperationData::_Internal {
 public:
};

RevealOperationData::RevealOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.RevealOperationData)
}
RevealOperationData::RevealOperationData(const RevealOperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.RevealOperationData)
}

inline void RevealOperationData::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RevealOperationData::~RevealOperationData() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.RevealOperationData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RevealOperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RevealOperationData::ArenaDtor(void* object) {
  RevealOperationData* _this = reinterpret_cast< RevealOperationData* >(object);
  (void)_this;
}
void RevealOperationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevealOperationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RevealOperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.RevealOperationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevealOperationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RevealOperationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.RevealOperationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.RevealOperationData)
  return target;
}

size_t RevealOperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.RevealOperationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevealOperationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RevealOperationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevealOperationData::GetClassData() const { return &_class_data_; }

void RevealOperationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RevealOperationData *>(to)->MergeFrom(
      static_cast<const RevealOperationData &>(from));
}


void RevealOperationData::MergeFrom(const RevealOperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.RevealOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevealOperationData::CopyFrom(const RevealOperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.RevealOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevealOperationData::IsInitialized() const {
  return true;
}

void RevealOperationData::InternalSwap(RevealOperationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RevealOperationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[10]);
}

// ===================================================================

class DelegationOperationData::_Internal {
 public:
};

DelegationOperationData::DelegationOperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Tezos.Proto.DelegationOperationData)
}
DelegationOperationData::DelegationOperationData(const DelegationOperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    delegate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegate().empty()) {
    delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegate(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Tezos.Proto.DelegationOperationData)
}

inline void DelegationOperationData::SharedCtor() {
delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  delegate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelegationOperationData::~DelegationOperationData() {
  // @@protoc_insertion_point(destructor:TW.Tezos.Proto.DelegationOperationData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelegationOperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  delegate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegationOperationData::ArenaDtor(void* object) {
  DelegationOperationData* _this = reinterpret_cast< DelegationOperationData* >(object);
  (void)_this;
}
void DelegationOperationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegationOperationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelegationOperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Tezos.Proto.DelegationOperationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegationOperationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Tezos.Proto.DelegationOperationData.delegate"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelegationOperationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Tezos.Proto.DelegationOperationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegate = 1;
  if (!this->_internal_delegate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegate().data(), static_cast<int>(this->_internal_delegate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Tezos.Proto.DelegationOperationData.delegate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delegate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Tezos.Proto.DelegationOperationData)
  return target;
}

size_t DelegationOperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Tezos.Proto.DelegationOperationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegate = 1;
  if (!this->_internal_delegate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegationOperationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelegationOperationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegationOperationData::GetClassData() const { return &_class_data_; }

void DelegationOperationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelegationOperationData *>(to)->MergeFrom(
      static_cast<const DelegationOperationData &>(from));
}


void DelegationOperationData::MergeFrom(const DelegationOperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Tezos.Proto.DelegationOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delegate().empty()) {
    _internal_set_delegate(from._internal_delegate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegationOperationData::CopyFrom(const DelegationOperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Tezos.Proto.DelegationOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegationOperationData::IsInitialized() const {
  return true;
}

void DelegationOperationData::InternalSwap(DelegationOperationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delegate_, lhs_arena,
      &other->delegate_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegationOperationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Tezos_2eproto_getter, &descriptor_table_Tezos_2eproto_once,
      file_level_metadata_Tezos_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Tezos
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::SigningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::OperationList* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::OperationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::OperationList >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::Operation* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::FA12Parameters* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::FA12Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::FA12Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::Txs* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::Txs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::Txs >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::TxObject* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::TxObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::TxObject >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::FA2Parameters* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::FA2Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::FA2Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::OperationParameters* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::OperationParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::OperationParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::TransactionOperationData* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::TransactionOperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::TransactionOperationData >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::RevealOperationData* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::RevealOperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::RevealOperationData >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Tezos::Proto::DelegationOperationData* Arena::CreateMaybeMessage< ::TW::Tezos::Proto::DelegationOperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Tezos::Proto::DelegationOperationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
