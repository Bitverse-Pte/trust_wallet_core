// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Aptos.proto

#include "Aptos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Aptos {
namespace Proto {
constexpr TransferMessage::TransferMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(uint64_t{0u}){}
struct TransferMessageDefaultTypeInternal {
  constexpr TransferMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferMessageDefaultTypeInternal() {}
  union {
    TransferMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
constexpr StructTag::StructTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StructTagDefaultTypeInternal {
  constexpr StructTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructTagDefaultTypeInternal() {}
  union {
    StructTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructTagDefaultTypeInternal _StructTag_default_instance_;
constexpr TokenTransferMessage::TokenTransferMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_(nullptr)
  , amount_(uint64_t{0u}){}
struct TokenTransferMessageDefaultTypeInternal {
  constexpr TokenTransferMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenTransferMessageDefaultTypeInternal() {}
  union {
    TokenTransferMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenTransferMessageDefaultTypeInternal _TokenTransferMessage_default_instance_;
constexpr TokenTransferCoinsMessage::TokenTransferCoinsMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_(nullptr)
  , amount_(uint64_t{0u}){}
struct TokenTransferCoinsMessageDefaultTypeInternal {
  constexpr TokenTransferCoinsMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenTransferCoinsMessageDefaultTypeInternal() {}
  union {
    TokenTransferCoinsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenTransferCoinsMessageDefaultTypeInternal _TokenTransferCoinsMessage_default_instance_;
constexpr ManagedTokensRegisterMessage::ManagedTokensRegisterMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_(nullptr){}
struct ManagedTokensRegisterMessageDefaultTypeInternal {
  constexpr ManagedTokensRegisterMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ManagedTokensRegisterMessageDefaultTypeInternal() {}
  union {
    ManagedTokensRegisterMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ManagedTokensRegisterMessageDefaultTypeInternal _ManagedTokensRegisterMessage_default_instance_;
constexpr CreateAccountMessage::CreateAccountMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateAccountMessageDefaultTypeInternal {
  constexpr CreateAccountMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAccountMessageDefaultTypeInternal() {}
  union {
    CreateAccountMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAccountMessageDefaultTypeInternal _CreateAccountMessage_default_instance_;
constexpr OfferNftMessage::OfferNftMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collectionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , property_version_(uint64_t{0u})
  , amount_(uint64_t{0u}){}
struct OfferNftMessageDefaultTypeInternal {
  constexpr OfferNftMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OfferNftMessageDefaultTypeInternal() {}
  union {
    OfferNftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OfferNftMessageDefaultTypeInternal _OfferNftMessage_default_instance_;
constexpr CancelOfferNftMessage::CancelOfferNftMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collectionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , property_version_(uint64_t{0u}){}
struct CancelOfferNftMessageDefaultTypeInternal {
  constexpr CancelOfferNftMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelOfferNftMessageDefaultTypeInternal() {}
  union {
    CancelOfferNftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelOfferNftMessageDefaultTypeInternal _CancelOfferNftMessage_default_instance_;
constexpr ClaimNftMessage::ClaimNftMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collectionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , property_version_(uint64_t{0u}){}
struct ClaimNftMessageDefaultTypeInternal {
  constexpr ClaimNftMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClaimNftMessageDefaultTypeInternal() {}
  union {
    ClaimNftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClaimNftMessageDefaultTypeInternal _ClaimNftMessage_default_instance_;
constexpr TortugaClaim::TortugaClaim(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idx_(uint64_t{0u}){}
struct TortugaClaimDefaultTypeInternal {
  constexpr TortugaClaimDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TortugaClaimDefaultTypeInternal() {}
  union {
    TortugaClaim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TortugaClaimDefaultTypeInternal _TortugaClaim_default_instance_;
constexpr TortugaStake::TortugaStake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(uint64_t{0u}){}
struct TortugaStakeDefaultTypeInternal {
  constexpr TortugaStakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TortugaStakeDefaultTypeInternal() {}
  union {
    TortugaStake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TortugaStakeDefaultTypeInternal _TortugaStake_default_instance_;
constexpr TortugaUnstake::TortugaUnstake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(uint64_t{0u}){}
struct TortugaUnstakeDefaultTypeInternal {
  constexpr TortugaUnstakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TortugaUnstakeDefaultTypeInternal() {}
  union {
    TortugaUnstake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TortugaUnstakeDefaultTypeInternal _TortugaUnstake_default_instance_;
constexpr LiquidStaking::LiquidStaking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : smart_contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct LiquidStakingDefaultTypeInternal {
  constexpr LiquidStakingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiquidStakingDefaultTypeInternal() {}
  union {
    LiquidStaking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiquidStakingDefaultTypeInternal _LiquidStaking_default_instance_;
constexpr NftMessage::NftMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct NftMessageDefaultTypeInternal {
  constexpr NftMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NftMessageDefaultTypeInternal() {}
  union {
    NftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NftMessageDefaultTypeInternal _NftMessage_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , any_encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_number_(int64_t{0})
  , max_gas_amount_(uint64_t{0u})
  , gas_unit_price_(uint64_t{0u})
  , expiration_timestamp_secs_(uint64_t{0u})
  , chain_id_(0u)
  , _oneof_case_{}{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr TransactionAuthenticator::TransactionAuthenticator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransactionAuthenticatorDefaultTypeInternal {
  constexpr TransactionAuthenticatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionAuthenticatorDefaultTypeInternal() {}
  union {
    TransactionAuthenticator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionAuthenticatorDefaultTypeInternal _TransactionAuthenticator_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_txn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , authenticator_(nullptr)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Aptos
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Aptos_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Aptos_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Aptos_2eproto = nullptr;

const uint32_t TableStruct_Aptos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TransferMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TransferMessage, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TransferMessage, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::StructTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::StructTag, account_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::StructTag, module_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::StructTag, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferMessage, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferMessage, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferMessage, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferCoinsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferCoinsMessage, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferCoinsMessage, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TokenTransferCoinsMessage, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ManagedTokensRegisterMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ManagedTokensRegisterMessage, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CreateAccountMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CreateAccountMessage, auth_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::OfferNftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::OfferNftMessage, receiver_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::OfferNftMessage, creator_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::OfferNftMessage, collectionname_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::OfferNftMessage, name_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::OfferNftMessage, property_version_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::OfferNftMessage, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CancelOfferNftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CancelOfferNftMessage, receiver_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CancelOfferNftMessage, creator_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CancelOfferNftMessage, collectionname_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CancelOfferNftMessage, name_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::CancelOfferNftMessage, property_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ClaimNftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ClaimNftMessage, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ClaimNftMessage, creator_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ClaimNftMessage, collectionname_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ClaimNftMessage, name_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::ClaimNftMessage, property_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TortugaClaim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TortugaClaim, idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TortugaStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TortugaStake, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TortugaUnstake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TortugaUnstake, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::LiquidStaking, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::LiquidStaking, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::LiquidStaking, smart_contract_address_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::LiquidStaking, liquid_stake_transaction_payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::NftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::NftMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::NftMessage, nft_transaction_payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, max_gas_amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, gas_unit_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, expiration_timestamp_secs_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, any_encoded_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningInput, transaction_payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TransactionAuthenticator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TransactionAuthenticator, signature_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::TransactionAuthenticator, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningOutput, raw_txn_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningOutput, authenticator_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningOutput, json_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Aptos::Proto::SigningOutput, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Aptos::Proto::TransferMessage)},
  { 8, -1, -1, sizeof(::TW::Aptos::Proto::StructTag)},
  { 17, -1, -1, sizeof(::TW::Aptos::Proto::TokenTransferMessage)},
  { 26, -1, -1, sizeof(::TW::Aptos::Proto::TokenTransferCoinsMessage)},
  { 35, -1, -1, sizeof(::TW::Aptos::Proto::ManagedTokensRegisterMessage)},
  { 42, -1, -1, sizeof(::TW::Aptos::Proto::CreateAccountMessage)},
  { 49, -1, -1, sizeof(::TW::Aptos::Proto::OfferNftMessage)},
  { 61, -1, -1, sizeof(::TW::Aptos::Proto::CancelOfferNftMessage)},
  { 72, -1, -1, sizeof(::TW::Aptos::Proto::ClaimNftMessage)},
  { 83, -1, -1, sizeof(::TW::Aptos::Proto::TortugaClaim)},
  { 90, -1, -1, sizeof(::TW::Aptos::Proto::TortugaStake)},
  { 97, -1, -1, sizeof(::TW::Aptos::Proto::TortugaUnstake)},
  { 104, -1, -1, sizeof(::TW::Aptos::Proto::LiquidStaking)},
  { 115, -1, -1, sizeof(::TW::Aptos::Proto::NftMessage)},
  { 125, -1, -1, sizeof(::TW::Aptos::Proto::SigningInput)},
  { 147, -1, -1, sizeof(::TW::Aptos::Proto::TransactionAuthenticator)},
  { 155, -1, -1, sizeof(::TW::Aptos::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_TransferMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_StructTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_TokenTransferMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_TokenTransferCoinsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_ManagedTokensRegisterMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_CreateAccountMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_OfferNftMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_CancelOfferNftMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_ClaimNftMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_TortugaClaim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_TortugaStake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_TortugaUnstake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_LiquidStaking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_NftMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_TransactionAuthenticator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Aptos::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Aptos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Aptos.proto\022\016TW.Aptos.Proto\032\014Common.pr"
  "oto\"-\n\017TransferMessage\022\n\n\002to\030\001 \001(\t\022\016\n\006am"
  "ount\030\002 \001(\004\"B\n\tStructTag\022\027\n\017account_addre"
  "ss\030\001 \001(\t\022\016\n\006module\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"_"
  "\n\024TokenTransferMessage\022\n\n\002to\030\001 \001(\t\022\016\n\006am"
  "ount\030\002 \001(\004\022+\n\010function\030\003 \001(\0132\031.TW.Aptos."
  "Proto.StructTag\"d\n\031TokenTransferCoinsMes"
  "sage\022\n\n\002to\030\001 \001(\t\022\016\n\006amount\030\002 \001(\004\022+\n\010func"
  "tion\030\003 \001(\0132\031.TW.Aptos.Proto.StructTag\"K\n"
  "\034ManagedTokensRegisterMessage\022+\n\010functio"
  "n\030\001 \001(\0132\031.TW.Aptos.Proto.StructTag\"(\n\024Cr"
  "eateAccountMessage\022\020\n\010auth_key\030\001 \001(\t\"\204\001\n"
  "\017OfferNftMessage\022\020\n\010receiver\030\001 \001(\t\022\017\n\007cr"
  "eator\030\002 \001(\t\022\026\n\016collectionName\030\003 \001(\t\022\014\n\004n"
  "ame\030\004 \001(\t\022\030\n\020property_version\030\005 \001(\004\022\016\n\006a"
  "mount\030\006 \001(\004\"z\n\025CancelOfferNftMessage\022\020\n\010"
  "receiver\030\001 \001(\t\022\017\n\007creator\030\002 \001(\t\022\026\n\016colle"
  "ctionName\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\030\n\020propert"
  "y_version\030\005 \001(\004\"r\n\017ClaimNftMessage\022\016\n\006se"
  "nder\030\001 \001(\t\022\017\n\007creator\030\002 \001(\t\022\026\n\016collectio"
  "nName\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\030\n\020property_ve"
  "rsion\030\005 \001(\004\"\033\n\014TortugaClaim\022\013\n\003idx\030\001 \001(\004"
  "\"\036\n\014TortugaStake\022\016\n\006amount\030\001 \001(\004\" \n\016Tort"
  "ugaUnstake\022\016\n\006amount\030\001 \001(\004\"\344\001\n\rLiquidSta"
  "king\022\036\n\026smart_contract_address\030\001 \001(\t\022-\n\005"
  "stake\030\002 \001(\0132\034.TW.Aptos.Proto.TortugaStak"
  "eH\000\0221\n\007unstake\030\003 \001(\0132\036.TW.Aptos.Proto.To"
  "rtugaUnstakeH\000\022-\n\005claim\030\004 \001(\0132\034.TW.Aptos"
  ".Proto.TortugaClaimH\000B\"\n liquid_stake_tr"
  "ansaction_payload\"\326\001\n\nNftMessage\0224\n\toffe"
  "r_nft\030\001 \001(\0132\037.TW.Aptos.Proto.OfferNftMes"
  "sageH\000\022A\n\020cancel_offer_nft\030\002 \001(\0132%.TW.Ap"
  "tos.Proto.CancelOfferNftMessageH\000\0224\n\tcla"
  "im_nft\030\003 \001(\0132\037.TW.Aptos.Proto.ClaimNftMe"
  "ssageH\000B\031\n\027nft_transaction_payload\"\231\005\n\014S"
  "igningInput\022\016\n\006sender\030\001 \001(\t\022\027\n\017sequence_"
  "number\030\002 \001(\003\022\026\n\016max_gas_amount\030\003 \001(\004\022\026\n\016"
  "gas_unit_price\030\004 \001(\004\022!\n\031expiration_times"
  "tamp_secs\030\005 \001(\004\022\020\n\010chain_id\030\006 \001(\r\022\023\n\013pri"
  "vate_key\030\007 \001(\014\022\023\n\013any_encoded\030\010 \001(\t\0223\n\010t"
  "ransfer\030\t \001(\0132\037.TW.Aptos.Proto.TransferM"
  "essageH\000\022>\n\016token_transfer\030\n \001(\0132$.TW.Ap"
  "tos.Proto.TokenTransferMessageH\000\022>\n\016crea"
  "te_account\030\013 \001(\0132$.TW.Aptos.Proto.Create"
  "AccountMessageH\000\0221\n\013nft_message\030\014 \001(\0132\032."
  "TW.Aptos.Proto.NftMessageH\000\022F\n\016register_"
  "token\030\r \001(\0132,.TW.Aptos.Proto.ManagedToke"
  "nsRegisterMessageH\000\022\?\n\026liquid_staking_me"
  "ssage\030\016 \001(\0132\035.TW.Aptos.Proto.LiquidStaki"
  "ngH\000\022I\n\024token_transfer_coins\030\017 \001(\0132).TW."
  "Aptos.Proto.TokenTransferCoinsMessageH\000B"
  "\025\n\023transaction_payload\"A\n\030TransactionAut"
  "henticator\022\021\n\tsignature\030\001 \001(\014\022\022\n\npublic_"
  "key\030\002 \001(\014\"\305\001\n\rSigningOutput\022\017\n\007raw_txn\030\001"
  " \001(\014\022\?\n\rauthenticator\030\002 \001(\0132(.TW.Aptos.P"
  "roto.TransactionAuthenticator\022\017\n\007encoded"
  "\030\003 \001(\014\022\014\n\004json\030\004 \001(\t\022,\n\005error\030\005 \001(\0162\035.TW"
  ".Common.Proto.SigningError\022\025\n\rerror_mess"
  "age\030\006 \001(\tB\027\n\025wallet.core.jni.protob\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Aptos_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Aptos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Aptos_2eproto = {
  false, false, 2362, descriptor_table_protodef_Aptos_2eproto, "Aptos.proto", 
  &descriptor_table_Aptos_2eproto_once, descriptor_table_Aptos_2eproto_deps, 1, 17,
  schemas, file_default_instances, TableStruct_Aptos_2eproto::offsets,
  file_level_metadata_Aptos_2eproto, file_level_enum_descriptors_Aptos_2eproto, file_level_service_descriptors_Aptos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Aptos_2eproto_getter() {
  return &descriptor_table_Aptos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Aptos_2eproto(&descriptor_table_Aptos_2eproto);
namespace TW {
namespace Aptos {
namespace Proto {

// ===================================================================

class TransferMessage::_Internal {
 public:
};

TransferMessage::TransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.TransferMessage)
}
TransferMessage::TransferMessage(const TransferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.TransferMessage)
}

inline void TransferMessage::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = uint64_t{0u};
}

TransferMessage::~TransferMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.TransferMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransferMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferMessage::ArenaDtor(void* object) {
  TransferMessage* _this = reinterpret_cast< TransferMessage* >(object);
  (void)_this;
}
void TransferMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.TransferMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.TransferMessage.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.TransferMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.TransferMessage.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.TransferMessage)
  return target;
}

size_t TransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.TransferMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransferMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferMessage::GetClassData() const { return &_class_data_; }

void TransferMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransferMessage *>(to)->MergeFrom(
      static_cast<const TransferMessage &>(from));
}


void TransferMessage::MergeFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.TransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferMessage::CopyFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.TransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMessage::IsInitialized() const {
  return true;
}

void TransferMessage::InternalSwap(TransferMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[0]);
}

// ===================================================================

class StructTag::_Internal {
 public:
};

StructTag::StructTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.StructTag)
}
StructTag::StructTag(const StructTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    account_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_address(), 
      GetArenaForAllocation());
  }
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module().empty()) {
    module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.StructTag)
}

inline void StructTag::SharedCtor() {
account_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StructTag::~StructTag() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.StructTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StructTag::ArenaDtor(void* object) {
  StructTag* _this = reinterpret_cast< StructTag* >(object);
  (void)_this;
}
void StructTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructTag::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.StructTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_address_.ClearToEmpty();
  module_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.StructTag.account_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.StructTag.module"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.StructTag.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.StructTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_address = 1;
  if (!this->_internal_account_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_address().data(), static_cast<int>(this->_internal_account_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.StructTag.account_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_address(), target);
  }

  // string module = 2;
  if (!this->_internal_module().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.StructTag.module");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.StructTag.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.StructTag)
  return target;
}

size_t StructTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.StructTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_address = 1;
  if (!this->_internal_account_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_address());
  }

  // string module = 2;
  if (!this->_internal_module().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructTag::GetClassData() const { return &_class_data_; }

void StructTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StructTag *>(to)->MergeFrom(
      static_cast<const StructTag &>(from));
}


void StructTag::MergeFrom(const StructTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.StructTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_address().empty()) {
    _internal_set_account_address(from._internal_account_address());
  }
  if (!from._internal_module().empty()) {
    _internal_set_module(from._internal_module());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructTag::CopyFrom(const StructTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.StructTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructTag::IsInitialized() const {
  return true;
}

void StructTag::InternalSwap(StructTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_address_, lhs_arena,
      &other->account_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_, lhs_arena,
      &other->module_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StructTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[1]);
}

// ===================================================================

class TokenTransferMessage::_Internal {
 public:
  static const ::TW::Aptos::Proto::StructTag& function(const TokenTransferMessage* msg);
};

const ::TW::Aptos::Proto::StructTag&
TokenTransferMessage::_Internal::function(const TokenTransferMessage* msg) {
  return *msg->function_;
}
TokenTransferMessage::TokenTransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.TokenTransferMessage)
}
TokenTransferMessage::TokenTransferMessage(const TokenTransferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_function()) {
    function_ = new ::TW::Aptos::Proto::StructTag(*from.function_);
  } else {
    function_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.TokenTransferMessage)
}

inline void TokenTransferMessage::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&function_)) + sizeof(amount_));
}

TokenTransferMessage::~TokenTransferMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.TokenTransferMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenTransferMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete function_;
}

void TokenTransferMessage::ArenaDtor(void* object) {
  TokenTransferMessage* _this = reinterpret_cast< TokenTransferMessage* >(object);
  (void)_this;
}
void TokenTransferMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenTransferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenTransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.TokenTransferMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenTransferMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.TokenTransferMessage.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.StructTag function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenTransferMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.TokenTransferMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.TokenTransferMessage.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // .TW.Aptos.Proto.StructTag function = 3;
  if (this->_internal_has_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.TokenTransferMessage)
  return target;
}

size_t TokenTransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.TokenTransferMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // .TW.Aptos.Proto.StructTag function = 3;
  if (this->_internal_has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenTransferMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenTransferMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenTransferMessage::GetClassData() const { return &_class_data_; }

void TokenTransferMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenTransferMessage *>(to)->MergeFrom(
      static_cast<const TokenTransferMessage &>(from));
}


void TokenTransferMessage::MergeFrom(const TokenTransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.TokenTransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_has_function()) {
    _internal_mutable_function()->::TW::Aptos::Proto::StructTag::MergeFrom(from._internal_function());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenTransferMessage::CopyFrom(const TokenTransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.TokenTransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenTransferMessage::IsInitialized() const {
  return true;
}

void TokenTransferMessage::InternalSwap(TokenTransferMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenTransferMessage, amount_)
      + sizeof(TokenTransferMessage::amount_)
      - PROTOBUF_FIELD_OFFSET(TokenTransferMessage, function_)>(
          reinterpret_cast<char*>(&function_),
          reinterpret_cast<char*>(&other->function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenTransferMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[2]);
}

// ===================================================================

class TokenTransferCoinsMessage::_Internal {
 public:
  static const ::TW::Aptos::Proto::StructTag& function(const TokenTransferCoinsMessage* msg);
};

const ::TW::Aptos::Proto::StructTag&
TokenTransferCoinsMessage::_Internal::function(const TokenTransferCoinsMessage* msg) {
  return *msg->function_;
}
TokenTransferCoinsMessage::TokenTransferCoinsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.TokenTransferCoinsMessage)
}
TokenTransferCoinsMessage::TokenTransferCoinsMessage(const TokenTransferCoinsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_function()) {
    function_ = new ::TW::Aptos::Proto::StructTag(*from.function_);
  } else {
    function_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.TokenTransferCoinsMessage)
}

inline void TokenTransferCoinsMessage::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&function_)) + sizeof(amount_));
}

TokenTransferCoinsMessage::~TokenTransferCoinsMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.TokenTransferCoinsMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenTransferCoinsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete function_;
}

void TokenTransferCoinsMessage::ArenaDtor(void* object) {
  TokenTransferCoinsMessage* _this = reinterpret_cast< TokenTransferCoinsMessage* >(object);
  (void)_this;
}
void TokenTransferCoinsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenTransferCoinsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenTransferCoinsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.TokenTransferCoinsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenTransferCoinsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.TokenTransferCoinsMessage.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.StructTag function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenTransferCoinsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.TokenTransferCoinsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.TokenTransferCoinsMessage.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // .TW.Aptos.Proto.StructTag function = 3;
  if (this->_internal_has_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.TokenTransferCoinsMessage)
  return target;
}

size_t TokenTransferCoinsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.TokenTransferCoinsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // .TW.Aptos.Proto.StructTag function = 3;
  if (this->_internal_has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenTransferCoinsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenTransferCoinsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenTransferCoinsMessage::GetClassData() const { return &_class_data_; }

void TokenTransferCoinsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenTransferCoinsMessage *>(to)->MergeFrom(
      static_cast<const TokenTransferCoinsMessage &>(from));
}


void TokenTransferCoinsMessage::MergeFrom(const TokenTransferCoinsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.TokenTransferCoinsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_has_function()) {
    _internal_mutable_function()->::TW::Aptos::Proto::StructTag::MergeFrom(from._internal_function());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenTransferCoinsMessage::CopyFrom(const TokenTransferCoinsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.TokenTransferCoinsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenTransferCoinsMessage::IsInitialized() const {
  return true;
}

void TokenTransferCoinsMessage::InternalSwap(TokenTransferCoinsMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenTransferCoinsMessage, amount_)
      + sizeof(TokenTransferCoinsMessage::amount_)
      - PROTOBUF_FIELD_OFFSET(TokenTransferCoinsMessage, function_)>(
          reinterpret_cast<char*>(&function_),
          reinterpret_cast<char*>(&other->function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenTransferCoinsMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[3]);
}

// ===================================================================

class ManagedTokensRegisterMessage::_Internal {
 public:
  static const ::TW::Aptos::Proto::StructTag& function(const ManagedTokensRegisterMessage* msg);
};

const ::TW::Aptos::Proto::StructTag&
ManagedTokensRegisterMessage::_Internal::function(const ManagedTokensRegisterMessage* msg) {
  return *msg->function_;
}
ManagedTokensRegisterMessage::ManagedTokensRegisterMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.ManagedTokensRegisterMessage)
}
ManagedTokensRegisterMessage::ManagedTokensRegisterMessage(const ManagedTokensRegisterMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_function()) {
    function_ = new ::TW::Aptos::Proto::StructTag(*from.function_);
  } else {
    function_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.ManagedTokensRegisterMessage)
}

inline void ManagedTokensRegisterMessage::SharedCtor() {
function_ = nullptr;
}

ManagedTokensRegisterMessage::~ManagedTokensRegisterMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.ManagedTokensRegisterMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ManagedTokensRegisterMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete function_;
}

void ManagedTokensRegisterMessage::ArenaDtor(void* object) {
  ManagedTokensRegisterMessage* _this = reinterpret_cast< ManagedTokensRegisterMessage* >(object);
  (void)_this;
}
void ManagedTokensRegisterMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManagedTokensRegisterMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ManagedTokensRegisterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.ManagedTokensRegisterMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManagedTokensRegisterMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Aptos.Proto.StructTag function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ManagedTokensRegisterMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.ManagedTokensRegisterMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Aptos.Proto.StructTag function = 1;
  if (this->_internal_has_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.ManagedTokensRegisterMessage)
  return target;
}

size_t ManagedTokensRegisterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.ManagedTokensRegisterMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TW.Aptos.Proto.StructTag function = 1;
  if (this->_internal_has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManagedTokensRegisterMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ManagedTokensRegisterMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManagedTokensRegisterMessage::GetClassData() const { return &_class_data_; }

void ManagedTokensRegisterMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ManagedTokensRegisterMessage *>(to)->MergeFrom(
      static_cast<const ManagedTokensRegisterMessage &>(from));
}


void ManagedTokensRegisterMessage::MergeFrom(const ManagedTokensRegisterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.ManagedTokensRegisterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_function()) {
    _internal_mutable_function()->::TW::Aptos::Proto::StructTag::MergeFrom(from._internal_function());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManagedTokensRegisterMessage::CopyFrom(const ManagedTokensRegisterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.ManagedTokensRegisterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagedTokensRegisterMessage::IsInitialized() const {
  return true;
}

void ManagedTokensRegisterMessage::InternalSwap(ManagedTokensRegisterMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(function_, other->function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManagedTokensRegisterMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[4]);
}

// ===================================================================

class CreateAccountMessage::_Internal {
 public:
};

CreateAccountMessage::CreateAccountMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.CreateAccountMessage)
}
CreateAccountMessage::CreateAccountMessage(const CreateAccountMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_key().empty()) {
    auth_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.CreateAccountMessage)
}

inline void CreateAccountMessage::SharedCtor() {
auth_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateAccountMessage::~CreateAccountMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.CreateAccountMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAccountMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAccountMessage::ArenaDtor(void* object) {
  CreateAccountMessage* _this = reinterpret_cast< CreateAccountMessage* >(object);
  (void)_this;
}
void CreateAccountMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccountMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccountMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.CreateAccountMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string auth_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_auth_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.CreateAccountMessage.auth_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAccountMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.CreateAccountMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_key = 1;
  if (!this->_internal_auth_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_key().data(), static_cast<int>(this->_internal_auth_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.CreateAccountMessage.auth_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.CreateAccountMessage)
  return target;
}

size_t CreateAccountMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.CreateAccountMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_key = 1;
  if (!this->_internal_auth_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAccountMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountMessage::GetClassData() const { return &_class_data_; }

void CreateAccountMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAccountMessage *>(to)->MergeFrom(
      static_cast<const CreateAccountMessage &>(from));
}


void CreateAccountMessage::MergeFrom(const CreateAccountMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.CreateAccountMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_key().empty()) {
    _internal_set_auth_key(from._internal_auth_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountMessage::CopyFrom(const CreateAccountMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.CreateAccountMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountMessage::IsInitialized() const {
  return true;
}

void CreateAccountMessage::InternalSwap(CreateAccountMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_key_, lhs_arena,
      &other->auth_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[5]);
}

// ===================================================================

class OfferNftMessage::_Internal {
 public:
};

OfferNftMessage::OfferNftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.OfferNftMessage)
}
OfferNftMessage::OfferNftMessage(const OfferNftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArenaForAllocation());
  }
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator(), 
      GetArenaForAllocation());
  }
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    collectionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collectionname(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&property_version_, &from.property_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&property_version_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.OfferNftMessage)
}

inline void OfferNftMessage::SharedCtor() {
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&property_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&property_version_)) + sizeof(amount_));
}

OfferNftMessage::~OfferNftMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.OfferNftMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OfferNftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OfferNftMessage::ArenaDtor(void* object) {
  OfferNftMessage* _this = reinterpret_cast< OfferNftMessage* >(object);
  (void)_this;
}
void OfferNftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OfferNftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OfferNftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.OfferNftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_.ClearToEmpty();
  creator_.ClearToEmpty();
  collectionname_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&property_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&property_version_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OfferNftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.OfferNftMessage.receiver"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.OfferNftMessage.creator"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.OfferNftMessage.collectionName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.OfferNftMessage.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 property_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          property_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OfferNftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.OfferNftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver = 1;
  if (!this->_internal_receiver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.OfferNftMessage.receiver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver(), target);
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.OfferNftMessage.creator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator(), target);
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.OfferNftMessage.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.OfferNftMessage.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint64 property_version = 5;
  if (this->_internal_property_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_property_version(), target);
  }

  // uint64 amount = 6;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.OfferNftMessage)
  return target;
}

size_t OfferNftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.OfferNftMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiver = 1;
  if (!this->_internal_receiver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 property_version = 5;
  if (this->_internal_property_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_property_version());
  }

  // uint64 amount = 6;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OfferNftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OfferNftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OfferNftMessage::GetClassData() const { return &_class_data_; }

void OfferNftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OfferNftMessage *>(to)->MergeFrom(
      static_cast<const OfferNftMessage &>(from));
}


void OfferNftMessage::MergeFrom(const OfferNftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.OfferNftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_receiver().empty()) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_creator().empty()) {
    _internal_set_creator(from._internal_creator());
  }
  if (!from._internal_collectionname().empty()) {
    _internal_set_collectionname(from._internal_collectionname());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_property_version() != 0) {
    _internal_set_property_version(from._internal_property_version());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OfferNftMessage::CopyFrom(const OfferNftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.OfferNftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferNftMessage::IsInitialized() const {
  return true;
}

void OfferNftMessage::InternalSwap(OfferNftMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_, lhs_arena,
      &other->receiver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_, lhs_arena,
      &other->creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &collectionname_, lhs_arena,
      &other->collectionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OfferNftMessage, amount_)
      + sizeof(OfferNftMessage::amount_)
      - PROTOBUF_FIELD_OFFSET(OfferNftMessage, property_version_)>(
          reinterpret_cast<char*>(&property_version_),
          reinterpret_cast<char*>(&other->property_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OfferNftMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[6]);
}

// ===================================================================

class CancelOfferNftMessage::_Internal {
 public:
};

CancelOfferNftMessage::CancelOfferNftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.CancelOfferNftMessage)
}
CancelOfferNftMessage::CancelOfferNftMessage(const CancelOfferNftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArenaForAllocation());
  }
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator(), 
      GetArenaForAllocation());
  }
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    collectionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collectionname(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  property_version_ = from.property_version_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.CancelOfferNftMessage)
}

inline void CancelOfferNftMessage::SharedCtor() {
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
property_version_ = uint64_t{0u};
}

CancelOfferNftMessage::~CancelOfferNftMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.CancelOfferNftMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelOfferNftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelOfferNftMessage::ArenaDtor(void* object) {
  CancelOfferNftMessage* _this = reinterpret_cast< CancelOfferNftMessage* >(object);
  (void)_this;
}
void CancelOfferNftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOfferNftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelOfferNftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.CancelOfferNftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_.ClearToEmpty();
  creator_.ClearToEmpty();
  collectionname_.ClearToEmpty();
  name_.ClearToEmpty();
  property_version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOfferNftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.CancelOfferNftMessage.receiver"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.CancelOfferNftMessage.creator"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.CancelOfferNftMessage.collectionName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.CancelOfferNftMessage.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 property_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          property_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelOfferNftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.CancelOfferNftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver = 1;
  if (!this->_internal_receiver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.CancelOfferNftMessage.receiver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver(), target);
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.CancelOfferNftMessage.creator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator(), target);
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.CancelOfferNftMessage.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.CancelOfferNftMessage.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint64 property_version = 5;
  if (this->_internal_property_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_property_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.CancelOfferNftMessage)
  return target;
}

size_t CancelOfferNftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.CancelOfferNftMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiver = 1;
  if (!this->_internal_receiver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 property_version = 5;
  if (this->_internal_property_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_property_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelOfferNftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelOfferNftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelOfferNftMessage::GetClassData() const { return &_class_data_; }

void CancelOfferNftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CancelOfferNftMessage *>(to)->MergeFrom(
      static_cast<const CancelOfferNftMessage &>(from));
}


void CancelOfferNftMessage::MergeFrom(const CancelOfferNftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.CancelOfferNftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_receiver().empty()) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_creator().empty()) {
    _internal_set_creator(from._internal_creator());
  }
  if (!from._internal_collectionname().empty()) {
    _internal_set_collectionname(from._internal_collectionname());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_property_version() != 0) {
    _internal_set_property_version(from._internal_property_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelOfferNftMessage::CopyFrom(const CancelOfferNftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.CancelOfferNftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOfferNftMessage::IsInitialized() const {
  return true;
}

void CancelOfferNftMessage::InternalSwap(CancelOfferNftMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_, lhs_arena,
      &other->receiver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_, lhs_arena,
      &other->creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &collectionname_, lhs_arena,
      &other->collectionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(property_version_, other->property_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOfferNftMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[7]);
}

// ===================================================================

class ClaimNftMessage::_Internal {
 public:
};

ClaimNftMessage::ClaimNftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.ClaimNftMessage)
}
ClaimNftMessage::ClaimNftMessage(const ClaimNftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator(), 
      GetArenaForAllocation());
  }
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    collectionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collectionname(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  property_version_ = from.property_version_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.ClaimNftMessage)
}

inline void ClaimNftMessage::SharedCtor() {
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
property_version_ = uint64_t{0u};
}

ClaimNftMessage::~ClaimNftMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.ClaimNftMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClaimNftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClaimNftMessage::ArenaDtor(void* object) {
  ClaimNftMessage* _this = reinterpret_cast< ClaimNftMessage* >(object);
  (void)_this;
}
void ClaimNftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClaimNftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClaimNftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.ClaimNftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty();
  creator_.ClearToEmpty();
  collectionname_.ClearToEmpty();
  name_.ClearToEmpty();
  property_version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClaimNftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.ClaimNftMessage.sender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.ClaimNftMessage.creator"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.ClaimNftMessage.collectionName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.ClaimNftMessage.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 property_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          property_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClaimNftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.ClaimNftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.ClaimNftMessage.sender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.ClaimNftMessage.creator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator(), target);
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.ClaimNftMessage.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.ClaimNftMessage.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint64 property_version = 5;
  if (this->_internal_property_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_property_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.ClaimNftMessage)
  return target;
}

size_t ClaimNftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.ClaimNftMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 property_version = 5;
  if (this->_internal_property_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_property_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClaimNftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClaimNftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClaimNftMessage::GetClassData() const { return &_class_data_; }

void ClaimNftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClaimNftMessage *>(to)->MergeFrom(
      static_cast<const ClaimNftMessage &>(from));
}


void ClaimNftMessage::MergeFrom(const ClaimNftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.ClaimNftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from._internal_creator().empty()) {
    _internal_set_creator(from._internal_creator());
  }
  if (!from._internal_collectionname().empty()) {
    _internal_set_collectionname(from._internal_collectionname());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_property_version() != 0) {
    _internal_set_property_version(from._internal_property_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClaimNftMessage::CopyFrom(const ClaimNftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.ClaimNftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimNftMessage::IsInitialized() const {
  return true;
}

void ClaimNftMessage::InternalSwap(ClaimNftMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_, lhs_arena,
      &other->creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &collectionname_, lhs_arena,
      &other->collectionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(property_version_, other->property_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimNftMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[8]);
}

// ===================================================================

class TortugaClaim::_Internal {
 public:
};

TortugaClaim::TortugaClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.TortugaClaim)
}
TortugaClaim::TortugaClaim(const TortugaClaim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.TortugaClaim)
}

inline void TortugaClaim::SharedCtor() {
idx_ = uint64_t{0u};
}

TortugaClaim::~TortugaClaim() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.TortugaClaim)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TortugaClaim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TortugaClaim::ArenaDtor(void* object) {
  TortugaClaim* _this = reinterpret_cast< TortugaClaim* >(object);
  (void)_this;
}
void TortugaClaim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TortugaClaim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TortugaClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.TortugaClaim)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idx_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TortugaClaim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TortugaClaim::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.TortugaClaim)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 idx = 1;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.TortugaClaim)
  return target;
}

size_t TortugaClaim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.TortugaClaim)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TortugaClaim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TortugaClaim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TortugaClaim::GetClassData() const { return &_class_data_; }

void TortugaClaim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TortugaClaim *>(to)->MergeFrom(
      static_cast<const TortugaClaim &>(from));
}


void TortugaClaim::MergeFrom(const TortugaClaim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.TortugaClaim)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TortugaClaim::CopyFrom(const TortugaClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.TortugaClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TortugaClaim::IsInitialized() const {
  return true;
}

void TortugaClaim::InternalSwap(TortugaClaim* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TortugaClaim::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[9]);
}

// ===================================================================

class TortugaStake::_Internal {
 public:
};

TortugaStake::TortugaStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.TortugaStake)
}
TortugaStake::TortugaStake(const TortugaStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.TortugaStake)
}

inline void TortugaStake::SharedCtor() {
amount_ = uint64_t{0u};
}

TortugaStake::~TortugaStake() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.TortugaStake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TortugaStake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TortugaStake::ArenaDtor(void* object) {
  TortugaStake* _this = reinterpret_cast< TortugaStake* >(object);
  (void)_this;
}
void TortugaStake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TortugaStake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TortugaStake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.TortugaStake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TortugaStake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TortugaStake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.TortugaStake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.TortugaStake)
  return target;
}

size_t TortugaStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.TortugaStake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TortugaStake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TortugaStake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TortugaStake::GetClassData() const { return &_class_data_; }

void TortugaStake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TortugaStake *>(to)->MergeFrom(
      static_cast<const TortugaStake &>(from));
}


void TortugaStake::MergeFrom(const TortugaStake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.TortugaStake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TortugaStake::CopyFrom(const TortugaStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.TortugaStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TortugaStake::IsInitialized() const {
  return true;
}

void TortugaStake::InternalSwap(TortugaStake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TortugaStake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[10]);
}

// ===================================================================

class TortugaUnstake::_Internal {
 public:
};

TortugaUnstake::TortugaUnstake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.TortugaUnstake)
}
TortugaUnstake::TortugaUnstake(const TortugaUnstake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.TortugaUnstake)
}

inline void TortugaUnstake::SharedCtor() {
amount_ = uint64_t{0u};
}

TortugaUnstake::~TortugaUnstake() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.TortugaUnstake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TortugaUnstake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TortugaUnstake::ArenaDtor(void* object) {
  TortugaUnstake* _this = reinterpret_cast< TortugaUnstake* >(object);
  (void)_this;
}
void TortugaUnstake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TortugaUnstake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TortugaUnstake::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.TortugaUnstake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TortugaUnstake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TortugaUnstake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.TortugaUnstake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.TortugaUnstake)
  return target;
}

size_t TortugaUnstake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.TortugaUnstake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TortugaUnstake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TortugaUnstake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TortugaUnstake::GetClassData() const { return &_class_data_; }

void TortugaUnstake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TortugaUnstake *>(to)->MergeFrom(
      static_cast<const TortugaUnstake &>(from));
}


void TortugaUnstake::MergeFrom(const TortugaUnstake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.TortugaUnstake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TortugaUnstake::CopyFrom(const TortugaUnstake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.TortugaUnstake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TortugaUnstake::IsInitialized() const {
  return true;
}

void TortugaUnstake::InternalSwap(TortugaUnstake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TortugaUnstake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[11]);
}

// ===================================================================

class LiquidStaking::_Internal {
 public:
  static const ::TW::Aptos::Proto::TortugaStake& stake(const LiquidStaking* msg);
  static const ::TW::Aptos::Proto::TortugaUnstake& unstake(const LiquidStaking* msg);
  static const ::TW::Aptos::Proto::TortugaClaim& claim(const LiquidStaking* msg);
};

const ::TW::Aptos::Proto::TortugaStake&
LiquidStaking::_Internal::stake(const LiquidStaking* msg) {
  return *msg->liquid_stake_transaction_payload_.stake_;
}
const ::TW::Aptos::Proto::TortugaUnstake&
LiquidStaking::_Internal::unstake(const LiquidStaking* msg) {
  return *msg->liquid_stake_transaction_payload_.unstake_;
}
const ::TW::Aptos::Proto::TortugaClaim&
LiquidStaking::_Internal::claim(const LiquidStaking* msg) {
  return *msg->liquid_stake_transaction_payload_.claim_;
}
void LiquidStaking::set_allocated_stake(::TW::Aptos::Proto::TortugaStake* stake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_liquid_stake_transaction_payload();
  if (stake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::TortugaStake>::GetOwningArena(stake);
    if (message_arena != submessage_arena) {
      stake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stake, submessage_arena);
    }
    set_has_stake();
    liquid_stake_transaction_payload_.stake_ = stake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.LiquidStaking.stake)
}
void LiquidStaking::set_allocated_unstake(::TW::Aptos::Proto::TortugaUnstake* unstake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_liquid_stake_transaction_payload();
  if (unstake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::TortugaUnstake>::GetOwningArena(unstake);
    if (message_arena != submessage_arena) {
      unstake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unstake, submessage_arena);
    }
    set_has_unstake();
    liquid_stake_transaction_payload_.unstake_ = unstake;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.LiquidStaking.unstake)
}
void LiquidStaking::set_allocated_claim(::TW::Aptos::Proto::TortugaClaim* claim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_liquid_stake_transaction_payload();
  if (claim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::TortugaClaim>::GetOwningArena(claim);
    if (message_arena != submessage_arena) {
      claim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claim, submessage_arena);
    }
    set_has_claim();
    liquid_stake_transaction_payload_.claim_ = claim;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.LiquidStaking.claim)
}
LiquidStaking::LiquidStaking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.LiquidStaking)
}
LiquidStaking::LiquidStaking(const LiquidStaking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  smart_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    smart_contract_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_smart_contract_address().empty()) {
    smart_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smart_contract_address(), 
      GetArenaForAllocation());
  }
  clear_has_liquid_stake_transaction_payload();
  switch (from.liquid_stake_transaction_payload_case()) {
    case kStake: {
      _internal_mutable_stake()->::TW::Aptos::Proto::TortugaStake::MergeFrom(from._internal_stake());
      break;
    }
    case kUnstake: {
      _internal_mutable_unstake()->::TW::Aptos::Proto::TortugaUnstake::MergeFrom(from._internal_unstake());
      break;
    }
    case kClaim: {
      _internal_mutable_claim()->::TW::Aptos::Proto::TortugaClaim::MergeFrom(from._internal_claim());
      break;
    }
    case LIQUID_STAKE_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.LiquidStaking)
}

inline void LiquidStaking::SharedCtor() {
smart_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  smart_contract_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_liquid_stake_transaction_payload();
}

LiquidStaking::~LiquidStaking() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.LiquidStaking)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LiquidStaking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  smart_contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_liquid_stake_transaction_payload()) {
    clear_liquid_stake_transaction_payload();
  }
}

void LiquidStaking::ArenaDtor(void* object) {
  LiquidStaking* _this = reinterpret_cast< LiquidStaking* >(object);
  (void)_this;
}
void LiquidStaking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidStaking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LiquidStaking::clear_liquid_stake_transaction_payload() {
// @@protoc_insertion_point(one_of_clear_start:TW.Aptos.Proto.LiquidStaking)
  switch (liquid_stake_transaction_payload_case()) {
    case kStake: {
      if (GetArenaForAllocation() == nullptr) {
        delete liquid_stake_transaction_payload_.stake_;
      }
      break;
    }
    case kUnstake: {
      if (GetArenaForAllocation() == nullptr) {
        delete liquid_stake_transaction_payload_.unstake_;
      }
      break;
    }
    case kClaim: {
      if (GetArenaForAllocation() == nullptr) {
        delete liquid_stake_transaction_payload_.claim_;
      }
      break;
    }
    case LIQUID_STAKE_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIQUID_STAKE_TRANSACTION_PAYLOAD_NOT_SET;
}


void LiquidStaking::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.LiquidStaking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smart_contract_address_.ClearToEmpty();
  clear_liquid_stake_transaction_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidStaking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string smart_contract_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_smart_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.LiquidStaking.smart_contract_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.TortugaStake stake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.TortugaUnstake unstake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_unstake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.TortugaClaim claim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiquidStaking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.LiquidStaking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string smart_contract_address = 1;
  if (!this->_internal_smart_contract_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smart_contract_address().data(), static_cast<int>(this->_internal_smart_contract_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.LiquidStaking.smart_contract_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_smart_contract_address(), target);
  }

  // .TW.Aptos.Proto.TortugaStake stake = 2;
  if (_internal_has_stake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stake(this), target, stream);
  }

  // .TW.Aptos.Proto.TortugaUnstake unstake = 3;
  if (_internal_has_unstake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::unstake(this), target, stream);
  }

  // .TW.Aptos.Proto.TortugaClaim claim = 4;
  if (_internal_has_claim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::claim(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.LiquidStaking)
  return target;
}

size_t LiquidStaking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.LiquidStaking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string smart_contract_address = 1;
  if (!this->_internal_smart_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smart_contract_address());
  }

  switch (liquid_stake_transaction_payload_case()) {
    // .TW.Aptos.Proto.TortugaStake stake = 2;
    case kStake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *liquid_stake_transaction_payload_.stake_);
      break;
    }
    // .TW.Aptos.Proto.TortugaUnstake unstake = 3;
    case kUnstake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *liquid_stake_transaction_payload_.unstake_);
      break;
    }
    // .TW.Aptos.Proto.TortugaClaim claim = 4;
    case kClaim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *liquid_stake_transaction_payload_.claim_);
      break;
    }
    case LIQUID_STAKE_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiquidStaking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LiquidStaking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiquidStaking::GetClassData() const { return &_class_data_; }

void LiquidStaking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LiquidStaking *>(to)->MergeFrom(
      static_cast<const LiquidStaking &>(from));
}


void LiquidStaking::MergeFrom(const LiquidStaking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.LiquidStaking)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_smart_contract_address().empty()) {
    _internal_set_smart_contract_address(from._internal_smart_contract_address());
  }
  switch (from.liquid_stake_transaction_payload_case()) {
    case kStake: {
      _internal_mutable_stake()->::TW::Aptos::Proto::TortugaStake::MergeFrom(from._internal_stake());
      break;
    }
    case kUnstake: {
      _internal_mutable_unstake()->::TW::Aptos::Proto::TortugaUnstake::MergeFrom(from._internal_unstake());
      break;
    }
    case kClaim: {
      _internal_mutable_claim()->::TW::Aptos::Proto::TortugaClaim::MergeFrom(from._internal_claim());
      break;
    }
    case LIQUID_STAKE_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiquidStaking::CopyFrom(const LiquidStaking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.LiquidStaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidStaking::IsInitialized() const {
  return true;
}

void LiquidStaking::InternalSwap(LiquidStaking* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smart_contract_address_, lhs_arena,
      &other->smart_contract_address_, rhs_arena
  );
  swap(liquid_stake_transaction_payload_, other->liquid_stake_transaction_payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidStaking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[12]);
}

// ===================================================================

class NftMessage::_Internal {
 public:
  static const ::TW::Aptos::Proto::OfferNftMessage& offer_nft(const NftMessage* msg);
  static const ::TW::Aptos::Proto::CancelOfferNftMessage& cancel_offer_nft(const NftMessage* msg);
  static const ::TW::Aptos::Proto::ClaimNftMessage& claim_nft(const NftMessage* msg);
};

const ::TW::Aptos::Proto::OfferNftMessage&
NftMessage::_Internal::offer_nft(const NftMessage* msg) {
  return *msg->nft_transaction_payload_.offer_nft_;
}
const ::TW::Aptos::Proto::CancelOfferNftMessage&
NftMessage::_Internal::cancel_offer_nft(const NftMessage* msg) {
  return *msg->nft_transaction_payload_.cancel_offer_nft_;
}
const ::TW::Aptos::Proto::ClaimNftMessage&
NftMessage::_Internal::claim_nft(const NftMessage* msg) {
  return *msg->nft_transaction_payload_.claim_nft_;
}
void NftMessage::set_allocated_offer_nft(::TW::Aptos::Proto::OfferNftMessage* offer_nft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nft_transaction_payload();
  if (offer_nft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::OfferNftMessage>::GetOwningArena(offer_nft);
    if (message_arena != submessage_arena) {
      offer_nft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_nft, submessage_arena);
    }
    set_has_offer_nft();
    nft_transaction_payload_.offer_nft_ = offer_nft;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.NftMessage.offer_nft)
}
void NftMessage::set_allocated_cancel_offer_nft(::TW::Aptos::Proto::CancelOfferNftMessage* cancel_offer_nft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nft_transaction_payload();
  if (cancel_offer_nft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::CancelOfferNftMessage>::GetOwningArena(cancel_offer_nft);
    if (message_arena != submessage_arena) {
      cancel_offer_nft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_offer_nft, submessage_arena);
    }
    set_has_cancel_offer_nft();
    nft_transaction_payload_.cancel_offer_nft_ = cancel_offer_nft;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.NftMessage.cancel_offer_nft)
}
void NftMessage::set_allocated_claim_nft(::TW::Aptos::Proto::ClaimNftMessage* claim_nft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nft_transaction_payload();
  if (claim_nft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::ClaimNftMessage>::GetOwningArena(claim_nft);
    if (message_arena != submessage_arena) {
      claim_nft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claim_nft, submessage_arena);
    }
    set_has_claim_nft();
    nft_transaction_payload_.claim_nft_ = claim_nft;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.NftMessage.claim_nft)
}
NftMessage::NftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.NftMessage)
}
NftMessage::NftMessage(const NftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_nft_transaction_payload();
  switch (from.nft_transaction_payload_case()) {
    case kOfferNft: {
      _internal_mutable_offer_nft()->::TW::Aptos::Proto::OfferNftMessage::MergeFrom(from._internal_offer_nft());
      break;
    }
    case kCancelOfferNft: {
      _internal_mutable_cancel_offer_nft()->::TW::Aptos::Proto::CancelOfferNftMessage::MergeFrom(from._internal_cancel_offer_nft());
      break;
    }
    case kClaimNft: {
      _internal_mutable_claim_nft()->::TW::Aptos::Proto::ClaimNftMessage::MergeFrom(from._internal_claim_nft());
      break;
    }
    case NFT_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.NftMessage)
}

inline void NftMessage::SharedCtor() {
clear_has_nft_transaction_payload();
}

NftMessage::~NftMessage() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.NftMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_nft_transaction_payload()) {
    clear_nft_transaction_payload();
  }
}

void NftMessage::ArenaDtor(void* object) {
  NftMessage* _this = reinterpret_cast< NftMessage* >(object);
  (void)_this;
}
void NftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NftMessage::clear_nft_transaction_payload() {
// @@protoc_insertion_point(one_of_clear_start:TW.Aptos.Proto.NftMessage)
  switch (nft_transaction_payload_case()) {
    case kOfferNft: {
      if (GetArenaForAllocation() == nullptr) {
        delete nft_transaction_payload_.offer_nft_;
      }
      break;
    }
    case kCancelOfferNft: {
      if (GetArenaForAllocation() == nullptr) {
        delete nft_transaction_payload_.cancel_offer_nft_;
      }
      break;
    }
    case kClaimNft: {
      if (GetArenaForAllocation() == nullptr) {
        delete nft_transaction_payload_.claim_nft_;
      }
      break;
    }
    case NFT_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NFT_TRANSACTION_PAYLOAD_NOT_SET;
}


void NftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.NftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_nft_transaction_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Aptos.Proto.OfferNftMessage offer_nft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer_nft(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.CancelOfferNftMessage cancel_offer_nft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_offer_nft(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.ClaimNftMessage claim_nft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim_nft(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.NftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Aptos.Proto.OfferNftMessage offer_nft = 1;
  if (_internal_has_offer_nft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offer_nft(this), target, stream);
  }

  // .TW.Aptos.Proto.CancelOfferNftMessage cancel_offer_nft = 2;
  if (_internal_has_cancel_offer_nft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cancel_offer_nft(this), target, stream);
  }

  // .TW.Aptos.Proto.ClaimNftMessage claim_nft = 3;
  if (_internal_has_claim_nft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::claim_nft(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.NftMessage)
  return target;
}

size_t NftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.NftMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (nft_transaction_payload_case()) {
    // .TW.Aptos.Proto.OfferNftMessage offer_nft = 1;
    case kOfferNft: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nft_transaction_payload_.offer_nft_);
      break;
    }
    // .TW.Aptos.Proto.CancelOfferNftMessage cancel_offer_nft = 2;
    case kCancelOfferNft: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nft_transaction_payload_.cancel_offer_nft_);
      break;
    }
    // .TW.Aptos.Proto.ClaimNftMessage claim_nft = 3;
    case kClaimNft: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nft_transaction_payload_.claim_nft_);
      break;
    }
    case NFT_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NftMessage::GetClassData() const { return &_class_data_; }

void NftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NftMessage *>(to)->MergeFrom(
      static_cast<const NftMessage &>(from));
}


void NftMessage::MergeFrom(const NftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.NftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.nft_transaction_payload_case()) {
    case kOfferNft: {
      _internal_mutable_offer_nft()->::TW::Aptos::Proto::OfferNftMessage::MergeFrom(from._internal_offer_nft());
      break;
    }
    case kCancelOfferNft: {
      _internal_mutable_cancel_offer_nft()->::TW::Aptos::Proto::CancelOfferNftMessage::MergeFrom(from._internal_cancel_offer_nft());
      break;
    }
    case kClaimNft: {
      _internal_mutable_claim_nft()->::TW::Aptos::Proto::ClaimNftMessage::MergeFrom(from._internal_claim_nft());
      break;
    }
    case NFT_TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NftMessage::CopyFrom(const NftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.NftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NftMessage::IsInitialized() const {
  return true;
}

void NftMessage::InternalSwap(NftMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nft_transaction_payload_, other->nft_transaction_payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NftMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[13]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Aptos::Proto::TransferMessage& transfer(const SigningInput* msg);
  static const ::TW::Aptos::Proto::TokenTransferMessage& token_transfer(const SigningInput* msg);
  static const ::TW::Aptos::Proto::CreateAccountMessage& create_account(const SigningInput* msg);
  static const ::TW::Aptos::Proto::NftMessage& nft_message(const SigningInput* msg);
  static const ::TW::Aptos::Proto::ManagedTokensRegisterMessage& register_token(const SigningInput* msg);
  static const ::TW::Aptos::Proto::LiquidStaking& liquid_staking_message(const SigningInput* msg);
  static const ::TW::Aptos::Proto::TokenTransferCoinsMessage& token_transfer_coins(const SigningInput* msg);
};

const ::TW::Aptos::Proto::TransferMessage&
SigningInput::_Internal::transfer(const SigningInput* msg) {
  return *msg->transaction_payload_.transfer_;
}
const ::TW::Aptos::Proto::TokenTransferMessage&
SigningInput::_Internal::token_transfer(const SigningInput* msg) {
  return *msg->transaction_payload_.token_transfer_;
}
const ::TW::Aptos::Proto::CreateAccountMessage&
SigningInput::_Internal::create_account(const SigningInput* msg) {
  return *msg->transaction_payload_.create_account_;
}
const ::TW::Aptos::Proto::NftMessage&
SigningInput::_Internal::nft_message(const SigningInput* msg) {
  return *msg->transaction_payload_.nft_message_;
}
const ::TW::Aptos::Proto::ManagedTokensRegisterMessage&
SigningInput::_Internal::register_token(const SigningInput* msg) {
  return *msg->transaction_payload_.register_token_;
}
const ::TW::Aptos::Proto::LiquidStaking&
SigningInput::_Internal::liquid_staking_message(const SigningInput* msg) {
  return *msg->transaction_payload_.liquid_staking_message_;
}
const ::TW::Aptos::Proto::TokenTransferCoinsMessage&
SigningInput::_Internal::token_transfer_coins(const SigningInput* msg) {
  return *msg->transaction_payload_.token_transfer_coins_;
}
void SigningInput::set_allocated_transfer(::TW::Aptos::Proto::TransferMessage* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_payload();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::TransferMessage>::GetOwningArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    transaction_payload_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.SigningInput.transfer)
}
void SigningInput::set_allocated_token_transfer(::TW::Aptos::Proto::TokenTransferMessage* token_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_payload();
  if (token_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::TokenTransferMessage>::GetOwningArena(token_transfer);
    if (message_arena != submessage_arena) {
      token_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_transfer, submessage_arena);
    }
    set_has_token_transfer();
    transaction_payload_.token_transfer_ = token_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.SigningInput.token_transfer)
}
void SigningInput::set_allocated_create_account(::TW::Aptos::Proto::CreateAccountMessage* create_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_payload();
  if (create_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::CreateAccountMessage>::GetOwningArena(create_account);
    if (message_arena != submessage_arena) {
      create_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_account, submessage_arena);
    }
    set_has_create_account();
    transaction_payload_.create_account_ = create_account;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.SigningInput.create_account)
}
void SigningInput::set_allocated_nft_message(::TW::Aptos::Proto::NftMessage* nft_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_payload();
  if (nft_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::NftMessage>::GetOwningArena(nft_message);
    if (message_arena != submessage_arena) {
      nft_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nft_message, submessage_arena);
    }
    set_has_nft_message();
    transaction_payload_.nft_message_ = nft_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.SigningInput.nft_message)
}
void SigningInput::set_allocated_register_token(::TW::Aptos::Proto::ManagedTokensRegisterMessage* register_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_payload();
  if (register_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::ManagedTokensRegisterMessage>::GetOwningArena(register_token);
    if (message_arena != submessage_arena) {
      register_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_token, submessage_arena);
    }
    set_has_register_token();
    transaction_payload_.register_token_ = register_token;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.SigningInput.register_token)
}
void SigningInput::set_allocated_liquid_staking_message(::TW::Aptos::Proto::LiquidStaking* liquid_staking_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_payload();
  if (liquid_staking_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::LiquidStaking>::GetOwningArena(liquid_staking_message);
    if (message_arena != submessage_arena) {
      liquid_staking_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquid_staking_message, submessage_arena);
    }
    set_has_liquid_staking_message();
    transaction_payload_.liquid_staking_message_ = liquid_staking_message;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.SigningInput.liquid_staking_message)
}
void SigningInput::set_allocated_token_transfer_coins(::TW::Aptos::Proto::TokenTransferCoinsMessage* token_transfer_coins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_payload();
  if (token_transfer_coins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Aptos::Proto::TokenTransferCoinsMessage>::GetOwningArena(token_transfer_coins);
    if (message_arena != submessage_arena) {
      token_transfer_coins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_transfer_coins, submessage_arena);
    }
    set_has_token_transfer_coins();
    transaction_payload_.token_transfer_coins_ = token_transfer_coins;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Aptos.Proto.SigningInput.token_transfer_coins)
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  any_encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    any_encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_any_encoded().empty()) {
    any_encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_any_encoded(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&chain_id_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(chain_id_));
  clear_has_transaction_payload();
  switch (from.transaction_payload_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Aptos::Proto::TransferMessage::MergeFrom(from._internal_transfer());
      break;
    }
    case kTokenTransfer: {
      _internal_mutable_token_transfer()->::TW::Aptos::Proto::TokenTransferMessage::MergeFrom(from._internal_token_transfer());
      break;
    }
    case kCreateAccount: {
      _internal_mutable_create_account()->::TW::Aptos::Proto::CreateAccountMessage::MergeFrom(from._internal_create_account());
      break;
    }
    case kNftMessage: {
      _internal_mutable_nft_message()->::TW::Aptos::Proto::NftMessage::MergeFrom(from._internal_nft_message());
      break;
    }
    case kRegisterToken: {
      _internal_mutable_register_token()->::TW::Aptos::Proto::ManagedTokensRegisterMessage::MergeFrom(from._internal_register_token());
      break;
    }
    case kLiquidStakingMessage: {
      _internal_mutable_liquid_staking_message()->::TW::Aptos::Proto::LiquidStaking::MergeFrom(from._internal_liquid_staking_message());
      break;
    }
    case kTokenTransferCoins: {
      _internal_mutable_token_transfer_coins()->::TW::Aptos::Proto::TokenTransferCoinsMessage::MergeFrom(from._internal_token_transfer_coins());
      break;
    }
    case TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
any_encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  any_encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chain_id_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(chain_id_));
clear_has_transaction_payload();
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  any_encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_transaction_payload()) {
    clear_transaction_payload();
  }
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::clear_transaction_payload() {
// @@protoc_insertion_point(one_of_clear_start:TW.Aptos.Proto.SigningInput)
  switch (transaction_payload_case()) {
    case kTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_payload_.transfer_;
      }
      break;
    }
    case kTokenTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_payload_.token_transfer_;
      }
      break;
    }
    case kCreateAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_payload_.create_account_;
      }
      break;
    }
    case kNftMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_payload_.nft_message_;
      }
      break;
    }
    case kRegisterToken: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_payload_.register_token_;
      }
      break;
    }
    case kLiquidStakingMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_payload_.liquid_staking_message_;
      }
      break;
    }
    case kTokenTransferCoins: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_payload_.token_transfer_coins_;
      }
      break;
    }
    case TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_PAYLOAD_NOT_SET;
}


void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty();
  private_key_.ClearToEmpty();
  any_encoded_.ClearToEmpty();
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chain_id_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(chain_id_));
  clear_transaction_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.SigningInput.sender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_gas_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_gas_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_unit_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          gas_unit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 expiration_timestamp_secs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          expiration_timestamp_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chain_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string any_encoded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_any_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.SigningInput.any_encoded"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.TransferMessage transfer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.TokenTransferMessage token_transfer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.CreateAccountMessage create_account = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.NftMessage nft_message = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_nft_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.ManagedTokensRegisterMessage register_token = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.LiquidStaking liquid_staking_message = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquid_staking_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.TokenTransferCoinsMessage token_transfer_coins = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_transfer_coins(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.SigningInput.sender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // int64 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sequence_number(), target);
  }

  // uint64 max_gas_amount = 3;
  if (this->_internal_max_gas_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_gas_amount(), target);
  }

  // uint64 gas_unit_price = 4;
  if (this->_internal_gas_unit_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas_unit_price(), target);
  }

  // uint64 expiration_timestamp_secs = 5;
  if (this->_internal_expiration_timestamp_secs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_expiration_timestamp_secs(), target);
  }

  // uint32 chain_id = 6;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_chain_id(), target);
  }

  // bytes private_key = 7;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_private_key(), target);
  }

  // string any_encoded = 8;
  if (!this->_internal_any_encoded().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_any_encoded().data(), static_cast<int>(this->_internal_any_encoded().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.SigningInput.any_encoded");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_any_encoded(), target);
  }

  // .TW.Aptos.Proto.TransferMessage transfer = 9;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::transfer(this), target, stream);
  }

  // .TW.Aptos.Proto.TokenTransferMessage token_transfer = 10;
  if (_internal_has_token_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::token_transfer(this), target, stream);
  }

  // .TW.Aptos.Proto.CreateAccountMessage create_account = 11;
  if (_internal_has_create_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::create_account(this), target, stream);
  }

  // .TW.Aptos.Proto.NftMessage nft_message = 12;
  if (_internal_has_nft_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::nft_message(this), target, stream);
  }

  // .TW.Aptos.Proto.ManagedTokensRegisterMessage register_token = 13;
  if (_internal_has_register_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::register_token(this), target, stream);
  }

  // .TW.Aptos.Proto.LiquidStaking liquid_staking_message = 14;
  if (_internal_has_liquid_staking_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::liquid_staking_message(this), target, stream);
  }

  // .TW.Aptos.Proto.TokenTransferCoinsMessage token_transfer_coins = 15;
  if (_internal_has_token_transfer_coins()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::token_transfer_coins(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // bytes private_key = 7;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // string any_encoded = 8;
  if (!this->_internal_any_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_any_encoded());
  }

  // int64 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
  }

  // uint64 max_gas_amount = 3;
  if (this->_internal_max_gas_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_max_gas_amount());
  }

  // uint64 gas_unit_price = 4;
  if (this->_internal_gas_unit_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_unit_price());
  }

  // uint64 expiration_timestamp_secs = 5;
  if (this->_internal_expiration_timestamp_secs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_expiration_timestamp_secs());
  }

  // uint32 chain_id = 6;
  if (this->_internal_chain_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chain_id());
  }

  switch (transaction_payload_case()) {
    // .TW.Aptos.Proto.TransferMessage transfer = 9;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_payload_.transfer_);
      break;
    }
    // .TW.Aptos.Proto.TokenTransferMessage token_transfer = 10;
    case kTokenTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_payload_.token_transfer_);
      break;
    }
    // .TW.Aptos.Proto.CreateAccountMessage create_account = 11;
    case kCreateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_payload_.create_account_);
      break;
    }
    // .TW.Aptos.Proto.NftMessage nft_message = 12;
    case kNftMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_payload_.nft_message_);
      break;
    }
    // .TW.Aptos.Proto.ManagedTokensRegisterMessage register_token = 13;
    case kRegisterToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_payload_.register_token_);
      break;
    }
    // .TW.Aptos.Proto.LiquidStaking liquid_staking_message = 14;
    case kLiquidStakingMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_payload_.liquid_staking_message_);
      break;
    }
    // .TW.Aptos.Proto.TokenTransferCoinsMessage token_transfer_coins = 15;
    case kTokenTransferCoins: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_payload_.token_transfer_coins_);
      break;
    }
    case TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_any_encoded().empty()) {
    _internal_set_any_encoded(from._internal_any_encoded());
  }
  if (from._internal_sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_max_gas_amount() != 0) {
    _internal_set_max_gas_amount(from._internal_max_gas_amount());
  }
  if (from._internal_gas_unit_price() != 0) {
    _internal_set_gas_unit_price(from._internal_gas_unit_price());
  }
  if (from._internal_expiration_timestamp_secs() != 0) {
    _internal_set_expiration_timestamp_secs(from._internal_expiration_timestamp_secs());
  }
  if (from._internal_chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  switch (from.transaction_payload_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Aptos::Proto::TransferMessage::MergeFrom(from._internal_transfer());
      break;
    }
    case kTokenTransfer: {
      _internal_mutable_token_transfer()->::TW::Aptos::Proto::TokenTransferMessage::MergeFrom(from._internal_token_transfer());
      break;
    }
    case kCreateAccount: {
      _internal_mutable_create_account()->::TW::Aptos::Proto::CreateAccountMessage::MergeFrom(from._internal_create_account());
      break;
    }
    case kNftMessage: {
      _internal_mutable_nft_message()->::TW::Aptos::Proto::NftMessage::MergeFrom(from._internal_nft_message());
      break;
    }
    case kRegisterToken: {
      _internal_mutable_register_token()->::TW::Aptos::Proto::ManagedTokensRegisterMessage::MergeFrom(from._internal_register_token());
      break;
    }
    case kLiquidStakingMessage: {
      _internal_mutable_liquid_staking_message()->::TW::Aptos::Proto::LiquidStaking::MergeFrom(from._internal_liquid_staking_message());
      break;
    }
    case kTokenTransferCoins: {
      _internal_mutable_token_transfer_coins()->::TW::Aptos::Proto::TokenTransferCoinsMessage::MergeFrom(from._internal_token_transfer_coins());
      break;
    }
    case TRANSACTION_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &any_encoded_, lhs_arena,
      &other->any_encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, chain_id_)
      + sizeof(SigningInput::chain_id_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, sequence_number_)>(
          reinterpret_cast<char*>(&sequence_number_),
          reinterpret_cast<char*>(&other->sequence_number_));
  swap(transaction_payload_, other->transaction_payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[14]);
}

// ===================================================================

class TransactionAuthenticator::_Internal {
 public:
};

TransactionAuthenticator::TransactionAuthenticator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.TransactionAuthenticator)
}
TransactionAuthenticator::TransactionAuthenticator(const TransactionAuthenticator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.TransactionAuthenticator)
}

inline void TransactionAuthenticator::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionAuthenticator::~TransactionAuthenticator() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.TransactionAuthenticator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionAuthenticator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionAuthenticator::ArenaDtor(void* object) {
  TransactionAuthenticator* _this = reinterpret_cast< TransactionAuthenticator* >(object);
  (void)_this;
}
void TransactionAuthenticator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionAuthenticator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionAuthenticator::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.TransactionAuthenticator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionAuthenticator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionAuthenticator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.TransactionAuthenticator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.TransactionAuthenticator)
  return target;
}

size_t TransactionAuthenticator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.TransactionAuthenticator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionAuthenticator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionAuthenticator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionAuthenticator::GetClassData() const { return &_class_data_; }

void TransactionAuthenticator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionAuthenticator *>(to)->MergeFrom(
      static_cast<const TransactionAuthenticator &>(from));
}


void TransactionAuthenticator::MergeFrom(const TransactionAuthenticator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.TransactionAuthenticator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionAuthenticator::CopyFrom(const TransactionAuthenticator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.TransactionAuthenticator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAuthenticator::IsInitialized() const {
  return true;
}

void TransactionAuthenticator::InternalSwap(TransactionAuthenticator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionAuthenticator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[15]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
  static const ::TW::Aptos::Proto::TransactionAuthenticator& authenticator(const SigningOutput* msg);
};

const ::TW::Aptos::Proto::TransactionAuthenticator&
SigningOutput::_Internal::authenticator(const SigningOutput* msg) {
  return *msg->authenticator_;
}
SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Aptos.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_txn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_txn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_txn().empty()) {
    raw_txn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_txn(), 
      GetArenaForAllocation());
  }
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_json().empty()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_authenticator()) {
    authenticator_ = new ::TW::Aptos::Proto::TransactionAuthenticator(*from.authenticator_);
  } else {
    authenticator_ = nullptr;
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Aptos.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
raw_txn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_txn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&authenticator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&authenticator_)) + sizeof(error_));
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Aptos.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_txn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authenticator_;
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Aptos.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_txn_.ClearToEmpty();
  encoded_.ClearToEmpty();
  json_.ClearToEmpty();
  error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && authenticator_ != nullptr) {
    delete authenticator_;
  }
  authenticator_ = nullptr;
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes raw_txn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw_txn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Aptos.Proto.TransactionAuthenticator authenticator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_authenticator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string json = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.SigningOutput.json"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Aptos.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Aptos.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw_txn = 1;
  if (!this->_internal_raw_txn().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_raw_txn(), target);
  }

  // .TW.Aptos.Proto.TransactionAuthenticator authenticator = 2;
  if (this->_internal_has_authenticator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::authenticator(this), target, stream);
  }

  // bytes encoded = 3;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_encoded(), target);
  }

  // string json = 4;
  if (!this->_internal_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.SigningOutput.json");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json(), target);
  }

  // .TW.Common.Proto.SigningError error = 5;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_error(), target);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Aptos.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Aptos.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Aptos.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw_txn = 1;
  if (!this->_internal_raw_txn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_txn());
  }

  // bytes encoded = 3;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // string json = 4;
  if (!this->_internal_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .TW.Aptos.Proto.TransactionAuthenticator authenticator = 2;
  if (this->_internal_has_authenticator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *authenticator_);
  }

  // .TW.Common.Proto.SigningError error = 5;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Aptos.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_txn().empty()) {
    _internal_set_raw_txn(from._internal_raw_txn());
  }
  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_json().empty()) {
    _internal_set_json(from._internal_json());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_authenticator()) {
    _internal_mutable_authenticator()->::TW::Aptos::Proto::TransactionAuthenticator::MergeFrom(from._internal_authenticator());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Aptos.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_txn_, lhs_arena,
      &other->raw_txn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_, lhs_arena,
      &other->json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningOutput, error_)
      + sizeof(SigningOutput::error_)
      - PROTOBUF_FIELD_OFFSET(SigningOutput, authenticator_)>(
          reinterpret_cast<char*>(&authenticator_),
          reinterpret_cast<char*>(&other->authenticator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Aptos_2eproto_getter, &descriptor_table_Aptos_2eproto_once,
      file_level_metadata_Aptos_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Aptos
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::TransferMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::TransferMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::TransferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::StructTag* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::StructTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::StructTag >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::TokenTransferMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::TokenTransferMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::TokenTransferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::TokenTransferCoinsMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::TokenTransferCoinsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::TokenTransferCoinsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::ManagedTokensRegisterMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::ManagedTokensRegisterMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::ManagedTokensRegisterMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::CreateAccountMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::CreateAccountMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::CreateAccountMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::OfferNftMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::OfferNftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::OfferNftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::CancelOfferNftMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::CancelOfferNftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::CancelOfferNftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::ClaimNftMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::ClaimNftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::ClaimNftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::TortugaClaim* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::TortugaClaim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::TortugaClaim >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::TortugaStake* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::TortugaStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::TortugaStake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::TortugaUnstake* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::TortugaUnstake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::TortugaUnstake >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::LiquidStaking* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::LiquidStaking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::LiquidStaking >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::NftMessage* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::NftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::NftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::TransactionAuthenticator* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::TransactionAuthenticator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::TransactionAuthenticator >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Aptos::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Aptos::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Aptos::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
