// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Decred.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Decred_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Decred_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Bitcoin.pb.h"
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Decred_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Decred_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Decred_2eproto;
namespace TW {
namespace Decred {
namespace Proto {
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionInput;
struct TransactionInputDefaultTypeInternal;
extern TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
class TransactionOutput;
struct TransactionOutputDefaultTypeInternal;
extern TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
}  // namespace Proto
}  // namespace Decred
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::Decred::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::Decred::Proto::SigningOutput>(Arena*);
template<> ::TW::Decred::Proto::Transaction* Arena::CreateMaybeMessage<::TW::Decred::Proto::Transaction>(Arena*);
template<> ::TW::Decred::Proto::TransactionInput* Arena::CreateMaybeMessage<::TW::Decred::Proto::TransactionInput>(Arena*);
template<> ::TW::Decred::Proto::TransactionOutput* Arena::CreateMaybeMessage<::TW::Decred::Proto::TransactionOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace Decred {
namespace Proto {

// ===================================================================

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Decred.Proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Decred.Proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kSerializeTypeFieldNumber = 1,
    kVersionFieldNumber = 2,
    kLockTimeFieldNumber = 5,
    kExpiryFieldNumber = 6,
  };
  // repeated .TW.Decred.Proto.TransactionInput inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::TW::Decred::Proto::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionInput >*
      mutable_inputs();
  private:
  const ::TW::Decred::Proto::TransactionInput& _internal_inputs(int index) const;
  ::TW::Decred::Proto::TransactionInput* _internal_add_inputs();
  public:
  const ::TW::Decred::Proto::TransactionInput& inputs(int index) const;
  ::TW::Decred::Proto::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionInput >&
      inputs() const;

  // repeated .TW.Decred.Proto.TransactionOutput outputs = 4;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::TW::Decred::Proto::TransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionOutput >*
      mutable_outputs();
  private:
  const ::TW::Decred::Proto::TransactionOutput& _internal_outputs(int index) const;
  ::TW::Decred::Proto::TransactionOutput* _internal_add_outputs();
  public:
  const ::TW::Decred::Proto::TransactionOutput& outputs(int index) const;
  ::TW::Decred::Proto::TransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionOutput >&
      outputs() const;

  // uint32 serializeType = 1;
  void clear_serializetype();
  uint32_t serializetype() const;
  void set_serializetype(uint32_t value);
  private:
  uint32_t _internal_serializetype() const;
  void _internal_set_serializetype(uint32_t value);
  public:

  // uint32 version = 2;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint32 lockTime = 5;
  void clear_locktime();
  uint32_t locktime() const;
  void set_locktime(uint32_t value);
  private:
  uint32_t _internal_locktime() const;
  void _internal_set_locktime(uint32_t value);
  public:

  // uint32 expiry = 6;
  void clear_expiry();
  uint32_t expiry() const;
  void set_expiry(uint32_t value);
  private:
  uint32_t _internal_expiry() const;
  void _internal_set_expiry(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Decred.Proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionOutput > outputs_;
  uint32_t serializetype_;
  uint32_t version_;
  uint32_t locktime_;
  uint32_t expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Decred_2eproto;
};
// -------------------------------------------------------------------

class TransactionInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Decred.Proto.TransactionInput) */ {
 public:
  inline TransactionInput() : TransactionInput(nullptr) {}
  ~TransactionInput() override;
  explicit constexpr TransactionInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionInput(const TransactionInput& from);
  TransactionInput(TransactionInput&& from) noexcept
    : TransactionInput() {
    *this = ::std::move(from);
  }

  inline TransactionInput& operator=(const TransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInput& operator=(TransactionInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionInput* internal_default_instance() {
    return reinterpret_cast<const TransactionInput*>(
               &_TransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionInput& a, TransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Decred.Proto.TransactionInput";
  }
  protected:
  explicit TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 6,
    kPreviousOutputFieldNumber = 1,
    kValueInFieldNumber = 3,
    kSequenceFieldNumber = 2,
    kBlockHeightFieldNumber = 4,
    kBlockIndexFieldNumber = 5,
  };
  // bytes script = 6;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // .TW.Bitcoin.Proto.OutPoint previousOutput = 1;
  bool has_previousoutput() const;
  private:
  bool _internal_has_previousoutput() const;
  public:
  void clear_previousoutput();
  const ::TW::Bitcoin::Proto::OutPoint& previousoutput() const;
  PROTOBUF_NODISCARD ::TW::Bitcoin::Proto::OutPoint* release_previousoutput();
  ::TW::Bitcoin::Proto::OutPoint* mutable_previousoutput();
  void set_allocated_previousoutput(::TW::Bitcoin::Proto::OutPoint* previousoutput);
  private:
  const ::TW::Bitcoin::Proto::OutPoint& _internal_previousoutput() const;
  ::TW::Bitcoin::Proto::OutPoint* _internal_mutable_previousoutput();
  public:
  void unsafe_arena_set_allocated_previousoutput(
      ::TW::Bitcoin::Proto::OutPoint* previousoutput);
  ::TW::Bitcoin::Proto::OutPoint* unsafe_arena_release_previousoutput();

  // int64 valueIn = 3;
  void clear_valuein();
  int64_t valuein() const;
  void set_valuein(int64_t value);
  private:
  int64_t _internal_valuein() const;
  void _internal_set_valuein(int64_t value);
  public:

  // uint32 sequence = 2;
  void clear_sequence();
  uint32_t sequence() const;
  void set_sequence(uint32_t value);
  private:
  uint32_t _internal_sequence() const;
  void _internal_set_sequence(uint32_t value);
  public:

  // uint32 blockHeight = 4;
  void clear_blockheight();
  uint32_t blockheight() const;
  void set_blockheight(uint32_t value);
  private:
  uint32_t _internal_blockheight() const;
  void _internal_set_blockheight(uint32_t value);
  public:

  // uint32 blockIndex = 5;
  void clear_blockindex();
  uint32_t blockindex() const;
  void set_blockindex(uint32_t value);
  private:
  uint32_t _internal_blockindex() const;
  void _internal_set_blockindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Decred.Proto.TransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  ::TW::Bitcoin::Proto::OutPoint* previousoutput_;
  int64_t valuein_;
  uint32_t sequence_;
  uint32_t blockheight_;
  uint32_t blockindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Decred_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Decred.Proto.TransactionOutput) */ {
 public:
  inline TransactionOutput() : TransactionOutput(nullptr) {}
  ~TransactionOutput() override;
  explicit constexpr TransactionOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOutput(const TransactionOutput& from);
  TransactionOutput(TransactionOutput&& from) noexcept
    : TransactionOutput() {
    *this = ::std::move(from);
  }

  inline TransactionOutput& operator=(const TransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutput& operator=(TransactionOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOutput* internal_default_instance() {
    return reinterpret_cast<const TransactionOutput*>(
               &_TransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionOutput& a, TransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Decred.Proto.TransactionOutput";
  }
  protected:
  explicit TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 3,
    kValueFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // bytes script = 3;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // uint32 version = 2;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Decred.Proto.TransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  int64_t value_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Decred_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.Decred.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.Decred.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kErrorMessageFieldNumber = 5,
    kTransactionFieldNumber = 1,
    kErrorFieldNumber = 4,
  };
  // bytes encoded = 2;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string transaction_id = 3;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // string error_message = 5;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Decred.Proto.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::TW::Decred::Proto::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::TW::Decred::Proto::Transaction* release_transaction();
  ::TW::Decred::Proto::Transaction* mutable_transaction();
  void set_allocated_transaction(::TW::Decred::Proto::Transaction* transaction);
  private:
  const ::TW::Decred::Proto::Transaction& _internal_transaction() const;
  ::TW::Decred::Proto::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::TW::Decred::Proto::Transaction* transaction);
  ::TW::Decred::Proto::Transaction* unsafe_arena_release_transaction();

  // .TW.Common.Proto.SigningError error = 4;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.Decred.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::TW::Decred::Proto::Transaction* transaction_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Decred_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// uint32 serializeType = 1;
inline void Transaction::clear_serializetype() {
  serializetype_ = 0u;
}
inline uint32_t Transaction::_internal_serializetype() const {
  return serializetype_;
}
inline uint32_t Transaction::serializetype() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.Transaction.serializeType)
  return _internal_serializetype();
}
inline void Transaction::_internal_set_serializetype(uint32_t value) {
  
  serializetype_ = value;
}
inline void Transaction::set_serializetype(uint32_t value) {
  _internal_set_serializetype(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.Transaction.serializeType)
}

// uint32 version = 2;
inline void Transaction::clear_version() {
  version_ = 0u;
}
inline uint32_t Transaction::_internal_version() const {
  return version_;
}
inline uint32_t Transaction::version() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.Transaction.version)
  return _internal_version();
}
inline void Transaction::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void Transaction::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.Transaction.version)
}

// repeated .TW.Decred.Proto.TransactionInput inputs = 3;
inline int Transaction::_internal_inputs_size() const {
  return inputs_.size();
}
inline int Transaction::inputs_size() const {
  return _internal_inputs_size();
}
inline void Transaction::clear_inputs() {
  inputs_.Clear();
}
inline ::TW::Decred::Proto::TransactionInput* Transaction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.Transaction.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionInput >*
Transaction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Decred.Proto.Transaction.inputs)
  return &inputs_;
}
inline const ::TW::Decred::Proto::TransactionInput& Transaction::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::TW::Decred::Proto::TransactionInput& Transaction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.Transaction.inputs)
  return _internal_inputs(index);
}
inline ::TW::Decred::Proto::TransactionInput* Transaction::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::TW::Decred::Proto::TransactionInput* Transaction::add_inputs() {
  ::TW::Decred::Proto::TransactionInput* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:TW.Decred.Proto.Transaction.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionInput >&
Transaction::inputs() const {
  // @@protoc_insertion_point(field_list:TW.Decred.Proto.Transaction.inputs)
  return inputs_;
}

// repeated .TW.Decred.Proto.TransactionOutput outputs = 4;
inline int Transaction::_internal_outputs_size() const {
  return outputs_.size();
}
inline int Transaction::outputs_size() const {
  return _internal_outputs_size();
}
inline void Transaction::clear_outputs() {
  outputs_.Clear();
}
inline ::TW::Decred::Proto::TransactionOutput* Transaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.Transaction.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionOutput >*
Transaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:TW.Decred.Proto.Transaction.outputs)
  return &outputs_;
}
inline const ::TW::Decred::Proto::TransactionOutput& Transaction::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::TW::Decred::Proto::TransactionOutput& Transaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.Transaction.outputs)
  return _internal_outputs(index);
}
inline ::TW::Decred::Proto::TransactionOutput* Transaction::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::TW::Decred::Proto::TransactionOutput* Transaction::add_outputs() {
  ::TW::Decred::Proto::TransactionOutput* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:TW.Decred.Proto.Transaction.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TW::Decred::Proto::TransactionOutput >&
Transaction::outputs() const {
  // @@protoc_insertion_point(field_list:TW.Decred.Proto.Transaction.outputs)
  return outputs_;
}

// uint32 lockTime = 5;
inline void Transaction::clear_locktime() {
  locktime_ = 0u;
}
inline uint32_t Transaction::_internal_locktime() const {
  return locktime_;
}
inline uint32_t Transaction::locktime() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.Transaction.lockTime)
  return _internal_locktime();
}
inline void Transaction::_internal_set_locktime(uint32_t value) {
  
  locktime_ = value;
}
inline void Transaction::set_locktime(uint32_t value) {
  _internal_set_locktime(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.Transaction.lockTime)
}

// uint32 expiry = 6;
inline void Transaction::clear_expiry() {
  expiry_ = 0u;
}
inline uint32_t Transaction::_internal_expiry() const {
  return expiry_;
}
inline uint32_t Transaction::expiry() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.Transaction.expiry)
  return _internal_expiry();
}
inline void Transaction::_internal_set_expiry(uint32_t value) {
  
  expiry_ = value;
}
inline void Transaction::set_expiry(uint32_t value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.Transaction.expiry)
}

// -------------------------------------------------------------------

// TransactionInput

// .TW.Bitcoin.Proto.OutPoint previousOutput = 1;
inline bool TransactionInput::_internal_has_previousoutput() const {
  return this != internal_default_instance() && previousoutput_ != nullptr;
}
inline bool TransactionInput::has_previousoutput() const {
  return _internal_has_previousoutput();
}
inline const ::TW::Bitcoin::Proto::OutPoint& TransactionInput::_internal_previousoutput() const {
  const ::TW::Bitcoin::Proto::OutPoint* p = previousoutput_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Bitcoin::Proto::OutPoint&>(
      ::TW::Bitcoin::Proto::_OutPoint_default_instance_);
}
inline const ::TW::Bitcoin::Proto::OutPoint& TransactionInput::previousoutput() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionInput.previousOutput)
  return _internal_previousoutput();
}
inline void TransactionInput::unsafe_arena_set_allocated_previousoutput(
    ::TW::Bitcoin::Proto::OutPoint* previousoutput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousoutput_);
  }
  previousoutput_ = previousoutput;
  if (previousoutput) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Decred.Proto.TransactionInput.previousOutput)
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::release_previousoutput() {
  
  ::TW::Bitcoin::Proto::OutPoint* temp = previousoutput_;
  previousoutput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::unsafe_arena_release_previousoutput() {
  // @@protoc_insertion_point(field_release:TW.Decred.Proto.TransactionInput.previousOutput)
  
  ::TW::Bitcoin::Proto::OutPoint* temp = previousoutput_;
  previousoutput_ = nullptr;
  return temp;
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::_internal_mutable_previousoutput() {
  
  if (previousoutput_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Bitcoin::Proto::OutPoint>(GetArenaForAllocation());
    previousoutput_ = p;
  }
  return previousoutput_;
}
inline ::TW::Bitcoin::Proto::OutPoint* TransactionInput::mutable_previousoutput() {
  ::TW::Bitcoin::Proto::OutPoint* _msg = _internal_mutable_previousoutput();
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.TransactionInput.previousOutput)
  return _msg;
}
inline void TransactionInput::set_allocated_previousoutput(::TW::Bitcoin::Proto::OutPoint* previousoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousoutput_);
  }
  if (previousoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousoutput));
    if (message_arena != submessage_arena) {
      previousoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previousoutput, submessage_arena);
    }
    
  } else {
    
  }
  previousoutput_ = previousoutput;
  // @@protoc_insertion_point(field_set_allocated:TW.Decred.Proto.TransactionInput.previousOutput)
}

// uint32 sequence = 2;
inline void TransactionInput::clear_sequence() {
  sequence_ = 0u;
}
inline uint32_t TransactionInput::_internal_sequence() const {
  return sequence_;
}
inline uint32_t TransactionInput::sequence() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionInput.sequence)
  return _internal_sequence();
}
inline void TransactionInput::_internal_set_sequence(uint32_t value) {
  
  sequence_ = value;
}
inline void TransactionInput::set_sequence(uint32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionInput.sequence)
}

// int64 valueIn = 3;
inline void TransactionInput::clear_valuein() {
  valuein_ = int64_t{0};
}
inline int64_t TransactionInput::_internal_valuein() const {
  return valuein_;
}
inline int64_t TransactionInput::valuein() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionInput.valueIn)
  return _internal_valuein();
}
inline void TransactionInput::_internal_set_valuein(int64_t value) {
  
  valuein_ = value;
}
inline void TransactionInput::set_valuein(int64_t value) {
  _internal_set_valuein(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionInput.valueIn)
}

// uint32 blockHeight = 4;
inline void TransactionInput::clear_blockheight() {
  blockheight_ = 0u;
}
inline uint32_t TransactionInput::_internal_blockheight() const {
  return blockheight_;
}
inline uint32_t TransactionInput::blockheight() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionInput.blockHeight)
  return _internal_blockheight();
}
inline void TransactionInput::_internal_set_blockheight(uint32_t value) {
  
  blockheight_ = value;
}
inline void TransactionInput::set_blockheight(uint32_t value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionInput.blockHeight)
}

// uint32 blockIndex = 5;
inline void TransactionInput::clear_blockindex() {
  blockindex_ = 0u;
}
inline uint32_t TransactionInput::_internal_blockindex() const {
  return blockindex_;
}
inline uint32_t TransactionInput::blockindex() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionInput.blockIndex)
  return _internal_blockindex();
}
inline void TransactionInput::_internal_set_blockindex(uint32_t value) {
  
  blockindex_ = value;
}
inline void TransactionInput::set_blockindex(uint32_t value) {
  _internal_set_blockindex(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionInput.blockIndex)
}

// bytes script = 6;
inline void TransactionInput::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& TransactionInput::script() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionInput.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInput::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionInput.script)
}
inline std::string* TransactionInput::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.TransactionInput.script)
  return _s;
}
inline const std::string& TransactionInput::_internal_script() const {
  return script_.Get();
}
inline void TransactionInput::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionInput::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionInput::release_script() {
  // @@protoc_insertion_point(field_release:TW.Decred.Proto.TransactionInput.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionInput::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Decred.Proto.TransactionInput.script)
}

// -------------------------------------------------------------------

// TransactionOutput

// int64 value = 1;
inline void TransactionOutput::clear_value() {
  value_ = int64_t{0};
}
inline int64_t TransactionOutput::_internal_value() const {
  return value_;
}
inline int64_t TransactionOutput::value() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionOutput.value)
  return _internal_value();
}
inline void TransactionOutput::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void TransactionOutput::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionOutput.value)
}

// uint32 version = 2;
inline void TransactionOutput::clear_version() {
  version_ = 0u;
}
inline uint32_t TransactionOutput::_internal_version() const {
  return version_;
}
inline uint32_t TransactionOutput::version() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionOutput.version)
  return _internal_version();
}
inline void TransactionOutput::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void TransactionOutput::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionOutput.version)
}

// bytes script = 3;
inline void TransactionOutput::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& TransactionOutput::script() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.TransactionOutput.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutput::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.TransactionOutput.script)
}
inline std::string* TransactionOutput::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.TransactionOutput.script)
  return _s;
}
inline const std::string& TransactionOutput::_internal_script() const {
  return script_.Get();
}
inline void TransactionOutput::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionOutput::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionOutput::release_script() {
  // @@protoc_insertion_point(field_release:TW.Decred.Proto.TransactionOutput.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionOutput::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Decred.Proto.TransactionOutput.script)
}

// -------------------------------------------------------------------

// SigningOutput

// .TW.Decred.Proto.Transaction transaction = 1;
inline bool SigningOutput::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SigningOutput::has_transaction() const {
  return _internal_has_transaction();
}
inline void SigningOutput::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::TW::Decred::Proto::Transaction& SigningOutput::_internal_transaction() const {
  const ::TW::Decred::Proto::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::Decred::Proto::Transaction&>(
      ::TW::Decred::Proto::_Transaction_default_instance_);
}
inline const ::TW::Decred::Proto::Transaction& SigningOutput::transaction() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.SigningOutput.transaction)
  return _internal_transaction();
}
inline void SigningOutput::unsafe_arena_set_allocated_transaction(
    ::TW::Decred::Proto::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.Decred.Proto.SigningOutput.transaction)
}
inline ::TW::Decred::Proto::Transaction* SigningOutput::release_transaction() {
  
  ::TW::Decred::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::Decred::Proto::Transaction* SigningOutput::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:TW.Decred.Proto.SigningOutput.transaction)
  
  ::TW::Decred::Proto::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::TW::Decred::Proto::Transaction* SigningOutput::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::Decred::Proto::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::TW::Decred::Proto::Transaction* SigningOutput::mutable_transaction() {
  ::TW::Decred::Proto::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.SigningOutput.transaction)
  return _msg;
}
inline void SigningOutput::set_allocated_transaction(::TW::Decred::Proto::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Decred::Proto::Transaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:TW.Decred.Proto.SigningOutput.transaction)
}

// bytes encoded = 2;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.Decred.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Decred.Proto.SigningOutput.encoded)
}

// string transaction_id = 3;
inline void SigningOutput::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& SigningOutput::transaction_id() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.SigningOutput.transaction_id)
  return _internal_transaction_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_transaction_id(ArgT0&& arg0, ArgT... args) {
 
 transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.SigningOutput.transaction_id)
}
inline std::string* SigningOutput::mutable_transaction_id() {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.SigningOutput.transaction_id)
  return _s;
}
inline const std::string& SigningOutput::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void SigningOutput::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_transaction_id() {
  // @@protoc_insertion_point(field_release:TW.Decred.Proto.SigningOutput.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transaction_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Decred.Proto.SigningOutput.transaction_id)
}

// .TW.Common.Proto.SigningError error = 4;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.SigningOutput.error)
}

// string error_message = 5;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.Decred.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.Decred.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.Decred.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.Decred.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.Decred.Proto.SigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Decred
}  // namespace TW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Decred_2eproto
