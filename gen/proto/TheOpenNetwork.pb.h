// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TheOpenNetwork.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TheOpenNetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TheOpenNetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TheOpenNetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TheOpenNetwork_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TheOpenNetwork_2eproto;
namespace TW {
namespace TheOpenNetwork {
namespace Proto {
class JettonTransfer;
struct JettonTransferDefaultTypeInternal;
extern JettonTransferDefaultTypeInternal _JettonTransfer_default_instance_;
class SigningInput;
struct SigningInputDefaultTypeInternal;
extern SigningInputDefaultTypeInternal _SigningInput_default_instance_;
class SigningOutput;
struct SigningOutputDefaultTypeInternal;
extern SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
class Transfer;
struct TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace Proto
}  // namespace TheOpenNetwork
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> ::TW::TheOpenNetwork::Proto::JettonTransfer* Arena::CreateMaybeMessage<::TW::TheOpenNetwork::Proto::JettonTransfer>(Arena*);
template<> ::TW::TheOpenNetwork::Proto::SigningInput* Arena::CreateMaybeMessage<::TW::TheOpenNetwork::Proto::SigningInput>(Arena*);
template<> ::TW::TheOpenNetwork::Proto::SigningOutput* Arena::CreateMaybeMessage<::TW::TheOpenNetwork::Proto::SigningOutput>(Arena*);
template<> ::TW::TheOpenNetwork::Proto::Transfer* Arena::CreateMaybeMessage<::TW::TheOpenNetwork::Proto::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TW {
namespace TheOpenNetwork {
namespace Proto {

enum WalletVersion : int {
  WALLET_V3_R1 = 0,
  WALLET_V3_R2 = 1,
  WALLET_V4_R2 = 2,
  WalletVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WalletVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WalletVersion_IsValid(int value);
constexpr WalletVersion WalletVersion_MIN = WALLET_V3_R1;
constexpr WalletVersion WalletVersion_MAX = WALLET_V4_R2;
constexpr int WalletVersion_ARRAYSIZE = WalletVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WalletVersion_descriptor();
template<typename T>
inline const std::string& WalletVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WalletVersion_descriptor(), enum_t_value);
}
inline bool WalletVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WalletVersion>(
    WalletVersion_descriptor(), name, value);
}
enum SendMode : int {
  DEFAULT = 0,
  PAY_FEES_SEPARATELY = 1,
  IGNORE_ACTION_PHASE_ERRORS = 2,
  DESTROY_ON_ZERO_BALANCE = 32,
  ATTACH_ALL_INBOUND_MESSAGE_VALUE = 64,
  ATTACH_ALL_CONTRACT_BALANCE = 128,
  SendMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SendMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SendMode_IsValid(int value);
constexpr SendMode SendMode_MIN = DEFAULT;
constexpr SendMode SendMode_MAX = ATTACH_ALL_CONTRACT_BALANCE;
constexpr int SendMode_ARRAYSIZE = SendMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SendMode_descriptor();
template<typename T>
inline const std::string& SendMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SendMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SendMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SendMode_descriptor(), enum_t_value);
}
inline bool SendMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SendMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SendMode>(
    SendMode_descriptor(), name, value);
}
// ===================================================================

class Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.TheOpenNetwork.Proto.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  ~Transfer() override;
  explicit constexpr Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.TheOpenNetwork.Proto.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestFieldNumber = 2,
    kCommentFieldNumber = 7,
    kWalletVersionFieldNumber = 1,
    kSequenceNumberFieldNumber = 4,
    kAmountFieldNumber = 3,
    kModeFieldNumber = 5,
    kExpireAtFieldNumber = 6,
    kBounceableFieldNumber = 8,
  };
  // string dest = 2;
  void clear_dest();
  const std::string& dest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dest();
  PROTOBUF_NODISCARD std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  private:
  const std::string& _internal_dest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // string comment = 7;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .TW.TheOpenNetwork.Proto.WalletVersion wallet_version = 1;
  void clear_wallet_version();
  ::TW::TheOpenNetwork::Proto::WalletVersion wallet_version() const;
  void set_wallet_version(::TW::TheOpenNetwork::Proto::WalletVersion value);
  private:
  ::TW::TheOpenNetwork::Proto::WalletVersion _internal_wallet_version() const;
  void _internal_set_wallet_version(::TW::TheOpenNetwork::Proto::WalletVersion value);
  public:

  // uint32 sequence_number = 4;
  void clear_sequence_number();
  uint32_t sequence_number() const;
  void set_sequence_number(uint32_t value);
  private:
  uint32_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint32_t value);
  public:

  // uint64 amount = 3;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // uint32 mode = 5;
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // uint32 expire_at = 6;
  void clear_expire_at();
  uint32_t expire_at() const;
  void set_expire_at(uint32_t value);
  private:
  uint32_t _internal_expire_at() const;
  void _internal_set_expire_at(uint32_t value);
  public:

  // bool bounceable = 8;
  void clear_bounceable();
  bool bounceable() const;
  void set_bounceable(bool value);
  private:
  bool _internal_bounceable() const;
  void _internal_set_bounceable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TW.TheOpenNetwork.Proto.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  int wallet_version_;
  uint32_t sequence_number_;
  uint64_t amount_;
  uint32_t mode_;
  uint32_t expire_at_;
  bool bounceable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TheOpenNetwork_2eproto;
};
// -------------------------------------------------------------------

class JettonTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.TheOpenNetwork.Proto.JettonTransfer) */ {
 public:
  inline JettonTransfer() : JettonTransfer(nullptr) {}
  ~JettonTransfer() override;
  explicit constexpr JettonTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JettonTransfer(const JettonTransfer& from);
  JettonTransfer(JettonTransfer&& from) noexcept
    : JettonTransfer() {
    *this = ::std::move(from);
  }

  inline JettonTransfer& operator=(const JettonTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline JettonTransfer& operator=(JettonTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JettonTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const JettonTransfer* internal_default_instance() {
    return reinterpret_cast<const JettonTransfer*>(
               &_JettonTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JettonTransfer& a, JettonTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(JettonTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JettonTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JettonTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JettonTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JettonTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JettonTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JettonTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.TheOpenNetwork.Proto.JettonTransfer";
  }
  protected:
  explicit JettonTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToOwnerFieldNumber = 4,
    kResponseAddressFieldNumber = 5,
    kTransferFieldNumber = 1,
    kQueryIdFieldNumber = 2,
    kJettonAmountFieldNumber = 3,
    kForwardAmountFieldNumber = 6,
  };
  // string to_owner = 4;
  void clear_to_owner();
  const std::string& to_owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_owner();
  PROTOBUF_NODISCARD std::string* release_to_owner();
  void set_allocated_to_owner(std::string* to_owner);
  private:
  const std::string& _internal_to_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_owner(const std::string& value);
  std::string* _internal_mutable_to_owner();
  public:

  // string response_address = 5;
  void clear_response_address();
  const std::string& response_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_address();
  PROTOBUF_NODISCARD std::string* release_response_address();
  void set_allocated_response_address(std::string* response_address);
  private:
  const std::string& _internal_response_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_address(const std::string& value);
  std::string* _internal_mutable_response_address();
  public:

  // .TW.TheOpenNetwork.Proto.Transfer transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::TheOpenNetwork::Proto::Transfer& transfer() const;
  PROTOBUF_NODISCARD ::TW::TheOpenNetwork::Proto::Transfer* release_transfer();
  ::TW::TheOpenNetwork::Proto::Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::TheOpenNetwork::Proto::Transfer* transfer);
  private:
  const ::TW::TheOpenNetwork::Proto::Transfer& _internal_transfer() const;
  ::TW::TheOpenNetwork::Proto::Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::TheOpenNetwork::Proto::Transfer* transfer);
  ::TW::TheOpenNetwork::Proto::Transfer* unsafe_arena_release_transfer();

  // uint64 query_id = 2;
  void clear_query_id();
  uint64_t query_id() const;
  void set_query_id(uint64_t value);
  private:
  uint64_t _internal_query_id() const;
  void _internal_set_query_id(uint64_t value);
  public:

  // uint64 jetton_amount = 3;
  void clear_jetton_amount();
  uint64_t jetton_amount() const;
  void set_jetton_amount(uint64_t value);
  private:
  uint64_t _internal_jetton_amount() const;
  void _internal_set_jetton_amount(uint64_t value);
  public:

  // uint64 forward_amount = 6;
  void clear_forward_amount();
  uint64_t forward_amount() const;
  void set_forward_amount(uint64_t value);
  private:
  uint64_t _internal_forward_amount() const;
  void _internal_set_forward_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TW.TheOpenNetwork.Proto.JettonTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_address_;
  ::TW::TheOpenNetwork::Proto::Transfer* transfer_;
  uint64_t query_id_;
  uint64_t jetton_amount_;
  uint64_t forward_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TheOpenNetwork_2eproto;
};
// -------------------------------------------------------------------

class SigningInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.TheOpenNetwork.Proto.SigningInput) */ {
 public:
  inline SigningInput() : SigningInput(nullptr) {}
  ~SigningInput() override;
  explicit constexpr SigningInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInput(const SigningInput& from);
  SigningInput(SigningInput&& from) noexcept
    : SigningInput() {
    *this = ::std::move(from);
  }

  inline SigningInput& operator=(const SigningInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInput& operator=(SigningInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInput& default_instance() {
    return *internal_default_instance();
  }
  enum ActionOneofCase {
    kTransfer = 2,
    kJettonTransfer = 3,
    ACTION_ONEOF_NOT_SET = 0,
  };

  static inline const SigningInput* internal_default_instance() {
    return reinterpret_cast<const SigningInput*>(
               &_SigningInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SigningInput& a, SigningInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.TheOpenNetwork.Proto.SigningInput";
  }
  protected:
  explicit SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kTransferFieldNumber = 2,
    kJettonTransferFieldNumber = 3,
  };
  // bytes private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // .TW.TheOpenNetwork.Proto.Transfer transfer = 2;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::TW::TheOpenNetwork::Proto::Transfer& transfer() const;
  PROTOBUF_NODISCARD ::TW::TheOpenNetwork::Proto::Transfer* release_transfer();
  ::TW::TheOpenNetwork::Proto::Transfer* mutable_transfer();
  void set_allocated_transfer(::TW::TheOpenNetwork::Proto::Transfer* transfer);
  private:
  const ::TW::TheOpenNetwork::Proto::Transfer& _internal_transfer() const;
  ::TW::TheOpenNetwork::Proto::Transfer* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::TW::TheOpenNetwork::Proto::Transfer* transfer);
  ::TW::TheOpenNetwork::Proto::Transfer* unsafe_arena_release_transfer();

  // .TW.TheOpenNetwork.Proto.JettonTransfer jetton_transfer = 3;
  bool has_jetton_transfer() const;
  private:
  bool _internal_has_jetton_transfer() const;
  public:
  void clear_jetton_transfer();
  const ::TW::TheOpenNetwork::Proto::JettonTransfer& jetton_transfer() const;
  PROTOBUF_NODISCARD ::TW::TheOpenNetwork::Proto::JettonTransfer* release_jetton_transfer();
  ::TW::TheOpenNetwork::Proto::JettonTransfer* mutable_jetton_transfer();
  void set_allocated_jetton_transfer(::TW::TheOpenNetwork::Proto::JettonTransfer* jetton_transfer);
  private:
  const ::TW::TheOpenNetwork::Proto::JettonTransfer& _internal_jetton_transfer() const;
  ::TW::TheOpenNetwork::Proto::JettonTransfer* _internal_mutable_jetton_transfer();
  public:
  void unsafe_arena_set_allocated_jetton_transfer(
      ::TW::TheOpenNetwork::Proto::JettonTransfer* jetton_transfer);
  ::TW::TheOpenNetwork::Proto::JettonTransfer* unsafe_arena_release_jetton_transfer();

  void clear_action_oneof();
  ActionOneofCase action_oneof_case() const;
  // @@protoc_insertion_point(class_scope:TW.TheOpenNetwork.Proto.SigningInput)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_jetton_transfer();

  inline bool has_action_oneof() const;
  inline void clear_has_action_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  union ActionOneofUnion {
    constexpr ActionOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TW::TheOpenNetwork::Proto::Transfer* transfer_;
    ::TW::TheOpenNetwork::Proto::JettonTransfer* jetton_transfer_;
  } action_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_TheOpenNetwork_2eproto;
};
// -------------------------------------------------------------------

class SigningOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TW.TheOpenNetwork.Proto.SigningOutput) */ {
 public:
  inline SigningOutput() : SigningOutput(nullptr) {}
  ~SigningOutput() override;
  explicit constexpr SigningOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningOutput(const SigningOutput& from);
  SigningOutput(SigningOutput&& from) noexcept
    : SigningOutput() {
    *this = ::std::move(from);
  }

  inline SigningOutput& operator=(const SigningOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningOutput& operator=(SigningOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningOutput* internal_default_instance() {
    return reinterpret_cast<const SigningOutput*>(
               &_SigningOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningOutput& a, SigningOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigningOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TW.TheOpenNetwork.Proto.SigningOutput";
  }
  protected:
  explicit SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kErrorFieldNumber = 2,
  };
  // string encoded = 1;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .TW.Common.Proto.SigningError error = 2;
  void clear_error();
  ::TW::Common::Proto::SigningError error() const;
  void set_error(::TW::Common::Proto::SigningError value);
  private:
  ::TW::Common::Proto::SigningError _internal_error() const;
  void _internal_set_error(::TW::Common::Proto::SigningError value);
  public:

  // @@protoc_insertion_point(class_scope:TW.TheOpenNetwork.Proto.SigningOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TheOpenNetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// .TW.TheOpenNetwork.Proto.WalletVersion wallet_version = 1;
inline void Transfer::clear_wallet_version() {
  wallet_version_ = 0;
}
inline ::TW::TheOpenNetwork::Proto::WalletVersion Transfer::_internal_wallet_version() const {
  return static_cast< ::TW::TheOpenNetwork::Proto::WalletVersion >(wallet_version_);
}
inline ::TW::TheOpenNetwork::Proto::WalletVersion Transfer::wallet_version() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.wallet_version)
  return _internal_wallet_version();
}
inline void Transfer::_internal_set_wallet_version(::TW::TheOpenNetwork::Proto::WalletVersion value) {
  
  wallet_version_ = value;
}
inline void Transfer::set_wallet_version(::TW::TheOpenNetwork::Proto::WalletVersion value) {
  _internal_set_wallet_version(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.wallet_version)
}

// string dest = 2;
inline void Transfer::clear_dest() {
  dest_.ClearToEmpty();
}
inline const std::string& Transfer::dest() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.dest)
  return _internal_dest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transfer::set_dest(ArgT0&& arg0, ArgT... args) {
 
 dest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.dest)
}
inline std::string* Transfer::mutable_dest() {
  std::string* _s = _internal_mutable_dest();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.Transfer.dest)
  return _s;
}
inline const std::string& Transfer::_internal_dest() const {
  return dest_.Get();
}
inline void Transfer::_internal_set_dest(const std::string& value) {
  
  dest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transfer::_internal_mutable_dest() {
  
  return dest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transfer::release_dest() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.Transfer.dest)
  return dest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transfer::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dest_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.Transfer.dest)
}

// uint64 amount = 3;
inline void Transfer::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t Transfer::_internal_amount() const {
  return amount_;
}
inline uint64_t Transfer::amount() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void Transfer::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.amount)
}

// uint32 sequence_number = 4;
inline void Transfer::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline uint32_t Transfer::_internal_sequence_number() const {
  return sequence_number_;
}
inline uint32_t Transfer::sequence_number() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.sequence_number)
  return _internal_sequence_number();
}
inline void Transfer::_internal_set_sequence_number(uint32_t value) {
  
  sequence_number_ = value;
}
inline void Transfer::set_sequence_number(uint32_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.sequence_number)
}

// uint32 mode = 5;
inline void Transfer::clear_mode() {
  mode_ = 0u;
}
inline uint32_t Transfer::_internal_mode() const {
  return mode_;
}
inline uint32_t Transfer::mode() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.mode)
  return _internal_mode();
}
inline void Transfer::_internal_set_mode(uint32_t value) {
  
  mode_ = value;
}
inline void Transfer::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.mode)
}

// uint32 expire_at = 6;
inline void Transfer::clear_expire_at() {
  expire_at_ = 0u;
}
inline uint32_t Transfer::_internal_expire_at() const {
  return expire_at_;
}
inline uint32_t Transfer::expire_at() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.expire_at)
  return _internal_expire_at();
}
inline void Transfer::_internal_set_expire_at(uint32_t value) {
  
  expire_at_ = value;
}
inline void Transfer::set_expire_at(uint32_t value) {
  _internal_set_expire_at(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.expire_at)
}

// string comment = 7;
inline void Transfer::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& Transfer::comment() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transfer::set_comment(ArgT0&& arg0, ArgT... args) {
 
 comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.comment)
}
inline std::string* Transfer::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.Transfer.comment)
  return _s;
}
inline const std::string& Transfer::_internal_comment() const {
  return comment_.Get();
}
inline void Transfer::_internal_set_comment(const std::string& value) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transfer::_internal_mutable_comment() {
  
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transfer::release_comment() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.Transfer.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transfer::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.Transfer.comment)
}

// bool bounceable = 8;
inline void Transfer::clear_bounceable() {
  bounceable_ = false;
}
inline bool Transfer::_internal_bounceable() const {
  return bounceable_;
}
inline bool Transfer::bounceable() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.Transfer.bounceable)
  return _internal_bounceable();
}
inline void Transfer::_internal_set_bounceable(bool value) {
  
  bounceable_ = value;
}
inline void Transfer::set_bounceable(bool value) {
  _internal_set_bounceable(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.Transfer.bounceable)
}

// -------------------------------------------------------------------

// JettonTransfer

// .TW.TheOpenNetwork.Proto.Transfer transfer = 1;
inline bool JettonTransfer::_internal_has_transfer() const {
  return this != internal_default_instance() && transfer_ != nullptr;
}
inline bool JettonTransfer::has_transfer() const {
  return _internal_has_transfer();
}
inline void JettonTransfer::clear_transfer() {
  if (GetArenaForAllocation() == nullptr && transfer_ != nullptr) {
    delete transfer_;
  }
  transfer_ = nullptr;
}
inline const ::TW::TheOpenNetwork::Proto::Transfer& JettonTransfer::_internal_transfer() const {
  const ::TW::TheOpenNetwork::Proto::Transfer* p = transfer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TW::TheOpenNetwork::Proto::Transfer&>(
      ::TW::TheOpenNetwork::Proto::_Transfer_default_instance_);
}
inline const ::TW::TheOpenNetwork::Proto::Transfer& JettonTransfer::transfer() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.JettonTransfer.transfer)
  return _internal_transfer();
}
inline void JettonTransfer::unsafe_arena_set_allocated_transfer(
    ::TW::TheOpenNetwork::Proto::Transfer* transfer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfer_);
  }
  transfer_ = transfer;
  if (transfer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.TheOpenNetwork.Proto.JettonTransfer.transfer)
}
inline ::TW::TheOpenNetwork::Proto::Transfer* JettonTransfer::release_transfer() {
  
  ::TW::TheOpenNetwork::Proto::Transfer* temp = transfer_;
  transfer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TW::TheOpenNetwork::Proto::Transfer* JettonTransfer::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.JettonTransfer.transfer)
  
  ::TW::TheOpenNetwork::Proto::Transfer* temp = transfer_;
  transfer_ = nullptr;
  return temp;
}
inline ::TW::TheOpenNetwork::Proto::Transfer* JettonTransfer::_internal_mutable_transfer() {
  
  if (transfer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TW::TheOpenNetwork::Proto::Transfer>(GetArenaForAllocation());
    transfer_ = p;
  }
  return transfer_;
}
inline ::TW::TheOpenNetwork::Proto::Transfer* JettonTransfer::mutable_transfer() {
  ::TW::TheOpenNetwork::Proto::Transfer* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.JettonTransfer.transfer)
  return _msg;
}
inline void JettonTransfer::set_allocated_transfer(::TW::TheOpenNetwork::Proto::Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transfer_;
  }
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::TheOpenNetwork::Proto::Transfer>::GetOwningArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    
  } else {
    
  }
  transfer_ = transfer;
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.JettonTransfer.transfer)
}

// uint64 query_id = 2;
inline void JettonTransfer::clear_query_id() {
  query_id_ = uint64_t{0u};
}
inline uint64_t JettonTransfer::_internal_query_id() const {
  return query_id_;
}
inline uint64_t JettonTransfer::query_id() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.JettonTransfer.query_id)
  return _internal_query_id();
}
inline void JettonTransfer::_internal_set_query_id(uint64_t value) {
  
  query_id_ = value;
}
inline void JettonTransfer::set_query_id(uint64_t value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.JettonTransfer.query_id)
}

// uint64 jetton_amount = 3;
inline void JettonTransfer::clear_jetton_amount() {
  jetton_amount_ = uint64_t{0u};
}
inline uint64_t JettonTransfer::_internal_jetton_amount() const {
  return jetton_amount_;
}
inline uint64_t JettonTransfer::jetton_amount() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.JettonTransfer.jetton_amount)
  return _internal_jetton_amount();
}
inline void JettonTransfer::_internal_set_jetton_amount(uint64_t value) {
  
  jetton_amount_ = value;
}
inline void JettonTransfer::set_jetton_amount(uint64_t value) {
  _internal_set_jetton_amount(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.JettonTransfer.jetton_amount)
}

// string to_owner = 4;
inline void JettonTransfer::clear_to_owner() {
  to_owner_.ClearToEmpty();
}
inline const std::string& JettonTransfer::to_owner() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.JettonTransfer.to_owner)
  return _internal_to_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JettonTransfer::set_to_owner(ArgT0&& arg0, ArgT... args) {
 
 to_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.JettonTransfer.to_owner)
}
inline std::string* JettonTransfer::mutable_to_owner() {
  std::string* _s = _internal_mutable_to_owner();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.JettonTransfer.to_owner)
  return _s;
}
inline const std::string& JettonTransfer::_internal_to_owner() const {
  return to_owner_.Get();
}
inline void JettonTransfer::_internal_set_to_owner(const std::string& value) {
  
  to_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JettonTransfer::_internal_mutable_to_owner() {
  
  return to_owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JettonTransfer::release_to_owner() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.JettonTransfer.to_owner)
  return to_owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JettonTransfer::set_allocated_to_owner(std::string* to_owner) {
  if (to_owner != nullptr) {
    
  } else {
    
  }
  to_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_owner,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_owner_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.JettonTransfer.to_owner)
}

// string response_address = 5;
inline void JettonTransfer::clear_response_address() {
  response_address_.ClearToEmpty();
}
inline const std::string& JettonTransfer::response_address() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.JettonTransfer.response_address)
  return _internal_response_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JettonTransfer::set_response_address(ArgT0&& arg0, ArgT... args) {
 
 response_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.JettonTransfer.response_address)
}
inline std::string* JettonTransfer::mutable_response_address() {
  std::string* _s = _internal_mutable_response_address();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.JettonTransfer.response_address)
  return _s;
}
inline const std::string& JettonTransfer::_internal_response_address() const {
  return response_address_.Get();
}
inline void JettonTransfer::_internal_set_response_address(const std::string& value) {
  
  response_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JettonTransfer::_internal_mutable_response_address() {
  
  return response_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JettonTransfer::release_response_address() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.JettonTransfer.response_address)
  return response_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JettonTransfer::set_allocated_response_address(std::string* response_address) {
  if (response_address != nullptr) {
    
  } else {
    
  }
  response_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (response_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    response_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.JettonTransfer.response_address)
}

// uint64 forward_amount = 6;
inline void JettonTransfer::clear_forward_amount() {
  forward_amount_ = uint64_t{0u};
}
inline uint64_t JettonTransfer::_internal_forward_amount() const {
  return forward_amount_;
}
inline uint64_t JettonTransfer::forward_amount() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.JettonTransfer.forward_amount)
  return _internal_forward_amount();
}
inline void JettonTransfer::_internal_set_forward_amount(uint64_t value) {
  
  forward_amount_ = value;
}
inline void JettonTransfer::set_forward_amount(uint64_t value) {
  _internal_set_forward_amount(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.JettonTransfer.forward_amount)
}

// -------------------------------------------------------------------

// SigningInput

// bytes private_key = 1;
inline void SigningInput::clear_private_key() {
  private_key_.ClearToEmpty();
}
inline const std::string& SigningInput::private_key() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.SigningInput.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningInput::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 private_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.SigningInput.private_key)
}
inline std::string* SigningInput::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.SigningInput.private_key)
  return _s;
}
inline const std::string& SigningInput::_internal_private_key() const {
  return private_key_.Get();
}
inline void SigningInput::_internal_set_private_key(const std::string& value) {
  
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningInput::_internal_mutable_private_key() {
  
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningInput::release_private_key() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.SigningInput.private_key)
  return private_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningInput::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.SigningInput.private_key)
}

// .TW.TheOpenNetwork.Proto.Transfer transfer = 2;
inline bool SigningInput::_internal_has_transfer() const {
  return action_oneof_case() == kTransfer;
}
inline bool SigningInput::has_transfer() const {
  return _internal_has_transfer();
}
inline void SigningInput::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void SigningInput::clear_transfer() {
  if (_internal_has_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_oneof_.transfer_;
    }
    clear_has_action_oneof();
  }
}
inline ::TW::TheOpenNetwork::Proto::Transfer* SigningInput::release_transfer() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_action_oneof();
      ::TW::TheOpenNetwork::Proto::Transfer* temp = action_oneof_.transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::TheOpenNetwork::Proto::Transfer& SigningInput::_internal_transfer() const {
  return _internal_has_transfer()
      ? *action_oneof_.transfer_
      : reinterpret_cast< ::TW::TheOpenNetwork::Proto::Transfer&>(::TW::TheOpenNetwork::Proto::_Transfer_default_instance_);
}
inline const ::TW::TheOpenNetwork::Proto::Transfer& SigningInput::transfer() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.SigningInput.transfer)
  return _internal_transfer();
}
inline ::TW::TheOpenNetwork::Proto::Transfer* SigningInput::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.TheOpenNetwork.Proto.SigningInput.transfer)
  if (_internal_has_transfer()) {
    clear_has_action_oneof();
    ::TW::TheOpenNetwork::Proto::Transfer* temp = action_oneof_.transfer_;
    action_oneof_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_transfer(::TW::TheOpenNetwork::Proto::Transfer* transfer) {
  clear_action_oneof();
  if (transfer) {
    set_has_transfer();
    action_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.TheOpenNetwork.Proto.SigningInput.transfer)
}
inline ::TW::TheOpenNetwork::Proto::Transfer* SigningInput::_internal_mutable_transfer() {
  if (!_internal_has_transfer()) {
    clear_action_oneof();
    set_has_transfer();
    action_oneof_.transfer_ = CreateMaybeMessage< ::TW::TheOpenNetwork::Proto::Transfer >(GetArenaForAllocation());
  }
  return action_oneof_.transfer_;
}
inline ::TW::TheOpenNetwork::Proto::Transfer* SigningInput::mutable_transfer() {
  ::TW::TheOpenNetwork::Proto::Transfer* _msg = _internal_mutable_transfer();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.SigningInput.transfer)
  return _msg;
}

// .TW.TheOpenNetwork.Proto.JettonTransfer jetton_transfer = 3;
inline bool SigningInput::_internal_has_jetton_transfer() const {
  return action_oneof_case() == kJettonTransfer;
}
inline bool SigningInput::has_jetton_transfer() const {
  return _internal_has_jetton_transfer();
}
inline void SigningInput::set_has_jetton_transfer() {
  _oneof_case_[0] = kJettonTransfer;
}
inline void SigningInput::clear_jetton_transfer() {
  if (_internal_has_jetton_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_oneof_.jetton_transfer_;
    }
    clear_has_action_oneof();
  }
}
inline ::TW::TheOpenNetwork::Proto::JettonTransfer* SigningInput::release_jetton_transfer() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.SigningInput.jetton_transfer)
  if (_internal_has_jetton_transfer()) {
    clear_has_action_oneof();
      ::TW::TheOpenNetwork::Proto::JettonTransfer* temp = action_oneof_.jetton_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_oneof_.jetton_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TW::TheOpenNetwork::Proto::JettonTransfer& SigningInput::_internal_jetton_transfer() const {
  return _internal_has_jetton_transfer()
      ? *action_oneof_.jetton_transfer_
      : reinterpret_cast< ::TW::TheOpenNetwork::Proto::JettonTransfer&>(::TW::TheOpenNetwork::Proto::_JettonTransfer_default_instance_);
}
inline const ::TW::TheOpenNetwork::Proto::JettonTransfer& SigningInput::jetton_transfer() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.SigningInput.jetton_transfer)
  return _internal_jetton_transfer();
}
inline ::TW::TheOpenNetwork::Proto::JettonTransfer* SigningInput::unsafe_arena_release_jetton_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TW.TheOpenNetwork.Proto.SigningInput.jetton_transfer)
  if (_internal_has_jetton_transfer()) {
    clear_has_action_oneof();
    ::TW::TheOpenNetwork::Proto::JettonTransfer* temp = action_oneof_.jetton_transfer_;
    action_oneof_.jetton_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SigningInput::unsafe_arena_set_allocated_jetton_transfer(::TW::TheOpenNetwork::Proto::JettonTransfer* jetton_transfer) {
  clear_action_oneof();
  if (jetton_transfer) {
    set_has_jetton_transfer();
    action_oneof_.jetton_transfer_ = jetton_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TW.TheOpenNetwork.Proto.SigningInput.jetton_transfer)
}
inline ::TW::TheOpenNetwork::Proto::JettonTransfer* SigningInput::_internal_mutable_jetton_transfer() {
  if (!_internal_has_jetton_transfer()) {
    clear_action_oneof();
    set_has_jetton_transfer();
    action_oneof_.jetton_transfer_ = CreateMaybeMessage< ::TW::TheOpenNetwork::Proto::JettonTransfer >(GetArenaForAllocation());
  }
  return action_oneof_.jetton_transfer_;
}
inline ::TW::TheOpenNetwork::Proto::JettonTransfer* SigningInput::mutable_jetton_transfer() {
  ::TW::TheOpenNetwork::Proto::JettonTransfer* _msg = _internal_mutable_jetton_transfer();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.SigningInput.jetton_transfer)
  return _msg;
}

inline bool SigningInput::has_action_oneof() const {
  return action_oneof_case() != ACTION_ONEOF_NOT_SET;
}
inline void SigningInput::clear_has_action_oneof() {
  _oneof_case_[0] = ACTION_ONEOF_NOT_SET;
}
inline SigningInput::ActionOneofCase SigningInput::action_oneof_case() const {
  return SigningInput::ActionOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SigningOutput

// string encoded = 1;
inline void SigningOutput::clear_encoded() {
  encoded_.ClearToEmpty();
}
inline const std::string& SigningOutput::encoded() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.SigningOutput.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.SigningOutput.encoded)
}
inline std::string* SigningOutput::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.SigningOutput.encoded)
  return _s;
}
inline const std::string& SigningOutput::_internal_encoded() const {
  return encoded_.Get();
}
inline void SigningOutput::_internal_set_encoded(const std::string& value) {
  
  encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_encoded() {
  
  return encoded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_encoded() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.SigningOutput.encoded)
  return encoded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.SigningOutput.encoded)
}

// .TW.Common.Proto.SigningError error = 2;
inline void SigningOutput::clear_error() {
  error_ = 0;
}
inline ::TW::Common::Proto::SigningError SigningOutput::_internal_error() const {
  return static_cast< ::TW::Common::Proto::SigningError >(error_);
}
inline ::TW::Common::Proto::SigningError SigningOutput::error() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.SigningOutput.error)
  return _internal_error();
}
inline void SigningOutput::_internal_set_error(::TW::Common::Proto::SigningError value) {
  
  error_ = value;
}
inline void SigningOutput::set_error(::TW::Common::Proto::SigningError value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.SigningOutput.error)
}

// string error_message = 3;
inline void SigningOutput::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& SigningOutput::error_message() const {
  // @@protoc_insertion_point(field_get:TW.TheOpenNetwork.Proto.SigningOutput.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningOutput::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TW.TheOpenNetwork.Proto.SigningOutput.error_message)
}
inline std::string* SigningOutput::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:TW.TheOpenNetwork.Proto.SigningOutput.error_message)
  return _s;
}
inline const std::string& SigningOutput::_internal_error_message() const {
  return error_message_.Get();
}
inline void SigningOutput::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigningOutput::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigningOutput::release_error_message() {
  // @@protoc_insertion_point(field_release:TW.TheOpenNetwork.Proto.SigningOutput.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigningOutput::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TW.TheOpenNetwork.Proto.SigningOutput.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace TheOpenNetwork
}  // namespace TW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TW::TheOpenNetwork::Proto::WalletVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::TheOpenNetwork::Proto::WalletVersion>() {
  return ::TW::TheOpenNetwork::Proto::WalletVersion_descriptor();
}
template <> struct is_proto_enum< ::TW::TheOpenNetwork::Proto::SendMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TW::TheOpenNetwork::Proto::SendMode>() {
  return ::TW::TheOpenNetwork::Proto::SendMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TheOpenNetwork_2eproto
