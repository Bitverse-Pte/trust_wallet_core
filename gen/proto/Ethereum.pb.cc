// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ethereum.proto

#include "Ethereum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TW {
namespace Ethereum {
namespace Proto {
constexpr Transaction_Transfer::Transaction_Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Transaction_TransferDefaultTypeInternal {
  constexpr Transaction_TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_TransferDefaultTypeInternal() {}
  union {
    Transaction_Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_TransferDefaultTypeInternal _Transaction_Transfer_default_instance_;
constexpr Transaction_ERC20Transfer::Transaction_ERC20Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Transaction_ERC20TransferDefaultTypeInternal {
  constexpr Transaction_ERC20TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_ERC20TransferDefaultTypeInternal() {}
  union {
    Transaction_ERC20Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_ERC20TransferDefaultTypeInternal _Transaction_ERC20Transfer_default_instance_;
constexpr Transaction_ERC20Approve::Transaction_ERC20Approve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Transaction_ERC20ApproveDefaultTypeInternal {
  constexpr Transaction_ERC20ApproveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_ERC20ApproveDefaultTypeInternal() {}
  union {
    Transaction_ERC20Approve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_ERC20ApproveDefaultTypeInternal _Transaction_ERC20Approve_default_instance_;
constexpr Transaction_ERC721Transfer::Transaction_ERC721Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Transaction_ERC721TransferDefaultTypeInternal {
  constexpr Transaction_ERC721TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_ERC721TransferDefaultTypeInternal() {}
  union {
    Transaction_ERC721Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_ERC721TransferDefaultTypeInternal _Transaction_ERC721Transfer_default_instance_;
constexpr Transaction_ERC1155Transfer::Transaction_ERC1155Transfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Transaction_ERC1155TransferDefaultTypeInternal {
  constexpr Transaction_ERC1155TransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_ERC1155TransferDefaultTypeInternal() {}
  union {
    Transaction_ERC1155Transfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_ERC1155TransferDefaultTypeInternal _Transaction_ERC1155Transfer_default_instance_;
constexpr Transaction_ContractGeneric::Transaction_ContractGeneric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Transaction_ContractGenericDefaultTypeInternal {
  constexpr Transaction_ContractGenericDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_ContractGenericDefaultTypeInternal() {}
  union {
    Transaction_ContractGeneric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_ContractGenericDefaultTypeInternal _Transaction_ContractGeneric_default_instance_;
constexpr Transaction_Batch_BatchedCall::Transaction_Batch_BatchedCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Transaction_Batch_BatchedCallDefaultTypeInternal {
  constexpr Transaction_Batch_BatchedCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_Batch_BatchedCallDefaultTypeInternal() {}
  union {
    Transaction_Batch_BatchedCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_Batch_BatchedCallDefaultTypeInternal _Transaction_Batch_BatchedCall_default_instance_;
constexpr Transaction_Batch::Transaction_Batch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : calls_(){}
struct Transaction_BatchDefaultTypeInternal {
  constexpr Transaction_BatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_BatchDefaultTypeInternal() {}
  union {
    Transaction_Batch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_BatchDefaultTypeInternal _Transaction_Batch_default_instance_;
constexpr Transaction::Transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TransactionDefaultTypeInternal {
  constexpr TransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionDefaultTypeInternal _Transaction_default_instance_;
constexpr UserOperation::UserOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_point_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , init_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pre_verification_gas_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verification_gas_limit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , paymaster_and_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserOperationDefaultTypeInternal {
  constexpr UserOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserOperationDefaultTypeInternal() {}
  union {
    UserOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserOperationDefaultTypeInternal _UserOperation_default_instance_;
constexpr SigningInput::SigningInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_price_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_limit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_inclusion_fee_per_gas_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_fee_per_gas_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_(nullptr)
  , user_operation_(nullptr)
  , tx_mode_(0)
{}
struct SigningInputDefaultTypeInternal {
  constexpr SigningInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningInputDefaultTypeInternal() {}
  union {
    SigningInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningInputDefaultTypeInternal _SigningInput_default_instance_;
constexpr SigningOutput::SigningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , v_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , r_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pre_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct SigningOutputDefaultTypeInternal {
  constexpr SigningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SigningOutputDefaultTypeInternal() {}
  union {
    SigningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SigningOutputDefaultTypeInternal _SigningOutput_default_instance_;
}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Ethereum_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Ethereum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Ethereum_2eproto = nullptr;

const uint32_t TableStruct_Ethereum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Transfer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Transfer, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Transfer, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Approve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Approve, spender_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC20Approve, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC721Transfer, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, from_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, to_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, token_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, value_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ERC1155Transfer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ContractGeneric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ContractGeneric, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_ContractGeneric, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Batch_BatchedCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Batch_BatchedCall, address_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Batch_BatchedCall, amount_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Batch_BatchedCall, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Batch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction_Batch, calls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::Transaction, transaction_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::UserOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::UserOperation, entry_point_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::UserOperation, init_code_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::UserOperation, sender_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::UserOperation, pre_verification_gas_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::UserOperation, verification_gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::UserOperation, paymaster_and_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, chain_id_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, nonce_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, tx_mode_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, gas_price_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, max_inclusion_fee_per_gas_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, max_fee_per_gas_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, to_address_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, private_key_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, transaction_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningInput, user_operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, encoded_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, v_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, r_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, s_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, data_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, error_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, error_message_),
  PROTOBUF_FIELD_OFFSET(::TW::Ethereum::Proto::SigningOutput, pre_hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_Transfer)},
  { 8, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC20Transfer)},
  { 16, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC20Approve)},
  { 24, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC721Transfer)},
  { 33, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_ERC1155Transfer)},
  { 44, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_ContractGeneric)},
  { 52, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_Batch_BatchedCall)},
  { 61, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction_Batch)},
  { 68, -1, -1, sizeof(::TW::Ethereum::Proto::Transaction)},
  { 82, -1, -1, sizeof(::TW::Ethereum::Proto::UserOperation)},
  { 94, -1, -1, sizeof(::TW::Ethereum::Proto::SigningInput)},
  { 111, -1, -1, sizeof(::TW::Ethereum::Proto::SigningOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC20Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC20Approve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC721Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ERC1155Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_ContractGeneric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_Batch_BatchedCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_Batch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_UserOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_SigningInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TW::Ethereum::Proto::_SigningOutput_default_instance_),
};

const char descriptor_table_protodef_Ethereum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Ethereum.proto\022\021TW.Ethereum.Proto\032\014Com"
  "mon.proto\"\345\007\n\013Transaction\022;\n\010transfer\030\001 "
  "\001(\0132\'.TW.Ethereum.Proto.Transaction.Tran"
  "sferH\000\022F\n\016erc20_transfer\030\002 \001(\0132,.TW.Ethe"
  "reum.Proto.Transaction.ERC20TransferH\000\022D"
  "\n\rerc20_approve\030\003 \001(\0132+.TW.Ethereum.Prot"
  "o.Transaction.ERC20ApproveH\000\022H\n\017erc721_t"
  "ransfer\030\004 \001(\0132-.TW.Ethereum.Proto.Transa"
  "ction.ERC721TransferH\000\022J\n\020erc1155_transf"
  "er\030\005 \001(\0132..TW.Ethereum.Proto.Transaction"
  ".ERC1155TransferH\000\022J\n\020contract_generic\030\006"
  " \001(\0132..TW.Ethereum.Proto.Transaction.Con"
  "tractGenericH\000\0225\n\005batch\030\007 \001(\0132$.TW.Ether"
  "eum.Proto.Transaction.BatchH\000\032(\n\010Transfe"
  "r\022\016\n\006amount\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\032+\n\rERC20"
  "Transfer\022\n\n\002to\030\001 \001(\t\022\016\n\006amount\030\002 \001(\014\032/\n\014"
  "ERC20Approve\022\017\n\007spender\030\001 \001(\t\022\016\n\006amount\030"
  "\002 \001(\014\032<\n\016ERC721Transfer\022\014\n\004from\030\001 \001(\t\022\n\n"
  "\002to\030\002 \001(\t\022\020\n\010token_id\030\003 \001(\014\032Z\n\017ERC1155Tr"
  "ansfer\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\020\n\010toke"
  "n_id\030\003 \001(\014\022\r\n\005value\030\004 \001(\014\022\014\n\004data\030\005 \001(\014\032"
  "/\n\017ContractGeneric\022\016\n\006amount\030\001 \001(\014\022\014\n\004da"
  "ta\030\002 \001(\014\032\211\001\n\005Batch\022\?\n\005calls\030\001 \003(\01320.TW.E"
  "thereum.Proto.Transaction.Batch.BatchedC"
  "all\032\?\n\013BatchedCall\022\017\n\007address\030\001 \001(\t\022\016\n\006a"
  "mount\030\002 \001(\014\022\017\n\007payload\030\003 \001(\014B\023\n\021transact"
  "ion_oneof\"\241\001\n\rUserOperation\022\023\n\013entry_poi"
  "nt\030\001 \001(\t\022\021\n\tinit_code\030\002 \001(\014\022\016\n\006sender\030\003 "
  "\001(\t\022\034\n\024pre_verification_gas\030\004 \001(\014\022\036\n\026ver"
  "ification_gas_limit\030\005 \001(\014\022\032\n\022paymaster_a"
  "nd_data\030\006 \001(\014\"\336\002\n\014SigningInput\022\020\n\010chain_"
  "id\030\001 \001(\014\022\r\n\005nonce\030\002 \001(\014\0223\n\007tx_mode\030\003 \001(\016"
  "2\".TW.Ethereum.Proto.TransactionMode\022\021\n\t"
  "gas_price\030\004 \001(\014\022\021\n\tgas_limit\030\005 \001(\014\022!\n\031ma"
  "x_inclusion_fee_per_gas\030\006 \001(\014\022\027\n\017max_fee"
  "_per_gas\030\007 \001(\014\022\022\n\nto_address\030\010 \001(\t\022\023\n\013pr"
  "ivate_key\030\t \001(\014\0223\n\013transaction\030\n \001(\0132\036.T"
  "W.Ethereum.Proto.Transaction\0228\n\016user_ope"
  "ration\030\013 \001(\0132 .TW.Ethereum.Proto.UserOpe"
  "ration\"\246\001\n\rSigningOutput\022\017\n\007encoded\030\001 \001("
  "\014\022\t\n\001v\030\002 \001(\014\022\t\n\001r\030\003 \001(\014\022\t\n\001s\030\004 \001(\014\022\014\n\004da"
  "ta\030\005 \001(\014\022,\n\005error\030\006 \001(\0162\035.TW.Common.Prot"
  "o.SigningError\022\025\n\rerror_message\030\007 \001(\t\022\020\n"
  "\010pre_hash\030\010 \001(\014*8\n\017TransactionMode\022\n\n\006Le"
  "gacy\020\000\022\r\n\tEnveloped\020\001\022\n\n\006UserOp\020\002B\027\n\025wal"
  "let.core.jni.protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Ethereum_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Ethereum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ethereum_2eproto = {
  false, false, 1826, descriptor_table_protodef_Ethereum_2eproto, "Ethereum.proto", 
  &descriptor_table_Ethereum_2eproto_once, descriptor_table_Ethereum_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_Ethereum_2eproto::offsets,
  file_level_metadata_Ethereum_2eproto, file_level_enum_descriptors_Ethereum_2eproto, file_level_service_descriptors_Ethereum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Ethereum_2eproto_getter() {
  return &descriptor_table_Ethereum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Ethereum_2eproto(&descriptor_table_Ethereum_2eproto);
namespace TW {
namespace Ethereum {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ethereum_2eproto);
  return file_level_enum_descriptors_Ethereum_2eproto[0];
}
bool TransactionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Transaction_Transfer::_Internal {
 public:
};

Transaction_Transfer::Transaction_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.Transfer)
}
Transaction_Transfer::Transaction_Transfer(const Transaction_Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.Transfer)
}

inline void Transaction_Transfer::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction_Transfer::~Transaction_Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Transfer::ArenaDtor(void* object) {
  Transaction_Transfer* _this = reinterpret_cast< Transaction_Transfer* >(object);
  (void)_this;
}
void Transaction_Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amount = 1;
  if (!this->_internal_amount().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.Transfer)
  return target;
}

size_t Transaction_Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes amount = 1;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_Transfer::GetClassData() const { return &_class_data_; }

void Transaction_Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_Transfer *>(to)->MergeFrom(
      static_cast<const Transaction_Transfer &>(from));
}


void Transaction_Transfer::MergeFrom(const Transaction_Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_Transfer::CopyFrom(const Transaction_Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Transfer::IsInitialized() const {
  return true;
}

void Transaction_Transfer::InternalSwap(Transaction_Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[0]);
}

// ===================================================================

class Transaction_ERC20Transfer::_Internal {
 public:
};

Transaction_ERC20Transfer::Transaction_ERC20Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC20Transfer)
}
Transaction_ERC20Transfer::Transaction_ERC20Transfer(const Transaction_ERC20Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC20Transfer)
}

inline void Transaction_ERC20Transfer::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction_ERC20Transfer::~Transaction_ERC20Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_ERC20Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC20Transfer::ArenaDtor(void* object) {
  Transaction_ERC20Transfer* _this = reinterpret_cast< Transaction_ERC20Transfer* >(object);
  (void)_this;
}
void Transaction_ERC20Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC20Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_ERC20Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC20Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC20Transfer.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_ERC20Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC20Transfer.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // bytes amount = 2;
  if (!this->_internal_amount().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  return target;
}

size_t Transaction_ERC20Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_ERC20Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_ERC20Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_ERC20Transfer::GetClassData() const { return &_class_data_; }

void Transaction_ERC20Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_ERC20Transfer *>(to)->MergeFrom(
      static_cast<const Transaction_ERC20Transfer &>(from));
}


void Transaction_ERC20Transfer::MergeFrom(const Transaction_ERC20Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_ERC20Transfer::CopyFrom(const Transaction_ERC20Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC20Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC20Transfer::IsInitialized() const {
  return true;
}

void Transaction_ERC20Transfer::InternalSwap(Transaction_ERC20Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC20Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[1]);
}

// ===================================================================

class Transaction_ERC20Approve::_Internal {
 public:
};

Transaction_ERC20Approve::Transaction_ERC20Approve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC20Approve)
}
Transaction_ERC20Approve::Transaction_ERC20Approve(const Transaction_ERC20Approve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    spender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spender().empty()) {
    spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC20Approve)
}

inline void Transaction_ERC20Approve::SharedCtor() {
spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  spender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction_ERC20Approve::~Transaction_ERC20Approve() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC20Approve)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_ERC20Approve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC20Approve::ArenaDtor(void* object) {
  Transaction_ERC20Approve* _this = reinterpret_cast< Transaction_ERC20Approve* >(object);
  (void)_this;
}
void Transaction_ERC20Approve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC20Approve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_ERC20Approve::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spender_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC20Approve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_spender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC20Approve.spender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_ERC20Approve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string spender = 1;
  if (!this->_internal_spender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spender().data(), static_cast<int>(this->_internal_spender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC20Approve.spender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spender(), target);
  }

  // bytes amount = 2;
  if (!this->_internal_amount().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC20Approve)
  return target;
}

size_t Transaction_ERC20Approve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spender = 1;
  if (!this->_internal_spender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spender());
  }

  // bytes amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_ERC20Approve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_ERC20Approve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_ERC20Approve::GetClassData() const { return &_class_data_; }

void Transaction_ERC20Approve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_ERC20Approve *>(to)->MergeFrom(
      static_cast<const Transaction_ERC20Approve &>(from));
}


void Transaction_ERC20Approve::MergeFrom(const Transaction_ERC20Approve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spender().empty()) {
    _internal_set_spender(from._internal_spender());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_ERC20Approve::CopyFrom(const Transaction_ERC20Approve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC20Approve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC20Approve::IsInitialized() const {
  return true;
}

void Transaction_ERC20Approve::InternalSwap(Transaction_ERC20Approve* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spender_, lhs_arena,
      &other->spender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC20Approve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[2]);
}

// ===================================================================

class Transaction_ERC721Transfer::_Internal {
 public:
};

Transaction_ERC721Transfer::Transaction_ERC721Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC721Transfer)
}
Transaction_ERC721Transfer::Transaction_ERC721Transfer(const Transaction_ERC721Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC721Transfer)
}

inline void Transaction_ERC721Transfer::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction_ERC721Transfer::~Transaction_ERC721Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_ERC721Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC721Transfer::ArenaDtor(void* object) {
  Transaction_ERC721Transfer* _this = reinterpret_cast< Transaction_ERC721Transfer* >(object);
  (void)_this;
}
void Transaction_ERC721Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC721Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_ERC721Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC721Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC721Transfer.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC721Transfer.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_ERC721Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC721Transfer.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC721Transfer.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  return target;
}

size_t Transaction_ERC721Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_ERC721Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_ERC721Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_ERC721Transfer::GetClassData() const { return &_class_data_; }

void Transaction_ERC721Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_ERC721Transfer *>(to)->MergeFrom(
      static_cast<const Transaction_ERC721Transfer &>(from));
}


void Transaction_ERC721Transfer::MergeFrom(const Transaction_ERC721Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_ERC721Transfer::CopyFrom(const Transaction_ERC721Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC721Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC721Transfer::IsInitialized() const {
  return true;
}

void Transaction_ERC721Transfer::InternalSwap(Transaction_ERC721Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, lhs_arena,
      &other->token_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC721Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[3]);
}

// ===================================================================

class Transaction_ERC1155Transfer::_Internal {
 public:
};

Transaction_ERC1155Transfer::Transaction_ERC1155Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
}
Transaction_ERC1155Transfer::Transaction_ERC1155Transfer(const Transaction_ERC1155Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
}

inline void Transaction_ERC1155Transfer::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction_ERC1155Transfer::~Transaction_ERC1155Transfer() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_ERC1155Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ERC1155Transfer::ArenaDtor(void* object) {
  Transaction_ERC1155Transfer* _this = reinterpret_cast< Transaction_ERC1155Transfer* >(object);
  (void)_this;
}
void Transaction_ERC1155Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ERC1155Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_ERC1155Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  value_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ERC1155Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC1155Transfer.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.ERC1155Transfer.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_ERC1155Transfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC1155Transfer.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.ERC1155Transfer.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  return target;
}

size_t Transaction_ERC1155Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_ERC1155Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_ERC1155Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_ERC1155Transfer::GetClassData() const { return &_class_data_; }

void Transaction_ERC1155Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_ERC1155Transfer *>(to)->MergeFrom(
      static_cast<const Transaction_ERC1155Transfer &>(from));
}


void Transaction_ERC1155Transfer::MergeFrom(const Transaction_ERC1155Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_ERC1155Transfer::CopyFrom(const Transaction_ERC1155Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ERC1155Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ERC1155Transfer::IsInitialized() const {
  return true;
}

void Transaction_ERC1155Transfer::InternalSwap(Transaction_ERC1155Transfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, lhs_arena,
      &other->token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ERC1155Transfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[4]);
}

// ===================================================================

class Transaction_ContractGeneric::_Internal {
 public:
};

Transaction_ContractGeneric::Transaction_ContractGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.ContractGeneric)
}
Transaction_ContractGeneric::Transaction_ContractGeneric(const Transaction_ContractGeneric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.ContractGeneric)
}

inline void Transaction_ContractGeneric::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction_ContractGeneric::~Transaction_ContractGeneric() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.ContractGeneric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_ContractGeneric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_ContractGeneric::ArenaDtor(void* object) {
  Transaction_ContractGeneric* _this = reinterpret_cast< Transaction_ContractGeneric* >(object);
  (void)_this;
}
void Transaction_ContractGeneric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_ContractGeneric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_ContractGeneric::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_ContractGeneric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_ContractGeneric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amount = 1;
  if (!this->_internal_amount().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_amount(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.ContractGeneric)
  return target;
}

size_t Transaction_ContractGeneric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes amount = 1;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_ContractGeneric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_ContractGeneric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_ContractGeneric::GetClassData() const { return &_class_data_; }

void Transaction_ContractGeneric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_ContractGeneric *>(to)->MergeFrom(
      static_cast<const Transaction_ContractGeneric &>(from));
}


void Transaction_ContractGeneric::MergeFrom(const Transaction_ContractGeneric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_ContractGeneric::CopyFrom(const Transaction_ContractGeneric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.ContractGeneric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_ContractGeneric::IsInitialized() const {
  return true;
}

void Transaction_ContractGeneric::InternalSwap(Transaction_ContractGeneric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_ContractGeneric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[5]);
}

// ===================================================================

class Transaction_Batch_BatchedCall::_Internal {
 public:
};

Transaction_Batch_BatchedCall::Transaction_Batch_BatchedCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
}
Transaction_Batch_BatchedCall::Transaction_Batch_BatchedCall(const Transaction_Batch_BatchedCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
}

inline void Transaction_Batch_BatchedCall::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction_Batch_BatchedCall::~Transaction_Batch_BatchedCall() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_Batch_BatchedCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Batch_BatchedCall::ArenaDtor(void* object) {
  Transaction_Batch_BatchedCall* _this = reinterpret_cast< Transaction_Batch_BatchedCall* >(object);
  (void)_this;
}
void Transaction_Batch_BatchedCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Batch_BatchedCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Batch_BatchedCall::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  amount_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Batch_BatchedCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.Transaction.Batch.BatchedCall.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_Batch_BatchedCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.Transaction.Batch.BatchedCall.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bytes amount = 2;
  if (!this->_internal_amount().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
  return target;
}

size_t Transaction_Batch_BatchedCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes amount = 2;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_Batch_BatchedCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_Batch_BatchedCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_Batch_BatchedCall::GetClassData() const { return &_class_data_; }

void Transaction_Batch_BatchedCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_Batch_BatchedCall *>(to)->MergeFrom(
      static_cast<const Transaction_Batch_BatchedCall &>(from));
}


void Transaction_Batch_BatchedCall::MergeFrom(const Transaction_Batch_BatchedCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_Batch_BatchedCall::CopyFrom(const Transaction_Batch_BatchedCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.Batch.BatchedCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Batch_BatchedCall::IsInitialized() const {
  return true;
}

void Transaction_Batch_BatchedCall::InternalSwap(Transaction_Batch_BatchedCall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Batch_BatchedCall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[6]);
}

// ===================================================================

class Transaction_Batch::_Internal {
 public:
};

Transaction_Batch::Transaction_Batch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  calls_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction.Batch)
}
Transaction_Batch::Transaction_Batch(const Transaction_Batch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      calls_(from.calls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction.Batch)
}

inline void Transaction_Batch::SharedCtor() {
}

Transaction_Batch::~Transaction_Batch() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction.Batch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_Batch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Transaction_Batch::ArenaDtor(void* object) {
  Transaction_Batch* _this = reinterpret_cast< Transaction_Batch* >(object);
  (void)_this;
}
void Transaction_Batch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Batch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Batch::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction.Batch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calls_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Batch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TW.Ethereum.Proto.Transaction.Batch.BatchedCall calls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction_Batch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction.Batch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.Ethereum.Proto.Transaction.Batch.BatchedCall calls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_calls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction.Batch)
  return target;
}

size_t Transaction_Batch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction.Batch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TW.Ethereum.Proto.Transaction.Batch.BatchedCall calls = 1;
  total_size += 1UL * this->_internal_calls_size();
  for (const auto& msg : this->calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_Batch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_Batch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_Batch::GetClassData() const { return &_class_data_; }

void Transaction_Batch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction_Batch *>(to)->MergeFrom(
      static_cast<const Transaction_Batch &>(from));
}


void Transaction_Batch::MergeFrom(const Transaction_Batch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction.Batch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  calls_.MergeFrom(from.calls_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_Batch::CopyFrom(const Transaction_Batch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction.Batch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Batch::IsInitialized() const {
  return true;
}

void Transaction_Batch::InternalSwap(Transaction_Batch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  calls_.InternalSwap(&other->calls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Batch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[7]);
}

// ===================================================================

class Transaction::_Internal {
 public:
  static const ::TW::Ethereum::Proto::Transaction_Transfer& transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC20Transfer& erc20_transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC20Approve& erc20_approve(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC721Transfer& erc721_transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer& erc1155_transfer(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_ContractGeneric& contract_generic(const Transaction* msg);
  static const ::TW::Ethereum::Proto::Transaction_Batch& batch(const Transaction* msg);
};

const ::TW::Ethereum::Proto::Transaction_Transfer&
Transaction::_Internal::transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ERC20Transfer&
Transaction::_Internal::erc20_transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.erc20_transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ERC20Approve&
Transaction::_Internal::erc20_approve(const Transaction* msg) {
  return *msg->transaction_oneof_.erc20_approve_;
}
const ::TW::Ethereum::Proto::Transaction_ERC721Transfer&
Transaction::_Internal::erc721_transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.erc721_transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ERC1155Transfer&
Transaction::_Internal::erc1155_transfer(const Transaction* msg) {
  return *msg->transaction_oneof_.erc1155_transfer_;
}
const ::TW::Ethereum::Proto::Transaction_ContractGeneric&
Transaction::_Internal::contract_generic(const Transaction* msg) {
  return *msg->transaction_oneof_.contract_generic_;
}
const ::TW::Ethereum::Proto::Transaction_Batch&
Transaction::_Internal::batch(const Transaction* msg) {
  return *msg->transaction_oneof_.batch_;
}
void Transaction::set_allocated_transfer(::TW::Ethereum::Proto::Transaction_Transfer* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction_Transfer>::GetOwningArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    transaction_oneof_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.transfer)
}
void Transaction::set_allocated_erc20_transfer(::TW::Ethereum::Proto::Transaction_ERC20Transfer* erc20_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (erc20_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction_ERC20Transfer>::GetOwningArena(erc20_transfer);
    if (message_arena != submessage_arena) {
      erc20_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20_transfer, submessage_arena);
    }
    set_has_erc20_transfer();
    transaction_oneof_.erc20_transfer_ = erc20_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc20_transfer)
}
void Transaction::set_allocated_erc20_approve(::TW::Ethereum::Proto::Transaction_ERC20Approve* erc20_approve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (erc20_approve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction_ERC20Approve>::GetOwningArena(erc20_approve);
    if (message_arena != submessage_arena) {
      erc20_approve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20_approve, submessage_arena);
    }
    set_has_erc20_approve();
    transaction_oneof_.erc20_approve_ = erc20_approve;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc20_approve)
}
void Transaction::set_allocated_erc721_transfer(::TW::Ethereum::Proto::Transaction_ERC721Transfer* erc721_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (erc721_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction_ERC721Transfer>::GetOwningArena(erc721_transfer);
    if (message_arena != submessage_arena) {
      erc721_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc721_transfer, submessage_arena);
    }
    set_has_erc721_transfer();
    transaction_oneof_.erc721_transfer_ = erc721_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc721_transfer)
}
void Transaction::set_allocated_erc1155_transfer(::TW::Ethereum::Proto::Transaction_ERC1155Transfer* erc1155_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (erc1155_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction_ERC1155Transfer>::GetOwningArena(erc1155_transfer);
    if (message_arena != submessage_arena) {
      erc1155_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc1155_transfer, submessage_arena);
    }
    set_has_erc1155_transfer();
    transaction_oneof_.erc1155_transfer_ = erc1155_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.erc1155_transfer)
}
void Transaction::set_allocated_contract_generic(::TW::Ethereum::Proto::Transaction_ContractGeneric* contract_generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (contract_generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction_ContractGeneric>::GetOwningArena(contract_generic);
    if (message_arena != submessage_arena) {
      contract_generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_generic, submessage_arena);
    }
    set_has_contract_generic();
    transaction_oneof_.contract_generic_ = contract_generic;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.contract_generic)
}
void Transaction::set_allocated_batch(::TW::Ethereum::Proto::Transaction_Batch* batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transaction_oneof();
  if (batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TW::Ethereum::Proto::Transaction_Batch>::GetOwningArena(batch);
    if (message_arena != submessage_arena) {
      batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    set_has_batch();
    transaction_oneof_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.Ethereum.Proto.Transaction.batch)
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_transaction_oneof();
  switch (from.transaction_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Ethereum::Proto::Transaction_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kErc20Transfer: {
      _internal_mutable_erc20_transfer()->::TW::Ethereum::Proto::Transaction_ERC20Transfer::MergeFrom(from._internal_erc20_transfer());
      break;
    }
    case kErc20Approve: {
      _internal_mutable_erc20_approve()->::TW::Ethereum::Proto::Transaction_ERC20Approve::MergeFrom(from._internal_erc20_approve());
      break;
    }
    case kErc721Transfer: {
      _internal_mutable_erc721_transfer()->::TW::Ethereum::Proto::Transaction_ERC721Transfer::MergeFrom(from._internal_erc721_transfer());
      break;
    }
    case kErc1155Transfer: {
      _internal_mutable_erc1155_transfer()->::TW::Ethereum::Proto::Transaction_ERC1155Transfer::MergeFrom(from._internal_erc1155_transfer());
      break;
    }
    case kContractGeneric: {
      _internal_mutable_contract_generic()->::TW::Ethereum::Proto::Transaction_ContractGeneric::MergeFrom(from._internal_contract_generic());
      break;
    }
    case kBatch: {
      _internal_mutable_batch()->::TW::Ethereum::Proto::Transaction_Batch::MergeFrom(from._internal_batch());
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.Transaction)
}

inline void Transaction::SharedCtor() {
clear_has_transaction_oneof();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.Transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_transaction_oneof()) {
    clear_transaction_oneof();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::clear_transaction_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.Ethereum.Proto.Transaction)
  switch (transaction_oneof_case()) {
    case kTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.transfer_;
      }
      break;
    }
    case kErc20Transfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.erc20_transfer_;
      }
      break;
    }
    case kErc20Approve: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.erc20_approve_;
      }
      break;
    }
    case kErc721Transfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.erc721_transfer_;
      }
      break;
    }
    case kErc1155Transfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.erc1155_transfer_;
      }
      break;
    }
    case kContractGeneric: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.contract_generic_;
      }
      break;
    }
    case kBatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete transaction_oneof_.batch_;
      }
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_ONEOF_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.Transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_transaction_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20_approve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc721_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc1155_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_generic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction.Batch batch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.Transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
  if (_internal_has_erc20_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::erc20_transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
  if (_internal_has_erc20_approve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::erc20_approve(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
  if (_internal_has_erc721_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::erc721_transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
  if (_internal_has_erc1155_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::erc1155_transfer(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
  if (_internal_has_contract_generic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::contract_generic(this), target, stream);
  }

  // .TW.Ethereum.Proto.Transaction.Batch batch = 7;
  if (_internal_has_batch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::batch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.Transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (transaction_oneof_case()) {
    // .TW.Ethereum.Proto.Transaction.Transfer transfer = 1;
    case kTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC20Transfer erc20_transfer = 2;
    case kErc20Transfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc20_transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC20Approve erc20_approve = 3;
    case kErc20Approve: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc20_approve_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC721Transfer erc721_transfer = 4;
    case kErc721Transfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc721_transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ERC1155Transfer erc1155_transfer = 5;
    case kErc1155Transfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.erc1155_transfer_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.ContractGeneric contract_generic = 6;
    case kContractGeneric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.contract_generic_);
      break;
    }
    // .TW.Ethereum.Proto.Transaction.Batch batch = 7;
    case kBatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_oneof_.batch_);
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }

void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction *>(to)->MergeFrom(
      static_cast<const Transaction &>(from));
}


void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.transaction_oneof_case()) {
    case kTransfer: {
      _internal_mutable_transfer()->::TW::Ethereum::Proto::Transaction_Transfer::MergeFrom(from._internal_transfer());
      break;
    }
    case kErc20Transfer: {
      _internal_mutable_erc20_transfer()->::TW::Ethereum::Proto::Transaction_ERC20Transfer::MergeFrom(from._internal_erc20_transfer());
      break;
    }
    case kErc20Approve: {
      _internal_mutable_erc20_approve()->::TW::Ethereum::Proto::Transaction_ERC20Approve::MergeFrom(from._internal_erc20_approve());
      break;
    }
    case kErc721Transfer: {
      _internal_mutable_erc721_transfer()->::TW::Ethereum::Proto::Transaction_ERC721Transfer::MergeFrom(from._internal_erc721_transfer());
      break;
    }
    case kErc1155Transfer: {
      _internal_mutable_erc1155_transfer()->::TW::Ethereum::Proto::Transaction_ERC1155Transfer::MergeFrom(from._internal_erc1155_transfer());
      break;
    }
    case kContractGeneric: {
      _internal_mutable_contract_generic()->::TW::Ethereum::Proto::Transaction_ContractGeneric::MergeFrom(from._internal_contract_generic());
      break;
    }
    case kBatch: {
      _internal_mutable_batch()->::TW::Ethereum::Proto::Transaction_Batch::MergeFrom(from._internal_batch());
      break;
    }
    case TRANSACTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_oneof_, other->transaction_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[8]);
}

// ===================================================================

class UserOperation::_Internal {
 public:
};

UserOperation::UserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.UserOperation)
}
UserOperation::UserOperation(const UserOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entry_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entry_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entry_point().empty()) {
    entry_point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entry_point(), 
      GetArenaForAllocation());
  }
  init_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    init_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_init_code().empty()) {
    init_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_init_code(), 
      GetArenaForAllocation());
  }
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  pre_verification_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pre_verification_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pre_verification_gas().empty()) {
    pre_verification_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_verification_gas(), 
      GetArenaForAllocation());
  }
  verification_gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verification_gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verification_gas_limit().empty()) {
    verification_gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verification_gas_limit(), 
      GetArenaForAllocation());
  }
  paymaster_and_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    paymaster_and_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paymaster_and_data().empty()) {
    paymaster_and_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paymaster_and_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.UserOperation)
}

inline void UserOperation::SharedCtor() {
entry_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entry_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
init_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  init_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pre_verification_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pre_verification_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verification_gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verification_gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
paymaster_and_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  paymaster_and_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserOperation::~UserOperation() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.UserOperation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entry_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  init_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_verification_gas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_gas_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymaster_and_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserOperation::ArenaDtor(void* object) {
  UserOperation* _this = reinterpret_cast< UserOperation* >(object);
  (void)_this;
}
void UserOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.UserOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_point_.ClearToEmpty();
  init_code_.ClearToEmpty();
  sender_.ClearToEmpty();
  pre_verification_gas_.ClearToEmpty();
  verification_gas_limit_.ClearToEmpty();
  paymaster_and_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entry_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entry_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.UserOperation.entry_point"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes init_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_init_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.UserOperation.sender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pre_verification_gas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pre_verification_gas();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes verification_gas_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verification_gas_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes paymaster_and_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_paymaster_and_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.UserOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entry_point = 1;
  if (!this->_internal_entry_point().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entry_point().data(), static_cast<int>(this->_internal_entry_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.UserOperation.entry_point");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entry_point(), target);
  }

  // bytes init_code = 2;
  if (!this->_internal_init_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_init_code(), target);
  }

  // string sender = 3;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.UserOperation.sender");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender(), target);
  }

  // bytes pre_verification_gas = 4;
  if (!this->_internal_pre_verification_gas().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pre_verification_gas(), target);
  }

  // bytes verification_gas_limit = 5;
  if (!this->_internal_verification_gas_limit().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_verification_gas_limit(), target);
  }

  // bytes paymaster_and_data = 6;
  if (!this->_internal_paymaster_and_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_paymaster_and_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.UserOperation)
  return target;
}

size_t UserOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.UserOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entry_point = 1;
  if (!this->_internal_entry_point().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry_point());
  }

  // bytes init_code = 2;
  if (!this->_internal_init_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_init_code());
  }

  // string sender = 3;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // bytes pre_verification_gas = 4;
  if (!this->_internal_pre_verification_gas().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pre_verification_gas());
  }

  // bytes verification_gas_limit = 5;
  if (!this->_internal_verification_gas_limit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_verification_gas_limit());
  }

  // bytes paymaster_and_data = 6;
  if (!this->_internal_paymaster_and_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymaster_and_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserOperation::GetClassData() const { return &_class_data_; }

void UserOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserOperation *>(to)->MergeFrom(
      static_cast<const UserOperation &>(from));
}


void UserOperation::MergeFrom(const UserOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.UserOperation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entry_point().empty()) {
    _internal_set_entry_point(from._internal_entry_point());
  }
  if (!from._internal_init_code().empty()) {
    _internal_set_init_code(from._internal_init_code());
  }
  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from._internal_pre_verification_gas().empty()) {
    _internal_set_pre_verification_gas(from._internal_pre_verification_gas());
  }
  if (!from._internal_verification_gas_limit().empty()) {
    _internal_set_verification_gas_limit(from._internal_verification_gas_limit());
  }
  if (!from._internal_paymaster_and_data().empty()) {
    _internal_set_paymaster_and_data(from._internal_paymaster_and_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserOperation::CopyFrom(const UserOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.UserOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOperation::IsInitialized() const {
  return true;
}

void UserOperation::InternalSwap(UserOperation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entry_point_, lhs_arena,
      &other->entry_point_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &init_code_, lhs_arena,
      &other->init_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pre_verification_gas_, lhs_arena,
      &other->pre_verification_gas_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verification_gas_limit_, lhs_arena,
      &other->verification_gas_limit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &paymaster_and_data_, lhs_arena,
      &other->paymaster_and_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[9]);
}

// ===================================================================

class SigningInput::_Internal {
 public:
  static const ::TW::Ethereum::Proto::Transaction& transaction(const SigningInput* msg);
  static const ::TW::Ethereum::Proto::UserOperation& user_operation(const SigningInput* msg);
};

const ::TW::Ethereum::Proto::Transaction&
SigningInput::_Internal::transaction(const SigningInput* msg) {
  return *msg->transaction_;
}
const ::TW::Ethereum::Proto::UserOperation&
SigningInput::_Internal::user_operation(const SigningInput* msg) {
  return *msg->user_operation_;
}
SigningInput::SigningInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.SigningInput)
}
SigningInput::SigningInput(const SigningInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArenaForAllocation());
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_price().empty()) {
    gas_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_price(), 
      GetArenaForAllocation());
  }
  gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_limit().empty()) {
    gas_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gas_limit(), 
      GetArenaForAllocation());
  }
  max_inclusion_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    max_inclusion_fee_per_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_inclusion_fee_per_gas().empty()) {
    max_inclusion_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_inclusion_fee_per_gas(), 
      GetArenaForAllocation());
  }
  max_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    max_fee_per_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_fee_per_gas().empty()) {
    max_fee_per_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_fee_per_gas(), 
      GetArenaForAllocation());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::TW::Ethereum::Proto::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from._internal_has_user_operation()) {
    user_operation_ = new ::TW::Ethereum::Proto::UserOperation(*from.user_operation_);
  } else {
    user_operation_ = nullptr;
  }
  tx_mode_ = from.tx_mode_;
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.SigningInput)
}

inline void SigningInput::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
max_inclusion_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  max_inclusion_fee_per_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
max_fee_per_gas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  max_fee_per_gas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tx_mode_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(tx_mode_));
}

SigningInput::~SigningInput() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.SigningInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_inclusion_fee_per_gas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_fee_per_gas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete user_operation_;
}

void SigningInput::ArenaDtor(void* object) {
  SigningInput* _this = reinterpret_cast< SigningInput* >(object);
  (void)_this;
}
void SigningInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  nonce_.ClearToEmpty();
  gas_price_.ClearToEmpty();
  gas_limit_.ClearToEmpty();
  max_inclusion_fee_per_gas_.ClearToEmpty();
  max_fee_per_gas_.ClearToEmpty();
  to_address_.ClearToEmpty();
  private_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_operation_ != nullptr) {
    delete user_operation_;
  }
  user_operation_ = nullptr;
  tx_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tx_mode(static_cast<::TW::Ethereum::Proto::TransactionMode>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes gas_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gas_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gas_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes max_inclusion_fee_per_gas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_max_inclusion_fee_per_gas();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes max_fee_per_gas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_max_fee_per_gas();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.SigningInput.to_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.Transaction transaction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Ethereum.Proto.UserOperation user_operation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.SigningInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  // bytes nonce = 2;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nonce(), target);
  }

  // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
  if (this->_internal_tx_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tx_mode(), target);
  }

  // bytes gas_price = 4;
  if (!this->_internal_gas_price().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_gas_price(), target);
  }

  // bytes gas_limit = 5;
  if (!this->_internal_gas_limit().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_gas_limit(), target);
  }

  // bytes max_inclusion_fee_per_gas = 6;
  if (!this->_internal_max_inclusion_fee_per_gas().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_max_inclusion_fee_per_gas(), target);
  }

  // bytes max_fee_per_gas = 7;
  if (!this->_internal_max_fee_per_gas().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_max_fee_per_gas(), target);
  }

  // string to_address = 8;
  if (!this->_internal_to_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.SigningInput.to_address");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_to_address(), target);
  }

  // bytes private_key = 9;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_private_key(), target);
  }

  // .TW.Ethereum.Proto.Transaction transaction = 10;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transaction(this), target, stream);
  }

  // .TW.Ethereum.Proto.UserOperation user_operation = 11;
  if (this->_internal_has_user_operation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::user_operation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.SigningInput)
  return target;
}

size_t SigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.SigningInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_id());
  }

  // bytes nonce = 2;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes gas_price = 4;
  if (!this->_internal_gas_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_price());
  }

  // bytes gas_limit = 5;
  if (!this->_internal_gas_limit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_limit());
  }

  // bytes max_inclusion_fee_per_gas = 6;
  if (!this->_internal_max_inclusion_fee_per_gas().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_inclusion_fee_per_gas());
  }

  // bytes max_fee_per_gas = 7;
  if (!this->_internal_max_fee_per_gas().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_fee_per_gas());
  }

  // string to_address = 8;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_address());
  }

  // bytes private_key = 9;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // .TW.Ethereum.Proto.Transaction transaction = 10;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .TW.Ethereum.Proto.UserOperation user_operation = 11;
  if (this->_internal_has_user_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_operation_);
  }

  // .TW.Ethereum.Proto.TransactionMode tx_mode = 3;
  if (this->_internal_tx_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tx_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInput::GetClassData() const { return &_class_data_; }

void SigningInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningInput *>(to)->MergeFrom(
      static_cast<const SigningInput &>(from));
}


void SigningInput::MergeFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.SigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (!from._internal_gas_price().empty()) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (!from._internal_gas_limit().empty()) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (!from._internal_max_inclusion_fee_per_gas().empty()) {
    _internal_set_max_inclusion_fee_per_gas(from._internal_max_inclusion_fee_per_gas());
  }
  if (!from._internal_max_fee_per_gas().empty()) {
    _internal_set_max_fee_per_gas(from._internal_max_fee_per_gas());
  }
  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (!from._internal_private_key().empty()) {
    _internal_set_private_key(from._internal_private_key());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::TW::Ethereum::Proto::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_has_user_operation()) {
    _internal_mutable_user_operation()->::TW::Ethereum::Proto::UserOperation::MergeFrom(from._internal_user_operation());
  }
  if (from._internal_tx_mode() != 0) {
    _internal_set_tx_mode(from._internal_tx_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInput::CopyFrom(const SigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.SigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInput::IsInitialized() const {
  return true;
}

void SigningInput::InternalSwap(SigningInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_, lhs_arena,
      &other->nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gas_price_, lhs_arena,
      &other->gas_price_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gas_limit_, lhs_arena,
      &other->gas_limit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_inclusion_fee_per_gas_, lhs_arena,
      &other->max_inclusion_fee_per_gas_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_fee_per_gas_, lhs_arena,
      &other->max_fee_per_gas_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, lhs_arena,
      &other->to_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigningInput, tx_mode_)
      + sizeof(SigningInput::tx_mode_)
      - PROTOBUF_FIELD_OFFSET(SigningInput, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[10]);
}

// ===================================================================

class SigningOutput::_Internal {
 public:
};

SigningOutput::SigningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TW.Ethereum.Proto.SigningOutput)
}
SigningOutput::SigningOutput(const SigningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    encoded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded(), 
      GetArenaForAllocation());
  }
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArenaForAllocation());
  }
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    r_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_r().empty()) {
    r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_r(), 
      GetArenaForAllocation());
  }
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  pre_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pre_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pre_hash().empty()) {
    pre_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_hash(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:TW.Ethereum.Proto.SigningOutput)
}

inline void SigningOutput::SharedCtor() {
encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  r_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pre_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pre_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

SigningOutput::~SigningOutput() {
  // @@protoc_insertion_point(destructor:TW.Ethereum.Proto.SigningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SigningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigningOutput::ArenaDtor(void* object) {
  SigningOutput* _this = reinterpret_cast< SigningOutput* >(object);
  (void)_this;
}
void SigningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SigningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.Ethereum.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_.ClearToEmpty();
  v_.ClearToEmpty();
  r_.ClearToEmpty();
  s_.ClearToEmpty();
  data_.ClearToEmpty();
  error_message_.ClearToEmpty();
  pre_hash_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_r();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TW.Common.Proto.SigningError error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::TW::Common::Proto::SigningError>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TW.Ethereum.Proto.SigningOutput.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pre_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_pre_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TW.Ethereum.Proto.SigningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded(), target);
  }

  // bytes v = 2;
  if (!this->_internal_v().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_v(), target);
  }

  // bytes r = 3;
  if (!this->_internal_r().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_r(), target);
  }

  // bytes s = 4;
  if (!this->_internal_s().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_s(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // .TW.Common.Proto.SigningError error = 6;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_error(), target);
  }

  // string error_message = 7;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TW.Ethereum.Proto.SigningOutput.error_message");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_error_message(), target);
  }

  // bytes pre_hash = 8;
  if (!this->_internal_pre_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_pre_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TW.Ethereum.Proto.SigningOutput)
  return target;
}

size_t SigningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.Ethereum.Proto.SigningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 1;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // bytes v = 2;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // bytes r = 3;
  if (!this->_internal_r().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r());
  }

  // bytes s = 4;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s());
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string error_message = 7;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bytes pre_hash = 8;
  if (!this->_internal_pre_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pre_hash());
  }

  // .TW.Common.Proto.SigningError error = 6;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningOutput::GetClassData() const { return &_class_data_; }

void SigningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigningOutput *>(to)->MergeFrom(
      static_cast<const SigningOutput &>(from));
}


void SigningOutput::MergeFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.Ethereum.Proto.SigningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_v().empty()) {
    _internal_set_v(from._internal_v());
  }
  if (!from._internal_r().empty()) {
    _internal_set_r(from._internal_r());
  }
  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_pre_hash().empty()) {
    _internal_set_pre_hash(from._internal_pre_hash());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningOutput::CopyFrom(const SigningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.Ethereum.Proto.SigningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningOutput::IsInitialized() const {
  return true;
}

void SigningOutput::InternalSwap(SigningOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_, lhs_arena,
      &other->encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &v_, lhs_arena,
      &other->v_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &r_, lhs_arena,
      &other->r_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_, lhs_arena,
      &other->s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pre_hash_, lhs_arena,
      &other->pre_hash_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Ethereum_2eproto_getter, &descriptor_table_Ethereum_2eproto_once,
      file_level_metadata_Ethereum_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Ethereum
}  // namespace TW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC20Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC20Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC20Approve* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC20Approve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC20Approve >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC721Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC721Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC721Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ERC1155Transfer* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ERC1155Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_ContractGeneric* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_ContractGeneric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_ContractGeneric >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_Batch_BatchedCall >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction_Batch* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction_Batch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction_Batch >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::Transaction* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::UserOperation* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::UserOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::UserOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::SigningInput* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::SigningInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::SigningInput >(arena);
}
template<> PROTOBUF_NOINLINE ::TW::Ethereum::Proto::SigningOutput* Arena::CreateMaybeMessage< ::TW::Ethereum::Proto::SigningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TW::Ethereum::Proto::SigningOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
